
LoRa_beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b98  08004b98  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08004b98  08004b98  00014b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba0  08004ba0  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08004ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000128  08004cd0  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08004cd0  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aca7  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001907  00000000  00000000  0002adf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002c700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100de  00000000  00000000  0002d788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b25e  00000000  00000000  0003d866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060e6b  00000000  00000000  00048ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a992f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000273c  00000000  00000000  000a9980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048d4 	.word	0x080048d4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	080048d4 	.word	0x080048d4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d433      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002ac:	465a      	mov	r2, fp
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83a      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e078      	b.n	80003b8 <__udivmoddi4+0x144>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e075      	b.n	80003be <__udivmoddi4+0x14a>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e028      	b.n	800033e <__udivmoddi4+0xca>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	2320      	movs	r3, #32
 8000318:	1a9b      	subs	r3, r3, r2
 800031a:	4652      	mov	r2, sl
 800031c:	40da      	lsrs	r2, r3
 800031e:	4641      	mov	r1, r8
 8000320:	0013      	movs	r3, r2
 8000322:	464a      	mov	r2, r9
 8000324:	408a      	lsls	r2, r1
 8000326:	0017      	movs	r7, r2
 8000328:	4642      	mov	r2, r8
 800032a:	431f      	orrs	r7, r3
 800032c:	4653      	mov	r3, sl
 800032e:	4093      	lsls	r3, r2
 8000330:	001e      	movs	r6, r3
 8000332:	42af      	cmp	r7, r5
 8000334:	d9c4      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000336:	2200      	movs	r2, #0
 8000338:	2300      	movs	r3, #0
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0d9      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000344:	07fb      	lsls	r3, r7, #31
 8000346:	0872      	lsrs	r2, r6, #1
 8000348:	431a      	orrs	r2, r3
 800034a:	4646      	mov	r6, r8
 800034c:	087b      	lsrs	r3, r7, #1
 800034e:	e00e      	b.n	800036e <__udivmoddi4+0xfa>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d101      	bne.n	8000358 <__udivmoddi4+0xe4>
 8000354:	42a2      	cmp	r2, r4
 8000356:	d80c      	bhi.n	8000372 <__udivmoddi4+0xfe>
 8000358:	1aa4      	subs	r4, r4, r2
 800035a:	419d      	sbcs	r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2100      	movs	r1, #0
 8000364:	3e01      	subs	r6, #1
 8000366:	1824      	adds	r4, r4, r0
 8000368:	414d      	adcs	r5, r1
 800036a:	2e00      	cmp	r6, #0
 800036c:	d006      	beq.n	800037c <__udivmoddi4+0x108>
 800036e:	42ab      	cmp	r3, r5
 8000370:	d9ee      	bls.n	8000350 <__udivmoddi4+0xdc>
 8000372:	3e01      	subs	r6, #1
 8000374:	1924      	adds	r4, r4, r4
 8000376:	416d      	adcs	r5, r5
 8000378:	2e00      	cmp	r6, #0
 800037a:	d1f8      	bne.n	800036e <__udivmoddi4+0xfa>
 800037c:	9800      	ldr	r0, [sp, #0]
 800037e:	9901      	ldr	r1, [sp, #4]
 8000380:	465b      	mov	r3, fp
 8000382:	1900      	adds	r0, r0, r4
 8000384:	4169      	adcs	r1, r5
 8000386:	2b00      	cmp	r3, #0
 8000388:	db24      	blt.n	80003d4 <__udivmoddi4+0x160>
 800038a:	002b      	movs	r3, r5
 800038c:	465a      	mov	r2, fp
 800038e:	4644      	mov	r4, r8
 8000390:	40d3      	lsrs	r3, r2
 8000392:	002a      	movs	r2, r5
 8000394:	40e2      	lsrs	r2, r4
 8000396:	001c      	movs	r4, r3
 8000398:	465b      	mov	r3, fp
 800039a:	0015      	movs	r5, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	db2a      	blt.n	80003f6 <__udivmoddi4+0x182>
 80003a0:	0026      	movs	r6, r4
 80003a2:	409e      	lsls	r6, r3
 80003a4:	0033      	movs	r3, r6
 80003a6:	0026      	movs	r6, r4
 80003a8:	4647      	mov	r7, r8
 80003aa:	40be      	lsls	r6, r7
 80003ac:	0032      	movs	r2, r6
 80003ae:	1a80      	subs	r0, r0, r2
 80003b0:	4199      	sbcs	r1, r3
 80003b2:	9000      	str	r0, [sp, #0]
 80003b4:	9101      	str	r1, [sp, #4]
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x84>
 80003b8:	42a3      	cmp	r3, r4
 80003ba:	d8bc      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80003bc:	e783      	b.n	80002c6 <__udivmoddi4+0x52>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	2200      	movs	r2, #0
 80003c8:	9100      	str	r1, [sp, #0]
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	2201      	movs	r2, #1
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	e786      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	4646      	mov	r6, r8
 80003de:	409a      	lsls	r2, r3
 80003e0:	0023      	movs	r3, r4
 80003e2:	40f3      	lsrs	r3, r6
 80003e4:	4644      	mov	r4, r8
 80003e6:	4313      	orrs	r3, r2
 80003e8:	002a      	movs	r2, r5
 80003ea:	40e2      	lsrs	r2, r4
 80003ec:	001c      	movs	r4, r3
 80003ee:	465b      	mov	r3, fp
 80003f0:	0015      	movs	r5, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dad4      	bge.n	80003a0 <__udivmoddi4+0x12c>
 80003f6:	4642      	mov	r2, r8
 80003f8:	002f      	movs	r7, r5
 80003fa:	2320      	movs	r3, #32
 80003fc:	0026      	movs	r6, r4
 80003fe:	4097      	lsls	r7, r2
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	40de      	lsrs	r6, r3
 8000404:	003b      	movs	r3, r7
 8000406:	4333      	orrs	r3, r6
 8000408:	e7cd      	b.n	80003a6 <__udivmoddi4+0x132>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	; (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	240b      	movs	r4, #11
 800046e:	193b      	adds	r3, r7, r4
 8000470:	1c0a      	adds	r2, r1, #0
 8000472:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	6858      	ldr	r0, [r3, #4]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	891b      	ldrh	r3, [r3, #8]
 800047c:	2200      	movs	r2, #0
 800047e:	0019      	movs	r1, r3
 8000480:	f001 fa2e 	bl	80018e0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	227f      	movs	r2, #127	; 0x7f
 800048a:	4013      	ands	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	2117      	movs	r1, #23
 8000490:	187b      	adds	r3, r7, r1
 8000492:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	1879      	adds	r1, r7, r1
 800049a:	230a      	movs	r3, #10
 800049c:	2201      	movs	r2, #1
 800049e:	f001 ff61 	bl	8002364 <HAL_SPI_Transmit>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <read_register+0x4a>
		return false;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e014      	b.n	80004d4 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	230a      	movs	r3, #10
 80004b6:	f002 f8ad 	bl	8002614 <HAL_SPI_Receive>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <read_register+0x62>
		return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e008      	b.n	80004d4 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6858      	ldr	r0, [r3, #4]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	891b      	ldrh	r3, [r3, #8]
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 fa07 	bl	80018e0 <HAL_GPIO_WritePin>

	return true;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b007      	add	sp, #28
 80004da:	bd90      	pop	{r4, r7, pc}

080004dc <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	0008      	movs	r0, r1
 80004e6:	0011      	movs	r1, r2
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	1c02      	adds	r2, r0, #0
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	1cbb      	adds	r3, r7, #2
 80004f0:	1c0a      	adds	r2, r1, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6858      	ldr	r0, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	891b      	ldrh	r3, [r3, #8]
 80004fc:	2200      	movs	r2, #0
 80004fe:	0019      	movs	r1, r3
 8000500:	f001 f9ee 	bl	80018e0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8000504:	1cfb      	adds	r3, r7, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	4252      	negs	r2, r2
 800050c:	4313      	orrs	r3, r2
 800050e:	b2da      	uxtb	r2, r3
 8000510:	210c      	movs	r1, #12
 8000512:	187b      	adds	r3, r7, r1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	187b      	adds	r3, r7, r1
 8000518:	1cba      	adds	r2, r7, #2
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	1879      	adds	r1, r7, r1
 8000524:	230a      	movs	r3, #10
 8000526:	2202      	movs	r2, #2
 8000528:	f001 ff1c 	bl	8002364 <HAL_SPI_Transmit>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <write_register+0x58>
		return false;
 8000530:	2300      	movs	r3, #0
 8000532:	e008      	b.n	8000546 <write_register+0x6a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	0019      	movs	r1, r3
 8000540:	f001 f9ce 	bl	80018e0 <HAL_GPIO_WritePin>

	return true;
 8000544:	2301      	movs	r3, #1
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}

0800054e <reset>:

static void reset(rfm95_handle_t *handle)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68d8      	ldr	r0, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8a1b      	ldrh	r3, [r3, #16]
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f9bd 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000566:	2001      	movs	r0, #1
 8000568:	f000 ff72 	bl	8001450 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68d8      	ldr	r0, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8a1b      	ldrh	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	0019      	movs	r1, r3
 8000578:	f001 f9b2 	bl	80018e0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f000 ff67 	bl	8001450 <HAL_Delay>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6178      	str	r0, [r7, #20]
 8000594:	6139      	str	r1, [r7, #16]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	000a      	movs	r2, r1
 800059a:	2100      	movs	r1, #0
 800059c:	000b      	movs	r3, r1
 800059e:	0b51      	lsrs	r1, r2, #13
 80005a0:	6079      	str	r1, [r7, #4]
 80005a2:	04d3      	lsls	r3, r2, #19
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <configure_frequency+0xbc>)
 80005a8:	2300      	movs	r3, #0
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	f7ff fe41 	bl	8000234 <__aeabi_uldivmod>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	61ba      	str	r2, [r7, #24]
 80005b8:	61fb      	str	r3, [r7, #28]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	7a3a      	ldrb	r2, [r7, #8]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2106      	movs	r1, #6
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff80 	bl	80004dc <write_register>
 80005dc:	0003      	movs	r3, r0
 80005de:	001a      	movs	r2, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <configure_frequency+0x62>
 80005ea:	2300      	movs	r3, #0
 80005ec:	e028      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	0a14      	lsrs	r4, r2, #8
 80005f6:	431c      	orrs	r4, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	0a1d      	lsrs	r5, r3, #8
 80005fc:	b2e2      	uxtb	r2, r4
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2107      	movs	r1, #7
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff6a 	bl	80004dc <write_register>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	2301      	movs	r3, #1
 800060e:	4053      	eors	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <configure_frequency+0x8e>
 8000616:	2300      	movs	r3, #0
 8000618:	e012      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	1c13      	adds	r3, r2, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2108      	movs	r1, #8
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff ff58 	bl	80004dc <write_register>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	2301      	movs	r3, #1
 8000632:	4053      	eors	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <configure_frequency+0xb2>
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <configure_frequency+0xb4>

	return true;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b008      	add	sp, #32
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	01e84800 	.word	0x01e84800

0800064c <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	701a      	strb	r2, [r3, #0]
	assert((power >= 2 && power <= 17) || power == 20);
 800065a:	1cfb      	adds	r3, r7, #3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	2b01      	cmp	r3, #1
 8000662:	dd04      	ble.n	800066e <rfm95_set_power+0x22>
 8000664:	1cfb      	adds	r3, r7, #3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	2b11      	cmp	r3, #17
 800066c:	dd0a      	ble.n	8000684 <rfm95_set_power+0x38>
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	2b14      	cmp	r3, #20
 8000676:	d005      	beq.n	8000684 <rfm95_set_power+0x38>
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <rfm95_set_power+0x124>)
 800067a:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <rfm95_set_power+0x128>)
 800067c:	483e      	ldr	r0, [pc, #248]	; (8000778 <rfm95_set_power+0x12c>)
 800067e:	2183      	movs	r1, #131	; 0x83
 8000680:	f003 f8b8 	bl	80037f4 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8000684:	200c      	movs	r0, #12
 8000686:	183b      	adds	r3, r7, r0
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 800068c:	240f      	movs	r4, #15
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	2b01      	cmp	r3, #1
 800069c:	dd26      	ble.n	80006ec <rfm95_set_power+0xa0>
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	2b11      	cmp	r3, #17
 80006a6:	dc21      	bgt.n	80006ec <rfm95_set_power+0xa0>
		pa_config.max_power = 7;
 80006a8:	183b      	adds	r3, r7, r0
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	2170      	movs	r1, #112	; 0x70
 80006ae:	430a      	orrs	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4249      	negs	r1, r1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 80006be:	1cfb      	adds	r3, r7, #3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b02      	subs	r3, #2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	1c1a      	adds	r2, r3, #0
 80006c8:	230f      	movs	r3, #15
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	183b      	adds	r3, r7, r0
 80006d0:	210f      	movs	r1, #15
 80006d2:	400a      	ands	r2, r1
 80006d4:	0010      	movs	r0, r2
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	210f      	movs	r1, #15
 80006da:	438a      	bics	r2, r1
 80006dc:	1c11      	adds	r1, r2, #0
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	430a      	orrs	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2284      	movs	r2, #132	; 0x84
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e019      	b.n	8000720 <rfm95_set_power+0xd4>

	} else if (power == 20) {
 80006ec:	1cfb      	adds	r3, r7, #3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	2b14      	cmp	r3, #20
 80006f4:	d114      	bne.n	8000720 <rfm95_set_power+0xd4>
		pa_config.max_power = 7;
 80006f6:	200c      	movs	r0, #12
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2170      	movs	r1, #112	; 0x70
 80006fe:	430a      	orrs	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8000702:	183b      	adds	r3, r7, r0
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4249      	negs	r1, r1
 800070a:	430a      	orrs	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 800070e:	183b      	adds	r3, r7, r0
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	210f      	movs	r1, #15
 8000714:	430a      	orrs	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8000718:	230f      	movs	r3, #15
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2287      	movs	r2, #135	; 0x87
 800071e:	701a      	strb	r2, [r3, #0]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8000720:	230c      	movs	r3, #12
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2109      	movs	r1, #9
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fed6 	bl	80004dc <write_register>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	4053      	eors	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <rfm95_set_power+0xf6>
 800073e:	2300      	movs	r3, #0
 8000740:	e011      	b.n	8000766 <rfm95_set_power+0x11a>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	214d      	movs	r1, #77	; 0x4d
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fec5 	bl	80004dc <write_register>
 8000752:	0003      	movs	r3, r0
 8000754:	001a      	movs	r2, r3
 8000756:	2301      	movs	r3, #1
 8000758:	4053      	eors	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <rfm95_set_power+0x118>
 8000760:	2300      	movs	r3, #0
 8000762:	e000      	b.n	8000766 <rfm95_set_power+0x11a>

	return true;
 8000764:	2301      	movs	r3, #1
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b005      	add	sp, #20
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	080048ec 	.word	0x080048ec
 8000774:	08004a90 	.word	0x08004a90
 8000778:	08004918 	.word	0x08004918

0800077c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle, UART_HandleTypeDef *uart_handle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	2382      	movs	r3, #130	; 0x82
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	429a      	cmp	r2, r3
 8000792:	d005      	beq.n	80007a0 <rfm95_init+0x24>
 8000794:	4b8e      	ldr	r3, [pc, #568]	; (80009d0 <rfm95_init+0x254>)
 8000796:	4a8f      	ldr	r2, [pc, #572]	; (80009d4 <rfm95_init+0x258>)
 8000798:	488f      	ldr	r0, [pc, #572]	; (80009d8 <rfm95_init+0x25c>)
 800079a:	219e      	movs	r1, #158	; 0x9e
 800079c:	f003 f82a 	bl	80037f4 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <rfm95_init+0x3a>
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <rfm95_init+0x260>)
 80007ac:	4a89      	ldr	r2, [pc, #548]	; (80009d4 <rfm95_init+0x258>)
 80007ae:	488a      	ldr	r0, [pc, #552]	; (80009d8 <rfm95_init+0x25c>)
 80007b0:	219f      	movs	r1, #159	; 0x9f
 80007b2:	f003 f81f 	bl	80037f4 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	23e0      	movs	r3, #224	; 0xe0
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d005      	beq.n	80007d0 <rfm95_init+0x54>
 80007c4:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <rfm95_init+0x264>)
 80007c6:	4a83      	ldr	r2, [pc, #524]	; (80009d4 <rfm95_init+0x258>)
 80007c8:	4883      	ldr	r0, [pc, #524]	; (80009d8 <rfm95_init+0x25c>)
 80007ca:	21a0      	movs	r1, #160	; 0xa0
 80007cc:	f003 f812 	bl	80037f4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <rfm95_init+0x6a>
 80007da:	4b82      	ldr	r3, [pc, #520]	; (80009e4 <rfm95_init+0x268>)
 80007dc:	4a7d      	ldr	r2, [pc, #500]	; (80009d4 <rfm95_init+0x258>)
 80007de:	487e      	ldr	r0, [pc, #504]	; (80009d8 <rfm95_init+0x25c>)
 80007e0:	21a1      	movs	r1, #161	; 0xa1
 80007e2:	f003 f807 	bl	80037f4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <rfm95_init+0x80>
 80007f0:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <rfm95_init+0x26c>)
 80007f2:	4a78      	ldr	r2, [pc, #480]	; (80009d4 <rfm95_init+0x258>)
 80007f4:	4878      	ldr	r0, [pc, #480]	; (80009d8 <rfm95_init+0x25c>)
 80007f6:	21a2      	movs	r1, #162	; 0xa2
 80007f8:	f002 fffc 	bl	80037f4 <__assert_func>

	reset(handle);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fea5 	bl	800054e <reset>



	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000804:	230f      	movs	r3, #15
 8000806:	18fa      	adds	r2, r7, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	2301      	movs	r3, #1
 800080c:	2142      	movs	r1, #66	; 0x42
 800080e:	f7ff fe27 	bl	8000460 <read_register>
 8000812:	0003      	movs	r3, r0
 8000814:	001a      	movs	r2, r3
 8000816:	2301      	movs	r3, #1
 8000818:	4053      	eors	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <rfm95_init+0xa8>
 8000820:	2300      	movs	r3, #0
 8000822:	e0d0      	b.n	80009c6 <rfm95_init+0x24a>
	if (version != RFM9x_VER) return false;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b12      	cmp	r3, #18
 800082c:	d001      	beq.n	8000832 <rfm95_init+0xb6>
 800082e:	2300      	movs	r3, #0
 8000830:	e0c9      	b.n	80009c6 <rfm95_init+0x24a>


	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fe4f 	bl	80004dc <write_register>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	2301      	movs	r3, #1
 8000844:	4053      	eors	r3, r2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <rfm95_init+0xd4>
 800084c:	2300      	movs	r3, #0
 800084e:	e0ba      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	2101      	movs	r1, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe40 	bl	80004dc <write_register>
 800085c:	0003      	movs	r3, r0
 800085e:	001a      	movs	r2, r3
 8000860:	2301      	movs	r3, #1
 8000862:	4053      	eors	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <rfm95_init+0xf2>
 800086a:	2300      	movs	r3, #0
 800086c:	e0ab      	b.n	80009c6 <rfm95_init+0x24a>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe31 	bl	80004dc <write_register>
 800087a:	0003      	movs	r3, r0
 800087c:	001a      	movs	r2, r3
 800087e:	2301      	movs	r3, #1
 8000880:	4053      	eors	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <rfm95_init+0x110>
 8000888:	2300      	movs	r3, #0
 800088a:	e09c      	b.n	80009c6 <rfm95_init+0x24a>

	if (handle->on_after_interrupts_configured != NULL) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <rfm95_init+0x11e>
		handle->on_after_interrupts_configured();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000898:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2111      	movs	r1, #17
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fed4 	bl	800064c <rfm95_set_power>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <rfm95_init+0x13a>
 80008b2:	2300      	movs	r3, #0
 80008b4:	e087      	b.n	80009c6 <rfm95_init+0x24a>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2223      	movs	r2, #35	; 0x23
 80008ba:	210c      	movs	r1, #12
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe0d 	bl	80004dc <write_register>
 80008c2:	0003      	movs	r3, r0
 80008c4:	001a      	movs	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	4053      	eors	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <rfm95_init+0x158>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e078      	b.n	80009c6 <rfm95_init+0x24a>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fdfe 	bl	80004dc <write_register>
 80008e0:	0003      	movs	r3, r0
 80008e2:	001a      	movs	r2, r3
 80008e4:	2301      	movs	r3, #1
 80008e6:	4053      	eors	r3, r2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <rfm95_init+0x176>
 80008ee:	2300      	movs	r3, #0
 80008f0:	e069      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2208      	movs	r2, #8
 80008f6:	2121      	movs	r1, #33	; 0x21
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fdef 	bl	80004dc <write_register>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	2301      	movs	r3, #1
 8000904:	4053      	eors	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <rfm95_init+0x194>
 800090c:	2300      	movs	r3, #0
 800090e:	e05a      	b.n	80009c6 <rfm95_init+0x24a>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2139      	movs	r1, #57	; 0x39
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fde0 	bl	80004dc <write_register>
 800091c:	0003      	movs	r3, r0
 800091e:	001a      	movs	r2, r3
 8000920:	2301      	movs	r3, #1
 8000922:	4053      	eors	r3, r2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <rfm95_init+0x1b2>
 800092a:	2300      	movs	r3, #0
 800092c:	e04b      	b.n	80009c6 <rfm95_init+0x24a>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	210e      	movs	r1, #14
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fdd1 	bl	80004dc <write_register>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	4053      	eors	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <rfm95_init+0x1d0>
 8000948:	2300      	movs	r3, #0
 800094a:	e03c      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fdc2 	bl	80004dc <write_register>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	4053      	eors	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <rfm95_init+0x1ee>
 8000966:	2300      	movs	r3, #0
 8000968:	e02d      	b.n	80009c6 <rfm95_init+0x24a>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	2123      	movs	r1, #35	; 0x23
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fdb3 	bl	80004dc <write_register>
 8000976:	0003      	movs	r3, r0
 8000978:	001a      	movs	r2, r3
 800097a:	2301      	movs	r3, #1
 800097c:	4053      	eors	r3, r2
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <rfm95_init+0x20c>
 8000984:	2300      	movs	r3, #0
 8000986:	e01e      	b.n	80009c6 <rfm95_init+0x24a>

	if(!configure_frequency(handle, 868100000)) return false;
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <rfm95_init+0x270>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fdfc 	bl	800058c <configure_frequency>
 8000994:	0003      	movs	r3, r0
 8000996:	001a      	movs	r2, r3
 8000998:	2301      	movs	r3, #1
 800099a:	4053      	eors	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <rfm95_init+0x22a>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e00f      	b.n	80009c6 <rfm95_init+0x24a>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	2101      	movs	r1, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd95 	bl	80004dc <write_register>
 80009b2:	0003      	movs	r3, r0
 80009b4:	001a      	movs	r2, r3
 80009b6:	2301      	movs	r3, #1
 80009b8:	4053      	eors	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <rfm95_init+0x248>
 80009c0:	2300      	movs	r3, #0
 80009c2:	e000      	b.n	80009c6 <rfm95_init+0x24a>

	return true;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	0800493c 	.word	0x0800493c
 80009d4:	08004aa0 	.word	0x08004aa0
 80009d8:	08004918 	.word	0x08004918
 80009dc:	08004970 	.word	0x08004970
 80009e0:	080049ac 	.word	0x080049ac
 80009e4:	080049e4 	.word	0x080049e4
 80009e8:	08004a20 	.word	0x08004a20
 80009ec:	33be27a0 	.word	0x33be27a0

080009f0 <receive_package>:


bool receive_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t *payload_len, int8_t *snr, UART_HandleTypeDef *uart_handle) {
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	46c6      	mov	lr, r8
 80009f4:	b500      	push	{lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6278      	str	r0, [r7, #36]	; 0x24
 80009fc:	6239      	str	r1, [r7, #32]
 80009fe:	61fa      	str	r2, [r7, #28]
 8000a00:	61bb      	str	r3, [r7, #24]
	*payload_len = 0;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]


	//Stand-by mode previous to Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	2281      	movs	r2, #129	; 0x81
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fd64 	bl	80004dc <write_register>
 8000a14:	0003      	movs	r3, r0
 8000a16:	001a      	movs	r2, r3
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <receive_package+0x36>
 8000a22:	2300      	movs	r3, #0
 8000a24:	e134      	b.n	8000c90 <receive_package+0x2a0>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2272      	movs	r2, #114	; 0x72
 8000a2a:	211d      	movs	r1, #29
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fd55 	bl	80004dc <write_register>
 8000a32:	0003      	movs	r3, r0
 8000a34:	001a      	movs	r2, r3
 8000a36:	2301      	movs	r3, #1
 8000a38:	4053      	eors	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <receive_package+0x54>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e125      	b.n	8000c90 <receive_package+0x2a0>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xC2)) return false;
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	22c2      	movs	r2, #194	; 0xc2
 8000a48:	211e      	movs	r1, #30
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fd46 	bl	80004dc <write_register>
 8000a50:	0003      	movs	r3, r0
 8000a52:	001a      	movs	r2, r3
 8000a54:	2301      	movs	r3, #1
 8000a56:	4053      	eors	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <receive_package+0x72>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e116      	b.n	8000c90 <receive_package+0x2a0>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	2204      	movs	r2, #4
 8000a66:	2126      	movs	r1, #38	; 0x26
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fd37 	bl	80004dc <write_register>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	001a      	movs	r2, r3
 8000a72:	2301      	movs	r3, #1
 8000a74:	4053      	eors	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <receive_package+0x90>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e107      	b.n	8000c90 <receive_package+0x2a0>

	// Set maximum symbol timeout.
	//if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 16)) return false;

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	2227      	movs	r2, #39	; 0x27
 8000a84:	2133      	movs	r1, #51	; 0x33
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fd28 	bl	80004dc <write_register>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2301      	movs	r3, #1
 8000a92:	4053      	eors	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <receive_package+0xae>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e0f8      	b.n	8000c90 <receive_package+0x2a0>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	221d      	movs	r2, #29
 8000aa2:	213b      	movs	r1, #59	; 0x3b
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fd19 	bl	80004dc <write_register>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	001a      	movs	r2, r3
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <receive_package+0xcc>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e0e9      	b.n	8000c90 <receive_package+0x2a0>

	// receive_at_scheduled_time(handle, rx1_target);


	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fd0a 	bl	80004dc <write_register>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	001a      	movs	r2, r3
 8000acc:	2301      	movs	r3, #1
 8000ace:	4053      	eors	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <receive_package+0xea>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e0da      	b.n	8000c90 <receive_package+0x2a0>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	2112      	movs	r1, #18
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fcfb 	bl	80004dc <write_register>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2301      	movs	r3, #1
 8000aec:	4053      	eors	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <receive_package+0x108>
 8000af4:	2300      	movs	r3, #0
 8000af6:	e0cb      	b.n	8000c90 <receive_package+0x2a0>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	22ac      	movs	r2, #172	; 0xac
 8000afc:	2100      	movs	r1, #0
 8000afe:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	22b0      	movs	r2, #176	; 0xb0
 8000b04:	2100      	movs	r1, #0
 8000b06:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	22b4      	movs	r2, #180	; 0xb4
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	5099      	str	r1, [r3, r2]

	// Clear flags
	uint8_t irqFlags;

	// Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	2286      	movs	r2, #134	; 0x86
 8000b14:	2101      	movs	r1, #1
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fce0 	bl	80004dc <write_register>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2301      	movs	r3, #1
 8000b22:	4053      	eors	r3, r2
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d021      	beq.n	8000b6e <receive_package+0x17e>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e0b0      	b.n	8000c90 <receive_package+0x2a0>


	while ((irqFlags != 0x50)) { // wait for RxDone
	  HAL_Delay(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f000 fc8e 	bl	8001450 <HAL_Delay>
	  read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1); // read after the delay, not before
 8000b34:	2617      	movs	r6, #23
 8000b36:	2318      	movs	r3, #24
 8000b38:	18f2      	adds	r2, r6, r3
 8000b3a:	19d2      	adds	r2, r2, r7
 8000b3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b3e:	2301      	movs	r3, #1
 8000b40:	2112      	movs	r1, #18
 8000b42:	f7ff fc8d 	bl	8000460 <read_register>

	  HAL_UART_Transmit(uart_handle, irqFlags, sizeof(irqFlags), 10);
 8000b46:	2318      	movs	r3, #24
 8000b48:	18f2      	adds	r2, r6, r3
 8000b4a:	19d3      	adds	r3, r2, r7
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	0019      	movs	r1, r3
 8000b50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000b52:	230a      	movs	r3, #10
 8000b54:	2201      	movs	r2, #1
 8000b56:	f002 faa3 	bl	80030a0 <HAL_UART_Transmit>

	  if (irqFlags & 0xA0) return false; // cancel on PayloadCrcError and RxTimeout
 8000b5a:	2318      	movs	r3, #24
 8000b5c:	18f3      	adds	r3, r6, r3
 8000b5e:	19db      	adds	r3, r3, r7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	001a      	movs	r2, r3
 8000b64:	23a0      	movs	r3, #160	; 0xa0
 8000b66:	4013      	ands	r3, r2
 8000b68:	d001      	beq.n	8000b6e <receive_package+0x17e>
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e090      	b.n	8000c90 <receive_package+0x2a0>
	while ((irqFlags != 0x50)) { // wait for RxDone
 8000b6e:	2217      	movs	r2, #23
 8000b70:	2618      	movs	r6, #24
 8000b72:	1993      	adds	r3, r2, r6
 8000b74:	19db      	adds	r3, r3, r7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	2b50      	cmp	r3, #80	; 0x50
 8000b7a:	d1d8      	bne.n	8000b2e <receive_package+0x13e>
	}

	HAL_UART_Transmit(uart_handle, irqFlags, sizeof(irqFlags), 10);
 8000b7c:	1993      	adds	r3, r2, r6
 8000b7e:	19db      	adds	r3, r3, r7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	0019      	movs	r1, r3
 8000b84:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000b86:	230a      	movs	r3, #10
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f002 fa89 	bl	80030a0 <HAL_UART_Transmit>

	 // Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8000b8e:	2316      	movs	r3, #22
 8000b90:	199b      	adds	r3, r3, r6
 8000b92:	19da      	adds	r2, r3, r7
 8000b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b96:	2301      	movs	r3, #1
 8000b98:	2113      	movs	r1, #19
 8000b9a:	f7ff fc61 	bl	8000460 <read_register>
 8000b9e:	0003      	movs	r3, r0
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	4053      	eors	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <receive_package+0x1c0>
 8000bac:	2300      	movs	r3, #0
 8000bae:	e06f      	b.n	8000c90 <receive_package+0x2a0>

	uint8_t payload[payload_len_internal];
 8000bb0:	2316      	movs	r3, #22
 8000bb2:	2218      	movs	r2, #24
 8000bb4:	189b      	adds	r3, r3, r2
 8000bb6:	19db      	adds	r3, r3, r7
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	466a      	mov	r2, sp
 8000bbc:	4690      	mov	r8, r2
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	637a      	str	r2, [r7, #52]	; 0x34
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60fa      	str	r2, [r7, #12]
 8000bca:	68b8      	ldr	r0, [r7, #8]
 8000bcc:	68f9      	ldr	r1, [r7, #12]
 8000bce:	0002      	movs	r2, r0
 8000bd0:	0f52      	lsrs	r2, r2, #29
 8000bd2:	000e      	movs	r6, r1
 8000bd4:	00f6      	lsls	r6, r6, #3
 8000bd6:	617e      	str	r6, [r7, #20]
 8000bd8:	697e      	ldr	r6, [r7, #20]
 8000bda:	4316      	orrs	r6, r2
 8000bdc:	617e      	str	r6, [r7, #20]
 8000bde:	0002      	movs	r2, r0
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	613a      	str	r2, [r7, #16]
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	2200      	movs	r2, #0
 8000be8:	607a      	str	r2, [r7, #4]
 8000bea:	6838      	ldr	r0, [r7, #0]
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	0002      	movs	r2, r0
 8000bf0:	0f52      	lsrs	r2, r2, #29
 8000bf2:	000e      	movs	r6, r1
 8000bf4:	00f5      	lsls	r5, r6, #3
 8000bf6:	4315      	orrs	r5, r2
 8000bf8:	0002      	movs	r2, r0
 8000bfa:	00d4      	lsls	r4, r2, #3
 8000bfc:	3307      	adds	r3, #7
 8000bfe:	08db      	lsrs	r3, r3, #3
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	466a      	mov	r2, sp
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	469d      	mov	sp, r3
 8000c08:	466b      	mov	r3, sp
 8000c0a:	3300      	adds	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	; 0x30


	 // Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	2200      	movs	r2, #0
 8000c12:	210d      	movs	r1, #13
 8000c14:	0018      	movs	r0, r3
 8000c16:	f7ff fc61 	bl	80004dc <write_register>
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	001a      	movs	r2, r3
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4053      	eors	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <receive_package+0x23c>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e030      	b.n	8000c8e <receive_package+0x29e>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload, payload_len_internal)) return false;
 8000c2c:	2316      	movs	r3, #22
 8000c2e:	2218      	movs	r2, #24
 8000c30:	189b      	adds	r3, r3, r2
 8000c32:	19db      	adds	r3, r3, r7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	f7ff fc10 	bl	8000460 <read_register>
 8000c40:	0003      	movs	r3, r0
 8000c42:	001a      	movs	r2, r3
 8000c44:	2301      	movs	r3, #1
 8000c46:	4053      	eors	r3, r2
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <receive_package+0x262>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e01d      	b.n	8000c8e <receive_package+0x29e>

	HAL_UART_Transmit(uart_handle, payload, payload_len_internal, 10);
 8000c52:	2316      	movs	r3, #22
 8000c54:	2218      	movs	r2, #24
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	19db      	adds	r3, r3, r7
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c60:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c62:	230a      	movs	r3, #10
 8000c64:	f002 fa1c 	bl	80030a0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000c68:	2064      	movs	r0, #100	; 0x64
 8000c6a:	f000 fbf1 	bl	8001450 <HAL_Delay>


	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	2280      	movs	r2, #128	; 0x80
 8000c72:	2101      	movs	r1, #1
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fc31 	bl	80004dc <write_register>
 8000c7a:	0003      	movs	r3, r0
 8000c7c:	001a      	movs	r2, r3
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4053      	eors	r3, r2
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <receive_package+0x29c>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e000      	b.n	8000c8e <receive_package+0x29e>


	return true;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	46c5      	mov	sp, r8
}
 8000c90:	0018      	movs	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b00e      	add	sp, #56	; 0x38
 8000c96:	bc80      	pop	{r7}
 8000c98:	46b8      	mov	r8, r7
 8000c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c9c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	425b      	negs	r3, r3
 8000ca8:	1d39      	adds	r1, r7, #4
 8000caa:	4804      	ldr	r0, [pc, #16]	; (8000cbc <__io_putchar+0x20>)
 8000cac:	2201      	movs	r2, #1
 8000cae:	f002 f9f7 	bl	80030a0 <HAL_UART_Transmit>
  return ch;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001a8 	.word	0x200001a8

08000cc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b091      	sub	sp, #68	; 0x44
 8000cc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f000 fb5f 	bl	8001388 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 f863 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f000 f90f 	bl	8000ef0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cd2:	f000 f8dd 	bl	8000e90 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cd6:	f000 f89d 	bl	8000e14 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cda:	4b29      	ldr	r3, [pc, #164]	; (8000d80 <main+0xc0>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2101      	movs	r1, #1
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f000 fdfd 	bl	80018e0 <HAL_GPIO_WritePin>
  uint8_t transmit_buffer = 0x42;
 8000ce6:	2137      	movs	r1, #55	; 0x37
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2242      	movs	r2, #66	; 0x42
 8000cec:	701a      	strb	r2, [r3, #0]
  char buffer[20];

  HAL_SPI_Transmit(&hspi1, &transmit_buffer, 1, RFM95_SPI_TIMEOUT);
 8000cee:	1879      	adds	r1, r7, r1
 8000cf0:	4824      	ldr	r0, [pc, #144]	; (8000d84 <main+0xc4>)
 8000cf2:	230a      	movs	r3, #10
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f001 fb35 	bl	8002364 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, 1, RFM95_SPI_TIMEOUT);
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	18f9      	adds	r1, r7, r3
 8000cfe:	4821      	ldr	r0, [pc, #132]	; (8000d84 <main+0xc4>)
 8000d00:	230a      	movs	r3, #10
 8000d02:	2201      	movs	r2, #1
 8000d04:	f001 fc86 	bl	8002614 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <main+0xc0>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f000 fde6 	bl	80018e0 <HAL_GPIO_WritePin>

	  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle, &huart2)) {
 8000d14:	4a1c      	ldr	r2, [pc, #112]	; (8000d88 <main+0xc8>)
 8000d16:	4b1d      	ldr	r3, [pc, #116]	; (8000d8c <main+0xcc>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f7ff fd2e 	bl	800077c <rfm95_init>
 8000d20:	0003      	movs	r3, r0
 8000d22:	001a      	movs	r2, r3
 8000d24:	2301      	movs	r3, #1
 8000d26:	4053      	eors	r3, r2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d112      	bne.n	8000d54 <main+0x94>

  } else {
	  uint8_t init_message_success[] = "RFM95 init success\n\r";
 8000d2e:	003b      	movs	r3, r7
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <main+0xd0>)
 8000d32:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000d34:	c313      	stmia	r3!, {r0, r1, r4}
 8000d36:	ca03      	ldmia	r2!, {r0, r1}
 8000d38:	c303      	stmia	r3!, {r0, r1}
 8000d3a:	7812      	ldrb	r2, [r2, #0]
 8000d3c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, init_message_success, sizeof(init_message_success), 10);
 8000d3e:	0039      	movs	r1, r7
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <main+0xc8>)
 8000d42:	230a      	movs	r3, #10
 8000d44:	2215      	movs	r2, #21
 8000d46:	f002 f9ab 	bl	80030a0 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000d4a:	23fa      	movs	r3, #250	; 0xfa
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f000 fb7e 	bl	8001450 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000d54:	2318      	movs	r3, #24
 8000d56:	18fa      	adds	r2, r7, r3
 8000d58:	241f      	movs	r4, #31
 8000d5a:	1939      	adds	r1, r7, r4
 8000d5c:	480b      	ldr	r0, [pc, #44]	; (8000d8c <main+0xcc>)
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <main+0xc8>)
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	2300      	movs	r3, #0
 8000d64:	f7ff fe44 	bl	80009f0 <receive_package>
 8000d68:	1e03      	subs	r3, r0, #0
 8000d6a:	d0f3      	beq.n	8000d54 <main+0x94>
		HAL_UART_Transmit(&huart2, payloadBuff, sizeof(payloadBuff), 10);
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	0019      	movs	r1, r3
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <main+0xc8>)
 8000d74:	230a      	movs	r3, #10
 8000d76:	2201      	movs	r2, #1
 8000d78:	f002 f992 	bl	80030a0 <HAL_UART_Transmit>
	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000d7c:	e7ea      	b.n	8000d54 <main+0x94>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	48000400 	.word	0x48000400
 8000d84:	20000144 	.word	0x20000144
 8000d88:	200001a8 	.word	0x200001a8
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	08004a58 	.word	0x08004a58

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b091      	sub	sp, #68	; 0x44
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	2410      	movs	r4, #16
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	0018      	movs	r0, r3
 8000da0:	2330      	movs	r3, #48	; 0x30
 8000da2:	001a      	movs	r2, r3
 8000da4:	2100      	movs	r1, #0
 8000da6:	f002 fd7d 	bl	80038a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000daa:	003b      	movs	r3, r7
 8000dac:	0018      	movs	r0, r3
 8000dae:	2310      	movs	r3, #16
 8000db0:	001a      	movs	r2, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	f002 fd76 	bl	80038a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db8:	0021      	movs	r1, r4
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	187b      	adds	r3, r7, r1
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	2210      	movs	r2, #16
 8000dca:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fda1 	bl	800191c <HAL_RCC_OscConfig>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000dde:	f000 f90d 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	003b      	movs	r3, r7
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de8:	003b      	movs	r3, r7
 8000dea:	2200      	movs	r2, #0
 8000dec:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	003b      	movs	r3, r7
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df4:	003b      	movs	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dfa:	003b      	movs	r3, r7
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 f8a6 	bl	8001f50 <HAL_RCC_ClockConfig>
 8000e04:	1e03      	subs	r3, r0, #0
 8000e06:	d001      	beq.n	8000e0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000e08:	f000 f8f8 	bl	8000ffc <Error_Handler>
  }
}
 8000e0c:	46c0      	nop			; (mov r8, r8)
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	b011      	add	sp, #68	; 0x44
 8000e12:	bd90      	pop	{r4, r7, pc}

08000e14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e1a:	4a1c      	ldr	r2, [pc, #112]	; (8000e8c <MX_SPI1_Init+0x78>)
 8000e1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e20:	2282      	movs	r2, #130	; 0x82
 8000e22:	0052      	lsls	r2, r2, #1
 8000e24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e2c:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e2e:	22e0      	movs	r2, #224	; 0xe0
 8000e30:	00d2      	lsls	r2, r2, #3
 8000e32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e42:	2280      	movs	r2, #128	; 0x80
 8000e44:	0092      	lsls	r2, r2, #2
 8000e46:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e48:	4b0f      	ldr	r3, [pc, #60]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e4a:	2210      	movs	r2, #16
 8000e4c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e62:	2207      	movs	r2, #7
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <MX_SPI1_Init+0x74>)
 8000e74:	0018      	movs	r0, r3
 8000e76:	f001 f9bd 	bl	80021f4 <HAL_SPI_Init>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e7e:	f000 f8bd 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000144 	.word	0x20000144
 8000e8c:	40013000 	.word	0x40013000

08000e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <MX_USART2_UART_Init+0x5c>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000e9c:	2296      	movs	r2, #150	; 0x96
 8000e9e:	0212      	lsls	r2, r2, #8
 8000ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <MX_USART2_UART_Init+0x58>)
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f002 f88f 	bl	8002ff8 <HAL_UART_Init>
 8000eda:	1e03      	subs	r3, r0, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ede:	f000 f88d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200001a8 	.word	0x200001a8
 8000eec:	40004400 	.word	0x40004400

08000ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef6:	240c      	movs	r4, #12
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	0018      	movs	r0, r3
 8000efc:	2314      	movs	r3, #20
 8000efe:	001a      	movs	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	f002 fccf 	bl	80038a4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	4b39      	ldr	r3, [pc, #228]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0289      	lsls	r1, r1, #10
 8000f10:	430a      	orrs	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	029b      	lsls	r3, r3, #10
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f24:	695a      	ldr	r2, [r3, #20]
 8000f26:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	02c9      	lsls	r1, r1, #11
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
 8000f30:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	02db      	lsls	r3, r3, #11
 8000f38:	4013      	ands	r3, r2
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	4b2c      	ldr	r3, [pc, #176]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f44:	2180      	movs	r1, #128	; 0x80
 8000f46:	0309      	lsls	r1, r1, #12
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	615a      	str	r2, [r3, #20]
 8000f4c:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <MX_GPIO_Init+0x100>)
 8000f4e:	695a      	ldr	r2, [r3, #20]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	031b      	lsls	r3, r3, #12
 8000f54:	4013      	ands	r3, r2
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000f5a:	4b26      	ldr	r3, [pc, #152]	; (8000ff4 <MX_GPIO_Init+0x104>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	0018      	movs	r0, r3
 8000f62:	f000 fcbd 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f66:	23a0      	movs	r3, #160	; 0xa0
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <MX_GPIO_Init+0x108>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	0019      	movs	r1, r3
 8000f70:	f000 fcb6 	bl	80018e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2201      	movs	r2, #1
 8000f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <MX_GPIO_Init+0x104>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f000 fb34 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	22a0      	movs	r2, #160	; 0xa0
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa2:	000c      	movs	r4, r1
 8000fa4:	193b      	adds	r3, r7, r4
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	193b      	adds	r3, r7, r4
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <MX_GPIO_Init+0x108>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f000 fb1f 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	22e0      	movs	r2, #224	; 0xe0
 8000fc8:	00d2      	lsls	r2, r2, #3
 8000fca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	187a      	adds	r2, r7, r1
 8000fda:	2390      	movs	r3, #144	; 0x90
 8000fdc:	05db      	lsls	r3, r3, #23
 8000fde:	0011      	movs	r1, r2
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fb0d 	bl	8001600 <HAL_GPIO_Init>

}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	b009      	add	sp, #36	; 0x24
 8000fec:	bd90      	pop	{r4, r7, pc}
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	48000800 	.word	0x48000800

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x44>)
 8001010:	699a      	ldr	r2, [r3, #24]
 8001012:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_MspInit+0x44>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	619a      	str	r2, [r3, #24]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_MspInit+0x44>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2201      	movs	r2, #1
 8001020:	4013      	ands	r3, r2
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_MspInit+0x44>)
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_MspInit+0x44>)
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	0549      	lsls	r1, r1, #21
 8001030:	430a      	orrs	r2, r1
 8001032:	61da      	str	r2, [r3, #28]
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_MspInit+0x44>)
 8001036:	69da      	ldr	r2, [r3, #28]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	055b      	lsls	r3, r3, #21
 800103c:	4013      	ands	r3, r2
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b002      	add	sp, #8
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	2414      	movs	r4, #20
 800105a:	193b      	adds	r3, r7, r4
 800105c:	0018      	movs	r0, r3
 800105e:	2314      	movs	r3, #20
 8001060:	001a      	movs	r2, r3
 8001062:	2100      	movs	r1, #0
 8001064:	f002 fc1e 	bl	80038a4 <memset>
  if(hspi->Instance==SPI1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <HAL_SPI_MspInit+0x90>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d132      	bne.n	80010d8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 8001074:	699a      	ldr	r2, [r3, #24]
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 8001078:	2180      	movs	r1, #128	; 0x80
 800107a:	0149      	lsls	r1, r1, #5
 800107c:	430a      	orrs	r2, r1
 800107e:	619a      	str	r2, [r3, #24]
 8001080:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 8001082:	699a      	ldr	r2, [r3, #24]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 8001090:	695a      	ldr	r2, [r3, #20]
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	0289      	lsls	r1, r1, #10
 8001098:	430a      	orrs	r2, r1
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_SPI_MspInit+0x94>)
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	2380      	movs	r3, #128	; 0x80
 80010a2:	029b      	lsls	r3, r3, #10
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010aa:	0021      	movs	r1, r4
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	22e0      	movs	r2, #224	; 0xe0
 80010b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2202      	movs	r2, #2
 80010b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	2203      	movs	r2, #3
 80010c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	187a      	adds	r2, r7, r1
 80010cc:	2390      	movs	r3, #144	; 0x90
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f000 fa94 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	b00b      	add	sp, #44	; 0x2c
 80010de:	bd90      	pop	{r4, r7, pc}
 80010e0:	40013000 	.word	0x40013000
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b08b      	sub	sp, #44	; 0x2c
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	2414      	movs	r4, #20
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	0018      	movs	r0, r3
 80010f6:	2314      	movs	r3, #20
 80010f8:	001a      	movs	r2, r3
 80010fa:	2100      	movs	r1, #0
 80010fc:	f002 fbd2 	bl	80038a4 <memset>
  if(huart->Instance==USART2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a1c      	ldr	r2, [pc, #112]	; (8001178 <HAL_UART_MspInit+0x90>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d132      	bne.n	8001170 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <HAL_UART_MspInit+0x94>)
 800110c:	69da      	ldr	r2, [r3, #28]
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_UART_MspInit+0x94>)
 8001110:	2180      	movs	r1, #128	; 0x80
 8001112:	0289      	lsls	r1, r1, #10
 8001114:	430a      	orrs	r2, r1
 8001116:	61da      	str	r2, [r3, #28]
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <HAL_UART_MspInit+0x94>)
 800111a:	69da      	ldr	r2, [r3, #28]
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	029b      	lsls	r3, r3, #10
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_UART_MspInit+0x94>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0x94>)
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0289      	lsls	r1, r1, #10
 8001130:	430a      	orrs	r2, r1
 8001132:	615a      	str	r2, [r3, #20]
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0x94>)
 8001136:	695a      	ldr	r2, [r3, #20]
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	029b      	lsls	r3, r3, #10
 800113c:	4013      	ands	r3, r2
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001142:	0021      	movs	r1, r4
 8001144:	187b      	adds	r3, r7, r1
 8001146:	220c      	movs	r2, #12
 8001148:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2203      	movs	r2, #3
 800115a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2201      	movs	r2, #1
 8001160:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	187a      	adds	r2, r7, r1
 8001164:	2390      	movs	r3, #144	; 0x90
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	0011      	movs	r1, r2
 800116a:	0018      	movs	r0, r3
 800116c:	f000 fa48 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b00b      	add	sp, #44	; 0x2c
 8001176:	bd90      	pop	{r4, r7, pc}
 8001178:	40004400 	.word	0x40004400
 800117c:	40021000 	.word	0x40021000

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler+0x4>

08001186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <HardFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011a4:	f000 f938 	bl	8001418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}

080011ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011ae:	b580      	push	{r7, lr}
 80011b0:	af00      	add	r7, sp, #0
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_kill>:

int _kill(int pid, int sig)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011c4:	f002 fb34 	bl	8003830 <__errno>
 80011c8:	0003      	movs	r3, r0
 80011ca:	2216      	movs	r2, #22
 80011cc:	601a      	str	r2, [r3, #0]
  return -1;
 80011ce:	2301      	movs	r3, #1
 80011d0:	425b      	negs	r3, r3
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}

080011da <_exit>:

void _exit (int status)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011e2:	2301      	movs	r3, #1
 80011e4:	425a      	negs	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	0011      	movs	r1, r2
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ffe5 	bl	80011ba <_kill>
  while (1) {}    /* Make sure we hang here */
 80011f0:	e7fe      	b.n	80011f0 <_exit+0x16>

080011f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	60f8      	str	r0, [r7, #12]
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00a      	b.n	800121a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001204:	e000      	b.n	8001208 <_read+0x16>
 8001206:	bf00      	nop
 8001208:	0001      	movs	r1, r0
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	1c5a      	adds	r2, r3, #1
 800120e:	60ba      	str	r2, [r7, #8]
 8001210:	b2ca      	uxtb	r2, r1
 8001212:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf0      	blt.n	8001204 <_read+0x12>
  }

  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b006      	add	sp, #24
 800122a:	bd80      	pop	{r7, pc}

0800122c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	e009      	b.n	8001252 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	60ba      	str	r2, [r7, #8]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	0018      	movs	r0, r3
 8001248:	f7ff fd28 	bl	8000c9c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf1      	blt.n	800123e <_write+0x12>
  }
  return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}

08001264 <_close>:

int _close(int file)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800126c:	2301      	movs	r3, #1
 800126e:	425b      	negs	r3, r3
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2280      	movs	r2, #128	; 0x80
 8001286:	0192      	lsls	r2, r2, #6
 8001288:	605a      	str	r2, [r3, #4]
  return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <_isatty>:

int _isatty(int file)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800129c:	2301      	movs	r3, #1
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b2:	2300      	movs	r3, #0
}
 80012b4:	0018      	movs	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b004      	add	sp, #16
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c4:	4a14      	ldr	r2, [pc, #80]	; (8001318 <_sbrk+0x5c>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <_sbrk+0x60>)
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d0:	4b13      	ldr	r3, [pc, #76]	; (8001320 <_sbrk+0x64>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d102      	bne.n	80012de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d8:	4b11      	ldr	r3, [pc, #68]	; (8001320 <_sbrk+0x64>)
 80012da:	4a12      	ldr	r2, [pc, #72]	; (8001324 <_sbrk+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <_sbrk+0x64>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	18d3      	adds	r3, r2, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d207      	bcs.n	80012fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012ec:	f002 faa0 	bl	8003830 <__errno>
 80012f0:	0003      	movs	r3, r0
 80012f2:	220c      	movs	r2, #12
 80012f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	e009      	b.n	8001310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012fc:	4b08      	ldr	r3, [pc, #32]	; (8001320 <_sbrk+0x64>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001302:	4b07      	ldr	r3, [pc, #28]	; (8001320 <_sbrk+0x64>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	18d2      	adds	r2, r2, r3
 800130a:	4b05      	ldr	r3, [pc, #20]	; (8001320 <_sbrk+0x64>)
 800130c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800130e:	68fb      	ldr	r3, [r7, #12]
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	b006      	add	sp, #24
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20002000 	.word	0x20002000
 800131c:	00000400 	.word	0x00000400
 8001320:	2000022c 	.word	0x2000022c
 8001324:	20000248 	.word	0x20000248

08001328 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800132c:	46c0      	nop			; (mov r8, r8)
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001336:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001338:	480d      	ldr	r0, [pc, #52]	; (8001370 <LoopForever+0x6>)
  ldr r1, =_edata
 800133a:	490e      	ldr	r1, [pc, #56]	; (8001374 <LoopForever+0xa>)
  ldr r2, =_sidata
 800133c:	4a0e      	ldr	r2, [pc, #56]	; (8001378 <LoopForever+0xe>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001340:	e002      	b.n	8001348 <LoopCopyDataInit>

08001342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001346:	3304      	adds	r3, #4

08001348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800134a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800134c:	d3f9      	bcc.n	8001342 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134e:	4a0b      	ldr	r2, [pc, #44]	; (800137c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001350:	4c0b      	ldr	r4, [pc, #44]	; (8001380 <LoopForever+0x16>)
  movs r3, #0
 8001352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001354:	e001      	b.n	800135a <LoopFillZerobss>

08001356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001358:	3204      	adds	r2, #4

0800135a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800135a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800135c:	d3fb      	bcc.n	8001356 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800135e:	f7ff ffe3 	bl	8001328 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001362:	f002 fa7b 	bl	800385c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001366:	f7ff fcab 	bl	8000cc0 <main>

0800136a <LoopForever>:

LoopForever:
    b LoopForever
 800136a:	e7fe      	b.n	800136a <LoopForever>
  ldr   r0, =_estack
 800136c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001370:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001374:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001378:	08004ba8 	.word	0x08004ba8
  ldr r2, =_sbss
 800137c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001380:	20000244 	.word	0x20000244

08001384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001384:	e7fe      	b.n	8001384 <ADC1_IRQHandler>
	...

08001388 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <HAL_Init+0x24>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <HAL_Init+0x24>)
 8001392:	2110      	movs	r1, #16
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001398:	2003      	movs	r0, #3
 800139a:	f000 f809 	bl	80013b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139e:	f7ff fe33 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	40022000 	.word	0x40022000

080013b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b8:	4b14      	ldr	r3, [pc, #80]	; (800140c <HAL_InitTick+0x5c>)
 80013ba:	681c      	ldr	r4, [r3, #0]
 80013bc:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_InitTick+0x60>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	0019      	movs	r1, r3
 80013c2:	23fa      	movs	r3, #250	; 0xfa
 80013c4:	0098      	lsls	r0, r3, #2
 80013c6:	f7fe fea9 	bl	800011c <__udivsi3>
 80013ca:	0003      	movs	r3, r0
 80013cc:	0019      	movs	r1, r3
 80013ce:	0020      	movs	r0, r4
 80013d0:	f7fe fea4 	bl	800011c <__udivsi3>
 80013d4:	0003      	movs	r3, r0
 80013d6:	0018      	movs	r0, r3
 80013d8:	f000 f905 	bl	80015e6 <HAL_SYSTICK_Config>
 80013dc:	1e03      	subs	r3, r0, #0
 80013de:	d001      	beq.n	80013e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e00f      	b.n	8001404 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	d80b      	bhi.n	8001402 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ea:	6879      	ldr	r1, [r7, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	425b      	negs	r3, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	0018      	movs	r0, r3
 80013f4:	f000 f8e2 	bl	80015bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_InitTick+0x64>)
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
 8001400:	e000      	b.n	8001404 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b003      	add	sp, #12
 800140a:	bd90      	pop	{r4, r7, pc}
 800140c:	200000b8 	.word	0x200000b8
 8001410:	200000c0 	.word	0x200000c0
 8001414:	200000bc 	.word	0x200000bc

08001418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_IncTick+0x1c>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	001a      	movs	r2, r3
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_IncTick+0x20>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	18d2      	adds	r2, r2, r3
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_IncTick+0x20>)
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	46c0      	nop			; (mov r8, r8)
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	200000c0 	.word	0x200000c0
 8001438:	20000230 	.word	0x20000230

0800143c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  return uwTick;
 8001440:	4b02      	ldr	r3, [pc, #8]	; (800144c <HAL_GetTick+0x10>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	0018      	movs	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	20000230 	.word	0x20000230

08001450 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fff0 	bl	800143c <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3301      	adds	r3, #1
 8001468:	d005      	beq.n	8001476 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <HAL_Delay+0x44>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	001a      	movs	r2, r3
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	189b      	adds	r3, r3, r2
 8001474:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	f7ff ffe0 	bl	800143c <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	429a      	cmp	r2, r3
 8001486:	d8f7      	bhi.n	8001478 <HAL_Delay+0x28>
  {
  }
}
 8001488:	46c0      	nop			; (mov r8, r8)
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	200000c0 	.word	0x200000c0

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b7f      	cmp	r3, #127	; 0x7f
 80014ac:	d828      	bhi.n	8001500 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ae:	4a2f      	ldr	r2, [pc, #188]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	33c0      	adds	r3, #192	; 0xc0
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	589b      	ldr	r3, [r3, r2]
 80014be:	1dfa      	adds	r2, r7, #7
 80014c0:	7812      	ldrb	r2, [r2, #0]
 80014c2:	0011      	movs	r1, r2
 80014c4:	2203      	movs	r2, #3
 80014c6:	400a      	ands	r2, r1
 80014c8:	00d2      	lsls	r2, r2, #3
 80014ca:	21ff      	movs	r1, #255	; 0xff
 80014cc:	4091      	lsls	r1, r2
 80014ce:	000a      	movs	r2, r1
 80014d0:	43d2      	mvns	r2, r2
 80014d2:	401a      	ands	r2, r3
 80014d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	019b      	lsls	r3, r3, #6
 80014da:	22ff      	movs	r2, #255	; 0xff
 80014dc:	401a      	ands	r2, r3
 80014de:	1dfb      	adds	r3, r7, #7
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	0018      	movs	r0, r3
 80014e4:	2303      	movs	r3, #3
 80014e6:	4003      	ands	r3, r0
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014ec:	481f      	ldr	r0, [pc, #124]	; (800156c <__NVIC_SetPriority+0xd4>)
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	b25b      	sxtb	r3, r3
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	430a      	orrs	r2, r1
 80014f8:	33c0      	adds	r3, #192	; 0xc0
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014fe:	e031      	b.n	8001564 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001500:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <__NVIC_SetPriority+0xd8>)
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0019      	movs	r1, r3
 8001508:	230f      	movs	r3, #15
 800150a:	400b      	ands	r3, r1
 800150c:	3b08      	subs	r3, #8
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	3306      	adds	r3, #6
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	18d3      	adds	r3, r2, r3
 8001516:	3304      	adds	r3, #4
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	1dfa      	adds	r2, r7, #7
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	0011      	movs	r1, r2
 8001520:	2203      	movs	r2, #3
 8001522:	400a      	ands	r2, r1
 8001524:	00d2      	lsls	r2, r2, #3
 8001526:	21ff      	movs	r1, #255	; 0xff
 8001528:	4091      	lsls	r1, r2
 800152a:	000a      	movs	r2, r1
 800152c:	43d2      	mvns	r2, r2
 800152e:	401a      	ands	r2, r3
 8001530:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	019b      	lsls	r3, r3, #6
 8001536:	22ff      	movs	r2, #255	; 0xff
 8001538:	401a      	ands	r2, r3
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	0018      	movs	r0, r3
 8001540:	2303      	movs	r3, #3
 8001542:	4003      	ands	r3, r0
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001548:	4809      	ldr	r0, [pc, #36]	; (8001570 <__NVIC_SetPriority+0xd8>)
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	001c      	movs	r4, r3
 8001550:	230f      	movs	r3, #15
 8001552:	4023      	ands	r3, r4
 8001554:	3b08      	subs	r3, #8
 8001556:	089b      	lsrs	r3, r3, #2
 8001558:	430a      	orrs	r2, r1
 800155a:	3306      	adds	r3, #6
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	18c3      	adds	r3, r0, r3
 8001560:	3304      	adds	r3, #4
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	46c0      	nop			; (mov r8, r8)
 8001566:	46bd      	mov	sp, r7
 8001568:	b003      	add	sp, #12
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	e000e100 	.word	0xe000e100
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1e5a      	subs	r2, r3, #1
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	045b      	lsls	r3, r3, #17
 8001584:	429a      	cmp	r2, r3
 8001586:	d301      	bcc.n	800158c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001588:	2301      	movs	r3, #1
 800158a:	e010      	b.n	80015ae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158c:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <SysTick_Config+0x44>)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	3a01      	subs	r2, #1
 8001592:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001594:	2301      	movs	r3, #1
 8001596:	425b      	negs	r3, r3
 8001598:	2103      	movs	r1, #3
 800159a:	0018      	movs	r0, r3
 800159c:	f7ff ff7c 	bl	8001498 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x44>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x44>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	210f      	movs	r1, #15
 80015c8:	187b      	adds	r3, r7, r1
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	0011      	movs	r1, r2
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff ff5d 	bl	8001498 <__NVIC_SetPriority>
}
 80015de:	46c0      	nop			; (mov r8, r8)
 80015e0:	46bd      	mov	sp, r7
 80015e2:	b004      	add	sp, #16
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff ffbf 	bl	8001574 <SysTick_Config>
 80015f6:	0003      	movs	r3, r0
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b086      	sub	sp, #24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160e:	e14f      	b.n	80018b0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2101      	movs	r1, #1
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4091      	lsls	r1, r2
 800161a:	000a      	movs	r2, r1
 800161c:	4013      	ands	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d100      	bne.n	8001628 <HAL_GPIO_Init+0x28>
 8001626:	e140      	b.n	80018aa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	2b01      	cmp	r3, #1
 8001632:	d005      	beq.n	8001640 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2203      	movs	r2, #3
 800163a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800163c:	2b02      	cmp	r3, #2
 800163e:	d130      	bne.n	80016a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	2203      	movs	r2, #3
 800164c:	409a      	lsls	r2, r3
 800164e:	0013      	movs	r3, r2
 8001650:	43da      	mvns	r2, r3
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	4013      	ands	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	409a      	lsls	r2, r3
 8001662:	0013      	movs	r3, r2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001676:	2201      	movs	r2, #1
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	091b      	lsrs	r3, r3, #4
 800168c:	2201      	movs	r2, #1
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2203      	movs	r2, #3
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b03      	cmp	r3, #3
 80016ac:	d017      	beq.n	80016de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	689a      	ldr	r2, [r3, #8]
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	409a      	lsls	r2, r3
 80016d0:	0013      	movs	r3, r2
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2203      	movs	r2, #3
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d123      	bne.n	8001732 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	08da      	lsrs	r2, r3, #3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3208      	adds	r2, #8
 80016f2:	0092      	lsls	r2, r2, #2
 80016f4:	58d3      	ldr	r3, [r2, r3]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	2207      	movs	r2, #7
 80016fc:	4013      	ands	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	220f      	movs	r2, #15
 8001702:	409a      	lsls	r2, r3
 8001704:	0013      	movs	r3, r2
 8001706:	43da      	mvns	r2, r3
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	2107      	movs	r1, #7
 8001716:	400b      	ands	r3, r1
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	4313      	orrs	r3, r2
 8001722:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	08da      	lsrs	r2, r3, #3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3208      	adds	r2, #8
 800172c:	0092      	lsls	r2, r2, #2
 800172e:	6939      	ldr	r1, [r7, #16]
 8001730:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	409a      	lsls	r2, r3
 8001740:	0013      	movs	r3, r2
 8001742:	43da      	mvns	r2, r3
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4013      	ands	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2203      	movs	r2, #3
 8001750:	401a      	ands	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	409a      	lsls	r2, r3
 8001758:	0013      	movs	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4313      	orrs	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	23c0      	movs	r3, #192	; 0xc0
 800176c:	029b      	lsls	r3, r3, #10
 800176e:	4013      	ands	r3, r2
 8001770:	d100      	bne.n	8001774 <HAL_GPIO_Init+0x174>
 8001772:	e09a      	b.n	80018aa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001774:	4b54      	ldr	r3, [pc, #336]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 8001776:	699a      	ldr	r2, [r3, #24]
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 800177a:	2101      	movs	r1, #1
 800177c:	430a      	orrs	r2, r1
 800177e:	619a      	str	r2, [r3, #24]
 8001780:	4b51      	ldr	r3, [pc, #324]	; (80018c8 <HAL_GPIO_Init+0x2c8>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2201      	movs	r2, #1
 8001786:	4013      	ands	r3, r2
 8001788:	60bb      	str	r3, [r7, #8]
 800178a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <HAL_GPIO_Init+0x2cc>)
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	089b      	lsrs	r3, r3, #2
 8001792:	3302      	adds	r3, #2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	589b      	ldr	r3, [r3, r2]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2203      	movs	r2, #3
 800179e:	4013      	ands	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	220f      	movs	r2, #15
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	43da      	mvns	r2, r3
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	2390      	movs	r3, #144	; 0x90
 80017b4:	05db      	lsls	r3, r3, #23
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_Init+0x1e2>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a44      	ldr	r2, [pc, #272]	; (80018d0 <HAL_GPIO_Init+0x2d0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_Init+0x1de>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a43      	ldr	r2, [pc, #268]	; (80018d4 <HAL_GPIO_Init+0x2d4>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_Init+0x1da>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_GPIO_Init+0x2d8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_Init+0x1d6>
 80017d2:	2303      	movs	r3, #3
 80017d4:	e006      	b.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017d6:	2305      	movs	r3, #5
 80017d8:	e004      	b.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017da:	2302      	movs	r3, #2
 80017dc:	e002      	b.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_GPIO_Init+0x1e4>
 80017e2:	2300      	movs	r3, #0
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	2103      	movs	r1, #3
 80017e8:	400a      	ands	r2, r1
 80017ea:	0092      	lsls	r2, r2, #2
 80017ec:	4093      	lsls	r3, r2
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017f4:	4935      	ldr	r1, [pc, #212]	; (80018cc <HAL_GPIO_Init+0x2cc>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001802:	4b36      	ldr	r3, [pc, #216]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43da      	mvns	r2, r3
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685a      	ldr	r2, [r3, #4]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	025b      	lsls	r3, r3, #9
 800181a:	4013      	ands	r3, r2
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001826:	4b2d      	ldr	r3, [pc, #180]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800182c:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43da      	mvns	r2, r3
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	4013      	ands	r3, r2
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001850:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001856:	4b21      	ldr	r3, [pc, #132]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43da      	mvns	r2, r3
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	035b      	lsls	r3, r3, #13
 800186e:	4013      	ands	r3, r2
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43da      	mvns	r2, r3
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	039b      	lsls	r3, r3, #14
 8001898:	4013      	ands	r3, r2
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80018a4:	4b0d      	ldr	r3, [pc, #52]	; (80018dc <HAL_GPIO_Init+0x2dc>)
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	3301      	adds	r3, #1
 80018ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	40da      	lsrs	r2, r3
 80018b8:	1e13      	subs	r3, r2, #0
 80018ba:	d000      	beq.n	80018be <HAL_GPIO_Init+0x2be>
 80018bc:	e6a8      	b.n	8001610 <HAL_GPIO_Init+0x10>
  } 
}
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b006      	add	sp, #24
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010000 	.word	0x40010000
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000800 	.word	0x48000800
 80018d8:	48000c00 	.word	0x48000c00
 80018dc:	40010400 	.word	0x40010400

080018e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	0008      	movs	r0, r1
 80018ea:	0011      	movs	r1, r2
 80018ec:	1cbb      	adds	r3, r7, #2
 80018ee:	1c02      	adds	r2, r0, #0
 80018f0:	801a      	strh	r2, [r3, #0]
 80018f2:	1c7b      	adds	r3, r7, #1
 80018f4:	1c0a      	adds	r2, r1, #0
 80018f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018f8:	1c7b      	adds	r3, r7, #1
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d004      	beq.n	800190a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001900:	1cbb      	adds	r3, r7, #2
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001908:	e003      	b.n	8001912 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800190a:	1cbb      	adds	r3, r7, #2
 800190c:	881a      	ldrh	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e301      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x1e>
 8001938:	e08d      	b.n	8001a56 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800193a:	4bc3      	ldr	r3, [pc, #780]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	220c      	movs	r2, #12
 8001940:	4013      	ands	r3, r2
 8001942:	2b04      	cmp	r3, #4
 8001944:	d00e      	beq.n	8001964 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001946:	4bc0      	ldr	r3, [pc, #768]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	220c      	movs	r2, #12
 800194c:	4013      	ands	r3, r2
 800194e:	2b08      	cmp	r3, #8
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x64>
 8001952:	4bbd      	ldr	r3, [pc, #756]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	025b      	lsls	r3, r3, #9
 800195a:	401a      	ands	r2, r3
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	429a      	cmp	r2, r3
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4bb8      	ldr	r3, [pc, #736]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d100      	bne.n	8001972 <HAL_RCC_OscConfig+0x56>
 8001970:	e070      	b.n	8001a54 <HAL_RCC_OscConfig+0x138>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d000      	beq.n	800197c <HAL_RCC_OscConfig+0x60>
 800197a:	e06b      	b.n	8001a54 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e2d8      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x7c>
 8001988:	4baf      	ldr	r3, [pc, #700]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4bae      	ldr	r3, [pc, #696]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0249      	lsls	r1, r1, #9
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e02f      	b.n	80019f8 <HAL_RCC_OscConfig+0xdc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10c      	bne.n	80019ba <HAL_RCC_OscConfig+0x9e>
 80019a0:	4ba9      	ldr	r3, [pc, #676]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4ba8      	ldr	r3, [pc, #672]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	49a9      	ldr	r1, [pc, #676]	; (8001c4c <HAL_RCC_OscConfig+0x330>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	4ba6      	ldr	r3, [pc, #664]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4ba5      	ldr	r3, [pc, #660]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019b2:	49a7      	ldr	r1, [pc, #668]	; (8001c50 <HAL_RCC_OscConfig+0x334>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	e01e      	b.n	80019f8 <HAL_RCC_OscConfig+0xdc>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b05      	cmp	r3, #5
 80019c0:	d10e      	bne.n	80019e0 <HAL_RCC_OscConfig+0xc4>
 80019c2:	4ba1      	ldr	r3, [pc, #644]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4ba0      	ldr	r3, [pc, #640]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	02c9      	lsls	r1, r1, #11
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	4b9d      	ldr	r3, [pc, #628]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b9c      	ldr	r3, [pc, #624]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	2180      	movs	r1, #128	; 0x80
 80019d8:	0249      	lsls	r1, r1, #9
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_RCC_OscConfig+0xdc>
 80019e0:	4b99      	ldr	r3, [pc, #612]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4b98      	ldr	r3, [pc, #608]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	4999      	ldr	r1, [pc, #612]	; (8001c4c <HAL_RCC_OscConfig+0x330>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	4b96      	ldr	r3, [pc, #600]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b95      	ldr	r3, [pc, #596]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 80019f2:	4997      	ldr	r1, [pc, #604]	; (8001c50 <HAL_RCC_OscConfig+0x334>)
 80019f4:	400a      	ands	r2, r1
 80019f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d014      	beq.n	8001a2a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a00:	f7ff fd1c 	bl	800143c <HAL_GetTick>
 8001a04:	0003      	movs	r3, r0
 8001a06:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0a:	f7ff fd17 	bl	800143c <HAL_GetTick>
 8001a0e:	0002      	movs	r2, r0
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b64      	cmp	r3, #100	; 0x64
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e28a      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1c:	4b8a      	ldr	r3, [pc, #552]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	029b      	lsls	r3, r3, #10
 8001a24:	4013      	ands	r3, r2
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0xee>
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fd07 	bl	800143c <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fd02 	bl	800143c <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e275      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b80      	ldr	r3, [pc, #512]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	029b      	lsls	r3, r3, #10
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0x118>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d100      	bne.n	8001a62 <HAL_RCC_OscConfig+0x146>
 8001a60:	e069      	b.n	8001b36 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a62:	4b79      	ldr	r3, [pc, #484]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	220c      	movs	r2, #12
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d00b      	beq.n	8001a84 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a6c:	4b76      	ldr	r3, [pc, #472]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	220c      	movs	r2, #12
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d11c      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x196>
 8001a78:	4b73      	ldr	r3, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	025b      	lsls	r3, r3, #9
 8001a80:	4013      	ands	r3, r2
 8001a82:	d116      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a84:	4b70      	ldr	r3, [pc, #448]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2202      	movs	r2, #2
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d005      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17e>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d001      	beq.n	8001a9a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e24b      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9a:	4b6b      	ldr	r3, [pc, #428]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	22f8      	movs	r2, #248	; 0xf8
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	00da      	lsls	r2, r3, #3
 8001aaa:	4b67      	ldr	r3, [pc, #412]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab0:	e041      	b.n	8001b36 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d024      	beq.n	8001b04 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac6:	f7ff fcb9 	bl	800143c <HAL_GetTick>
 8001aca:	0003      	movs	r3, r0
 8001acc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ace:	e008      	b.n	8001ae2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ad0:	f7ff fcb4 	bl	800143c <HAL_GetTick>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e227      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b59      	ldr	r3, [pc, #356]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4013      	ands	r3, r2
 8001aea:	d0f1      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aec:	4b56      	ldr	r3, [pc, #344]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	22f8      	movs	r2, #248	; 0xf8
 8001af2:	4393      	bics	r3, r2
 8001af4:	0019      	movs	r1, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	691b      	ldr	r3, [r3, #16]
 8001afa:	00da      	lsls	r2, r3, #3
 8001afc:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	e018      	b.n	8001b36 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b04:	4b50      	ldr	r3, [pc, #320]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	438a      	bics	r2, r1
 8001b0e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b10:	f7ff fc94 	bl	800143c <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7ff fc8f 	bl	800143c <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e202      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2c:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f1      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d036      	beq.n	8001bae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d019      	beq.n	8001b7c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b48:	4b3f      	ldr	r3, [pc, #252]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b4c:	4b3e      	ldr	r3, [pc, #248]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	430a      	orrs	r2, r1
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b54:	f7ff fc72 	bl	800143c <HAL_GetTick>
 8001b58:	0003      	movs	r3, r0
 8001b5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5c:	e008      	b.n	8001b70 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5e:	f7ff fc6d 	bl	800143c <HAL_GetTick>
 8001b62:	0002      	movs	r2, r0
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e1e0      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b70:	4b35      	ldr	r3, [pc, #212]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2202      	movs	r2, #2
 8001b76:	4013      	ands	r3, r2
 8001b78:	d0f1      	beq.n	8001b5e <HAL_RCC_OscConfig+0x242>
 8001b7a:	e018      	b.n	8001bae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b80:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	438a      	bics	r2, r1
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b88:	f7ff fc58 	bl	800143c <HAL_GetTick>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b92:	f7ff fc53 	bl	800143c <HAL_GetTick>
 8001b96:	0002      	movs	r2, r0
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e1c6      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	2202      	movs	r2, #2
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f1      	bne.n	8001b92 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d100      	bne.n	8001bba <HAL_RCC_OscConfig+0x29e>
 8001bb8:	e0b4      	b.n	8001d24 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bba:	201f      	movs	r0, #31
 8001bbc:	183b      	adds	r3, r7, r0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	055b      	lsls	r3, r3, #21
 8001bca:	4013      	ands	r3, r2
 8001bcc:	d110      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001bd0:	69da      	ldr	r2, [r3, #28]
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001bd4:	2180      	movs	r1, #128	; 0x80
 8001bd6:	0549      	lsls	r1, r1, #21
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	61da      	str	r2, [r3, #28]
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	69da      	ldr	r2, [r3, #28]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	055b      	lsls	r3, r3, #21
 8001be4:	4013      	ands	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bea:	183b      	adds	r3, r7, r0
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b18      	ldr	r3, [pc, #96]	; (8001c54 <HAL_RCC_OscConfig+0x338>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	2380      	movs	r3, #128	; 0x80
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d11a      	bne.n	8001c32 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_RCC_OscConfig+0x338>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCC_OscConfig+0x338>)
 8001c02:	2180      	movs	r1, #128	; 0x80
 8001c04:	0049      	lsls	r1, r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fc17 	bl	800143c <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c14:	f7ff fc12 	bl	800143c <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e185      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c26:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x338>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10e      	bne.n	8001c58 <HAL_RCC_OscConfig+0x33c>
 8001c3a:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	4b02      	ldr	r3, [pc, #8]	; (8001c48 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	2101      	movs	r1, #1
 8001c42:	430a      	orrs	r2, r1
 8001c44:	621a      	str	r2, [r3, #32]
 8001c46:	e035      	b.n	8001cb4 <HAL_RCC_OscConfig+0x398>
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	fffeffff 	.word	0xfffeffff
 8001c50:	fffbffff 	.word	0xfffbffff
 8001c54:	40007000 	.word	0x40007000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d10c      	bne.n	8001c7a <HAL_RCC_OscConfig+0x35e>
 8001c60:	4bb6      	ldr	r3, [pc, #728]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c62:	6a1a      	ldr	r2, [r3, #32]
 8001c64:	4bb5      	ldr	r3, [pc, #724]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c66:	2101      	movs	r1, #1
 8001c68:	438a      	bics	r2, r1
 8001c6a:	621a      	str	r2, [r3, #32]
 8001c6c:	4bb3      	ldr	r3, [pc, #716]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c6e:	6a1a      	ldr	r2, [r3, #32]
 8001c70:	4bb2      	ldr	r3, [pc, #712]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c72:	2104      	movs	r1, #4
 8001c74:	438a      	bics	r2, r1
 8001c76:	621a      	str	r2, [r3, #32]
 8001c78:	e01c      	b.n	8001cb4 <HAL_RCC_OscConfig+0x398>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b05      	cmp	r3, #5
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0x380>
 8001c82:	4bae      	ldr	r3, [pc, #696]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c84:	6a1a      	ldr	r2, [r3, #32]
 8001c86:	4bad      	ldr	r3, [pc, #692]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c88:	2104      	movs	r1, #4
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	621a      	str	r2, [r3, #32]
 8001c8e:	4bab      	ldr	r3, [pc, #684]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c90:	6a1a      	ldr	r2, [r3, #32]
 8001c92:	4baa      	ldr	r3, [pc, #680]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	621a      	str	r2, [r3, #32]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0x398>
 8001c9c:	4ba7      	ldr	r3, [pc, #668]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001c9e:	6a1a      	ldr	r2, [r3, #32]
 8001ca0:	4ba6      	ldr	r3, [pc, #664]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	438a      	bics	r2, r1
 8001ca6:	621a      	str	r2, [r3, #32]
 8001ca8:	4ba4      	ldr	r3, [pc, #656]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001caa:	6a1a      	ldr	r2, [r3, #32]
 8001cac:	4ba3      	ldr	r3, [pc, #652]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001cae:	2104      	movs	r1, #4
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d014      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fbbe 	bl	800143c <HAL_GetTick>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff fbb9 	bl	800143c <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a9b      	ldr	r2, [pc, #620]	; (8001f40 <HAL_RCC_OscConfig+0x624>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e12b      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d0f0      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x3aa>
 8001ce4:	e013      	b.n	8001d0e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ce6:	f7ff fba9 	bl	800143c <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cee:	e009      	b.n	8001d04 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cf0:	f7ff fba4 	bl	800143c <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	4a91      	ldr	r2, [pc, #580]	; (8001f40 <HAL_RCC_OscConfig+0x624>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e116      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d04:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d1f0      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d0e:	231f      	movs	r3, #31
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	4b87      	ldr	r3, [pc, #540]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d1e:	4989      	ldr	r1, [pc, #548]	; (8001f44 <HAL_RCC_OscConfig+0x628>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d063      	beq.n	8001df6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d12a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d36:	4b81      	ldr	r3, [pc, #516]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d3a:	4b80      	ldr	r3, [pc, #512]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d42:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d46:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb75 	bl	800143c <HAL_GetTick>
 8001d52:	0003      	movs	r3, r0
 8001d54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d58:	f7ff fb70 	bl	800143c <HAL_GetTick>
 8001d5c:	0002      	movs	r2, r0
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0e3      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d6a:	4b74      	ldr	r3, [pc, #464]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6e:	2202      	movs	r2, #2
 8001d70:	4013      	ands	r3, r2
 8001d72:	d0f1      	beq.n	8001d58 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d74:	4b71      	ldr	r3, [pc, #452]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d78:	22f8      	movs	r2, #248	; 0xf8
 8001d7a:	4393      	bics	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	00da      	lsls	r2, r3, #3
 8001d84:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8a:	e034      	b.n	8001df6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	695b      	ldr	r3, [r3, #20]
 8001d90:	3305      	adds	r3, #5
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d98:	4b68      	ldr	r3, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	438a      	bics	r2, r1
 8001d9e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da4:	22f8      	movs	r2, #248	; 0xf8
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	00da      	lsls	r2, r3, #3
 8001db0:	4b62      	ldr	r3, [pc, #392]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	635a      	str	r2, [r3, #52]	; 0x34
 8001db6:	e01e      	b.n	8001df6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001db8:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbc:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001dc4:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dc8:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fb34 	bl	800143c <HAL_GetTick>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001dda:	f7ff fb2f 	bl	800143c <HAL_GetTick>
 8001dde:	0002      	movs	r2, r0
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0a2      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d1f1      	bne.n	8001dda <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a1b      	ldr	r3, [r3, #32]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d100      	bne.n	8001e00 <HAL_RCC_OscConfig+0x4e4>
 8001dfe:	e097      	b.n	8001f30 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e00:	4b4e      	ldr	r3, [pc, #312]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	220c      	movs	r2, #12
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b08      	cmp	r3, #8
 8001e0a:	d100      	bne.n	8001e0e <HAL_RCC_OscConfig+0x4f2>
 8001e0c:	e06b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d14c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b49      	ldr	r3, [pc, #292]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	4b48      	ldr	r3, [pc, #288]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e1c:	494a      	ldr	r1, [pc, #296]	; (8001f48 <HAL_RCC_OscConfig+0x62c>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fb0b 	bl	800143c <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff fb06 	bl	800143c <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e079      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	4b3f      	ldr	r3, [pc, #252]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	2380      	movs	r3, #128	; 0x80
 8001e44:	049b      	lsls	r3, r3, #18
 8001e46:	4013      	ands	r3, r2
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4e:	220f      	movs	r2, #15
 8001e50:	4393      	bics	r3, r2
 8001e52:	0019      	movs	r1, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e58:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4a3a      	ldr	r2, [pc, #232]	; (8001f4c <HAL_RCC_OscConfig+0x630>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	0019      	movs	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e70:	431a      	orrs	r2, r3
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e74:	430a      	orrs	r2, r1
 8001e76:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	0449      	lsls	r1, r1, #17
 8001e82:	430a      	orrs	r2, r1
 8001e84:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff fad9 	bl	800143c <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fad4 	bl	800143c <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e047      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ea2:	4b26      	ldr	r3, [pc, #152]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	2380      	movs	r3, #128	; 0x80
 8001ea8:	049b      	lsls	r3, r3, #18
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x574>
 8001eae:	e03f      	b.n	8001f30 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb0:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b21      	ldr	r3, [pc, #132]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001eb6:	4924      	ldr	r1, [pc, #144]	; (8001f48 <HAL_RCC_OscConfig+0x62c>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fabe 	bl	800143c <HAL_GetTick>
 8001ec0:	0003      	movs	r3, r0
 8001ec2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7ff fab9 	bl	800143c <HAL_GetTick>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e02c      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2380      	movs	r3, #128	; 0x80
 8001ede:	049b      	lsls	r3, r3, #18
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x5aa>
 8001ee4:	e024      	b.n	8001f30 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e01f      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ef8:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_RCC_OscConfig+0x620>)
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	025b      	lsls	r3, r3, #9
 8001f04:	401a      	ands	r2, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d10e      	bne.n	8001f2c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	220f      	movs	r2, #15
 8001f12:	401a      	ands	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d107      	bne.n	8001f2c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	23f0      	movs	r3, #240	; 0xf0
 8001f20:	039b      	lsls	r3, r3, #14
 8001f22:	401a      	ands	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b008      	add	sp, #32
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	00001388 	.word	0x00001388
 8001f44:	efffffff 	.word	0xefffffff
 8001f48:	feffffff 	.word	0xfeffffff
 8001f4c:	ffc2ffff 	.word	0xffc2ffff

08001f50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0b3      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f64:	4b5b      	ldr	r3, [pc, #364]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d911      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b58      	ldr	r3, [pc, #352]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b55      	ldr	r3, [pc, #340]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e09a      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2202      	movs	r2, #2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d006      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001faa:	4b4b      	ldr	r3, [pc, #300]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4b4a      	ldr	r3, [pc, #296]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001fb0:	21e0      	movs	r1, #224	; 0xe0
 8001fb2:	00c9      	lsls	r1, r1, #3
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	22f0      	movs	r2, #240	; 0xf0
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	4b44      	ldr	r3, [pc, #272]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d040      	beq.n	8002058 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d107      	bne.n	8001fee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fde:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	2380      	movs	r3, #128	; 0x80
 8001fe4:	029b      	lsls	r3, r3, #10
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	d114      	bne.n	8002014 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e06e      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d107      	bne.n	8002006 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d108      	bne.n	8002014 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e062      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002006:	4b34      	ldr	r3, [pc, #208]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2202      	movs	r2, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e05b      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002014:	4b30      	ldr	r3, [pc, #192]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2203      	movs	r2, #3
 800201a:	4393      	bics	r3, r2
 800201c:	0019      	movs	r1, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	4b2d      	ldr	r3, [pc, #180]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8002024:	430a      	orrs	r2, r1
 8002026:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002028:	f7ff fa08 	bl	800143c <HAL_GetTick>
 800202c:	0003      	movs	r3, r0
 800202e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002030:	e009      	b.n	8002046 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002032:	f7ff fa03 	bl	800143c <HAL_GetTick>
 8002036:	0002      	movs	r2, r0
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_RCC_ClockConfig+0x18c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e042      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002046:	4b24      	ldr	r3, [pc, #144]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	220c      	movs	r2, #12
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	429a      	cmp	r2, r3
 8002056:	d1ec      	bne.n	8002032 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2201      	movs	r2, #1
 800205e:	4013      	ands	r3, r2
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d211      	bcs.n	800208a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2201      	movs	r2, #1
 800206c:	4393      	bics	r3, r2
 800206e:	0019      	movs	r1, r3
 8002070:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_RCC_ClockConfig+0x184>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2201      	movs	r2, #1
 800207e:	4013      	ands	r3, r2
 8002080:	683a      	ldr	r2, [r7, #0]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2204      	movs	r2, #4
 8002090:	4013      	ands	r3, r2
 8002092:	d009      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	4a11      	ldr	r2, [pc, #68]	; (80020e0 <HAL_RCC_ClockConfig+0x190>)
 800209a:	4013      	ands	r3, r2
 800209c:	0019      	movs	r1, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020a8:	f000 f820 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80020ac:	0001      	movs	r1, r0
 80020ae:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <HAL_RCC_ClockConfig+0x188>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	091b      	lsrs	r3, r3, #4
 80020b4:	220f      	movs	r2, #15
 80020b6:	4013      	ands	r3, r2
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_RCC_ClockConfig+0x194>)
 80020ba:	5cd3      	ldrb	r3, [r2, r3]
 80020bc:	000a      	movs	r2, r1
 80020be:	40da      	lsrs	r2, r3
 80020c0:	4b09      	ldr	r3, [pc, #36]	; (80020e8 <HAL_RCC_ClockConfig+0x198>)
 80020c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f7ff f973 	bl	80013b0 <HAL_InitTick>
  
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40022000 	.word	0x40022000
 80020d8:	40021000 	.word	0x40021000
 80020dc:	00001388 	.word	0x00001388
 80020e0:	fffff8ff 	.word	0xfffff8ff
 80020e4:	08004aac 	.word	0x08004aac
 80020e8:	200000b8 	.word	0x200000b8

080020ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b08f      	sub	sp, #60	; 0x3c
 80020f0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020f2:	2314      	movs	r3, #20
 80020f4:	18fb      	adds	r3, r7, r3
 80020f6:	4a2b      	ldr	r2, [pc, #172]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020fa:	c313      	stmia	r3!, {r0, r1, r4}
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	4a29      	ldr	r2, [pc, #164]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002104:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002106:	c313      	stmia	r3!, {r0, r1, r4}
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002110:	2300      	movs	r3, #0
 8002112:	62bb      	str	r3, [r7, #40]	; 0x28
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800211c:	2300      	movs	r3, #0
 800211e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002120:	4b22      	ldr	r3, [pc, #136]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002128:	220c      	movs	r2, #12
 800212a:	4013      	ands	r3, r2
 800212c:	2b04      	cmp	r3, #4
 800212e:	d002      	beq.n	8002136 <HAL_RCC_GetSysClockFreq+0x4a>
 8002130:	2b08      	cmp	r3, #8
 8002132:	d003      	beq.n	800213c <HAL_RCC_GetSysClockFreq+0x50>
 8002134:	e02d      	b.n	8002192 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002136:	4b1e      	ldr	r3, [pc, #120]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002138:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800213a:	e02d      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800213c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213e:	0c9b      	lsrs	r3, r3, #18
 8002140:	220f      	movs	r2, #15
 8002142:	4013      	ands	r3, r2
 8002144:	2214      	movs	r2, #20
 8002146:	18ba      	adds	r2, r7, r2
 8002148:	5cd3      	ldrb	r3, [r2, r3]
 800214a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800214c:	4b17      	ldr	r3, [pc, #92]	; (80021ac <HAL_RCC_GetSysClockFreq+0xc0>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	220f      	movs	r2, #15
 8002152:	4013      	ands	r3, r2
 8002154:	1d3a      	adds	r2, r7, #4
 8002156:	5cd3      	ldrb	r3, [r2, r3]
 8002158:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800215a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800215c:	2380      	movs	r3, #128	; 0x80
 800215e:	025b      	lsls	r3, r3, #9
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002166:	4812      	ldr	r0, [pc, #72]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002168:	f7fd ffd8 	bl	800011c <__udivsi3>
 800216c:	0003      	movs	r3, r0
 800216e:	001a      	movs	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	4353      	muls	r3, r2
 8002174:	637b      	str	r3, [r7, #52]	; 0x34
 8002176:	e009      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800217a:	000a      	movs	r2, r1
 800217c:	0152      	lsls	r2, r2, #5
 800217e:	1a52      	subs	r2, r2, r1
 8002180:	0193      	lsls	r3, r2, #6
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	185b      	adds	r3, r3, r1
 8002188:	021b      	lsls	r3, r3, #8
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002190:	e002      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002194:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002196:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800219a:	0018      	movs	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	b00f      	add	sp, #60	; 0x3c
 80021a0:	bd90      	pop	{r4, r7, pc}
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	08004a70 	.word	0x08004a70
 80021a8:	08004a80 	.word	0x08004a80
 80021ac:	40021000 	.word	0x40021000
 80021b0:	007a1200 	.word	0x007a1200

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b02      	ldr	r3, [pc, #8]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	200000b8 	.word	0x200000b8

080021c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021cc:	f7ff fff2 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d0:	0001      	movs	r1, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	0a1b      	lsrs	r3, r3, #8
 80021d8:	2207      	movs	r2, #7
 80021da:	4013      	ands	r3, r2
 80021dc:	4a04      	ldr	r2, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021de:	5cd3      	ldrb	r3, [r2, r3]
 80021e0:	40d9      	lsrs	r1, r3
 80021e2:	000b      	movs	r3, r1
}    
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	46c0      	nop			; (mov r8, r8)
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08004abc 	.word	0x08004abc

080021f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e0a8      	b.n	8002358 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	2382      	movs	r3, #130	; 0x82
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	429a      	cmp	r2, r3
 8002218:	d009      	beq.n	800222e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	61da      	str	r2, [r3, #28]
 8002220:	e005      	b.n	800222e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	225d      	movs	r2, #93	; 0x5d
 8002238:	5c9b      	ldrb	r3, [r3, r2]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	225c      	movs	r2, #92	; 0x5c
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	0018      	movs	r0, r3
 800224c:	f7fe ff00 	bl	8001050 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	225d      	movs	r2, #93	; 0x5d
 8002254:	2102      	movs	r1, #2
 8002256:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2140      	movs	r1, #64	; 0x40
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68da      	ldr	r2, [r3, #12]
 800226c:	23e0      	movs	r3, #224	; 0xe0
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	429a      	cmp	r2, r3
 8002272:	d902      	bls.n	800227a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e002      	b.n	8002280 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	23f0      	movs	r3, #240	; 0xf0
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	429a      	cmp	r2, r3
 800228a:	d008      	beq.n	800229e <HAL_SPI_Init+0xaa>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	23e0      	movs	r3, #224	; 0xe0
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	429a      	cmp	r2, r3
 8002296:	d002      	beq.n	800229e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	2382      	movs	r3, #130	; 0x82
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	401a      	ands	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6899      	ldr	r1, [r3, #8]
 80022ac:	2384      	movs	r3, #132	; 0x84
 80022ae:	021b      	lsls	r3, r3, #8
 80022b0:	400b      	ands	r3, r1
 80022b2:	431a      	orrs	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	2102      	movs	r1, #2
 80022ba:	400b      	ands	r3, r1
 80022bc:	431a      	orrs	r2, r3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	2101      	movs	r1, #1
 80022c4:	400b      	ands	r3, r1
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6999      	ldr	r1, [r3, #24]
 80022cc:	2380      	movs	r3, #128	; 0x80
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	400b      	ands	r3, r1
 80022d2:	431a      	orrs	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2138      	movs	r1, #56	; 0x38
 80022da:	400b      	ands	r3, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	2180      	movs	r1, #128	; 0x80
 80022e4:	400b      	ands	r3, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	0011      	movs	r1, r2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ee:	2380      	movs	r3, #128	; 0x80
 80022f0:	019b      	lsls	r3, r3, #6
 80022f2:	401a      	ands	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	0c1b      	lsrs	r3, r3, #16
 8002302:	2204      	movs	r2, #4
 8002304:	401a      	ands	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2110      	movs	r1, #16
 800230c:	400b      	ands	r3, r1
 800230e:	431a      	orrs	r2, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	2108      	movs	r1, #8
 8002316:	400b      	ands	r3, r1
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68d9      	ldr	r1, [r3, #12]
 800231e:	23f0      	movs	r3, #240	; 0xf0
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	400b      	ands	r3, r1
 8002324:	431a      	orrs	r2, r3
 8002326:	0011      	movs	r1, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	015b      	lsls	r3, r3, #5
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69da      	ldr	r2, [r3, #28]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4907      	ldr	r1, [pc, #28]	; (8002360 <HAL_SPI_Init+0x16c>)
 8002344:	400a      	ands	r2, r1
 8002346:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	225d      	movs	r2, #93	; 0x5d
 8002352:	2101      	movs	r1, #1
 8002354:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b004      	add	sp, #16
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffff7ff 	.word	0xfffff7ff

08002364 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b088      	sub	sp, #32
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	1dbb      	adds	r3, r7, #6
 8002372:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002374:	231f      	movs	r3, #31
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	2200      	movs	r2, #0
 800237a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225c      	movs	r2, #92	; 0x5c
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d101      	bne.n	800238a <HAL_SPI_Transmit+0x26>
 8002386:	2302      	movs	r3, #2
 8002388:	e140      	b.n	800260c <HAL_SPI_Transmit+0x2a8>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	225c      	movs	r2, #92	; 0x5c
 800238e:	2101      	movs	r1, #1
 8002390:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002392:	f7ff f853 	bl	800143c <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800239a:	2316      	movs	r3, #22
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	1dba      	adds	r2, r7, #6
 80023a0:	8812      	ldrh	r2, [r2, #0]
 80023a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	225d      	movs	r2, #93	; 0x5d
 80023a8:	5c9b      	ldrb	r3, [r3, r2]
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d004      	beq.n	80023ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80023b0:	231f      	movs	r3, #31
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2202      	movs	r2, #2
 80023b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023b8:	e11d      	b.n	80025f6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_SPI_Transmit+0x64>
 80023c0:	1dbb      	adds	r3, r7, #6
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d104      	bne.n	80023d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80023c8:	231f      	movs	r3, #31
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80023d0:	e111      	b.n	80025f6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	225d      	movs	r2, #93	; 0x5d
 80023d6:	2103      	movs	r1, #3
 80023d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1dba      	adds	r2, r7, #6
 80023ea:	8812      	ldrh	r2, [r2, #0]
 80023ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1dba      	adds	r2, r7, #6
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2244      	movs	r2, #68	; 0x44
 8002400:	2100      	movs	r1, #0
 8002402:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2246      	movs	r2, #70	; 0x46
 8002408:	2100      	movs	r1, #0
 800240a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	429a      	cmp	r2, r3
 8002422:	d110      	bne.n	8002446 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2140      	movs	r1, #64	; 0x40
 8002430:	438a      	bics	r2, r1
 8002432:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	01c9      	lsls	r1, r1, #7
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2240      	movs	r2, #64	; 0x40
 800244e:	4013      	ands	r3, r2
 8002450:	2b40      	cmp	r3, #64	; 0x40
 8002452:	d007      	beq.n	8002464 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2140      	movs	r1, #64	; 0x40
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	23e0      	movs	r3, #224	; 0xe0
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	429a      	cmp	r2, r3
 800246e:	d94e      	bls.n	800250e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_SPI_Transmit+0x11e>
 8002478:	2316      	movs	r3, #22
 800247a:	18fb      	adds	r3, r7, r3
 800247c:	881b      	ldrh	r3, [r3, #0]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d13f      	bne.n	8002502 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	881a      	ldrh	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	1c9a      	adds	r2, r3, #2
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800249c:	b29b      	uxth	r3, r3
 800249e:	3b01      	subs	r3, #1
 80024a0:	b29a      	uxth	r2, r3
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024a6:	e02c      	b.n	8002502 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2202      	movs	r2, #2
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d112      	bne.n	80024dc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ba:	881a      	ldrh	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	1c9a      	adds	r2, r3, #2
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	3b01      	subs	r3, #1
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024da:	e012      	b.n	8002502 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024dc:	f7fe ffae 	bl	800143c <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d802      	bhi.n	80024f2 <HAL_SPI_Transmit+0x18e>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	3301      	adds	r3, #1
 80024f0:	d102      	bne.n	80024f8 <HAL_SPI_Transmit+0x194>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024f8:	231f      	movs	r3, #31
 80024fa:	18fb      	adds	r3, r7, r3
 80024fc:	2203      	movs	r2, #3
 80024fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8002500:	e079      	b.n	80025f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1cd      	bne.n	80024a8 <HAL_SPI_Transmit+0x144>
 800250c:	e04f      	b.n	80025ae <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d004      	beq.n	8002520 <HAL_SPI_Transmit+0x1bc>
 8002516:	2316      	movs	r3, #22
 8002518:	18fb      	adds	r3, r7, r3
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d141      	bne.n	80025a4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	330c      	adds	r3, #12
 800252a:	7812      	ldrb	r2, [r2, #0]
 800252c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	1c5a      	adds	r2, r3, #1
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253c:	b29b      	uxth	r3, r3
 800253e:	3b01      	subs	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002546:	e02d      	b.n	80025a4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d113      	bne.n	800257e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	330c      	adds	r3, #12
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002572:	b29b      	uxth	r3, r3
 8002574:	3b01      	subs	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800257c:	e012      	b.n	80025a4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800257e:	f7fe ff5d 	bl	800143c <HAL_GetTick>
 8002582:	0002      	movs	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	683a      	ldr	r2, [r7, #0]
 800258a:	429a      	cmp	r2, r3
 800258c:	d802      	bhi.n	8002594 <HAL_SPI_Transmit+0x230>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	d102      	bne.n	800259a <HAL_SPI_Transmit+0x236>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d104      	bne.n	80025a4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800259a:	231f      	movs	r3, #31
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2203      	movs	r2, #3
 80025a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80025a2:	e028      	b.n	80025f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1cc      	bne.n	8002548 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	6839      	ldr	r1, [r7, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f000 fcd9 	bl	8002f6c <SPI_EndRxTxTransaction>
 80025ba:	1e03      	subs	r3, r0, #0
 80025bc:	d002      	beq.n	80025c4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2220      	movs	r2, #32
 80025c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10a      	bne.n	80025e2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025cc:	2300      	movs	r3, #0
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80025ea:	231f      	movs	r3, #31
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e000      	b.n	80025f6 <HAL_SPI_Transmit+0x292>
  }

error:
 80025f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	225d      	movs	r2, #93	; 0x5d
 80025fa:	2101      	movs	r1, #1
 80025fc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	225c      	movs	r2, #92	; 0x5c
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002606:	231f      	movs	r3, #31
 8002608:	18fb      	adds	r3, r7, r3
 800260a:	781b      	ldrb	r3, [r3, #0]
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b008      	add	sp, #32
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	1dbb      	adds	r3, r7, #6
 8002622:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002624:	2317      	movs	r3, #23
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2200      	movs	r2, #0
 800262a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	2382      	movs	r3, #130	; 0x82
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	429a      	cmp	r2, r3
 8002636:	d113      	bne.n	8002660 <HAL_SPI_Receive+0x4c>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10f      	bne.n	8002660 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	225d      	movs	r2, #93	; 0x5d
 8002644:	2104      	movs	r1, #4
 8002646:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002648:	1dbb      	adds	r3, r7, #6
 800264a:	881c      	ldrh	r4, [r3, #0]
 800264c:	68ba      	ldr	r2, [r7, #8]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	0023      	movs	r3, r4
 8002658:	f000 f928 	bl	80028ac <HAL_SPI_TransmitReceive>
 800265c:	0003      	movs	r3, r0
 800265e:	e11c      	b.n	800289a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	225c      	movs	r2, #92	; 0x5c
 8002664:	5c9b      	ldrb	r3, [r3, r2]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_SPI_Receive+0x5a>
 800266a:	2302      	movs	r3, #2
 800266c:	e115      	b.n	800289a <HAL_SPI_Receive+0x286>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	225c      	movs	r2, #92	; 0x5c
 8002672:	2101      	movs	r1, #1
 8002674:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002676:	f7fe fee1 	bl	800143c <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	225d      	movs	r2, #93	; 0x5d
 8002682:	5c9b      	ldrb	r3, [r3, r2]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d004      	beq.n	8002694 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800268a:	2317      	movs	r3, #23
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
    goto error;
 8002692:	e0f7      	b.n	8002884 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_SPI_Receive+0x8e>
 800269a:	1dbb      	adds	r3, r7, #6
 800269c:	881b      	ldrh	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d104      	bne.n	80026ac <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80026a2:	2317      	movs	r3, #23
 80026a4:	18fb      	adds	r3, r7, r3
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80026aa:	e0eb      	b.n	8002884 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	225d      	movs	r2, #93	; 0x5d
 80026b0:	2104      	movs	r1, #4
 80026b2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1dba      	adds	r2, r7, #6
 80026c4:	2144      	movs	r1, #68	; 0x44
 80026c6:	8812      	ldrh	r2, [r2, #0]
 80026c8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	1dba      	adds	r2, r7, #6
 80026ce:	2146      	movs	r1, #70	; 0x46
 80026d0:	8812      	ldrh	r2, [r2, #0]
 80026d2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	23e0      	movs	r3, #224	; 0xe0
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d908      	bls.n	8002710 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4966      	ldr	r1, [pc, #408]	; (80028a4 <HAL_SPI_Receive+0x290>)
 800270a:	400a      	ands	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	e008      	b.n	8002722 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	0149      	lsls	r1, r1, #5
 800271e:	430a      	orrs	r2, r1
 8002720:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	021b      	lsls	r3, r3, #8
 800272a:	429a      	cmp	r2, r3
 800272c:	d10f      	bne.n	800274e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2140      	movs	r1, #64	; 0x40
 800273a:	438a      	bics	r2, r1
 800273c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4957      	ldr	r1, [pc, #348]	; (80028a8 <HAL_SPI_Receive+0x294>)
 800274a:	400a      	ands	r2, r1
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2240      	movs	r2, #64	; 0x40
 8002756:	4013      	ands	r3, r2
 8002758:	2b40      	cmp	r3, #64	; 0x40
 800275a:	d007      	beq.n	800276c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2140      	movs	r1, #64	; 0x40
 8002768:	430a      	orrs	r2, r1
 800276a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	23e0      	movs	r3, #224	; 0xe0
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	429a      	cmp	r2, r3
 8002776:	d900      	bls.n	800277a <HAL_SPI_Receive+0x166>
 8002778:	e069      	b.n	800284e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800277a:	e031      	b.n	80027e0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2201      	movs	r2, #1
 8002784:	4013      	ands	r3, r2
 8002786:	2b01      	cmp	r3, #1
 8002788:	d117      	bne.n	80027ba <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	001a      	movs	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	7812      	ldrb	r2, [r2, #0]
 8002798:	b2d2      	uxtb	r2, r2
 800279a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2246      	movs	r2, #70	; 0x46
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b299      	uxth	r1, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2246      	movs	r2, #70	; 0x46
 80027b6:	5299      	strh	r1, [r3, r2]
 80027b8:	e012      	b.n	80027e0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe fe3f 	bl	800143c <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d802      	bhi.n	80027d0 <HAL_SPI_Receive+0x1bc>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	3301      	adds	r3, #1
 80027ce:	d102      	bne.n	80027d6 <HAL_SPI_Receive+0x1c2>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d104      	bne.n	80027e0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80027d6:	2317      	movs	r3, #23
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	2203      	movs	r2, #3
 80027dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80027de:	e051      	b.n	8002884 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2246      	movs	r2, #70	; 0x46
 80027e4:	5a9b      	ldrh	r3, [r3, r2]
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1c7      	bne.n	800277c <HAL_SPI_Receive+0x168>
 80027ec:	e035      	b.n	800285a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d115      	bne.n	8002828 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	b292      	uxth	r2, r2
 8002808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	1c9a      	adds	r2, r3, #2
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2246      	movs	r2, #70	; 0x46
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b299      	uxth	r1, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2246      	movs	r2, #70	; 0x46
 8002824:	5299      	strh	r1, [r3, r2]
 8002826:	e012      	b.n	800284e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002828:	f7fe fe08 	bl	800143c <HAL_GetTick>
 800282c:	0002      	movs	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d802      	bhi.n	800283e <HAL_SPI_Receive+0x22a>
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	3301      	adds	r3, #1
 800283c:	d102      	bne.n	8002844 <HAL_SPI_Receive+0x230>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d104      	bne.n	800284e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002844:	2317      	movs	r3, #23
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	2203      	movs	r2, #3
 800284a:	701a      	strb	r2, [r3, #0]
          goto error;
 800284c:	e01a      	b.n	8002884 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2246      	movs	r2, #70	; 0x46
 8002852:	5a9b      	ldrh	r3, [r3, r2]
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1c9      	bne.n	80027ee <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 fb25 	bl	8002eb0 <SPI_EndRxTransaction>
 8002866:	1e03      	subs	r3, r0, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2220      	movs	r2, #32
 800286e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	2b00      	cmp	r3, #0
 8002876:	d004      	beq.n	8002882 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002878:	2317      	movs	r3, #23
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	2201      	movs	r2, #1
 800287e:	701a      	strb	r2, [r3, #0]
 8002880:	e000      	b.n	8002884 <HAL_SPI_Receive+0x270>
  }

error :
 8002882:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	225d      	movs	r2, #93	; 0x5d
 8002888:	2101      	movs	r1, #1
 800288a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	225c      	movs	r2, #92	; 0x5c
 8002890:	2100      	movs	r1, #0
 8002892:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002894:	2317      	movs	r3, #23
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	781b      	ldrb	r3, [r3, #0]
}
 800289a:	0018      	movs	r0, r3
 800289c:	46bd      	mov	sp, r7
 800289e:	b007      	add	sp, #28
 80028a0:	bd90      	pop	{r4, r7, pc}
 80028a2:	46c0      	nop			; (mov r8, r8)
 80028a4:	ffffefff 	.word	0xffffefff
 80028a8:	ffffbfff 	.word	0xffffbfff

080028ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	001a      	movs	r2, r3
 80028ba:	1cbb      	adds	r3, r7, #2
 80028bc:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80028be:	2301      	movs	r3, #1
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80028c2:	2323      	movs	r3, #35	; 0x23
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	225c      	movs	r2, #92	; 0x5c
 80028ce:	5c9b      	ldrb	r3, [r3, r2]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x2c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e1b5      	b.n	8002c44 <HAL_SPI_TransmitReceive+0x398>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	225c      	movs	r2, #92	; 0x5c
 80028dc:	2101      	movs	r1, #1
 80028de:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028e0:	f7fe fdac 	bl	800143c <HAL_GetTick>
 80028e4:	0003      	movs	r3, r0
 80028e6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028e8:	201b      	movs	r0, #27
 80028ea:	183b      	adds	r3, r7, r0
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	215d      	movs	r1, #93	; 0x5d
 80028f0:	5c52      	ldrb	r2, [r2, r1]
 80028f2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028fa:	2312      	movs	r3, #18
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	1cba      	adds	r2, r7, #2
 8002900:	8812      	ldrh	r2, [r2, #0]
 8002902:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002904:	183b      	adds	r3, r7, r0
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d011      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x84>
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	2382      	movs	r3, #130	; 0x82
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	429a      	cmp	r2, r3
 8002914:	d107      	bne.n	8002926 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <HAL_SPI_TransmitReceive+0x7a>
 800291e:	183b      	adds	r3, r7, r0
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b04      	cmp	r3, #4
 8002924:	d004      	beq.n	8002930 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002926:	2323      	movs	r3, #35	; 0x23
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	2202      	movs	r2, #2
 800292c:	701a      	strb	r2, [r3, #0]
    goto error;
 800292e:	e17e      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d006      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x98>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_SPI_TransmitReceive+0x98>
 800293c:	1cbb      	adds	r3, r7, #2
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002944:	2323      	movs	r3, #35	; 0x23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    goto error;
 800294c:	e16f      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	225d      	movs	r2, #93	; 0x5d
 8002952:	5c9b      	ldrb	r3, [r3, r2]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b04      	cmp	r3, #4
 8002958:	d003      	beq.n	8002962 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	225d      	movs	r2, #93	; 0x5d
 800295e:	2105      	movs	r1, #5
 8002960:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1cba      	adds	r2, r7, #2
 8002972:	2146      	movs	r1, #70	; 0x46
 8002974:	8812      	ldrh	r2, [r2, #0]
 8002976:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1cba      	adds	r2, r7, #2
 800297c:	2144      	movs	r1, #68	; 0x44
 800297e:	8812      	ldrh	r2, [r2, #0]
 8002980:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1cba      	adds	r2, r7, #2
 800298c:	8812      	ldrh	r2, [r2, #0]
 800298e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	1cba      	adds	r2, r7, #2
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	23e0      	movs	r3, #224	; 0xe0
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	49a4      	ldr	r1, [pc, #656]	; (8002c4c <HAL_SPI_TransmitReceive+0x3a0>)
 80029bc:	400a      	ands	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	e008      	b.n	80029d4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	0149      	lsls	r1, r1, #5
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2240      	movs	r2, #64	; 0x40
 80029dc:	4013      	ands	r3, r2
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d007      	beq.n	80029f2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	430a      	orrs	r2, r1
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	23e0      	movs	r3, #224	; 0xe0
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d800      	bhi.n	8002a00 <HAL_SPI_TransmitReceive+0x154>
 80029fe:	e07f      	b.n	8002b00 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x168>
 8002a08:	2312      	movs	r3, #18
 8002a0a:	18fb      	adds	r3, r7, r3
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d000      	beq.n	8002a14 <HAL_SPI_TransmitReceive+0x168>
 8002a12:	e069      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a18:	881a      	ldrh	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	1c9a      	adds	r2, r3, #2
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a38:	e056      	b.n	8002ae8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2202      	movs	r2, #2
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d11b      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x1d4>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d016      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x1d4>
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d113      	bne.n	8002a80 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5c:	881a      	ldrh	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a68:	1c9a      	adds	r2, r3, #2
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2201      	movs	r2, #1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_SPI_TransmitReceive+0x21c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	5a9b      	ldrh	r3, [r3, r2]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d016      	beq.n	8002ac8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	b292      	uxth	r2, r2
 8002aa6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	1c9a      	adds	r2, r3, #2
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2246      	movs	r2, #70	; 0x46
 8002ab6:	5a9b      	ldrh	r3, [r3, r2]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b299      	uxth	r1, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2246      	movs	r2, #70	; 0x46
 8002ac2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002ac8:	f7fe fcb8 	bl	800143c <HAL_GetTick>
 8002acc:	0002      	movs	r2, r0
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d807      	bhi.n	8002ae8 <HAL_SPI_TransmitReceive+0x23c>
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	3301      	adds	r3, #1
 8002adc:	d004      	beq.n	8002ae8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002ade:	2323      	movs	r3, #35	; 0x23
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	701a      	strb	r2, [r3, #0]
        goto error;
 8002ae6:	e0a2      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1a3      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x18e>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2246      	movs	r2, #70	; 0x46
 8002af6:	5a9b      	ldrh	r3, [r3, r2]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d19d      	bne.n	8002a3a <HAL_SPI_TransmitReceive+0x18e>
 8002afe:	e085      	b.n	8002c0c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x268>
 8002b08:	2312      	movs	r3, #18
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d000      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x268>
 8002b12:	e070      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	330c      	adds	r3, #12
 8002b1e:	7812      	ldrb	r2, [r2, #0]
 8002b20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b3a:	e05c      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2202      	movs	r2, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d11c      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x2d8>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d017      	beq.n	8002b84 <HAL_SPI_TransmitReceive+0x2d8>
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d114      	bne.n	8002b84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	330c      	adds	r3, #12
 8002b64:	7812      	ldrb	r2, [r2, #0]
 8002b66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d11e      	bne.n	8002bd0 <HAL_SPI_TransmitReceive+0x324>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2246      	movs	r2, #70	; 0x46
 8002b96:	5a9b      	ldrh	r3, [r3, r2]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d018      	beq.n	8002bd0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	330c      	adds	r3, #12
 8002ba4:	001a      	movs	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2246      	movs	r2, #70	; 0x46
 8002bbe:	5a9b      	ldrh	r3, [r3, r2]
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b299      	uxth	r1, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2246      	movs	r2, #70	; 0x46
 8002bca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002bd0:	f7fe fc34 	bl	800143c <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d802      	bhi.n	8002be6 <HAL_SPI_TransmitReceive+0x33a>
 8002be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be2:	3301      	adds	r3, #1
 8002be4:	d102      	bne.n	8002bec <HAL_SPI_TransmitReceive+0x340>
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d104      	bne.n	8002bf6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002bec:	2323      	movs	r3, #35	; 0x23
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2203      	movs	r2, #3
 8002bf2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bf4:	e01b      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d19d      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x290>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2246      	movs	r2, #70	; 0x46
 8002c04:	5a9b      	ldrh	r3, [r3, r2]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d197      	bne.n	8002b3c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f000 f9aa 	bl	8002f6c <SPI_EndRxTxTransaction>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002c1c:	2323      	movs	r3, #35	; 0x23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2220      	movs	r2, #32
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
 8002c2a:	e000      	b.n	8002c2e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002c2c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	225d      	movs	r2, #93	; 0x5d
 8002c32:	2101      	movs	r1, #1
 8002c34:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	225c      	movs	r2, #92	; 0x5c
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c3e:	2323      	movs	r3, #35	; 0x23
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	781b      	ldrb	r3, [r3, #0]
}
 8002c44:	0018      	movs	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b00a      	add	sp, #40	; 0x28
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	ffffefff 	.word	0xffffefff

08002c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	1dfb      	adds	r3, r7, #7
 8002c5e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c60:	f7fe fbec 	bl	800143c <HAL_GetTick>
 8002c64:	0002      	movs	r2, r0
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	18d3      	adds	r3, r2, r3
 8002c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c70:	f7fe fbe4 	bl	800143c <HAL_GetTick>
 8002c74:	0003      	movs	r3, r0
 8002c76:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c78:	4b3a      	ldr	r3, [pc, #232]	; (8002d64 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	015b      	lsls	r3, r3, #5
 8002c7e:	0d1b      	lsrs	r3, r3, #20
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	4353      	muls	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c86:	e058      	b.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	d055      	beq.n	8002d3a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c8e:	f7fe fbd5 	bl	800143c <HAL_GetTick>
 8002c92:	0002      	movs	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d902      	bls.n	8002ca4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d142      	bne.n	8002d2a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	21e0      	movs	r1, #224	; 0xe0
 8002cb0:	438a      	bics	r2, r1
 8002cb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	2382      	movs	r3, #130	; 0x82
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d113      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d005      	beq.n	8002cd8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d107      	bne.n	8002ce8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	438a      	bics	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	019b      	lsls	r3, r3, #6
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d110      	bne.n	8002d16 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	491a      	ldr	r1, [pc, #104]	; (8002d68 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2180      	movs	r1, #128	; 0x80
 8002d10:	0189      	lsls	r1, r1, #6
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	225d      	movs	r2, #93	; 0x5d
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	225c      	movs	r2, #92	; 0x5c
 8002d22:	2100      	movs	r1, #0
 8002d24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e017      	b.n	8002d5a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	4013      	ands	r3, r2
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	425a      	negs	r2, r3
 8002d4a:	4153      	adcs	r3, r2
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	001a      	movs	r2, r3
 8002d50:	1dfb      	adds	r3, r7, #7
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d197      	bne.n	8002c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b008      	add	sp, #32
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	200000b8 	.word	0x200000b8
 8002d68:	ffffdfff 	.word	0xffffdfff

08002d6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d7a:	2317      	movs	r3, #23
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d82:	f7fe fb5b 	bl	800143c <HAL_GetTick>
 8002d86:	0002      	movs	r2, r0
 8002d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	18d3      	adds	r3, r2, r3
 8002d90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d92:	f7fe fb53 	bl	800143c <HAL_GetTick>
 8002d96:	0003      	movs	r3, r0
 8002d98:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	330c      	adds	r3, #12
 8002da0:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002da2:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	0013      	movs	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	189b      	adds	r3, r3, r2
 8002dac:	00da      	lsls	r2, r3, #3
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	0d1b      	lsrs	r3, r3, #20
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	4353      	muls	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002db8:	e068      	b.n	8002e8c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	23c0      	movs	r3, #192	; 0xc0
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d10a      	bne.n	8002dda <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d107      	bne.n	8002dda <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	2117      	movs	r1, #23
 8002dd2:	187b      	adds	r3, r7, r1
 8002dd4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dd6:	187b      	adds	r3, r7, r1
 8002dd8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	d055      	beq.n	8002e8c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002de0:	f7fe fb2c 	bl	800143c <HAL_GetTick>
 8002de4:	0002      	movs	r2, r0
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d902      	bls.n	8002df6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d142      	bne.n	8002e7c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	685a      	ldr	r2, [r3, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	21e0      	movs	r1, #224	; 0xe0
 8002e02:	438a      	bics	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	2382      	movs	r3, #130	; 0x82
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d113      	bne.n	8002e3a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d005      	beq.n	8002e2a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	689a      	ldr	r2, [r3, #8]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d107      	bne.n	8002e3a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2140      	movs	r1, #64	; 0x40
 8002e36:	438a      	bics	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e3e:	2380      	movs	r3, #128	; 0x80
 8002e40:	019b      	lsls	r3, r3, #6
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d110      	bne.n	8002e68 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4916      	ldr	r1, [pc, #88]	; (8002eac <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2180      	movs	r1, #128	; 0x80
 8002e62:	0189      	lsls	r1, r1, #6
 8002e64:	430a      	orrs	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	225d      	movs	r2, #93	; 0x5d
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	225c      	movs	r2, #92	; 0x5c
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e010      	b.n	8002e9e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d18e      	bne.n	8002dba <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b00a      	add	sp, #40	; 0x28
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	200000b8 	.word	0x200000b8
 8002eac:	ffffdfff 	.word	0xffffdfff

08002eb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af02      	add	r7, sp, #8
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	2382      	movs	r3, #130	; 0x82
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d113      	bne.n	8002ef0 <SPI_EndRxTransaction+0x40>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d005      	beq.n	8002ee0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	2380      	movs	r3, #128	; 0x80
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d107      	bne.n	8002ef0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2140      	movs	r1, #64	; 0x40
 8002eec:	438a      	bics	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	0013      	movs	r3, r2
 8002efa:	2200      	movs	r2, #0
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	f7ff fea7 	bl	8002c50 <SPI_WaitFlagStateUntilTimeout>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d007      	beq.n	8002f16 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e026      	b.n	8002f64 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	2382      	movs	r3, #130	; 0x82
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d11f      	bne.n	8002f62 <SPI_EndRxTransaction+0xb2>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	021b      	lsls	r3, r3, #8
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d005      	beq.n	8002f3a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	689a      	ldr	r2, [r3, #8]
 8002f32:	2380      	movs	r3, #128	; 0x80
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d113      	bne.n	8002f62 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	23c0      	movs	r3, #192	; 0xc0
 8002f3e:	00d9      	lsls	r1, r3, #3
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	0013      	movs	r3, r2
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f7ff ff0f 	bl	8002d6c <SPI_WaitFifoStateUntilTimeout>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d007      	beq.n	8002f62 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	2220      	movs	r2, #32
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e000      	b.n	8002f64 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b004      	add	sp, #16
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	23c0      	movs	r3, #192	; 0xc0
 8002f7c:	0159      	lsls	r1, r3, #5
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	0013      	movs	r3, r2
 8002f86:	2200      	movs	r2, #0
 8002f88:	f7ff fef0 	bl	8002d6c <SPI_WaitFifoStateUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d007      	beq.n	8002fa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f94:	2220      	movs	r2, #32
 8002f96:	431a      	orrs	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e027      	b.n	8002ff0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	0013      	movs	r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	f7ff fe4f 	bl	8002c50 <SPI_WaitFlagStateUntilTimeout>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d007      	beq.n	8002fc6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fba:	2220      	movs	r2, #32
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e014      	b.n	8002ff0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	23c0      	movs	r3, #192	; 0xc0
 8002fca:	00d9      	lsls	r1, r3, #3
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	0013      	movs	r3, r2
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f7ff fec9 	bl	8002d6c <SPI_WaitFifoStateUntilTimeout>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d007      	beq.n	8002fee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e000      	b.n	8002ff0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b004      	add	sp, #16
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e044      	b.n	8003094 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2274      	movs	r2, #116	; 0x74
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe f863 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2224      	movs	r2, #36	; 0x24
 8003026:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2101      	movs	r1, #1
 8003034:	438a      	bics	r2, r1
 8003036:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f8da 	bl	80031f4 <UART_SetConfig>
 8003040:	0003      	movs	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e024      	b.n	8003094 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d003      	beq.n	800305a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fa0d 	bl	8003474 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	490d      	ldr	r1, [pc, #52]	; (800309c <HAL_UART_Init+0xa4>)
 8003066:	400a      	ands	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2108      	movs	r1, #8
 8003076:	438a      	bics	r2, r1
 8003078:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f000 faa5 	bl	80035dc <UART_CheckIdleState>
 8003092:	0003      	movs	r3, r0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b002      	add	sp, #8
 800309a:	bd80      	pop	{r7, pc}
 800309c:	fffff7ff 	.word	0xfffff7ff

080030a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	1dbb      	adds	r3, r7, #6
 80030ae:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d000      	beq.n	80030ba <HAL_UART_Transmit+0x1a>
 80030b8:	e096      	b.n	80031e8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_UART_Transmit+0x28>
 80030c0:	1dbb      	adds	r3, r7, #6
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e08e      	b.n	80031ea <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	2380      	movs	r3, #128	; 0x80
 80030d2:	015b      	lsls	r3, r3, #5
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d109      	bne.n	80030ec <HAL_UART_Transmit+0x4c>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	d001      	beq.n	80030ec <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e07e      	b.n	80031ea <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2274      	movs	r2, #116	; 0x74
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Transmit+0x5a>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e077      	b.n	80031ea <HAL_UART_Transmit+0x14a>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2274      	movs	r2, #116	; 0x74
 80030fe:	2101      	movs	r1, #1
 8003100:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2280      	movs	r2, #128	; 0x80
 8003106:	2100      	movs	r1, #0
 8003108:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2221      	movs	r2, #33	; 0x21
 800310e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003110:	f7fe f994 	bl	800143c <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	1dba      	adds	r2, r7, #6
 800311c:	2150      	movs	r1, #80	; 0x50
 800311e:	8812      	ldrh	r2, [r2, #0]
 8003120:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1dba      	adds	r2, r7, #6
 8003126:	2152      	movs	r1, #82	; 0x52
 8003128:	8812      	ldrh	r2, [r2, #0]
 800312a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	015b      	lsls	r3, r3, #5
 8003134:	429a      	cmp	r2, r3
 8003136:	d108      	bne.n	800314a <HAL_UART_Transmit+0xaa>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d104      	bne.n	800314a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	61bb      	str	r3, [r7, #24]
 8003148:	e003      	b.n	8003152 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2274      	movs	r2, #116	; 0x74
 8003156:	2100      	movs	r1, #0
 8003158:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800315a:	e02d      	b.n	80031b8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	0013      	movs	r3, r2
 8003166:	2200      	movs	r2, #0
 8003168:	2180      	movs	r1, #128	; 0x80
 800316a:	f000 fa7f 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 800316e:	1e03      	subs	r3, r0, #0
 8003170:	d001      	beq.n	8003176 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e039      	b.n	80031ea <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	881a      	ldrh	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	05d2      	lsls	r2, r2, #23
 8003186:	0dd2      	lsrs	r2, r2, #23
 8003188:	b292      	uxth	r2, r2
 800318a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	3302      	adds	r3, #2
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e008      	b.n	80031a6 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	b292      	uxth	r2, r2
 800319e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	3301      	adds	r3, #1
 80031a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2252      	movs	r2, #82	; 0x52
 80031aa:	5a9b      	ldrh	r3, [r3, r2]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b299      	uxth	r1, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2252      	movs	r2, #82	; 0x52
 80031b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2252      	movs	r2, #82	; 0x52
 80031bc:	5a9b      	ldrh	r3, [r3, r2]
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1cb      	bne.n	800315c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	0013      	movs	r3, r2
 80031ce:	2200      	movs	r2, #0
 80031d0:	2140      	movs	r1, #64	; 0x40
 80031d2:	f000 fa4b 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 80031d6:	1e03      	subs	r3, r0, #0
 80031d8:	d001      	beq.n	80031de <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e005      	b.n	80031ea <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	e000      	b.n	80031ea <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
  }
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b008      	add	sp, #32
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b088      	sub	sp, #32
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031fc:	231e      	movs	r3, #30
 80031fe:	18fb      	adds	r3, r7, r3
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	4313      	orrs	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a8d      	ldr	r2, [pc, #564]	; (8003458 <UART_SetConfig+0x264>)
 8003224:	4013      	ands	r3, r2
 8003226:	0019      	movs	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4a88      	ldr	r2, [pc, #544]	; (800345c <UART_SetConfig+0x268>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	4a7f      	ldr	r2, [pc, #508]	; (8003460 <UART_SetConfig+0x26c>)
 8003262:	4013      	ands	r3, r2
 8003264:	0019      	movs	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a7b      	ldr	r2, [pc, #492]	; (8003464 <UART_SetConfig+0x270>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d127      	bne.n	80032ca <UART_SetConfig+0xd6>
 800327a:	4b7b      	ldr	r3, [pc, #492]	; (8003468 <UART_SetConfig+0x274>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2203      	movs	r2, #3
 8003280:	4013      	ands	r3, r2
 8003282:	2b03      	cmp	r3, #3
 8003284:	d00d      	beq.n	80032a2 <UART_SetConfig+0xae>
 8003286:	d81b      	bhi.n	80032c0 <UART_SetConfig+0xcc>
 8003288:	2b02      	cmp	r3, #2
 800328a:	d014      	beq.n	80032b6 <UART_SetConfig+0xc2>
 800328c:	d818      	bhi.n	80032c0 <UART_SetConfig+0xcc>
 800328e:	2b00      	cmp	r3, #0
 8003290:	d002      	beq.n	8003298 <UART_SetConfig+0xa4>
 8003292:	2b01      	cmp	r3, #1
 8003294:	d00a      	beq.n	80032ac <UART_SetConfig+0xb8>
 8003296:	e013      	b.n	80032c0 <UART_SetConfig+0xcc>
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e021      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032a2:	231f      	movs	r3, #31
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e01c      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032ac:	231f      	movs	r3, #31
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2204      	movs	r2, #4
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e017      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032b6:	231f      	movs	r3, #31
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2208      	movs	r2, #8
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e012      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032c0:	231f      	movs	r3, #31
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	2210      	movs	r2, #16
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e00d      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a67      	ldr	r2, [pc, #412]	; (800346c <UART_SetConfig+0x278>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d104      	bne.n	80032de <UART_SetConfig+0xea>
 80032d4:	231f      	movs	r3, #31
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e003      	b.n	80032e6 <UART_SetConfig+0xf2>
 80032de:	231f      	movs	r3, #31
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2210      	movs	r2, #16
 80032e4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	021b      	lsls	r3, r3, #8
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d15d      	bne.n	80033ae <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80032f2:	231f      	movs	r3, #31
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d015      	beq.n	8003328 <UART_SetConfig+0x134>
 80032fc:	dc18      	bgt.n	8003330 <UART_SetConfig+0x13c>
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d00d      	beq.n	800331e <UART_SetConfig+0x12a>
 8003302:	dc15      	bgt.n	8003330 <UART_SetConfig+0x13c>
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <UART_SetConfig+0x11a>
 8003308:	2b02      	cmp	r3, #2
 800330a:	d005      	beq.n	8003318 <UART_SetConfig+0x124>
 800330c:	e010      	b.n	8003330 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800330e:	f7fe ff5b 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 8003312:	0003      	movs	r3, r0
 8003314:	61bb      	str	r3, [r7, #24]
        break;
 8003316:	e012      	b.n	800333e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003318:	4b55      	ldr	r3, [pc, #340]	; (8003470 <UART_SetConfig+0x27c>)
 800331a:	61bb      	str	r3, [r7, #24]
        break;
 800331c:	e00f      	b.n	800333e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331e:	f7fe fee5 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 8003322:	0003      	movs	r3, r0
 8003324:	61bb      	str	r3, [r7, #24]
        break;
 8003326:	e00a      	b.n	800333e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003328:	2380      	movs	r3, #128	; 0x80
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	61bb      	str	r3, [r7, #24]
        break;
 800332e:	e006      	b.n	800333e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003334:	231e      	movs	r3, #30
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2201      	movs	r2, #1
 800333a:	701a      	strb	r2, [r3, #0]
        break;
 800333c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d100      	bne.n	8003346 <UART_SetConfig+0x152>
 8003344:	e07b      	b.n	800343e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	005a      	lsls	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	085b      	lsrs	r3, r3, #1
 8003350:	18d2      	adds	r2, r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	0019      	movs	r1, r3
 8003358:	0010      	movs	r0, r2
 800335a:	f7fc fedf 	bl	800011c <__udivsi3>
 800335e:	0003      	movs	r3, r0
 8003360:	b29b      	uxth	r3, r3
 8003362:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	2b0f      	cmp	r3, #15
 8003368:	d91c      	bls.n	80033a4 <UART_SetConfig+0x1b0>
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	2380      	movs	r3, #128	; 0x80
 800336e:	025b      	lsls	r3, r3, #9
 8003370:	429a      	cmp	r2, r3
 8003372:	d217      	bcs.n	80033a4 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	b29a      	uxth	r2, r3
 8003378:	200e      	movs	r0, #14
 800337a:	183b      	adds	r3, r7, r0
 800337c:	210f      	movs	r1, #15
 800337e:	438a      	bics	r2, r1
 8003380:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	085b      	lsrs	r3, r3, #1
 8003386:	b29b      	uxth	r3, r3
 8003388:	2207      	movs	r2, #7
 800338a:	4013      	ands	r3, r2
 800338c:	b299      	uxth	r1, r3
 800338e:	183b      	adds	r3, r7, r0
 8003390:	183a      	adds	r2, r7, r0
 8003392:	8812      	ldrh	r2, [r2, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	183a      	adds	r2, r7, r0
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	e04c      	b.n	800343e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80033a4:	231e      	movs	r3, #30
 80033a6:	18fb      	adds	r3, r7, r3
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
 80033ac:	e047      	b.n	800343e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033ae:	231f      	movs	r3, #31
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d015      	beq.n	80033e4 <UART_SetConfig+0x1f0>
 80033b8:	dc18      	bgt.n	80033ec <UART_SetConfig+0x1f8>
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d00d      	beq.n	80033da <UART_SetConfig+0x1e6>
 80033be:	dc15      	bgt.n	80033ec <UART_SetConfig+0x1f8>
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <UART_SetConfig+0x1d6>
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d005      	beq.n	80033d4 <UART_SetConfig+0x1e0>
 80033c8:	e010      	b.n	80033ec <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ca:	f7fe fefd 	bl	80021c8 <HAL_RCC_GetPCLK1Freq>
 80033ce:	0003      	movs	r3, r0
 80033d0:	61bb      	str	r3, [r7, #24]
        break;
 80033d2:	e012      	b.n	80033fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <UART_SetConfig+0x27c>)
 80033d6:	61bb      	str	r3, [r7, #24]
        break;
 80033d8:	e00f      	b.n	80033fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033da:	f7fe fe87 	bl	80020ec <HAL_RCC_GetSysClockFreq>
 80033de:	0003      	movs	r3, r0
 80033e0:	61bb      	str	r3, [r7, #24]
        break;
 80033e2:	e00a      	b.n	80033fa <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	61bb      	str	r3, [r7, #24]
        break;
 80033ea:	e006      	b.n	80033fa <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033f0:	231e      	movs	r3, #30
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
        break;
 80033f8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01e      	beq.n	800343e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	085a      	lsrs	r2, r3, #1
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	18d2      	adds	r2, r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	0019      	movs	r1, r3
 8003410:	0010      	movs	r0, r2
 8003412:	f7fc fe83 	bl	800011c <__udivsi3>
 8003416:	0003      	movs	r3, r0
 8003418:	b29b      	uxth	r3, r3
 800341a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d909      	bls.n	8003436 <UART_SetConfig+0x242>
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	025b      	lsls	r3, r3, #9
 8003428:	429a      	cmp	r2, r3
 800342a:	d204      	bcs.n	8003436 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	e003      	b.n	800343e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003436:	231e      	movs	r3, #30
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800344a:	231e      	movs	r3, #30
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b008      	add	sp, #32
 8003456:	bd80      	pop	{r7, pc}
 8003458:	ffff69f3 	.word	0xffff69f3
 800345c:	ffffcfff 	.word	0xffffcfff
 8003460:	fffff4ff 	.word	0xfffff4ff
 8003464:	40013800 	.word	0x40013800
 8003468:	40021000 	.word	0x40021000
 800346c:	40004400 	.word	0x40004400
 8003470:	007a1200 	.word	0x007a1200

08003474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2201      	movs	r2, #1
 8003482:	4013      	ands	r3, r2
 8003484:	d00b      	beq.n	800349e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a4a      	ldr	r2, [pc, #296]	; (80035b8 <UART_AdvFeatureConfig+0x144>)
 800348e:	4013      	ands	r3, r2
 8003490:	0019      	movs	r1, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2202      	movs	r2, #2
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	4a43      	ldr	r2, [pc, #268]	; (80035bc <UART_AdvFeatureConfig+0x148>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	0019      	movs	r1, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	2204      	movs	r2, #4
 80034c6:	4013      	ands	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	4a3b      	ldr	r2, [pc, #236]	; (80035c0 <UART_AdvFeatureConfig+0x14c>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	2208      	movs	r2, #8
 80034e8:	4013      	ands	r3, r2
 80034ea:	d00b      	beq.n	8003504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a34      	ldr	r2, [pc, #208]	; (80035c4 <UART_AdvFeatureConfig+0x150>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	0019      	movs	r1, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	2210      	movs	r2, #16
 800350a:	4013      	ands	r3, r2
 800350c:	d00b      	beq.n	8003526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	4a2c      	ldr	r2, [pc, #176]	; (80035c8 <UART_AdvFeatureConfig+0x154>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	2220      	movs	r2, #32
 800352c:	4013      	ands	r3, r2
 800352e:	d00b      	beq.n	8003548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	4a25      	ldr	r2, [pc, #148]	; (80035cc <UART_AdvFeatureConfig+0x158>)
 8003538:	4013      	ands	r3, r2
 800353a:	0019      	movs	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2240      	movs	r2, #64	; 0x40
 800354e:	4013      	ands	r3, r2
 8003550:	d01d      	beq.n	800358e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a1d      	ldr	r2, [pc, #116]	; (80035d0 <UART_AdvFeatureConfig+0x15c>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800356e:	2380      	movs	r3, #128	; 0x80
 8003570:	035b      	lsls	r3, r3, #13
 8003572:	429a      	cmp	r2, r3
 8003574:	d10b      	bne.n	800358e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a15      	ldr	r2, [pc, #84]	; (80035d4 <UART_AdvFeatureConfig+0x160>)
 800357e:	4013      	ands	r3, r2
 8003580:	0019      	movs	r1, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	4013      	ands	r3, r2
 8003596:	d00b      	beq.n	80035b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <UART_AdvFeatureConfig+0x164>)
 80035a0:	4013      	ands	r3, r2
 80035a2:	0019      	movs	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	605a      	str	r2, [r3, #4]
  }
}
 80035b0:	46c0      	nop			; (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	b002      	add	sp, #8
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	fffdffff 	.word	0xfffdffff
 80035bc:	fffeffff 	.word	0xfffeffff
 80035c0:	fffbffff 	.word	0xfffbffff
 80035c4:	ffff7fff 	.word	0xffff7fff
 80035c8:	ffffefff 	.word	0xffffefff
 80035cc:	ffffdfff 	.word	0xffffdfff
 80035d0:	ffefffff 	.word	0xffefffff
 80035d4:	ff9fffff 	.word	0xff9fffff
 80035d8:	fff7ffff 	.word	0xfff7ffff

080035dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	2100      	movs	r1, #0
 80035ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035ec:	f7fd ff26 	bl	800143c <HAL_GetTick>
 80035f0:	0003      	movs	r3, r0
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2208      	movs	r2, #8
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d10c      	bne.n	800361c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	0391      	lsls	r1, r2, #14
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4a17      	ldr	r2, [pc, #92]	; (8003668 <UART_CheckIdleState+0x8c>)
 800360c:	9200      	str	r2, [sp, #0]
 800360e:	2200      	movs	r2, #0
 8003610:	f000 f82c 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e021      	b.n	8003660 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2204      	movs	r2, #4
 8003624:	4013      	ands	r3, r2
 8003626:	2b04      	cmp	r3, #4
 8003628:	d10c      	bne.n	8003644 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2280      	movs	r2, #128	; 0x80
 800362e:	03d1      	lsls	r1, r2, #15
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <UART_CheckIdleState+0x8c>)
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	2200      	movs	r2, #0
 8003638:	f000 f818 	bl	800366c <UART_WaitOnFlagUntilTimeout>
 800363c:	1e03      	subs	r3, r0, #0
 800363e:	d001      	beq.n	8003644 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e00d      	b.n	8003660 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2274      	movs	r2, #116	; 0x74
 800365a:	2100      	movs	r1, #0
 800365c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	0018      	movs	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	b004      	add	sp, #16
 8003666:	bd80      	pop	{r7, pc}
 8003668:	01ffffff 	.word	0x01ffffff

0800366c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b094      	sub	sp, #80	; 0x50
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	603b      	str	r3, [r7, #0]
 8003678:	1dfb      	adds	r3, r7, #7
 800367a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367c:	e0a3      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003680:	3301      	adds	r3, #1
 8003682:	d100      	bne.n	8003686 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003684:	e09f      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	f7fd fed9 	bl	800143c <HAL_GetTick>
 800368a:	0002      	movs	r2, r0
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003692:	429a      	cmp	r2, r3
 8003694:	d302      	bcc.n	800369c <UART_WaitOnFlagUntilTimeout+0x30>
 8003696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13d      	bne.n	8003718 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800369c:	f3ef 8310 	mrs	r3, PRIMASK
 80036a0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036a4:	647b      	str	r3, [r7, #68]	; 0x44
 80036a6:	2301      	movs	r3, #1
 80036a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	494c      	ldr	r1, [pc, #304]	; (80037f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80036be:	400a      	ands	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	f383 8810 	msr	PRIMASK, r3
}
 80036cc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ce:	f3ef 8310 	mrs	r3, PRIMASK
 80036d2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d6:	643b      	str	r3, [r7, #64]	; 0x40
 80036d8:	2301      	movs	r3, #1
 80036da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036de:	f383 8810 	msr	PRIMASK, r3
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2101      	movs	r1, #1
 80036f0:	438a      	bics	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036fa:	f383 8810 	msr	PRIMASK, r3
}
 80036fe:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2220      	movs	r2, #32
 800370a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2274      	movs	r2, #116	; 0x74
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e067      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2204      	movs	r2, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d050      	beq.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	69da      	ldr	r2, [r3, #28]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	401a      	ands	r2, r3
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	429a      	cmp	r2, r3
 8003736:	d146      	bne.n	80037c6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2280      	movs	r2, #128	; 0x80
 800373e:	0112      	lsls	r2, r2, #4
 8003740:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	613b      	str	r3, [r7, #16]
  return(result);
 8003748:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800374a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800374c:	2301      	movs	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4923      	ldr	r1, [pc, #140]	; (80037f0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800376a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	61fb      	str	r3, [r7, #28]
  return(result);
 800377a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	64bb      	str	r3, [r7, #72]	; 0x48
 800377e:	2301      	movs	r3, #1
 8003780:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	438a      	bics	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2280      	movs	r2, #128	; 0x80
 80037b6:	2120      	movs	r1, #32
 80037b8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2274      	movs	r2, #116	; 0x74
 80037be:	2100      	movs	r1, #0
 80037c0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e010      	b.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	68ba      	ldr	r2, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	425a      	negs	r2, r3
 80037d6:	4153      	adcs	r3, r2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	001a      	movs	r2, r3
 80037dc:	1dfb      	adds	r3, r7, #7
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d100      	bne.n	80037e6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80037e4:	e74b      	b.n	800367e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	0018      	movs	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	b014      	add	sp, #80	; 0x50
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	fffffe5f 	.word	0xfffffe5f

080037f4 <__assert_func>:
 80037f4:	b530      	push	{r4, r5, lr}
 80037f6:	0014      	movs	r4, r2
 80037f8:	001a      	movs	r2, r3
 80037fa:	4b09      	ldr	r3, [pc, #36]	; (8003820 <__assert_func+0x2c>)
 80037fc:	0005      	movs	r5, r0
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b085      	sub	sp, #20
 8003802:	68d8      	ldr	r0, [r3, #12]
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <__assert_func+0x30>)
 8003806:	2c00      	cmp	r4, #0
 8003808:	d101      	bne.n	800380e <__assert_func+0x1a>
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <__assert_func+0x34>)
 800380c:	001c      	movs	r4, r3
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	9100      	str	r1, [sp, #0]
 8003812:	002b      	movs	r3, r5
 8003814:	4905      	ldr	r1, [pc, #20]	; (800382c <__assert_func+0x38>)
 8003816:	9402      	str	r4, [sp, #8]
 8003818:	f000 f810 	bl	800383c <fiprintf>
 800381c:	f000 fbfc 	bl	8004018 <abort>
 8003820:	200000c4 	.word	0x200000c4
 8003824:	08004ac4 	.word	0x08004ac4
 8003828:	08004aff 	.word	0x08004aff
 800382c:	08004ad1 	.word	0x08004ad1

08003830 <__errno>:
 8003830:	4b01      	ldr	r3, [pc, #4]	; (8003838 <__errno+0x8>)
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	4770      	bx	lr
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	200000c4 	.word	0x200000c4

0800383c <fiprintf>:
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b503      	push	{r0, r1, lr}
 8003840:	0001      	movs	r1, r0
 8003842:	ab03      	add	r3, sp, #12
 8003844:	4804      	ldr	r0, [pc, #16]	; (8003858 <fiprintf+0x1c>)
 8003846:	cb04      	ldmia	r3!, {r2}
 8003848:	6800      	ldr	r0, [r0, #0]
 800384a:	9301      	str	r3, [sp, #4]
 800384c:	f000 f85a 	bl	8003904 <_vfiprintf_r>
 8003850:	b002      	add	sp, #8
 8003852:	bc08      	pop	{r3}
 8003854:	b003      	add	sp, #12
 8003856:	4718      	bx	r3
 8003858:	200000c4 	.word	0x200000c4

0800385c <__libc_init_array>:
 800385c:	b570      	push	{r4, r5, r6, lr}
 800385e:	2600      	movs	r6, #0
 8003860:	4d0c      	ldr	r5, [pc, #48]	; (8003894 <__libc_init_array+0x38>)
 8003862:	4c0d      	ldr	r4, [pc, #52]	; (8003898 <__libc_init_array+0x3c>)
 8003864:	1b64      	subs	r4, r4, r5
 8003866:	10a4      	asrs	r4, r4, #2
 8003868:	42a6      	cmp	r6, r4
 800386a:	d109      	bne.n	8003880 <__libc_init_array+0x24>
 800386c:	2600      	movs	r6, #0
 800386e:	f001 f831 	bl	80048d4 <_init>
 8003872:	4d0a      	ldr	r5, [pc, #40]	; (800389c <__libc_init_array+0x40>)
 8003874:	4c0a      	ldr	r4, [pc, #40]	; (80038a0 <__libc_init_array+0x44>)
 8003876:	1b64      	subs	r4, r4, r5
 8003878:	10a4      	asrs	r4, r4, #2
 800387a:	42a6      	cmp	r6, r4
 800387c:	d105      	bne.n	800388a <__libc_init_array+0x2e>
 800387e:	bd70      	pop	{r4, r5, r6, pc}
 8003880:	00b3      	lsls	r3, r6, #2
 8003882:	58eb      	ldr	r3, [r5, r3]
 8003884:	4798      	blx	r3
 8003886:	3601      	adds	r6, #1
 8003888:	e7ee      	b.n	8003868 <__libc_init_array+0xc>
 800388a:	00b3      	lsls	r3, r6, #2
 800388c:	58eb      	ldr	r3, [r5, r3]
 800388e:	4798      	blx	r3
 8003890:	3601      	adds	r6, #1
 8003892:	e7f2      	b.n	800387a <__libc_init_array+0x1e>
 8003894:	08004ba0 	.word	0x08004ba0
 8003898:	08004ba0 	.word	0x08004ba0
 800389c:	08004ba0 	.word	0x08004ba0
 80038a0:	08004ba4 	.word	0x08004ba4

080038a4 <memset>:
 80038a4:	0003      	movs	r3, r0
 80038a6:	1882      	adds	r2, r0, r2
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d100      	bne.n	80038ae <memset+0xa>
 80038ac:	4770      	bx	lr
 80038ae:	7019      	strb	r1, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	e7f9      	b.n	80038a8 <memset+0x4>

080038b4 <__sfputc_r>:
 80038b4:	6893      	ldr	r3, [r2, #8]
 80038b6:	b510      	push	{r4, lr}
 80038b8:	3b01      	subs	r3, #1
 80038ba:	6093      	str	r3, [r2, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da04      	bge.n	80038ca <__sfputc_r+0x16>
 80038c0:	6994      	ldr	r4, [r2, #24]
 80038c2:	42a3      	cmp	r3, r4
 80038c4:	db07      	blt.n	80038d6 <__sfputc_r+0x22>
 80038c6:	290a      	cmp	r1, #10
 80038c8:	d005      	beq.n	80038d6 <__sfputc_r+0x22>
 80038ca:	6813      	ldr	r3, [r2, #0]
 80038cc:	1c58      	adds	r0, r3, #1
 80038ce:	6010      	str	r0, [r2, #0]
 80038d0:	7019      	strb	r1, [r3, #0]
 80038d2:	0008      	movs	r0, r1
 80038d4:	bd10      	pop	{r4, pc}
 80038d6:	f000 fad1 	bl	8003e7c <__swbuf_r>
 80038da:	0001      	movs	r1, r0
 80038dc:	e7f9      	b.n	80038d2 <__sfputc_r+0x1e>

080038de <__sfputs_r>:
 80038de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e0:	0006      	movs	r6, r0
 80038e2:	000f      	movs	r7, r1
 80038e4:	0014      	movs	r4, r2
 80038e6:	18d5      	adds	r5, r2, r3
 80038e8:	42ac      	cmp	r4, r5
 80038ea:	d101      	bne.n	80038f0 <__sfputs_r+0x12>
 80038ec:	2000      	movs	r0, #0
 80038ee:	e007      	b.n	8003900 <__sfputs_r+0x22>
 80038f0:	7821      	ldrb	r1, [r4, #0]
 80038f2:	003a      	movs	r2, r7
 80038f4:	0030      	movs	r0, r6
 80038f6:	f7ff ffdd 	bl	80038b4 <__sfputc_r>
 80038fa:	3401      	adds	r4, #1
 80038fc:	1c43      	adds	r3, r0, #1
 80038fe:	d1f3      	bne.n	80038e8 <__sfputs_r+0xa>
 8003900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003904 <_vfiprintf_r>:
 8003904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003906:	b0a1      	sub	sp, #132	; 0x84
 8003908:	0006      	movs	r6, r0
 800390a:	000c      	movs	r4, r1
 800390c:	001f      	movs	r7, r3
 800390e:	9203      	str	r2, [sp, #12]
 8003910:	2800      	cmp	r0, #0
 8003912:	d004      	beq.n	800391e <_vfiprintf_r+0x1a>
 8003914:	6983      	ldr	r3, [r0, #24]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <_vfiprintf_r+0x1a>
 800391a:	f000 fcb3 	bl	8004284 <__sinit>
 800391e:	4b8e      	ldr	r3, [pc, #568]	; (8003b58 <_vfiprintf_r+0x254>)
 8003920:	429c      	cmp	r4, r3
 8003922:	d11c      	bne.n	800395e <_vfiprintf_r+0x5a>
 8003924:	6874      	ldr	r4, [r6, #4]
 8003926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003928:	07db      	lsls	r3, r3, #31
 800392a:	d405      	bmi.n	8003938 <_vfiprintf_r+0x34>
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	059b      	lsls	r3, r3, #22
 8003930:	d402      	bmi.n	8003938 <_vfiprintf_r+0x34>
 8003932:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003934:	f000 fd47 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	071b      	lsls	r3, r3, #28
 800393c:	d502      	bpl.n	8003944 <_vfiprintf_r+0x40>
 800393e:	6923      	ldr	r3, [r4, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d11d      	bne.n	8003980 <_vfiprintf_r+0x7c>
 8003944:	0021      	movs	r1, r4
 8003946:	0030      	movs	r0, r6
 8003948:	f000 faee 	bl	8003f28 <__swsetup_r>
 800394c:	2800      	cmp	r0, #0
 800394e:	d017      	beq.n	8003980 <_vfiprintf_r+0x7c>
 8003950:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003952:	07db      	lsls	r3, r3, #31
 8003954:	d50d      	bpl.n	8003972 <_vfiprintf_r+0x6e>
 8003956:	2001      	movs	r0, #1
 8003958:	4240      	negs	r0, r0
 800395a:	b021      	add	sp, #132	; 0x84
 800395c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800395e:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <_vfiprintf_r+0x258>)
 8003960:	429c      	cmp	r4, r3
 8003962:	d101      	bne.n	8003968 <_vfiprintf_r+0x64>
 8003964:	68b4      	ldr	r4, [r6, #8]
 8003966:	e7de      	b.n	8003926 <_vfiprintf_r+0x22>
 8003968:	4b7d      	ldr	r3, [pc, #500]	; (8003b60 <_vfiprintf_r+0x25c>)
 800396a:	429c      	cmp	r4, r3
 800396c:	d1db      	bne.n	8003926 <_vfiprintf_r+0x22>
 800396e:	68f4      	ldr	r4, [r6, #12]
 8003970:	e7d9      	b.n	8003926 <_vfiprintf_r+0x22>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	059b      	lsls	r3, r3, #22
 8003976:	d4ee      	bmi.n	8003956 <_vfiprintf_r+0x52>
 8003978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800397a:	f000 fd25 	bl	80043c8 <__retarget_lock_release_recursive>
 800397e:	e7ea      	b.n	8003956 <_vfiprintf_r+0x52>
 8003980:	2300      	movs	r3, #0
 8003982:	ad08      	add	r5, sp, #32
 8003984:	616b      	str	r3, [r5, #20]
 8003986:	3320      	adds	r3, #32
 8003988:	766b      	strb	r3, [r5, #25]
 800398a:	3310      	adds	r3, #16
 800398c:	76ab      	strb	r3, [r5, #26]
 800398e:	9707      	str	r7, [sp, #28]
 8003990:	9f03      	ldr	r7, [sp, #12]
 8003992:	783b      	ldrb	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <_vfiprintf_r+0x98>
 8003998:	2b25      	cmp	r3, #37	; 0x25
 800399a:	d14e      	bne.n	8003a3a <_vfiprintf_r+0x136>
 800399c:	9b03      	ldr	r3, [sp, #12]
 800399e:	1afb      	subs	r3, r7, r3
 80039a0:	9305      	str	r3, [sp, #20]
 80039a2:	9b03      	ldr	r3, [sp, #12]
 80039a4:	429f      	cmp	r7, r3
 80039a6:	d00d      	beq.n	80039c4 <_vfiprintf_r+0xc0>
 80039a8:	9b05      	ldr	r3, [sp, #20]
 80039aa:	0021      	movs	r1, r4
 80039ac:	0030      	movs	r0, r6
 80039ae:	9a03      	ldr	r2, [sp, #12]
 80039b0:	f7ff ff95 	bl	80038de <__sfputs_r>
 80039b4:	1c43      	adds	r3, r0, #1
 80039b6:	d100      	bne.n	80039ba <_vfiprintf_r+0xb6>
 80039b8:	e0b5      	b.n	8003b26 <_vfiprintf_r+0x222>
 80039ba:	696a      	ldr	r2, [r5, #20]
 80039bc:	9b05      	ldr	r3, [sp, #20]
 80039be:	4694      	mov	ip, r2
 80039c0:	4463      	add	r3, ip
 80039c2:	616b      	str	r3, [r5, #20]
 80039c4:	783b      	ldrb	r3, [r7, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d100      	bne.n	80039cc <_vfiprintf_r+0xc8>
 80039ca:	e0ac      	b.n	8003b26 <_vfiprintf_r+0x222>
 80039cc:	2201      	movs	r2, #1
 80039ce:	1c7b      	adds	r3, r7, #1
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	2300      	movs	r3, #0
 80039d4:	4252      	negs	r2, r2
 80039d6:	606a      	str	r2, [r5, #4]
 80039d8:	a904      	add	r1, sp, #16
 80039da:	3254      	adds	r2, #84	; 0x54
 80039dc:	1852      	adds	r2, r2, r1
 80039de:	602b      	str	r3, [r5, #0]
 80039e0:	60eb      	str	r3, [r5, #12]
 80039e2:	60ab      	str	r3, [r5, #8]
 80039e4:	7013      	strb	r3, [r2, #0]
 80039e6:	65ab      	str	r3, [r5, #88]	; 0x58
 80039e8:	9b03      	ldr	r3, [sp, #12]
 80039ea:	2205      	movs	r2, #5
 80039ec:	7819      	ldrb	r1, [r3, #0]
 80039ee:	485d      	ldr	r0, [pc, #372]	; (8003b64 <_vfiprintf_r+0x260>)
 80039f0:	f000 fd58 	bl	80044a4 <memchr>
 80039f4:	9b03      	ldr	r3, [sp, #12]
 80039f6:	1c5f      	adds	r7, r3, #1
 80039f8:	2800      	cmp	r0, #0
 80039fa:	d120      	bne.n	8003a3e <_vfiprintf_r+0x13a>
 80039fc:	682a      	ldr	r2, [r5, #0]
 80039fe:	06d3      	lsls	r3, r2, #27
 8003a00:	d504      	bpl.n	8003a0c <_vfiprintf_r+0x108>
 8003a02:	2353      	movs	r3, #83	; 0x53
 8003a04:	a904      	add	r1, sp, #16
 8003a06:	185b      	adds	r3, r3, r1
 8003a08:	2120      	movs	r1, #32
 8003a0a:	7019      	strb	r1, [r3, #0]
 8003a0c:	0713      	lsls	r3, r2, #28
 8003a0e:	d504      	bpl.n	8003a1a <_vfiprintf_r+0x116>
 8003a10:	2353      	movs	r3, #83	; 0x53
 8003a12:	a904      	add	r1, sp, #16
 8003a14:	185b      	adds	r3, r3, r1
 8003a16:	212b      	movs	r1, #43	; 0x2b
 8003a18:	7019      	strb	r1, [r3, #0]
 8003a1a:	9b03      	ldr	r3, [sp, #12]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b2a      	cmp	r3, #42	; 0x2a
 8003a20:	d016      	beq.n	8003a50 <_vfiprintf_r+0x14c>
 8003a22:	2100      	movs	r1, #0
 8003a24:	68eb      	ldr	r3, [r5, #12]
 8003a26:	9f03      	ldr	r7, [sp, #12]
 8003a28:	783a      	ldrb	r2, [r7, #0]
 8003a2a:	1c78      	adds	r0, r7, #1
 8003a2c:	3a30      	subs	r2, #48	; 0x30
 8003a2e:	4684      	mov	ip, r0
 8003a30:	2a09      	cmp	r2, #9
 8003a32:	d94f      	bls.n	8003ad4 <_vfiprintf_r+0x1d0>
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d111      	bne.n	8003a5c <_vfiprintf_r+0x158>
 8003a38:	e017      	b.n	8003a6a <_vfiprintf_r+0x166>
 8003a3a:	3701      	adds	r7, #1
 8003a3c:	e7a9      	b.n	8003992 <_vfiprintf_r+0x8e>
 8003a3e:	4b49      	ldr	r3, [pc, #292]	; (8003b64 <_vfiprintf_r+0x260>)
 8003a40:	682a      	ldr	r2, [r5, #0]
 8003a42:	1ac0      	subs	r0, r0, r3
 8003a44:	2301      	movs	r3, #1
 8003a46:	4083      	lsls	r3, r0
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	602b      	str	r3, [r5, #0]
 8003a4c:	9703      	str	r7, [sp, #12]
 8003a4e:	e7cb      	b.n	80039e8 <_vfiprintf_r+0xe4>
 8003a50:	9b07      	ldr	r3, [sp, #28]
 8003a52:	1d19      	adds	r1, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9107      	str	r1, [sp, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db01      	blt.n	8003a60 <_vfiprintf_r+0x15c>
 8003a5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a5e:	e004      	b.n	8003a6a <_vfiprintf_r+0x166>
 8003a60:	425b      	negs	r3, r3
 8003a62:	60eb      	str	r3, [r5, #12]
 8003a64:	2302      	movs	r3, #2
 8003a66:	4313      	orrs	r3, r2
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	783b      	ldrb	r3, [r7, #0]
 8003a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8003a6e:	d10a      	bne.n	8003a86 <_vfiprintf_r+0x182>
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b2a      	cmp	r3, #42	; 0x2a
 8003a74:	d137      	bne.n	8003ae6 <_vfiprintf_r+0x1e2>
 8003a76:	9b07      	ldr	r3, [sp, #28]
 8003a78:	3702      	adds	r7, #2
 8003a7a:	1d1a      	adds	r2, r3, #4
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	9207      	str	r2, [sp, #28]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	db2d      	blt.n	8003ae0 <_vfiprintf_r+0x1dc>
 8003a84:	9309      	str	r3, [sp, #36]	; 0x24
 8003a86:	2203      	movs	r2, #3
 8003a88:	7839      	ldrb	r1, [r7, #0]
 8003a8a:	4837      	ldr	r0, [pc, #220]	; (8003b68 <_vfiprintf_r+0x264>)
 8003a8c:	f000 fd0a 	bl	80044a4 <memchr>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d007      	beq.n	8003aa4 <_vfiprintf_r+0x1a0>
 8003a94:	4b34      	ldr	r3, [pc, #208]	; (8003b68 <_vfiprintf_r+0x264>)
 8003a96:	682a      	ldr	r2, [r5, #0]
 8003a98:	1ac0      	subs	r0, r0, r3
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	4083      	lsls	r3, r0
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	3701      	adds	r7, #1
 8003aa2:	602b      	str	r3, [r5, #0]
 8003aa4:	7839      	ldrb	r1, [r7, #0]
 8003aa6:	1c7b      	adds	r3, r7, #1
 8003aa8:	2206      	movs	r2, #6
 8003aaa:	4830      	ldr	r0, [pc, #192]	; (8003b6c <_vfiprintf_r+0x268>)
 8003aac:	9303      	str	r3, [sp, #12]
 8003aae:	7629      	strb	r1, [r5, #24]
 8003ab0:	f000 fcf8 	bl	80044a4 <memchr>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d045      	beq.n	8003b44 <_vfiprintf_r+0x240>
 8003ab8:	4b2d      	ldr	r3, [pc, #180]	; (8003b70 <_vfiprintf_r+0x26c>)
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d127      	bne.n	8003b0e <_vfiprintf_r+0x20a>
 8003abe:	2207      	movs	r2, #7
 8003ac0:	9b07      	ldr	r3, [sp, #28]
 8003ac2:	3307      	adds	r3, #7
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	3308      	adds	r3, #8
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	696b      	ldr	r3, [r5, #20]
 8003acc:	9a04      	ldr	r2, [sp, #16]
 8003ace:	189b      	adds	r3, r3, r2
 8003ad0:	616b      	str	r3, [r5, #20]
 8003ad2:	e75d      	b.n	8003990 <_vfiprintf_r+0x8c>
 8003ad4:	210a      	movs	r1, #10
 8003ad6:	434b      	muls	r3, r1
 8003ad8:	4667      	mov	r7, ip
 8003ada:	189b      	adds	r3, r3, r2
 8003adc:	3909      	subs	r1, #9
 8003ade:	e7a3      	b.n	8003a28 <_vfiprintf_r+0x124>
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	425b      	negs	r3, r3
 8003ae4:	e7ce      	b.n	8003a84 <_vfiprintf_r+0x180>
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	001a      	movs	r2, r3
 8003aea:	3701      	adds	r7, #1
 8003aec:	606b      	str	r3, [r5, #4]
 8003aee:	7839      	ldrb	r1, [r7, #0]
 8003af0:	1c78      	adds	r0, r7, #1
 8003af2:	3930      	subs	r1, #48	; 0x30
 8003af4:	4684      	mov	ip, r0
 8003af6:	2909      	cmp	r1, #9
 8003af8:	d903      	bls.n	8003b02 <_vfiprintf_r+0x1fe>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d0c3      	beq.n	8003a86 <_vfiprintf_r+0x182>
 8003afe:	9209      	str	r2, [sp, #36]	; 0x24
 8003b00:	e7c1      	b.n	8003a86 <_vfiprintf_r+0x182>
 8003b02:	230a      	movs	r3, #10
 8003b04:	435a      	muls	r2, r3
 8003b06:	4667      	mov	r7, ip
 8003b08:	1852      	adds	r2, r2, r1
 8003b0a:	3b09      	subs	r3, #9
 8003b0c:	e7ef      	b.n	8003aee <_vfiprintf_r+0x1ea>
 8003b0e:	ab07      	add	r3, sp, #28
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0022      	movs	r2, r4
 8003b14:	0029      	movs	r1, r5
 8003b16:	0030      	movs	r0, r6
 8003b18:	4b16      	ldr	r3, [pc, #88]	; (8003b74 <_vfiprintf_r+0x270>)
 8003b1a:	e000      	b.n	8003b1e <_vfiprintf_r+0x21a>
 8003b1c:	bf00      	nop
 8003b1e:	9004      	str	r0, [sp, #16]
 8003b20:	9b04      	ldr	r3, [sp, #16]
 8003b22:	3301      	adds	r3, #1
 8003b24:	d1d1      	bne.n	8003aca <_vfiprintf_r+0x1c6>
 8003b26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b28:	07db      	lsls	r3, r3, #31
 8003b2a:	d405      	bmi.n	8003b38 <_vfiprintf_r+0x234>
 8003b2c:	89a3      	ldrh	r3, [r4, #12]
 8003b2e:	059b      	lsls	r3, r3, #22
 8003b30:	d402      	bmi.n	8003b38 <_vfiprintf_r+0x234>
 8003b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b34:	f000 fc48 	bl	80043c8 <__retarget_lock_release_recursive>
 8003b38:	89a3      	ldrh	r3, [r4, #12]
 8003b3a:	065b      	lsls	r3, r3, #25
 8003b3c:	d500      	bpl.n	8003b40 <_vfiprintf_r+0x23c>
 8003b3e:	e70a      	b.n	8003956 <_vfiprintf_r+0x52>
 8003b40:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b42:	e70a      	b.n	800395a <_vfiprintf_r+0x56>
 8003b44:	ab07      	add	r3, sp, #28
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	0022      	movs	r2, r4
 8003b4a:	0029      	movs	r1, r5
 8003b4c:	0030      	movs	r0, r6
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <_vfiprintf_r+0x270>)
 8003b50:	f000 f882 	bl	8003c58 <_printf_i>
 8003b54:	e7e3      	b.n	8003b1e <_vfiprintf_r+0x21a>
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	08004b58 	.word	0x08004b58
 8003b5c:	08004b78 	.word	0x08004b78
 8003b60:	08004b38 	.word	0x08004b38
 8003b64:	08004b04 	.word	0x08004b04
 8003b68:	08004b0a 	.word	0x08004b0a
 8003b6c:	08004b0e 	.word	0x08004b0e
 8003b70:	00000000 	.word	0x00000000
 8003b74:	080038df 	.word	0x080038df

08003b78 <_printf_common>:
 8003b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b7a:	0015      	movs	r5, r2
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	688a      	ldr	r2, [r1, #8]
 8003b80:	690b      	ldr	r3, [r1, #16]
 8003b82:	000c      	movs	r4, r1
 8003b84:	9000      	str	r0, [sp, #0]
 8003b86:	4293      	cmp	r3, r2
 8003b88:	da00      	bge.n	8003b8c <_printf_common+0x14>
 8003b8a:	0013      	movs	r3, r2
 8003b8c:	0022      	movs	r2, r4
 8003b8e:	602b      	str	r3, [r5, #0]
 8003b90:	3243      	adds	r2, #67	; 0x43
 8003b92:	7812      	ldrb	r2, [r2, #0]
 8003b94:	2a00      	cmp	r2, #0
 8003b96:	d001      	beq.n	8003b9c <_printf_common+0x24>
 8003b98:	3301      	adds	r3, #1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	6823      	ldr	r3, [r4, #0]
 8003b9e:	069b      	lsls	r3, r3, #26
 8003ba0:	d502      	bpl.n	8003ba8 <_printf_common+0x30>
 8003ba2:	682b      	ldr	r3, [r5, #0]
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	602b      	str	r3, [r5, #0]
 8003ba8:	6822      	ldr	r2, [r4, #0]
 8003baa:	2306      	movs	r3, #6
 8003bac:	0017      	movs	r7, r2
 8003bae:	401f      	ands	r7, r3
 8003bb0:	421a      	tst	r2, r3
 8003bb2:	d027      	beq.n	8003c04 <_printf_common+0x8c>
 8003bb4:	0023      	movs	r3, r4
 8003bb6:	3343      	adds	r3, #67	; 0x43
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	1e5a      	subs	r2, r3, #1
 8003bbc:	4193      	sbcs	r3, r2
 8003bbe:	6822      	ldr	r2, [r4, #0]
 8003bc0:	0692      	lsls	r2, r2, #26
 8003bc2:	d430      	bmi.n	8003c26 <_printf_common+0xae>
 8003bc4:	0022      	movs	r2, r4
 8003bc6:	9901      	ldr	r1, [sp, #4]
 8003bc8:	9800      	ldr	r0, [sp, #0]
 8003bca:	9e08      	ldr	r6, [sp, #32]
 8003bcc:	3243      	adds	r2, #67	; 0x43
 8003bce:	47b0      	blx	r6
 8003bd0:	1c43      	adds	r3, r0, #1
 8003bd2:	d025      	beq.n	8003c20 <_printf_common+0xa8>
 8003bd4:	2306      	movs	r3, #6
 8003bd6:	6820      	ldr	r0, [r4, #0]
 8003bd8:	682a      	ldr	r2, [r5, #0]
 8003bda:	68e1      	ldr	r1, [r4, #12]
 8003bdc:	2500      	movs	r5, #0
 8003bde:	4003      	ands	r3, r0
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d103      	bne.n	8003bec <_printf_common+0x74>
 8003be4:	1a8d      	subs	r5, r1, r2
 8003be6:	43eb      	mvns	r3, r5
 8003be8:	17db      	asrs	r3, r3, #31
 8003bea:	401d      	ands	r5, r3
 8003bec:	68a3      	ldr	r3, [r4, #8]
 8003bee:	6922      	ldr	r2, [r4, #16]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	dd01      	ble.n	8003bf8 <_printf_common+0x80>
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	18ed      	adds	r5, r5, r3
 8003bf8:	2700      	movs	r7, #0
 8003bfa:	42bd      	cmp	r5, r7
 8003bfc:	d120      	bne.n	8003c40 <_printf_common+0xc8>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e010      	b.n	8003c24 <_printf_common+0xac>
 8003c02:	3701      	adds	r7, #1
 8003c04:	68e3      	ldr	r3, [r4, #12]
 8003c06:	682a      	ldr	r2, [r5, #0]
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	42bb      	cmp	r3, r7
 8003c0c:	ddd2      	ble.n	8003bb4 <_printf_common+0x3c>
 8003c0e:	0022      	movs	r2, r4
 8003c10:	2301      	movs	r3, #1
 8003c12:	9901      	ldr	r1, [sp, #4]
 8003c14:	9800      	ldr	r0, [sp, #0]
 8003c16:	9e08      	ldr	r6, [sp, #32]
 8003c18:	3219      	adds	r2, #25
 8003c1a:	47b0      	blx	r6
 8003c1c:	1c43      	adds	r3, r0, #1
 8003c1e:	d1f0      	bne.n	8003c02 <_printf_common+0x8a>
 8003c20:	2001      	movs	r0, #1
 8003c22:	4240      	negs	r0, r0
 8003c24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c26:	2030      	movs	r0, #48	; 0x30
 8003c28:	18e1      	adds	r1, r4, r3
 8003c2a:	3143      	adds	r1, #67	; 0x43
 8003c2c:	7008      	strb	r0, [r1, #0]
 8003c2e:	0021      	movs	r1, r4
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	3145      	adds	r1, #69	; 0x45
 8003c34:	7809      	ldrb	r1, [r1, #0]
 8003c36:	18a2      	adds	r2, r4, r2
 8003c38:	3243      	adds	r2, #67	; 0x43
 8003c3a:	3302      	adds	r3, #2
 8003c3c:	7011      	strb	r1, [r2, #0]
 8003c3e:	e7c1      	b.n	8003bc4 <_printf_common+0x4c>
 8003c40:	0022      	movs	r2, r4
 8003c42:	2301      	movs	r3, #1
 8003c44:	9901      	ldr	r1, [sp, #4]
 8003c46:	9800      	ldr	r0, [sp, #0]
 8003c48:	9e08      	ldr	r6, [sp, #32]
 8003c4a:	321a      	adds	r2, #26
 8003c4c:	47b0      	blx	r6
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d0e6      	beq.n	8003c20 <_printf_common+0xa8>
 8003c52:	3701      	adds	r7, #1
 8003c54:	e7d1      	b.n	8003bfa <_printf_common+0x82>
	...

08003c58 <_printf_i>:
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b08b      	sub	sp, #44	; 0x2c
 8003c5c:	9206      	str	r2, [sp, #24]
 8003c5e:	000a      	movs	r2, r1
 8003c60:	3243      	adds	r2, #67	; 0x43
 8003c62:	9307      	str	r3, [sp, #28]
 8003c64:	9005      	str	r0, [sp, #20]
 8003c66:	9204      	str	r2, [sp, #16]
 8003c68:	7e0a      	ldrb	r2, [r1, #24]
 8003c6a:	000c      	movs	r4, r1
 8003c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c6e:	2a78      	cmp	r2, #120	; 0x78
 8003c70:	d807      	bhi.n	8003c82 <_printf_i+0x2a>
 8003c72:	2a62      	cmp	r2, #98	; 0x62
 8003c74:	d809      	bhi.n	8003c8a <_printf_i+0x32>
 8003c76:	2a00      	cmp	r2, #0
 8003c78:	d100      	bne.n	8003c7c <_printf_i+0x24>
 8003c7a:	e0c1      	b.n	8003e00 <_printf_i+0x1a8>
 8003c7c:	2a58      	cmp	r2, #88	; 0x58
 8003c7e:	d100      	bne.n	8003c82 <_printf_i+0x2a>
 8003c80:	e08c      	b.n	8003d9c <_printf_i+0x144>
 8003c82:	0026      	movs	r6, r4
 8003c84:	3642      	adds	r6, #66	; 0x42
 8003c86:	7032      	strb	r2, [r6, #0]
 8003c88:	e022      	b.n	8003cd0 <_printf_i+0x78>
 8003c8a:	0010      	movs	r0, r2
 8003c8c:	3863      	subs	r0, #99	; 0x63
 8003c8e:	2815      	cmp	r0, #21
 8003c90:	d8f7      	bhi.n	8003c82 <_printf_i+0x2a>
 8003c92:	f7fc fa39 	bl	8000108 <__gnu_thumb1_case_shi>
 8003c96:	0016      	.short	0x0016
 8003c98:	fff6001f 	.word	0xfff6001f
 8003c9c:	fff6fff6 	.word	0xfff6fff6
 8003ca0:	001ffff6 	.word	0x001ffff6
 8003ca4:	fff6fff6 	.word	0xfff6fff6
 8003ca8:	fff6fff6 	.word	0xfff6fff6
 8003cac:	003600a8 	.word	0x003600a8
 8003cb0:	fff6009a 	.word	0xfff6009a
 8003cb4:	00b9fff6 	.word	0x00b9fff6
 8003cb8:	0036fff6 	.word	0x0036fff6
 8003cbc:	fff6fff6 	.word	0xfff6fff6
 8003cc0:	009e      	.short	0x009e
 8003cc2:	0026      	movs	r6, r4
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	3642      	adds	r6, #66	; 0x42
 8003cc8:	1d11      	adds	r1, r2, #4
 8003cca:	6019      	str	r1, [r3, #0]
 8003ccc:	6813      	ldr	r3, [r2, #0]
 8003cce:	7033      	strb	r3, [r6, #0]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0a7      	b.n	8003e24 <_printf_i+0x1cc>
 8003cd4:	6808      	ldr	r0, [r1, #0]
 8003cd6:	6819      	ldr	r1, [r3, #0]
 8003cd8:	1d0a      	adds	r2, r1, #4
 8003cda:	0605      	lsls	r5, r0, #24
 8003cdc:	d50b      	bpl.n	8003cf6 <_printf_i+0x9e>
 8003cde:	680d      	ldr	r5, [r1, #0]
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	2d00      	cmp	r5, #0
 8003ce4:	da03      	bge.n	8003cee <_printf_i+0x96>
 8003ce6:	232d      	movs	r3, #45	; 0x2d
 8003ce8:	9a04      	ldr	r2, [sp, #16]
 8003cea:	426d      	negs	r5, r5
 8003cec:	7013      	strb	r3, [r2, #0]
 8003cee:	4b61      	ldr	r3, [pc, #388]	; (8003e74 <_printf_i+0x21c>)
 8003cf0:	270a      	movs	r7, #10
 8003cf2:	9303      	str	r3, [sp, #12]
 8003cf4:	e01b      	b.n	8003d2e <_printf_i+0xd6>
 8003cf6:	680d      	ldr	r5, [r1, #0]
 8003cf8:	601a      	str	r2, [r3, #0]
 8003cfa:	0641      	lsls	r1, r0, #25
 8003cfc:	d5f1      	bpl.n	8003ce2 <_printf_i+0x8a>
 8003cfe:	b22d      	sxth	r5, r5
 8003d00:	e7ef      	b.n	8003ce2 <_printf_i+0x8a>
 8003d02:	680d      	ldr	r5, [r1, #0]
 8003d04:	6819      	ldr	r1, [r3, #0]
 8003d06:	1d08      	adds	r0, r1, #4
 8003d08:	6018      	str	r0, [r3, #0]
 8003d0a:	062e      	lsls	r6, r5, #24
 8003d0c:	d501      	bpl.n	8003d12 <_printf_i+0xba>
 8003d0e:	680d      	ldr	r5, [r1, #0]
 8003d10:	e003      	b.n	8003d1a <_printf_i+0xc2>
 8003d12:	066d      	lsls	r5, r5, #25
 8003d14:	d5fb      	bpl.n	8003d0e <_printf_i+0xb6>
 8003d16:	680d      	ldr	r5, [r1, #0]
 8003d18:	b2ad      	uxth	r5, r5
 8003d1a:	4b56      	ldr	r3, [pc, #344]	; (8003e74 <_printf_i+0x21c>)
 8003d1c:	2708      	movs	r7, #8
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	2a6f      	cmp	r2, #111	; 0x6f
 8003d22:	d000      	beq.n	8003d26 <_printf_i+0xce>
 8003d24:	3702      	adds	r7, #2
 8003d26:	0023      	movs	r3, r4
 8003d28:	2200      	movs	r2, #0
 8003d2a:	3343      	adds	r3, #67	; 0x43
 8003d2c:	701a      	strb	r2, [r3, #0]
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	60a3      	str	r3, [r4, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	db03      	blt.n	8003d3e <_printf_i+0xe6>
 8003d36:	2204      	movs	r2, #4
 8003d38:	6821      	ldr	r1, [r4, #0]
 8003d3a:	4391      	bics	r1, r2
 8003d3c:	6021      	str	r1, [r4, #0]
 8003d3e:	2d00      	cmp	r5, #0
 8003d40:	d102      	bne.n	8003d48 <_printf_i+0xf0>
 8003d42:	9e04      	ldr	r6, [sp, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00c      	beq.n	8003d62 <_printf_i+0x10a>
 8003d48:	9e04      	ldr	r6, [sp, #16]
 8003d4a:	0028      	movs	r0, r5
 8003d4c:	0039      	movs	r1, r7
 8003d4e:	f7fc fa6b 	bl	8000228 <__aeabi_uidivmod>
 8003d52:	9b03      	ldr	r3, [sp, #12]
 8003d54:	3e01      	subs	r6, #1
 8003d56:	5c5b      	ldrb	r3, [r3, r1]
 8003d58:	7033      	strb	r3, [r6, #0]
 8003d5a:	002b      	movs	r3, r5
 8003d5c:	0005      	movs	r5, r0
 8003d5e:	429f      	cmp	r7, r3
 8003d60:	d9f3      	bls.n	8003d4a <_printf_i+0xf2>
 8003d62:	2f08      	cmp	r7, #8
 8003d64:	d109      	bne.n	8003d7a <_printf_i+0x122>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	07db      	lsls	r3, r3, #31
 8003d6a:	d506      	bpl.n	8003d7a <_printf_i+0x122>
 8003d6c:	6863      	ldr	r3, [r4, #4]
 8003d6e:	6922      	ldr	r2, [r4, #16]
 8003d70:	4293      	cmp	r3, r2
 8003d72:	dc02      	bgt.n	8003d7a <_printf_i+0x122>
 8003d74:	2330      	movs	r3, #48	; 0x30
 8003d76:	3e01      	subs	r6, #1
 8003d78:	7033      	strb	r3, [r6, #0]
 8003d7a:	9b04      	ldr	r3, [sp, #16]
 8003d7c:	1b9b      	subs	r3, r3, r6
 8003d7e:	6123      	str	r3, [r4, #16]
 8003d80:	9b07      	ldr	r3, [sp, #28]
 8003d82:	0021      	movs	r1, r4
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	9805      	ldr	r0, [sp, #20]
 8003d88:	9b06      	ldr	r3, [sp, #24]
 8003d8a:	aa09      	add	r2, sp, #36	; 0x24
 8003d8c:	f7ff fef4 	bl	8003b78 <_printf_common>
 8003d90:	1c43      	adds	r3, r0, #1
 8003d92:	d14c      	bne.n	8003e2e <_printf_i+0x1d6>
 8003d94:	2001      	movs	r0, #1
 8003d96:	4240      	negs	r0, r0
 8003d98:	b00b      	add	sp, #44	; 0x2c
 8003d9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d9c:	3145      	adds	r1, #69	; 0x45
 8003d9e:	700a      	strb	r2, [r1, #0]
 8003da0:	4a34      	ldr	r2, [pc, #208]	; (8003e74 <_printf_i+0x21c>)
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	6821      	ldr	r1, [r4, #0]
 8003da8:	ca20      	ldmia	r2!, {r5}
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	0608      	lsls	r0, r1, #24
 8003dae:	d516      	bpl.n	8003dde <_printf_i+0x186>
 8003db0:	07cb      	lsls	r3, r1, #31
 8003db2:	d502      	bpl.n	8003dba <_printf_i+0x162>
 8003db4:	2320      	movs	r3, #32
 8003db6:	4319      	orrs	r1, r3
 8003db8:	6021      	str	r1, [r4, #0]
 8003dba:	2710      	movs	r7, #16
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	d1b2      	bne.n	8003d26 <_printf_i+0xce>
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	6822      	ldr	r2, [r4, #0]
 8003dc4:	439a      	bics	r2, r3
 8003dc6:	6022      	str	r2, [r4, #0]
 8003dc8:	e7ad      	b.n	8003d26 <_printf_i+0xce>
 8003dca:	2220      	movs	r2, #32
 8003dcc:	6809      	ldr	r1, [r1, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	6022      	str	r2, [r4, #0]
 8003dd2:	0022      	movs	r2, r4
 8003dd4:	2178      	movs	r1, #120	; 0x78
 8003dd6:	3245      	adds	r2, #69	; 0x45
 8003dd8:	7011      	strb	r1, [r2, #0]
 8003dda:	4a27      	ldr	r2, [pc, #156]	; (8003e78 <_printf_i+0x220>)
 8003ddc:	e7e1      	b.n	8003da2 <_printf_i+0x14a>
 8003dde:	0648      	lsls	r0, r1, #25
 8003de0:	d5e6      	bpl.n	8003db0 <_printf_i+0x158>
 8003de2:	b2ad      	uxth	r5, r5
 8003de4:	e7e4      	b.n	8003db0 <_printf_i+0x158>
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	680d      	ldr	r5, [r1, #0]
 8003dea:	1d10      	adds	r0, r2, #4
 8003dec:	6949      	ldr	r1, [r1, #20]
 8003dee:	6018      	str	r0, [r3, #0]
 8003df0:	6813      	ldr	r3, [r2, #0]
 8003df2:	062e      	lsls	r6, r5, #24
 8003df4:	d501      	bpl.n	8003dfa <_printf_i+0x1a2>
 8003df6:	6019      	str	r1, [r3, #0]
 8003df8:	e002      	b.n	8003e00 <_printf_i+0x1a8>
 8003dfa:	066d      	lsls	r5, r5, #25
 8003dfc:	d5fb      	bpl.n	8003df6 <_printf_i+0x19e>
 8003dfe:	8019      	strh	r1, [r3, #0]
 8003e00:	2300      	movs	r3, #0
 8003e02:	9e04      	ldr	r6, [sp, #16]
 8003e04:	6123      	str	r3, [r4, #16]
 8003e06:	e7bb      	b.n	8003d80 <_printf_i+0x128>
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	1d11      	adds	r1, r2, #4
 8003e0c:	6019      	str	r1, [r3, #0]
 8003e0e:	6816      	ldr	r6, [r2, #0]
 8003e10:	2100      	movs	r1, #0
 8003e12:	0030      	movs	r0, r6
 8003e14:	6862      	ldr	r2, [r4, #4]
 8003e16:	f000 fb45 	bl	80044a4 <memchr>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d001      	beq.n	8003e22 <_printf_i+0x1ca>
 8003e1e:	1b80      	subs	r0, r0, r6
 8003e20:	6060      	str	r0, [r4, #4]
 8003e22:	6863      	ldr	r3, [r4, #4]
 8003e24:	6123      	str	r3, [r4, #16]
 8003e26:	2300      	movs	r3, #0
 8003e28:	9a04      	ldr	r2, [sp, #16]
 8003e2a:	7013      	strb	r3, [r2, #0]
 8003e2c:	e7a8      	b.n	8003d80 <_printf_i+0x128>
 8003e2e:	6923      	ldr	r3, [r4, #16]
 8003e30:	0032      	movs	r2, r6
 8003e32:	9906      	ldr	r1, [sp, #24]
 8003e34:	9805      	ldr	r0, [sp, #20]
 8003e36:	9d07      	ldr	r5, [sp, #28]
 8003e38:	47a8      	blx	r5
 8003e3a:	1c43      	adds	r3, r0, #1
 8003e3c:	d0aa      	beq.n	8003d94 <_printf_i+0x13c>
 8003e3e:	6823      	ldr	r3, [r4, #0]
 8003e40:	079b      	lsls	r3, r3, #30
 8003e42:	d415      	bmi.n	8003e70 <_printf_i+0x218>
 8003e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e46:	68e0      	ldr	r0, [r4, #12]
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	daa5      	bge.n	8003d98 <_printf_i+0x140>
 8003e4c:	0018      	movs	r0, r3
 8003e4e:	e7a3      	b.n	8003d98 <_printf_i+0x140>
 8003e50:	0022      	movs	r2, r4
 8003e52:	2301      	movs	r3, #1
 8003e54:	9906      	ldr	r1, [sp, #24]
 8003e56:	9805      	ldr	r0, [sp, #20]
 8003e58:	9e07      	ldr	r6, [sp, #28]
 8003e5a:	3219      	adds	r2, #25
 8003e5c:	47b0      	blx	r6
 8003e5e:	1c43      	adds	r3, r0, #1
 8003e60:	d098      	beq.n	8003d94 <_printf_i+0x13c>
 8003e62:	3501      	adds	r5, #1
 8003e64:	68e3      	ldr	r3, [r4, #12]
 8003e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	42ab      	cmp	r3, r5
 8003e6c:	dcf0      	bgt.n	8003e50 <_printf_i+0x1f8>
 8003e6e:	e7e9      	b.n	8003e44 <_printf_i+0x1ec>
 8003e70:	2500      	movs	r5, #0
 8003e72:	e7f7      	b.n	8003e64 <_printf_i+0x20c>
 8003e74:	08004b15 	.word	0x08004b15
 8003e78:	08004b26 	.word	0x08004b26

08003e7c <__swbuf_r>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	0005      	movs	r5, r0
 8003e80:	000e      	movs	r6, r1
 8003e82:	0014      	movs	r4, r2
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d004      	beq.n	8003e92 <__swbuf_r+0x16>
 8003e88:	6983      	ldr	r3, [r0, #24]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <__swbuf_r+0x16>
 8003e8e:	f000 f9f9 	bl	8004284 <__sinit>
 8003e92:	4b22      	ldr	r3, [pc, #136]	; (8003f1c <__swbuf_r+0xa0>)
 8003e94:	429c      	cmp	r4, r3
 8003e96:	d12e      	bne.n	8003ef6 <__swbuf_r+0x7a>
 8003e98:	686c      	ldr	r4, [r5, #4]
 8003e9a:	69a3      	ldr	r3, [r4, #24]
 8003e9c:	60a3      	str	r3, [r4, #8]
 8003e9e:	89a3      	ldrh	r3, [r4, #12]
 8003ea0:	071b      	lsls	r3, r3, #28
 8003ea2:	d532      	bpl.n	8003f0a <__swbuf_r+0x8e>
 8003ea4:	6923      	ldr	r3, [r4, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d02f      	beq.n	8003f0a <__swbuf_r+0x8e>
 8003eaa:	6823      	ldr	r3, [r4, #0]
 8003eac:	6922      	ldr	r2, [r4, #16]
 8003eae:	b2f7      	uxtb	r7, r6
 8003eb0:	1a98      	subs	r0, r3, r2
 8003eb2:	6963      	ldr	r3, [r4, #20]
 8003eb4:	b2f6      	uxtb	r6, r6
 8003eb6:	4283      	cmp	r3, r0
 8003eb8:	dc05      	bgt.n	8003ec6 <__swbuf_r+0x4a>
 8003eba:	0021      	movs	r1, r4
 8003ebc:	0028      	movs	r0, r5
 8003ebe:	f000 f93f 	bl	8004140 <_fflush_r>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d127      	bne.n	8003f16 <__swbuf_r+0x9a>
 8003ec6:	68a3      	ldr	r3, [r4, #8]
 8003ec8:	3001      	adds	r0, #1
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	6823      	ldr	r3, [r4, #0]
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	6022      	str	r2, [r4, #0]
 8003ed4:	701f      	strb	r7, [r3, #0]
 8003ed6:	6963      	ldr	r3, [r4, #20]
 8003ed8:	4283      	cmp	r3, r0
 8003eda:	d004      	beq.n	8003ee6 <__swbuf_r+0x6a>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	07db      	lsls	r3, r3, #31
 8003ee0:	d507      	bpl.n	8003ef2 <__swbuf_r+0x76>
 8003ee2:	2e0a      	cmp	r6, #10
 8003ee4:	d105      	bne.n	8003ef2 <__swbuf_r+0x76>
 8003ee6:	0021      	movs	r1, r4
 8003ee8:	0028      	movs	r0, r5
 8003eea:	f000 f929 	bl	8004140 <_fflush_r>
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d111      	bne.n	8003f16 <__swbuf_r+0x9a>
 8003ef2:	0030      	movs	r0, r6
 8003ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef6:	4b0a      	ldr	r3, [pc, #40]	; (8003f20 <__swbuf_r+0xa4>)
 8003ef8:	429c      	cmp	r4, r3
 8003efa:	d101      	bne.n	8003f00 <__swbuf_r+0x84>
 8003efc:	68ac      	ldr	r4, [r5, #8]
 8003efe:	e7cc      	b.n	8003e9a <__swbuf_r+0x1e>
 8003f00:	4b08      	ldr	r3, [pc, #32]	; (8003f24 <__swbuf_r+0xa8>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	d1c9      	bne.n	8003e9a <__swbuf_r+0x1e>
 8003f06:	68ec      	ldr	r4, [r5, #12]
 8003f08:	e7c7      	b.n	8003e9a <__swbuf_r+0x1e>
 8003f0a:	0021      	movs	r1, r4
 8003f0c:	0028      	movs	r0, r5
 8003f0e:	f000 f80b 	bl	8003f28 <__swsetup_r>
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0c9      	beq.n	8003eaa <__swbuf_r+0x2e>
 8003f16:	2601      	movs	r6, #1
 8003f18:	4276      	negs	r6, r6
 8003f1a:	e7ea      	b.n	8003ef2 <__swbuf_r+0x76>
 8003f1c:	08004b58 	.word	0x08004b58
 8003f20:	08004b78 	.word	0x08004b78
 8003f24:	08004b38 	.word	0x08004b38

08003f28 <__swsetup_r>:
 8003f28:	4b37      	ldr	r3, [pc, #220]	; (8004008 <__swsetup_r+0xe0>)
 8003f2a:	b570      	push	{r4, r5, r6, lr}
 8003f2c:	681d      	ldr	r5, [r3, #0]
 8003f2e:	0006      	movs	r6, r0
 8003f30:	000c      	movs	r4, r1
 8003f32:	2d00      	cmp	r5, #0
 8003f34:	d005      	beq.n	8003f42 <__swsetup_r+0x1a>
 8003f36:	69ab      	ldr	r3, [r5, #24]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <__swsetup_r+0x1a>
 8003f3c:	0028      	movs	r0, r5
 8003f3e:	f000 f9a1 	bl	8004284 <__sinit>
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <__swsetup_r+0xe4>)
 8003f44:	429c      	cmp	r4, r3
 8003f46:	d10f      	bne.n	8003f68 <__swsetup_r+0x40>
 8003f48:	686c      	ldr	r4, [r5, #4]
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	5ee2      	ldrsh	r2, [r4, r3]
 8003f4e:	b293      	uxth	r3, r2
 8003f50:	0711      	lsls	r1, r2, #28
 8003f52:	d42d      	bmi.n	8003fb0 <__swsetup_r+0x88>
 8003f54:	06d9      	lsls	r1, r3, #27
 8003f56:	d411      	bmi.n	8003f7c <__swsetup_r+0x54>
 8003f58:	2309      	movs	r3, #9
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	6033      	str	r3, [r6, #0]
 8003f5e:	3337      	adds	r3, #55	; 0x37
 8003f60:	4313      	orrs	r3, r2
 8003f62:	81a3      	strh	r3, [r4, #12]
 8003f64:	4240      	negs	r0, r0
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	4b29      	ldr	r3, [pc, #164]	; (8004010 <__swsetup_r+0xe8>)
 8003f6a:	429c      	cmp	r4, r3
 8003f6c:	d101      	bne.n	8003f72 <__swsetup_r+0x4a>
 8003f6e:	68ac      	ldr	r4, [r5, #8]
 8003f70:	e7eb      	b.n	8003f4a <__swsetup_r+0x22>
 8003f72:	4b28      	ldr	r3, [pc, #160]	; (8004014 <__swsetup_r+0xec>)
 8003f74:	429c      	cmp	r4, r3
 8003f76:	d1e8      	bne.n	8003f4a <__swsetup_r+0x22>
 8003f78:	68ec      	ldr	r4, [r5, #12]
 8003f7a:	e7e6      	b.n	8003f4a <__swsetup_r+0x22>
 8003f7c:	075b      	lsls	r3, r3, #29
 8003f7e:	d513      	bpl.n	8003fa8 <__swsetup_r+0x80>
 8003f80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d008      	beq.n	8003f98 <__swsetup_r+0x70>
 8003f86:	0023      	movs	r3, r4
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	d002      	beq.n	8003f94 <__swsetup_r+0x6c>
 8003f8e:	0030      	movs	r0, r6
 8003f90:	f000 fa94 	bl	80044bc <_free_r>
 8003f94:	2300      	movs	r3, #0
 8003f96:	6363      	str	r3, [r4, #52]	; 0x34
 8003f98:	2224      	movs	r2, #36	; 0x24
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	2308      	movs	r3, #8
 8003faa:	89a2      	ldrh	r2, [r4, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <__swsetup_r+0xa6>
 8003fb6:	21a0      	movs	r1, #160	; 0xa0
 8003fb8:	2280      	movs	r2, #128	; 0x80
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	0089      	lsls	r1, r1, #2
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	400b      	ands	r3, r1
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <__swsetup_r+0xa6>
 8003fc6:	0021      	movs	r1, r4
 8003fc8:	0030      	movs	r0, r6
 8003fca:	f000 fa27 	bl	800441c <__smakebuf_r>
 8003fce:	220c      	movs	r2, #12
 8003fd0:	5ea3      	ldrsh	r3, [r4, r2]
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	001a      	movs	r2, r3
 8003fd6:	b299      	uxth	r1, r3
 8003fd8:	4002      	ands	r2, r0
 8003fda:	4203      	tst	r3, r0
 8003fdc:	d00f      	beq.n	8003ffe <__swsetup_r+0xd6>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	60a2      	str	r2, [r4, #8]
 8003fe2:	6962      	ldr	r2, [r4, #20]
 8003fe4:	4252      	negs	r2, r2
 8003fe6:	61a2      	str	r2, [r4, #24]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	6922      	ldr	r2, [r4, #16]
 8003fec:	4282      	cmp	r2, r0
 8003fee:	d1ba      	bne.n	8003f66 <__swsetup_r+0x3e>
 8003ff0:	060a      	lsls	r2, r1, #24
 8003ff2:	d5b8      	bpl.n	8003f66 <__swsetup_r+0x3e>
 8003ff4:	2240      	movs	r2, #64	; 0x40
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	81a3      	strh	r3, [r4, #12]
 8003ffa:	3801      	subs	r0, #1
 8003ffc:	e7b3      	b.n	8003f66 <__swsetup_r+0x3e>
 8003ffe:	0788      	lsls	r0, r1, #30
 8004000:	d400      	bmi.n	8004004 <__swsetup_r+0xdc>
 8004002:	6962      	ldr	r2, [r4, #20]
 8004004:	60a2      	str	r2, [r4, #8]
 8004006:	e7ef      	b.n	8003fe8 <__swsetup_r+0xc0>
 8004008:	200000c4 	.word	0x200000c4
 800400c:	08004b58 	.word	0x08004b58
 8004010:	08004b78 	.word	0x08004b78
 8004014:	08004b38 	.word	0x08004b38

08004018 <abort>:
 8004018:	2006      	movs	r0, #6
 800401a:	b510      	push	{r4, lr}
 800401c:	f000 fb6c 	bl	80046f8 <raise>
 8004020:	2001      	movs	r0, #1
 8004022:	f7fd f8da 	bl	80011da <_exit>
	...

08004028 <__sflush_r>:
 8004028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800402a:	898b      	ldrh	r3, [r1, #12]
 800402c:	0005      	movs	r5, r0
 800402e:	000c      	movs	r4, r1
 8004030:	071a      	lsls	r2, r3, #28
 8004032:	d45f      	bmi.n	80040f4 <__sflush_r+0xcc>
 8004034:	684a      	ldr	r2, [r1, #4]
 8004036:	2a00      	cmp	r2, #0
 8004038:	dc04      	bgt.n	8004044 <__sflush_r+0x1c>
 800403a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800403c:	2a00      	cmp	r2, #0
 800403e:	dc01      	bgt.n	8004044 <__sflush_r+0x1c>
 8004040:	2000      	movs	r0, #0
 8004042:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004044:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004046:	2f00      	cmp	r7, #0
 8004048:	d0fa      	beq.n	8004040 <__sflush_r+0x18>
 800404a:	2200      	movs	r2, #0
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	682e      	ldr	r6, [r5, #0]
 8004050:	602a      	str	r2, [r5, #0]
 8004052:	001a      	movs	r2, r3
 8004054:	0149      	lsls	r1, r1, #5
 8004056:	400a      	ands	r2, r1
 8004058:	420b      	tst	r3, r1
 800405a:	d034      	beq.n	80040c6 <__sflush_r+0x9e>
 800405c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	075b      	lsls	r3, r3, #29
 8004062:	d506      	bpl.n	8004072 <__sflush_r+0x4a>
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	1ac0      	subs	r0, r0, r3
 8004068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <__sflush_r+0x4a>
 800406e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004070:	1ac0      	subs	r0, r0, r3
 8004072:	0002      	movs	r2, r0
 8004074:	6a21      	ldr	r1, [r4, #32]
 8004076:	2300      	movs	r3, #0
 8004078:	0028      	movs	r0, r5
 800407a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800407c:	47b8      	blx	r7
 800407e:	89a1      	ldrh	r1, [r4, #12]
 8004080:	1c43      	adds	r3, r0, #1
 8004082:	d106      	bne.n	8004092 <__sflush_r+0x6a>
 8004084:	682b      	ldr	r3, [r5, #0]
 8004086:	2b1d      	cmp	r3, #29
 8004088:	d831      	bhi.n	80040ee <__sflush_r+0xc6>
 800408a:	4a2c      	ldr	r2, [pc, #176]	; (800413c <__sflush_r+0x114>)
 800408c:	40da      	lsrs	r2, r3
 800408e:	07d3      	lsls	r3, r2, #31
 8004090:	d52d      	bpl.n	80040ee <__sflush_r+0xc6>
 8004092:	2300      	movs	r3, #0
 8004094:	6063      	str	r3, [r4, #4]
 8004096:	6923      	ldr	r3, [r4, #16]
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	04cb      	lsls	r3, r1, #19
 800409c:	d505      	bpl.n	80040aa <__sflush_r+0x82>
 800409e:	1c43      	adds	r3, r0, #1
 80040a0:	d102      	bne.n	80040a8 <__sflush_r+0x80>
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d100      	bne.n	80040aa <__sflush_r+0x82>
 80040a8:	6560      	str	r0, [r4, #84]	; 0x54
 80040aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ac:	602e      	str	r6, [r5, #0]
 80040ae:	2900      	cmp	r1, #0
 80040b0:	d0c6      	beq.n	8004040 <__sflush_r+0x18>
 80040b2:	0023      	movs	r3, r4
 80040b4:	3344      	adds	r3, #68	; 0x44
 80040b6:	4299      	cmp	r1, r3
 80040b8:	d002      	beq.n	80040c0 <__sflush_r+0x98>
 80040ba:	0028      	movs	r0, r5
 80040bc:	f000 f9fe 	bl	80044bc <_free_r>
 80040c0:	2000      	movs	r0, #0
 80040c2:	6360      	str	r0, [r4, #52]	; 0x34
 80040c4:	e7bd      	b.n	8004042 <__sflush_r+0x1a>
 80040c6:	2301      	movs	r3, #1
 80040c8:	0028      	movs	r0, r5
 80040ca:	6a21      	ldr	r1, [r4, #32]
 80040cc:	47b8      	blx	r7
 80040ce:	1c43      	adds	r3, r0, #1
 80040d0:	d1c5      	bne.n	800405e <__sflush_r+0x36>
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0c2      	beq.n	800405e <__sflush_r+0x36>
 80040d8:	2b1d      	cmp	r3, #29
 80040da:	d001      	beq.n	80040e0 <__sflush_r+0xb8>
 80040dc:	2b16      	cmp	r3, #22
 80040de:	d101      	bne.n	80040e4 <__sflush_r+0xbc>
 80040e0:	602e      	str	r6, [r5, #0]
 80040e2:	e7ad      	b.n	8004040 <__sflush_r+0x18>
 80040e4:	2340      	movs	r3, #64	; 0x40
 80040e6:	89a2      	ldrh	r2, [r4, #12]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	81a3      	strh	r3, [r4, #12]
 80040ec:	e7a9      	b.n	8004042 <__sflush_r+0x1a>
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	430b      	orrs	r3, r1
 80040f2:	e7fa      	b.n	80040ea <__sflush_r+0xc2>
 80040f4:	690f      	ldr	r7, [r1, #16]
 80040f6:	2f00      	cmp	r7, #0
 80040f8:	d0a2      	beq.n	8004040 <__sflush_r+0x18>
 80040fa:	680a      	ldr	r2, [r1, #0]
 80040fc:	600f      	str	r7, [r1, #0]
 80040fe:	1bd2      	subs	r2, r2, r7
 8004100:	9201      	str	r2, [sp, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	079b      	lsls	r3, r3, #30
 8004106:	d100      	bne.n	800410a <__sflush_r+0xe2>
 8004108:	694a      	ldr	r2, [r1, #20]
 800410a:	60a2      	str	r2, [r4, #8]
 800410c:	9b01      	ldr	r3, [sp, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	dc00      	bgt.n	8004114 <__sflush_r+0xec>
 8004112:	e795      	b.n	8004040 <__sflush_r+0x18>
 8004114:	003a      	movs	r2, r7
 8004116:	0028      	movs	r0, r5
 8004118:	9b01      	ldr	r3, [sp, #4]
 800411a:	6a21      	ldr	r1, [r4, #32]
 800411c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800411e:	47b0      	blx	r6
 8004120:	2800      	cmp	r0, #0
 8004122:	dc06      	bgt.n	8004132 <__sflush_r+0x10a>
 8004124:	2340      	movs	r3, #64	; 0x40
 8004126:	2001      	movs	r0, #1
 8004128:	89a2      	ldrh	r2, [r4, #12]
 800412a:	4240      	negs	r0, r0
 800412c:	4313      	orrs	r3, r2
 800412e:	81a3      	strh	r3, [r4, #12]
 8004130:	e787      	b.n	8004042 <__sflush_r+0x1a>
 8004132:	9b01      	ldr	r3, [sp, #4]
 8004134:	183f      	adds	r7, r7, r0
 8004136:	1a1b      	subs	r3, r3, r0
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	e7e7      	b.n	800410c <__sflush_r+0xe4>
 800413c:	20400001 	.word	0x20400001

08004140 <_fflush_r>:
 8004140:	690b      	ldr	r3, [r1, #16]
 8004142:	b570      	push	{r4, r5, r6, lr}
 8004144:	0005      	movs	r5, r0
 8004146:	000c      	movs	r4, r1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <_fflush_r+0x12>
 800414c:	2500      	movs	r5, #0
 800414e:	0028      	movs	r0, r5
 8004150:	bd70      	pop	{r4, r5, r6, pc}
 8004152:	2800      	cmp	r0, #0
 8004154:	d004      	beq.n	8004160 <_fflush_r+0x20>
 8004156:	6983      	ldr	r3, [r0, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <_fflush_r+0x20>
 800415c:	f000 f892 	bl	8004284 <__sinit>
 8004160:	4b14      	ldr	r3, [pc, #80]	; (80041b4 <_fflush_r+0x74>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d11b      	bne.n	800419e <_fflush_r+0x5e>
 8004166:	686c      	ldr	r4, [r5, #4]
 8004168:	220c      	movs	r2, #12
 800416a:	5ea3      	ldrsh	r3, [r4, r2]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ed      	beq.n	800414c <_fflush_r+0xc>
 8004170:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004172:	07d2      	lsls	r2, r2, #31
 8004174:	d404      	bmi.n	8004180 <_fflush_r+0x40>
 8004176:	059b      	lsls	r3, r3, #22
 8004178:	d402      	bmi.n	8004180 <_fflush_r+0x40>
 800417a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800417c:	f000 f923 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004180:	0028      	movs	r0, r5
 8004182:	0021      	movs	r1, r4
 8004184:	f7ff ff50 	bl	8004028 <__sflush_r>
 8004188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800418a:	0005      	movs	r5, r0
 800418c:	07db      	lsls	r3, r3, #31
 800418e:	d4de      	bmi.n	800414e <_fflush_r+0xe>
 8004190:	89a3      	ldrh	r3, [r4, #12]
 8004192:	059b      	lsls	r3, r3, #22
 8004194:	d4db      	bmi.n	800414e <_fflush_r+0xe>
 8004196:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004198:	f000 f916 	bl	80043c8 <__retarget_lock_release_recursive>
 800419c:	e7d7      	b.n	800414e <_fflush_r+0xe>
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <_fflush_r+0x78>)
 80041a0:	429c      	cmp	r4, r3
 80041a2:	d101      	bne.n	80041a8 <_fflush_r+0x68>
 80041a4:	68ac      	ldr	r4, [r5, #8]
 80041a6:	e7df      	b.n	8004168 <_fflush_r+0x28>
 80041a8:	4b04      	ldr	r3, [pc, #16]	; (80041bc <_fflush_r+0x7c>)
 80041aa:	429c      	cmp	r4, r3
 80041ac:	d1dc      	bne.n	8004168 <_fflush_r+0x28>
 80041ae:	68ec      	ldr	r4, [r5, #12]
 80041b0:	e7da      	b.n	8004168 <_fflush_r+0x28>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	08004b58 	.word	0x08004b58
 80041b8:	08004b78 	.word	0x08004b78
 80041bc:	08004b38 	.word	0x08004b38

080041c0 <std>:
 80041c0:	2300      	movs	r3, #0
 80041c2:	b510      	push	{r4, lr}
 80041c4:	0004      	movs	r4, r0
 80041c6:	6003      	str	r3, [r0, #0]
 80041c8:	6043      	str	r3, [r0, #4]
 80041ca:	6083      	str	r3, [r0, #8]
 80041cc:	8181      	strh	r1, [r0, #12]
 80041ce:	6643      	str	r3, [r0, #100]	; 0x64
 80041d0:	0019      	movs	r1, r3
 80041d2:	81c2      	strh	r2, [r0, #14]
 80041d4:	6103      	str	r3, [r0, #16]
 80041d6:	6143      	str	r3, [r0, #20]
 80041d8:	6183      	str	r3, [r0, #24]
 80041da:	2208      	movs	r2, #8
 80041dc:	305c      	adds	r0, #92	; 0x5c
 80041de:	f7ff fb61 	bl	80038a4 <memset>
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <std+0x38>)
 80041e4:	6224      	str	r4, [r4, #32]
 80041e6:	6263      	str	r3, [r4, #36]	; 0x24
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <std+0x3c>)
 80041ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <std+0x40>)
 80041ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041f0:	4b04      	ldr	r3, [pc, #16]	; (8004204 <std+0x44>)
 80041f2:	6323      	str	r3, [r4, #48]	; 0x30
 80041f4:	bd10      	pop	{r4, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	08004739 	.word	0x08004739
 80041fc:	08004761 	.word	0x08004761
 8004200:	08004799 	.word	0x08004799
 8004204:	080047c5 	.word	0x080047c5

08004208 <_cleanup_r>:
 8004208:	b510      	push	{r4, lr}
 800420a:	4902      	ldr	r1, [pc, #8]	; (8004214 <_cleanup_r+0xc>)
 800420c:	f000 f8ba 	bl	8004384 <_fwalk_reent>
 8004210:	bd10      	pop	{r4, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	08004141 	.word	0x08004141

08004218 <__sfmoreglue>:
 8004218:	b570      	push	{r4, r5, r6, lr}
 800421a:	2568      	movs	r5, #104	; 0x68
 800421c:	1e4a      	subs	r2, r1, #1
 800421e:	4355      	muls	r5, r2
 8004220:	000e      	movs	r6, r1
 8004222:	0029      	movs	r1, r5
 8004224:	3174      	adds	r1, #116	; 0x74
 8004226:	f000 f9b5 	bl	8004594 <_malloc_r>
 800422a:	1e04      	subs	r4, r0, #0
 800422c:	d008      	beq.n	8004240 <__sfmoreglue+0x28>
 800422e:	2100      	movs	r1, #0
 8004230:	002a      	movs	r2, r5
 8004232:	6001      	str	r1, [r0, #0]
 8004234:	6046      	str	r6, [r0, #4]
 8004236:	300c      	adds	r0, #12
 8004238:	60a0      	str	r0, [r4, #8]
 800423a:	3268      	adds	r2, #104	; 0x68
 800423c:	f7ff fb32 	bl	80038a4 <memset>
 8004240:	0020      	movs	r0, r4
 8004242:	bd70      	pop	{r4, r5, r6, pc}

08004244 <__sfp_lock_acquire>:
 8004244:	b510      	push	{r4, lr}
 8004246:	4802      	ldr	r0, [pc, #8]	; (8004250 <__sfp_lock_acquire+0xc>)
 8004248:	f000 f8bd 	bl	80043c6 <__retarget_lock_acquire_recursive>
 800424c:	bd10      	pop	{r4, pc}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	20000235 	.word	0x20000235

08004254 <__sfp_lock_release>:
 8004254:	b510      	push	{r4, lr}
 8004256:	4802      	ldr	r0, [pc, #8]	; (8004260 <__sfp_lock_release+0xc>)
 8004258:	f000 f8b6 	bl	80043c8 <__retarget_lock_release_recursive>
 800425c:	bd10      	pop	{r4, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	20000235 	.word	0x20000235

08004264 <__sinit_lock_acquire>:
 8004264:	b510      	push	{r4, lr}
 8004266:	4802      	ldr	r0, [pc, #8]	; (8004270 <__sinit_lock_acquire+0xc>)
 8004268:	f000 f8ad 	bl	80043c6 <__retarget_lock_acquire_recursive>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	20000236 	.word	0x20000236

08004274 <__sinit_lock_release>:
 8004274:	b510      	push	{r4, lr}
 8004276:	4802      	ldr	r0, [pc, #8]	; (8004280 <__sinit_lock_release+0xc>)
 8004278:	f000 f8a6 	bl	80043c8 <__retarget_lock_release_recursive>
 800427c:	bd10      	pop	{r4, pc}
 800427e:	46c0      	nop			; (mov r8, r8)
 8004280:	20000236 	.word	0x20000236

08004284 <__sinit>:
 8004284:	b513      	push	{r0, r1, r4, lr}
 8004286:	0004      	movs	r4, r0
 8004288:	f7ff ffec 	bl	8004264 <__sinit_lock_acquire>
 800428c:	69a3      	ldr	r3, [r4, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <__sinit+0x14>
 8004292:	f7ff ffef 	bl	8004274 <__sinit_lock_release>
 8004296:	bd13      	pop	{r0, r1, r4, pc}
 8004298:	64a3      	str	r3, [r4, #72]	; 0x48
 800429a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800429c:	6523      	str	r3, [r4, #80]	; 0x50
 800429e:	4b13      	ldr	r3, [pc, #76]	; (80042ec <__sinit+0x68>)
 80042a0:	4a13      	ldr	r2, [pc, #76]	; (80042f0 <__sinit+0x6c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80042a6:	9301      	str	r3, [sp, #4]
 80042a8:	42a3      	cmp	r3, r4
 80042aa:	d101      	bne.n	80042b0 <__sinit+0x2c>
 80042ac:	2301      	movs	r3, #1
 80042ae:	61a3      	str	r3, [r4, #24]
 80042b0:	0020      	movs	r0, r4
 80042b2:	f000 f81f 	bl	80042f4 <__sfp>
 80042b6:	6060      	str	r0, [r4, #4]
 80042b8:	0020      	movs	r0, r4
 80042ba:	f000 f81b 	bl	80042f4 <__sfp>
 80042be:	60a0      	str	r0, [r4, #8]
 80042c0:	0020      	movs	r0, r4
 80042c2:	f000 f817 	bl	80042f4 <__sfp>
 80042c6:	2200      	movs	r2, #0
 80042c8:	2104      	movs	r1, #4
 80042ca:	60e0      	str	r0, [r4, #12]
 80042cc:	6860      	ldr	r0, [r4, #4]
 80042ce:	f7ff ff77 	bl	80041c0 <std>
 80042d2:	2201      	movs	r2, #1
 80042d4:	2109      	movs	r1, #9
 80042d6:	68a0      	ldr	r0, [r4, #8]
 80042d8:	f7ff ff72 	bl	80041c0 <std>
 80042dc:	2202      	movs	r2, #2
 80042de:	2112      	movs	r1, #18
 80042e0:	68e0      	ldr	r0, [r4, #12]
 80042e2:	f7ff ff6d 	bl	80041c0 <std>
 80042e6:	2301      	movs	r3, #1
 80042e8:	61a3      	str	r3, [r4, #24]
 80042ea:	e7d2      	b.n	8004292 <__sinit+0xe>
 80042ec:	08004b00 	.word	0x08004b00
 80042f0:	08004209 	.word	0x08004209

080042f4 <__sfp>:
 80042f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f6:	0007      	movs	r7, r0
 80042f8:	f7ff ffa4 	bl	8004244 <__sfp_lock_acquire>
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <__sfp+0x88>)
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	69b3      	ldr	r3, [r6, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d102      	bne.n	800430c <__sfp+0x18>
 8004306:	0030      	movs	r0, r6
 8004308:	f7ff ffbc 	bl	8004284 <__sinit>
 800430c:	3648      	adds	r6, #72	; 0x48
 800430e:	68b4      	ldr	r4, [r6, #8]
 8004310:	6873      	ldr	r3, [r6, #4]
 8004312:	3b01      	subs	r3, #1
 8004314:	d504      	bpl.n	8004320 <__sfp+0x2c>
 8004316:	6833      	ldr	r3, [r6, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d022      	beq.n	8004362 <__sfp+0x6e>
 800431c:	6836      	ldr	r6, [r6, #0]
 800431e:	e7f6      	b.n	800430e <__sfp+0x1a>
 8004320:	220c      	movs	r2, #12
 8004322:	5ea5      	ldrsh	r5, [r4, r2]
 8004324:	2d00      	cmp	r5, #0
 8004326:	d11a      	bne.n	800435e <__sfp+0x6a>
 8004328:	0020      	movs	r0, r4
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <__sfp+0x8c>)
 800432c:	3058      	adds	r0, #88	; 0x58
 800432e:	60e3      	str	r3, [r4, #12]
 8004330:	6665      	str	r5, [r4, #100]	; 0x64
 8004332:	f000 f847 	bl	80043c4 <__retarget_lock_init_recursive>
 8004336:	f7ff ff8d 	bl	8004254 <__sfp_lock_release>
 800433a:	0020      	movs	r0, r4
 800433c:	2208      	movs	r2, #8
 800433e:	0029      	movs	r1, r5
 8004340:	6025      	str	r5, [r4, #0]
 8004342:	60a5      	str	r5, [r4, #8]
 8004344:	6065      	str	r5, [r4, #4]
 8004346:	6125      	str	r5, [r4, #16]
 8004348:	6165      	str	r5, [r4, #20]
 800434a:	61a5      	str	r5, [r4, #24]
 800434c:	305c      	adds	r0, #92	; 0x5c
 800434e:	f7ff faa9 	bl	80038a4 <memset>
 8004352:	6365      	str	r5, [r4, #52]	; 0x34
 8004354:	63a5      	str	r5, [r4, #56]	; 0x38
 8004356:	64a5      	str	r5, [r4, #72]	; 0x48
 8004358:	64e5      	str	r5, [r4, #76]	; 0x4c
 800435a:	0020      	movs	r0, r4
 800435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800435e:	3468      	adds	r4, #104	; 0x68
 8004360:	e7d7      	b.n	8004312 <__sfp+0x1e>
 8004362:	2104      	movs	r1, #4
 8004364:	0038      	movs	r0, r7
 8004366:	f7ff ff57 	bl	8004218 <__sfmoreglue>
 800436a:	1e04      	subs	r4, r0, #0
 800436c:	6030      	str	r0, [r6, #0]
 800436e:	d1d5      	bne.n	800431c <__sfp+0x28>
 8004370:	f7ff ff70 	bl	8004254 <__sfp_lock_release>
 8004374:	230c      	movs	r3, #12
 8004376:	603b      	str	r3, [r7, #0]
 8004378:	e7ef      	b.n	800435a <__sfp+0x66>
 800437a:	46c0      	nop			; (mov r8, r8)
 800437c:	08004b00 	.word	0x08004b00
 8004380:	ffff0001 	.word	0xffff0001

08004384 <_fwalk_reent>:
 8004384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004386:	0004      	movs	r4, r0
 8004388:	0006      	movs	r6, r0
 800438a:	2700      	movs	r7, #0
 800438c:	9101      	str	r1, [sp, #4]
 800438e:	3448      	adds	r4, #72	; 0x48
 8004390:	6863      	ldr	r3, [r4, #4]
 8004392:	68a5      	ldr	r5, [r4, #8]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	9b00      	ldr	r3, [sp, #0]
 8004398:	3b01      	subs	r3, #1
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	d504      	bpl.n	80043a8 <_fwalk_reent+0x24>
 800439e:	6824      	ldr	r4, [r4, #0]
 80043a0:	2c00      	cmp	r4, #0
 80043a2:	d1f5      	bne.n	8004390 <_fwalk_reent+0xc>
 80043a4:	0038      	movs	r0, r7
 80043a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043a8:	89ab      	ldrh	r3, [r5, #12]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d908      	bls.n	80043c0 <_fwalk_reent+0x3c>
 80043ae:	220e      	movs	r2, #14
 80043b0:	5eab      	ldrsh	r3, [r5, r2]
 80043b2:	3301      	adds	r3, #1
 80043b4:	d004      	beq.n	80043c0 <_fwalk_reent+0x3c>
 80043b6:	0029      	movs	r1, r5
 80043b8:	0030      	movs	r0, r6
 80043ba:	9b01      	ldr	r3, [sp, #4]
 80043bc:	4798      	blx	r3
 80043be:	4307      	orrs	r7, r0
 80043c0:	3568      	adds	r5, #104	; 0x68
 80043c2:	e7e8      	b.n	8004396 <_fwalk_reent+0x12>

080043c4 <__retarget_lock_init_recursive>:
 80043c4:	4770      	bx	lr

080043c6 <__retarget_lock_acquire_recursive>:
 80043c6:	4770      	bx	lr

080043c8 <__retarget_lock_release_recursive>:
 80043c8:	4770      	bx	lr
	...

080043cc <__swhatbuf_r>:
 80043cc:	b570      	push	{r4, r5, r6, lr}
 80043ce:	000e      	movs	r6, r1
 80043d0:	001d      	movs	r5, r3
 80043d2:	230e      	movs	r3, #14
 80043d4:	5ec9      	ldrsh	r1, [r1, r3]
 80043d6:	0014      	movs	r4, r2
 80043d8:	b096      	sub	sp, #88	; 0x58
 80043da:	2900      	cmp	r1, #0
 80043dc:	da08      	bge.n	80043f0 <__swhatbuf_r+0x24>
 80043de:	220c      	movs	r2, #12
 80043e0:	5eb3      	ldrsh	r3, [r6, r2]
 80043e2:	2200      	movs	r2, #0
 80043e4:	602a      	str	r2, [r5, #0]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	d411      	bmi.n	800440e <__swhatbuf_r+0x42>
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	e00f      	b.n	8004410 <__swhatbuf_r+0x44>
 80043f0:	466a      	mov	r2, sp
 80043f2:	f000 fa13 	bl	800481c <_fstat_r>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	dbf1      	blt.n	80043de <__swhatbuf_r+0x12>
 80043fa:	23f0      	movs	r3, #240	; 0xf0
 80043fc:	9901      	ldr	r1, [sp, #4]
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	4019      	ands	r1, r3
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <__swhatbuf_r+0x4c>)
 8004404:	18c9      	adds	r1, r1, r3
 8004406:	424b      	negs	r3, r1
 8004408:	4159      	adcs	r1, r3
 800440a:	6029      	str	r1, [r5, #0]
 800440c:	e7ed      	b.n	80043ea <__swhatbuf_r+0x1e>
 800440e:	2340      	movs	r3, #64	; 0x40
 8004410:	2000      	movs	r0, #0
 8004412:	6023      	str	r3, [r4, #0]
 8004414:	b016      	add	sp, #88	; 0x58
 8004416:	bd70      	pop	{r4, r5, r6, pc}
 8004418:	ffffe000 	.word	0xffffe000

0800441c <__smakebuf_r>:
 800441c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800441e:	2602      	movs	r6, #2
 8004420:	898b      	ldrh	r3, [r1, #12]
 8004422:	0005      	movs	r5, r0
 8004424:	000c      	movs	r4, r1
 8004426:	4233      	tst	r3, r6
 8004428:	d006      	beq.n	8004438 <__smakebuf_r+0x1c>
 800442a:	0023      	movs	r3, r4
 800442c:	3347      	adds	r3, #71	; 0x47
 800442e:	6023      	str	r3, [r4, #0]
 8004430:	6123      	str	r3, [r4, #16]
 8004432:	2301      	movs	r3, #1
 8004434:	6163      	str	r3, [r4, #20]
 8004436:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004438:	466a      	mov	r2, sp
 800443a:	ab01      	add	r3, sp, #4
 800443c:	f7ff ffc6 	bl	80043cc <__swhatbuf_r>
 8004440:	9900      	ldr	r1, [sp, #0]
 8004442:	0007      	movs	r7, r0
 8004444:	0028      	movs	r0, r5
 8004446:	f000 f8a5 	bl	8004594 <_malloc_r>
 800444a:	2800      	cmp	r0, #0
 800444c:	d108      	bne.n	8004460 <__smakebuf_r+0x44>
 800444e:	220c      	movs	r2, #12
 8004450:	5ea3      	ldrsh	r3, [r4, r2]
 8004452:	059a      	lsls	r2, r3, #22
 8004454:	d4ef      	bmi.n	8004436 <__smakebuf_r+0x1a>
 8004456:	2203      	movs	r2, #3
 8004458:	4393      	bics	r3, r2
 800445a:	431e      	orrs	r6, r3
 800445c:	81a6      	strh	r6, [r4, #12]
 800445e:	e7e4      	b.n	800442a <__smakebuf_r+0xe>
 8004460:	4b0f      	ldr	r3, [pc, #60]	; (80044a0 <__smakebuf_r+0x84>)
 8004462:	62ab      	str	r3, [r5, #40]	; 0x28
 8004464:	2380      	movs	r3, #128	; 0x80
 8004466:	89a2      	ldrh	r2, [r4, #12]
 8004468:	6020      	str	r0, [r4, #0]
 800446a:	4313      	orrs	r3, r2
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	9b00      	ldr	r3, [sp, #0]
 8004470:	6120      	str	r0, [r4, #16]
 8004472:	6163      	str	r3, [r4, #20]
 8004474:	9b01      	ldr	r3, [sp, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00d      	beq.n	8004496 <__smakebuf_r+0x7a>
 800447a:	0028      	movs	r0, r5
 800447c:	230e      	movs	r3, #14
 800447e:	5ee1      	ldrsh	r1, [r4, r3]
 8004480:	f000 f9de 	bl	8004840 <_isatty_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	d006      	beq.n	8004496 <__smakebuf_r+0x7a>
 8004488:	2203      	movs	r2, #3
 800448a:	89a3      	ldrh	r3, [r4, #12]
 800448c:	4393      	bics	r3, r2
 800448e:	001a      	movs	r2, r3
 8004490:	2301      	movs	r3, #1
 8004492:	4313      	orrs	r3, r2
 8004494:	81a3      	strh	r3, [r4, #12]
 8004496:	89a0      	ldrh	r0, [r4, #12]
 8004498:	4307      	orrs	r7, r0
 800449a:	81a7      	strh	r7, [r4, #12]
 800449c:	e7cb      	b.n	8004436 <__smakebuf_r+0x1a>
 800449e:	46c0      	nop			; (mov r8, r8)
 80044a0:	08004209 	.word	0x08004209

080044a4 <memchr>:
 80044a4:	b2c9      	uxtb	r1, r1
 80044a6:	1882      	adds	r2, r0, r2
 80044a8:	4290      	cmp	r0, r2
 80044aa:	d101      	bne.n	80044b0 <memchr+0xc>
 80044ac:	2000      	movs	r0, #0
 80044ae:	4770      	bx	lr
 80044b0:	7803      	ldrb	r3, [r0, #0]
 80044b2:	428b      	cmp	r3, r1
 80044b4:	d0fb      	beq.n	80044ae <memchr+0xa>
 80044b6:	3001      	adds	r0, #1
 80044b8:	e7f6      	b.n	80044a8 <memchr+0x4>
	...

080044bc <_free_r>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	0005      	movs	r5, r0
 80044c0:	2900      	cmp	r1, #0
 80044c2:	d010      	beq.n	80044e6 <_free_r+0x2a>
 80044c4:	1f0c      	subs	r4, r1, #4
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	da00      	bge.n	80044ce <_free_r+0x12>
 80044cc:	18e4      	adds	r4, r4, r3
 80044ce:	0028      	movs	r0, r5
 80044d0:	f000 f9dc 	bl	800488c <__malloc_lock>
 80044d4:	4a1d      	ldr	r2, [pc, #116]	; (800454c <_free_r+0x90>)
 80044d6:	6813      	ldr	r3, [r2, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <_free_r+0x2c>
 80044dc:	6063      	str	r3, [r4, #4]
 80044de:	6014      	str	r4, [r2, #0]
 80044e0:	0028      	movs	r0, r5
 80044e2:	f000 f9db 	bl	800489c <__malloc_unlock>
 80044e6:	bd70      	pop	{r4, r5, r6, pc}
 80044e8:	42a3      	cmp	r3, r4
 80044ea:	d908      	bls.n	80044fe <_free_r+0x42>
 80044ec:	6821      	ldr	r1, [r4, #0]
 80044ee:	1860      	adds	r0, r4, r1
 80044f0:	4283      	cmp	r3, r0
 80044f2:	d1f3      	bne.n	80044dc <_free_r+0x20>
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	1841      	adds	r1, r0, r1
 80044fa:	6021      	str	r1, [r4, #0]
 80044fc:	e7ee      	b.n	80044dc <_free_r+0x20>
 80044fe:	001a      	movs	r2, r3
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <_free_r+0x4e>
 8004506:	42a3      	cmp	r3, r4
 8004508:	d9f9      	bls.n	80044fe <_free_r+0x42>
 800450a:	6811      	ldr	r1, [r2, #0]
 800450c:	1850      	adds	r0, r2, r1
 800450e:	42a0      	cmp	r0, r4
 8004510:	d10b      	bne.n	800452a <_free_r+0x6e>
 8004512:	6820      	ldr	r0, [r4, #0]
 8004514:	1809      	adds	r1, r1, r0
 8004516:	1850      	adds	r0, r2, r1
 8004518:	6011      	str	r1, [r2, #0]
 800451a:	4283      	cmp	r3, r0
 800451c:	d1e0      	bne.n	80044e0 <_free_r+0x24>
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	1841      	adds	r1, r0, r1
 8004524:	6011      	str	r1, [r2, #0]
 8004526:	6053      	str	r3, [r2, #4]
 8004528:	e7da      	b.n	80044e0 <_free_r+0x24>
 800452a:	42a0      	cmp	r0, r4
 800452c:	d902      	bls.n	8004534 <_free_r+0x78>
 800452e:	230c      	movs	r3, #12
 8004530:	602b      	str	r3, [r5, #0]
 8004532:	e7d5      	b.n	80044e0 <_free_r+0x24>
 8004534:	6821      	ldr	r1, [r4, #0]
 8004536:	1860      	adds	r0, r4, r1
 8004538:	4283      	cmp	r3, r0
 800453a:	d103      	bne.n	8004544 <_free_r+0x88>
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	1841      	adds	r1, r0, r1
 8004542:	6021      	str	r1, [r4, #0]
 8004544:	6063      	str	r3, [r4, #4]
 8004546:	6054      	str	r4, [r2, #4]
 8004548:	e7ca      	b.n	80044e0 <_free_r+0x24>
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	20000238 	.word	0x20000238

08004550 <sbrk_aligned>:
 8004550:	b570      	push	{r4, r5, r6, lr}
 8004552:	4e0f      	ldr	r6, [pc, #60]	; (8004590 <sbrk_aligned+0x40>)
 8004554:	000d      	movs	r5, r1
 8004556:	6831      	ldr	r1, [r6, #0]
 8004558:	0004      	movs	r4, r0
 800455a:	2900      	cmp	r1, #0
 800455c:	d102      	bne.n	8004564 <sbrk_aligned+0x14>
 800455e:	f000 f88f 	bl	8004680 <_sbrk_r>
 8004562:	6030      	str	r0, [r6, #0]
 8004564:	0029      	movs	r1, r5
 8004566:	0020      	movs	r0, r4
 8004568:	f000 f88a 	bl	8004680 <_sbrk_r>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	d00a      	beq.n	8004586 <sbrk_aligned+0x36>
 8004570:	2303      	movs	r3, #3
 8004572:	1cc5      	adds	r5, r0, #3
 8004574:	439d      	bics	r5, r3
 8004576:	42a8      	cmp	r0, r5
 8004578:	d007      	beq.n	800458a <sbrk_aligned+0x3a>
 800457a:	1a29      	subs	r1, r5, r0
 800457c:	0020      	movs	r0, r4
 800457e:	f000 f87f 	bl	8004680 <_sbrk_r>
 8004582:	1c43      	adds	r3, r0, #1
 8004584:	d101      	bne.n	800458a <sbrk_aligned+0x3a>
 8004586:	2501      	movs	r5, #1
 8004588:	426d      	negs	r5, r5
 800458a:	0028      	movs	r0, r5
 800458c:	bd70      	pop	{r4, r5, r6, pc}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	2000023c 	.word	0x2000023c

08004594 <_malloc_r>:
 8004594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004596:	2203      	movs	r2, #3
 8004598:	1ccb      	adds	r3, r1, #3
 800459a:	4393      	bics	r3, r2
 800459c:	3308      	adds	r3, #8
 800459e:	0006      	movs	r6, r0
 80045a0:	001f      	movs	r7, r3
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d232      	bcs.n	800460c <_malloc_r+0x78>
 80045a6:	270c      	movs	r7, #12
 80045a8:	42b9      	cmp	r1, r7
 80045aa:	d831      	bhi.n	8004610 <_malloc_r+0x7c>
 80045ac:	0030      	movs	r0, r6
 80045ae:	f000 f96d 	bl	800488c <__malloc_lock>
 80045b2:	4d32      	ldr	r5, [pc, #200]	; (800467c <_malloc_r+0xe8>)
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	001c      	movs	r4, r3
 80045b8:	2c00      	cmp	r4, #0
 80045ba:	d12e      	bne.n	800461a <_malloc_r+0x86>
 80045bc:	0039      	movs	r1, r7
 80045be:	0030      	movs	r0, r6
 80045c0:	f7ff ffc6 	bl	8004550 <sbrk_aligned>
 80045c4:	0004      	movs	r4, r0
 80045c6:	1c43      	adds	r3, r0, #1
 80045c8:	d11e      	bne.n	8004608 <_malloc_r+0x74>
 80045ca:	682c      	ldr	r4, [r5, #0]
 80045cc:	0025      	movs	r5, r4
 80045ce:	2d00      	cmp	r5, #0
 80045d0:	d14a      	bne.n	8004668 <_malloc_r+0xd4>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	0029      	movs	r1, r5
 80045d6:	18e3      	adds	r3, r4, r3
 80045d8:	0030      	movs	r0, r6
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	f000 f850 	bl	8004680 <_sbrk_r>
 80045e0:	9b01      	ldr	r3, [sp, #4]
 80045e2:	4283      	cmp	r3, r0
 80045e4:	d143      	bne.n	800466e <_malloc_r+0xda>
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	3703      	adds	r7, #3
 80045ea:	1aff      	subs	r7, r7, r3
 80045ec:	2303      	movs	r3, #3
 80045ee:	439f      	bics	r7, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	2f0c      	cmp	r7, #12
 80045f4:	d200      	bcs.n	80045f8 <_malloc_r+0x64>
 80045f6:	270c      	movs	r7, #12
 80045f8:	0039      	movs	r1, r7
 80045fa:	0030      	movs	r0, r6
 80045fc:	f7ff ffa8 	bl	8004550 <sbrk_aligned>
 8004600:	1c43      	adds	r3, r0, #1
 8004602:	d034      	beq.n	800466e <_malloc_r+0xda>
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	19df      	adds	r7, r3, r7
 8004608:	6027      	str	r7, [r4, #0]
 800460a:	e013      	b.n	8004634 <_malloc_r+0xa0>
 800460c:	2b00      	cmp	r3, #0
 800460e:	dacb      	bge.n	80045a8 <_malloc_r+0x14>
 8004610:	230c      	movs	r3, #12
 8004612:	2500      	movs	r5, #0
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	0028      	movs	r0, r5
 8004618:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	1bd1      	subs	r1, r2, r7
 800461e:	d420      	bmi.n	8004662 <_malloc_r+0xce>
 8004620:	290b      	cmp	r1, #11
 8004622:	d917      	bls.n	8004654 <_malloc_r+0xc0>
 8004624:	19e2      	adds	r2, r4, r7
 8004626:	6027      	str	r7, [r4, #0]
 8004628:	42a3      	cmp	r3, r4
 800462a:	d111      	bne.n	8004650 <_malloc_r+0xbc>
 800462c:	602a      	str	r2, [r5, #0]
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	6011      	str	r1, [r2, #0]
 8004632:	6053      	str	r3, [r2, #4]
 8004634:	0030      	movs	r0, r6
 8004636:	0025      	movs	r5, r4
 8004638:	f000 f930 	bl	800489c <__malloc_unlock>
 800463c:	2207      	movs	r2, #7
 800463e:	350b      	adds	r5, #11
 8004640:	1d23      	adds	r3, r4, #4
 8004642:	4395      	bics	r5, r2
 8004644:	1aea      	subs	r2, r5, r3
 8004646:	429d      	cmp	r5, r3
 8004648:	d0e5      	beq.n	8004616 <_malloc_r+0x82>
 800464a:	1b5b      	subs	r3, r3, r5
 800464c:	50a3      	str	r3, [r4, r2]
 800464e:	e7e2      	b.n	8004616 <_malloc_r+0x82>
 8004650:	605a      	str	r2, [r3, #4]
 8004652:	e7ec      	b.n	800462e <_malloc_r+0x9a>
 8004654:	6862      	ldr	r2, [r4, #4]
 8004656:	42a3      	cmp	r3, r4
 8004658:	d101      	bne.n	800465e <_malloc_r+0xca>
 800465a:	602a      	str	r2, [r5, #0]
 800465c:	e7ea      	b.n	8004634 <_malloc_r+0xa0>
 800465e:	605a      	str	r2, [r3, #4]
 8004660:	e7e8      	b.n	8004634 <_malloc_r+0xa0>
 8004662:	0023      	movs	r3, r4
 8004664:	6864      	ldr	r4, [r4, #4]
 8004666:	e7a7      	b.n	80045b8 <_malloc_r+0x24>
 8004668:	002c      	movs	r4, r5
 800466a:	686d      	ldr	r5, [r5, #4]
 800466c:	e7af      	b.n	80045ce <_malloc_r+0x3a>
 800466e:	230c      	movs	r3, #12
 8004670:	0030      	movs	r0, r6
 8004672:	6033      	str	r3, [r6, #0]
 8004674:	f000 f912 	bl	800489c <__malloc_unlock>
 8004678:	e7cd      	b.n	8004616 <_malloc_r+0x82>
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	20000238 	.word	0x20000238

08004680 <_sbrk_r>:
 8004680:	2300      	movs	r3, #0
 8004682:	b570      	push	{r4, r5, r6, lr}
 8004684:	4d06      	ldr	r5, [pc, #24]	; (80046a0 <_sbrk_r+0x20>)
 8004686:	0004      	movs	r4, r0
 8004688:	0008      	movs	r0, r1
 800468a:	602b      	str	r3, [r5, #0]
 800468c:	f7fc fe16 	bl	80012bc <_sbrk>
 8004690:	1c43      	adds	r3, r0, #1
 8004692:	d103      	bne.n	800469c <_sbrk_r+0x1c>
 8004694:	682b      	ldr	r3, [r5, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d000      	beq.n	800469c <_sbrk_r+0x1c>
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	20000240 	.word	0x20000240

080046a4 <_raise_r>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	0004      	movs	r4, r0
 80046a8:	000d      	movs	r5, r1
 80046aa:	291f      	cmp	r1, #31
 80046ac:	d904      	bls.n	80046b8 <_raise_r+0x14>
 80046ae:	2316      	movs	r3, #22
 80046b0:	6003      	str	r3, [r0, #0]
 80046b2:	2001      	movs	r0, #1
 80046b4:	4240      	negs	r0, r0
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d004      	beq.n	80046c8 <_raise_r+0x24>
 80046be:	008a      	lsls	r2, r1, #2
 80046c0:	189b      	adds	r3, r3, r2
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	2a00      	cmp	r2, #0
 80046c6:	d108      	bne.n	80046da <_raise_r+0x36>
 80046c8:	0020      	movs	r0, r4
 80046ca:	f000 f831 	bl	8004730 <_getpid_r>
 80046ce:	002a      	movs	r2, r5
 80046d0:	0001      	movs	r1, r0
 80046d2:	0020      	movs	r0, r4
 80046d4:	f000 f81a 	bl	800470c <_kill_r>
 80046d8:	e7ed      	b.n	80046b6 <_raise_r+0x12>
 80046da:	2000      	movs	r0, #0
 80046dc:	2a01      	cmp	r2, #1
 80046de:	d0ea      	beq.n	80046b6 <_raise_r+0x12>
 80046e0:	1c51      	adds	r1, r2, #1
 80046e2:	d103      	bne.n	80046ec <_raise_r+0x48>
 80046e4:	2316      	movs	r3, #22
 80046e6:	3001      	adds	r0, #1
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	e7e4      	b.n	80046b6 <_raise_r+0x12>
 80046ec:	2400      	movs	r4, #0
 80046ee:	0028      	movs	r0, r5
 80046f0:	601c      	str	r4, [r3, #0]
 80046f2:	4790      	blx	r2
 80046f4:	0020      	movs	r0, r4
 80046f6:	e7de      	b.n	80046b6 <_raise_r+0x12>

080046f8 <raise>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	4b03      	ldr	r3, [pc, #12]	; (8004708 <raise+0x10>)
 80046fc:	0001      	movs	r1, r0
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	f7ff ffd0 	bl	80046a4 <_raise_r>
 8004704:	bd10      	pop	{r4, pc}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	200000c4 	.word	0x200000c4

0800470c <_kill_r>:
 800470c:	2300      	movs	r3, #0
 800470e:	b570      	push	{r4, r5, r6, lr}
 8004710:	4d06      	ldr	r5, [pc, #24]	; (800472c <_kill_r+0x20>)
 8004712:	0004      	movs	r4, r0
 8004714:	0008      	movs	r0, r1
 8004716:	0011      	movs	r1, r2
 8004718:	602b      	str	r3, [r5, #0]
 800471a:	f7fc fd4e 	bl	80011ba <_kill>
 800471e:	1c43      	adds	r3, r0, #1
 8004720:	d103      	bne.n	800472a <_kill_r+0x1e>
 8004722:	682b      	ldr	r3, [r5, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d000      	beq.n	800472a <_kill_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd70      	pop	{r4, r5, r6, pc}
 800472c:	20000240 	.word	0x20000240

08004730 <_getpid_r>:
 8004730:	b510      	push	{r4, lr}
 8004732:	f7fc fd3c 	bl	80011ae <_getpid>
 8004736:	bd10      	pop	{r4, pc}

08004738 <__sread>:
 8004738:	b570      	push	{r4, r5, r6, lr}
 800473a:	000c      	movs	r4, r1
 800473c:	250e      	movs	r5, #14
 800473e:	5f49      	ldrsh	r1, [r1, r5]
 8004740:	f000 f8b4 	bl	80048ac <_read_r>
 8004744:	2800      	cmp	r0, #0
 8004746:	db03      	blt.n	8004750 <__sread+0x18>
 8004748:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800474a:	181b      	adds	r3, r3, r0
 800474c:	6563      	str	r3, [r4, #84]	; 0x54
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	89a3      	ldrh	r3, [r4, #12]
 8004752:	4a02      	ldr	r2, [pc, #8]	; (800475c <__sread+0x24>)
 8004754:	4013      	ands	r3, r2
 8004756:	81a3      	strh	r3, [r4, #12]
 8004758:	e7f9      	b.n	800474e <__sread+0x16>
 800475a:	46c0      	nop			; (mov r8, r8)
 800475c:	ffffefff 	.word	0xffffefff

08004760 <__swrite>:
 8004760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004762:	001f      	movs	r7, r3
 8004764:	898b      	ldrh	r3, [r1, #12]
 8004766:	0005      	movs	r5, r0
 8004768:	000c      	movs	r4, r1
 800476a:	0016      	movs	r6, r2
 800476c:	05db      	lsls	r3, r3, #23
 800476e:	d505      	bpl.n	800477c <__swrite+0x1c>
 8004770:	230e      	movs	r3, #14
 8004772:	5ec9      	ldrsh	r1, [r1, r3]
 8004774:	2200      	movs	r2, #0
 8004776:	2302      	movs	r3, #2
 8004778:	f000 f874 	bl	8004864 <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	4a05      	ldr	r2, [pc, #20]	; (8004794 <__swrite+0x34>)
 8004780:	0028      	movs	r0, r5
 8004782:	4013      	ands	r3, r2
 8004784:	81a3      	strh	r3, [r4, #12]
 8004786:	0032      	movs	r2, r6
 8004788:	230e      	movs	r3, #14
 800478a:	5ee1      	ldrsh	r1, [r4, r3]
 800478c:	003b      	movs	r3, r7
 800478e:	f000 f81f 	bl	80047d0 <_write_r>
 8004792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004794:	ffffefff 	.word	0xffffefff

08004798 <__sseek>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	000c      	movs	r4, r1
 800479c:	250e      	movs	r5, #14
 800479e:	5f49      	ldrsh	r1, [r1, r5]
 80047a0:	f000 f860 	bl	8004864 <_lseek_r>
 80047a4:	89a3      	ldrh	r3, [r4, #12]
 80047a6:	1c42      	adds	r2, r0, #1
 80047a8:	d103      	bne.n	80047b2 <__sseek+0x1a>
 80047aa:	4a05      	ldr	r2, [pc, #20]	; (80047c0 <__sseek+0x28>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	81a3      	strh	r3, [r4, #12]
 80047b0:	bd70      	pop	{r4, r5, r6, pc}
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	0152      	lsls	r2, r2, #5
 80047b6:	4313      	orrs	r3, r2
 80047b8:	81a3      	strh	r3, [r4, #12]
 80047ba:	6560      	str	r0, [r4, #84]	; 0x54
 80047bc:	e7f8      	b.n	80047b0 <__sseek+0x18>
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	ffffefff 	.word	0xffffefff

080047c4 <__sclose>:
 80047c4:	b510      	push	{r4, lr}
 80047c6:	230e      	movs	r3, #14
 80047c8:	5ec9      	ldrsh	r1, [r1, r3]
 80047ca:	f000 f815 	bl	80047f8 <_close_r>
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <_write_r>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	0004      	movs	r4, r0
 80047d4:	0008      	movs	r0, r1
 80047d6:	0011      	movs	r1, r2
 80047d8:	001a      	movs	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	4d05      	ldr	r5, [pc, #20]	; (80047f4 <_write_r+0x24>)
 80047de:	602b      	str	r3, [r5, #0]
 80047e0:	f7fc fd24 	bl	800122c <_write>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d103      	bne.n	80047f0 <_write_r+0x20>
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d000      	beq.n	80047f0 <_write_r+0x20>
 80047ee:	6023      	str	r3, [r4, #0]
 80047f0:	bd70      	pop	{r4, r5, r6, pc}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	20000240 	.word	0x20000240

080047f8 <_close_r>:
 80047f8:	2300      	movs	r3, #0
 80047fa:	b570      	push	{r4, r5, r6, lr}
 80047fc:	4d06      	ldr	r5, [pc, #24]	; (8004818 <_close_r+0x20>)
 80047fe:	0004      	movs	r4, r0
 8004800:	0008      	movs	r0, r1
 8004802:	602b      	str	r3, [r5, #0]
 8004804:	f7fc fd2e 	bl	8001264 <_close>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d103      	bne.n	8004814 <_close_r+0x1c>
 800480c:	682b      	ldr	r3, [r5, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d000      	beq.n	8004814 <_close_r+0x1c>
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	bd70      	pop	{r4, r5, r6, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	20000240 	.word	0x20000240

0800481c <_fstat_r>:
 800481c:	2300      	movs	r3, #0
 800481e:	b570      	push	{r4, r5, r6, lr}
 8004820:	4d06      	ldr	r5, [pc, #24]	; (800483c <_fstat_r+0x20>)
 8004822:	0004      	movs	r4, r0
 8004824:	0008      	movs	r0, r1
 8004826:	0011      	movs	r1, r2
 8004828:	602b      	str	r3, [r5, #0]
 800482a:	f7fc fd25 	bl	8001278 <_fstat>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	d103      	bne.n	800483a <_fstat_r+0x1e>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d000      	beq.n	800483a <_fstat_r+0x1e>
 8004838:	6023      	str	r3, [r4, #0]
 800483a:	bd70      	pop	{r4, r5, r6, pc}
 800483c:	20000240 	.word	0x20000240

08004840 <_isatty_r>:
 8004840:	2300      	movs	r3, #0
 8004842:	b570      	push	{r4, r5, r6, lr}
 8004844:	4d06      	ldr	r5, [pc, #24]	; (8004860 <_isatty_r+0x20>)
 8004846:	0004      	movs	r4, r0
 8004848:	0008      	movs	r0, r1
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	f7fc fd22 	bl	8001294 <_isatty>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d103      	bne.n	800485c <_isatty_r+0x1c>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d000      	beq.n	800485c <_isatty_r+0x1c>
 800485a:	6023      	str	r3, [r4, #0]
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20000240 	.word	0x20000240

08004864 <_lseek_r>:
 8004864:	b570      	push	{r4, r5, r6, lr}
 8004866:	0004      	movs	r4, r0
 8004868:	0008      	movs	r0, r1
 800486a:	0011      	movs	r1, r2
 800486c:	001a      	movs	r2, r3
 800486e:	2300      	movs	r3, #0
 8004870:	4d05      	ldr	r5, [pc, #20]	; (8004888 <_lseek_r+0x24>)
 8004872:	602b      	str	r3, [r5, #0]
 8004874:	f7fc fd17 	bl	80012a6 <_lseek>
 8004878:	1c43      	adds	r3, r0, #1
 800487a:	d103      	bne.n	8004884 <_lseek_r+0x20>
 800487c:	682b      	ldr	r3, [r5, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d000      	beq.n	8004884 <_lseek_r+0x20>
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	46c0      	nop			; (mov r8, r8)
 8004888:	20000240 	.word	0x20000240

0800488c <__malloc_lock>:
 800488c:	b510      	push	{r4, lr}
 800488e:	4802      	ldr	r0, [pc, #8]	; (8004898 <__malloc_lock+0xc>)
 8004890:	f7ff fd99 	bl	80043c6 <__retarget_lock_acquire_recursive>
 8004894:	bd10      	pop	{r4, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000234 	.word	0x20000234

0800489c <__malloc_unlock>:
 800489c:	b510      	push	{r4, lr}
 800489e:	4802      	ldr	r0, [pc, #8]	; (80048a8 <__malloc_unlock+0xc>)
 80048a0:	f7ff fd92 	bl	80043c8 <__retarget_lock_release_recursive>
 80048a4:	bd10      	pop	{r4, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	20000234 	.word	0x20000234

080048ac <_read_r>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	0004      	movs	r4, r0
 80048b0:	0008      	movs	r0, r1
 80048b2:	0011      	movs	r1, r2
 80048b4:	001a      	movs	r2, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	4d05      	ldr	r5, [pc, #20]	; (80048d0 <_read_r+0x24>)
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fc fc99 	bl	80011f2 <_read>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d103      	bne.n	80048cc <_read_r+0x20>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d000      	beq.n	80048cc <_read_r+0x20>
 80048ca:	6023      	str	r3, [r4, #0]
 80048cc:	bd70      	pop	{r4, r5, r6, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	20000240 	.word	0x20000240

080048d4 <_init>:
 80048d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048da:	bc08      	pop	{r3}
 80048dc:	469e      	mov	lr, r3
 80048de:	4770      	bx	lr

080048e0 <_fini>:
 80048e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048e6:	bc08      	pop	{r3}
 80048e8:	469e      	mov	lr, r3
 80048ea:	4770      	bx	lr
