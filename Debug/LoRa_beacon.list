
LoRa_beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b78  08004b78  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000128  08004ca8  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004ca8  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace1  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001923  00000000  00000000  0002ae31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100de  00000000  00000000  0002d7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b251  00000000  00000000  0003d8be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060e7c  00000000  00000000  00048b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a998b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002738  00000000  00000000  000a99dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800489c 	.word	0x0800489c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	0800489c 	.word	0x0800489c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d433      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002ac:	465a      	mov	r2, fp
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83a      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e078      	b.n	80003b8 <__udivmoddi4+0x144>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e075      	b.n	80003be <__udivmoddi4+0x14a>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e028      	b.n	800033e <__udivmoddi4+0xca>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	2320      	movs	r3, #32
 8000318:	1a9b      	subs	r3, r3, r2
 800031a:	4652      	mov	r2, sl
 800031c:	40da      	lsrs	r2, r3
 800031e:	4641      	mov	r1, r8
 8000320:	0013      	movs	r3, r2
 8000322:	464a      	mov	r2, r9
 8000324:	408a      	lsls	r2, r1
 8000326:	0017      	movs	r7, r2
 8000328:	4642      	mov	r2, r8
 800032a:	431f      	orrs	r7, r3
 800032c:	4653      	mov	r3, sl
 800032e:	4093      	lsls	r3, r2
 8000330:	001e      	movs	r6, r3
 8000332:	42af      	cmp	r7, r5
 8000334:	d9c4      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000336:	2200      	movs	r2, #0
 8000338:	2300      	movs	r3, #0
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0d9      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000344:	07fb      	lsls	r3, r7, #31
 8000346:	0872      	lsrs	r2, r6, #1
 8000348:	431a      	orrs	r2, r3
 800034a:	4646      	mov	r6, r8
 800034c:	087b      	lsrs	r3, r7, #1
 800034e:	e00e      	b.n	800036e <__udivmoddi4+0xfa>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d101      	bne.n	8000358 <__udivmoddi4+0xe4>
 8000354:	42a2      	cmp	r2, r4
 8000356:	d80c      	bhi.n	8000372 <__udivmoddi4+0xfe>
 8000358:	1aa4      	subs	r4, r4, r2
 800035a:	419d      	sbcs	r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2100      	movs	r1, #0
 8000364:	3e01      	subs	r6, #1
 8000366:	1824      	adds	r4, r4, r0
 8000368:	414d      	adcs	r5, r1
 800036a:	2e00      	cmp	r6, #0
 800036c:	d006      	beq.n	800037c <__udivmoddi4+0x108>
 800036e:	42ab      	cmp	r3, r5
 8000370:	d9ee      	bls.n	8000350 <__udivmoddi4+0xdc>
 8000372:	3e01      	subs	r6, #1
 8000374:	1924      	adds	r4, r4, r4
 8000376:	416d      	adcs	r5, r5
 8000378:	2e00      	cmp	r6, #0
 800037a:	d1f8      	bne.n	800036e <__udivmoddi4+0xfa>
 800037c:	9800      	ldr	r0, [sp, #0]
 800037e:	9901      	ldr	r1, [sp, #4]
 8000380:	465b      	mov	r3, fp
 8000382:	1900      	adds	r0, r0, r4
 8000384:	4169      	adcs	r1, r5
 8000386:	2b00      	cmp	r3, #0
 8000388:	db24      	blt.n	80003d4 <__udivmoddi4+0x160>
 800038a:	002b      	movs	r3, r5
 800038c:	465a      	mov	r2, fp
 800038e:	4644      	mov	r4, r8
 8000390:	40d3      	lsrs	r3, r2
 8000392:	002a      	movs	r2, r5
 8000394:	40e2      	lsrs	r2, r4
 8000396:	001c      	movs	r4, r3
 8000398:	465b      	mov	r3, fp
 800039a:	0015      	movs	r5, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	db2a      	blt.n	80003f6 <__udivmoddi4+0x182>
 80003a0:	0026      	movs	r6, r4
 80003a2:	409e      	lsls	r6, r3
 80003a4:	0033      	movs	r3, r6
 80003a6:	0026      	movs	r6, r4
 80003a8:	4647      	mov	r7, r8
 80003aa:	40be      	lsls	r6, r7
 80003ac:	0032      	movs	r2, r6
 80003ae:	1a80      	subs	r0, r0, r2
 80003b0:	4199      	sbcs	r1, r3
 80003b2:	9000      	str	r0, [sp, #0]
 80003b4:	9101      	str	r1, [sp, #4]
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x84>
 80003b8:	42a3      	cmp	r3, r4
 80003ba:	d8bc      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80003bc:	e783      	b.n	80002c6 <__udivmoddi4+0x52>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	2200      	movs	r2, #0
 80003c8:	9100      	str	r1, [sp, #0]
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	2201      	movs	r2, #1
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	e786      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	4646      	mov	r6, r8
 80003de:	409a      	lsls	r2, r3
 80003e0:	0023      	movs	r3, r4
 80003e2:	40f3      	lsrs	r3, r6
 80003e4:	4644      	mov	r4, r8
 80003e6:	4313      	orrs	r3, r2
 80003e8:	002a      	movs	r2, r5
 80003ea:	40e2      	lsrs	r2, r4
 80003ec:	001c      	movs	r4, r3
 80003ee:	465b      	mov	r3, fp
 80003f0:	0015      	movs	r5, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dad4      	bge.n	80003a0 <__udivmoddi4+0x12c>
 80003f6:	4642      	mov	r2, r8
 80003f8:	002f      	movs	r7, r5
 80003fa:	2320      	movs	r3, #32
 80003fc:	0026      	movs	r6, r4
 80003fe:	4097      	lsls	r7, r2
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	40de      	lsrs	r6, r3
 8000404:	003b      	movs	r3, r7
 8000406:	4333      	orrs	r3, r6
 8000408:	e7cd      	b.n	80003a6 <__udivmoddi4+0x132>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	; (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	240b      	movs	r4, #11
 800046e:	193b      	adds	r3, r7, r4
 8000470:	1c0a      	adds	r2, r1, #0
 8000472:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	6858      	ldr	r0, [r3, #4]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	891b      	ldrh	r3, [r3, #8]
 800047c:	2200      	movs	r2, #0
 800047e:	0019      	movs	r1, r3
 8000480:	f001 fa12 	bl	80018a8 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	227f      	movs	r2, #127	; 0x7f
 800048a:	4013      	ands	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	2117      	movs	r1, #23
 8000490:	187b      	adds	r3, r7, r1
 8000492:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	1879      	adds	r1, r7, r1
 800049a:	230a      	movs	r3, #10
 800049c:	2201      	movs	r2, #1
 800049e:	f001 ff45 	bl	800232c <HAL_SPI_Transmit>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <read_register+0x4a>
		return false;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e014      	b.n	80004d4 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	230a      	movs	r3, #10
 80004b6:	f002 f891 	bl	80025dc <HAL_SPI_Receive>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <read_register+0x62>
		return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e008      	b.n	80004d4 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6858      	ldr	r0, [r3, #4]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	891b      	ldrh	r3, [r3, #8]
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 f9eb 	bl	80018a8 <HAL_GPIO_WritePin>

	return true;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b007      	add	sp, #28
 80004da:	bd90      	pop	{r4, r7, pc}

080004dc <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	0008      	movs	r0, r1
 80004e6:	0011      	movs	r1, r2
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	1c02      	adds	r2, r0, #0
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	1cbb      	adds	r3, r7, #2
 80004f0:	1c0a      	adds	r2, r1, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6858      	ldr	r0, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	891b      	ldrh	r3, [r3, #8]
 80004fc:	2200      	movs	r2, #0
 80004fe:	0019      	movs	r1, r3
 8000500:	f001 f9d2 	bl	80018a8 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8000504:	1cfb      	adds	r3, r7, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	4252      	negs	r2, r2
 800050c:	4313      	orrs	r3, r2
 800050e:	b2da      	uxtb	r2, r3
 8000510:	210c      	movs	r1, #12
 8000512:	187b      	adds	r3, r7, r1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	187b      	adds	r3, r7, r1
 8000518:	1cba      	adds	r2, r7, #2
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	1879      	adds	r1, r7, r1
 8000524:	230a      	movs	r3, #10
 8000526:	2202      	movs	r2, #2
 8000528:	f001 ff00 	bl	800232c <HAL_SPI_Transmit>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <write_register+0x58>
		return false;
 8000530:	2300      	movs	r3, #0
 8000532:	e008      	b.n	8000546 <write_register+0x6a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	0019      	movs	r1, r3
 8000540:	f001 f9b2 	bl	80018a8 <HAL_GPIO_WritePin>

	return true;
 8000544:	2301      	movs	r3, #1
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}

0800054e <reset>:

static void reset(rfm95_handle_t *handle)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68d8      	ldr	r0, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8a1b      	ldrh	r3, [r3, #16]
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f9a1 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000566:	2001      	movs	r0, #1
 8000568:	f000 ff56 	bl	8001418 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68d8      	ldr	r0, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8a1b      	ldrh	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	0019      	movs	r1, r3
 8000578:	f001 f996 	bl	80018a8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f000 ff4b 	bl	8001418 <HAL_Delay>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6178      	str	r0, [r7, #20]
 8000594:	6139      	str	r1, [r7, #16]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	000a      	movs	r2, r1
 800059a:	2100      	movs	r1, #0
 800059c:	000b      	movs	r3, r1
 800059e:	0b51      	lsrs	r1, r2, #13
 80005a0:	6079      	str	r1, [r7, #4]
 80005a2:	04d3      	lsls	r3, r2, #19
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <configure_frequency+0xbc>)
 80005a8:	2300      	movs	r3, #0
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	f7ff fe41 	bl	8000234 <__aeabi_uldivmod>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	61ba      	str	r2, [r7, #24]
 80005b8:	61fb      	str	r3, [r7, #28]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	7a3a      	ldrb	r2, [r7, #8]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2106      	movs	r1, #6
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff80 	bl	80004dc <write_register>
 80005dc:	0003      	movs	r3, r0
 80005de:	001a      	movs	r2, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <configure_frequency+0x62>
 80005ea:	2300      	movs	r3, #0
 80005ec:	e028      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	0a14      	lsrs	r4, r2, #8
 80005f6:	431c      	orrs	r4, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	0a1d      	lsrs	r5, r3, #8
 80005fc:	b2e2      	uxtb	r2, r4
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2107      	movs	r1, #7
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff6a 	bl	80004dc <write_register>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	2301      	movs	r3, #1
 800060e:	4053      	eors	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <configure_frequency+0x8e>
 8000616:	2300      	movs	r3, #0
 8000618:	e012      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	1c13      	adds	r3, r2, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2108      	movs	r1, #8
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff ff58 	bl	80004dc <write_register>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	2301      	movs	r3, #1
 8000632:	4053      	eors	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <configure_frequency+0xb2>
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <configure_frequency+0xb4>

	return true;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b008      	add	sp, #32
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	01e84800 	.word	0x01e84800

0800064c <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	701a      	strb	r2, [r3, #0]
	assert((power >= 2 && power <= 17) || power == 20);
 800065a:	1cfb      	adds	r3, r7, #3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	2b01      	cmp	r3, #1
 8000662:	dd04      	ble.n	800066e <rfm95_set_power+0x22>
 8000664:	1cfb      	adds	r3, r7, #3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	2b11      	cmp	r3, #17
 800066c:	dd0a      	ble.n	8000684 <rfm95_set_power+0x38>
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	2b14      	cmp	r3, #20
 8000676:	d005      	beq.n	8000684 <rfm95_set_power+0x38>
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <rfm95_set_power+0x124>)
 800067a:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <rfm95_set_power+0x128>)
 800067c:	483e      	ldr	r0, [pc, #248]	; (8000778 <rfm95_set_power+0x12c>)
 800067e:	2185      	movs	r1, #133	; 0x85
 8000680:	f003 f89c 	bl	80037bc <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8000684:	200c      	movs	r0, #12
 8000686:	183b      	adds	r3, r7, r0
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 800068c:	240f      	movs	r4, #15
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	2b01      	cmp	r3, #1
 800069c:	dd26      	ble.n	80006ec <rfm95_set_power+0xa0>
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	2b11      	cmp	r3, #17
 80006a6:	dc21      	bgt.n	80006ec <rfm95_set_power+0xa0>
		pa_config.max_power = 7;
 80006a8:	183b      	adds	r3, r7, r0
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	2170      	movs	r1, #112	; 0x70
 80006ae:	430a      	orrs	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4249      	negs	r1, r1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 80006be:	1cfb      	adds	r3, r7, #3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b02      	subs	r3, #2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	1c1a      	adds	r2, r3, #0
 80006c8:	230f      	movs	r3, #15
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	183b      	adds	r3, r7, r0
 80006d0:	210f      	movs	r1, #15
 80006d2:	400a      	ands	r2, r1
 80006d4:	0010      	movs	r0, r2
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	210f      	movs	r1, #15
 80006da:	438a      	bics	r2, r1
 80006dc:	1c11      	adds	r1, r2, #0
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	430a      	orrs	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2284      	movs	r2, #132	; 0x84
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e019      	b.n	8000720 <rfm95_set_power+0xd4>

	} else if (power == 20) {
 80006ec:	1cfb      	adds	r3, r7, #3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	2b14      	cmp	r3, #20
 80006f4:	d114      	bne.n	8000720 <rfm95_set_power+0xd4>
		pa_config.max_power = 7;
 80006f6:	200c      	movs	r0, #12
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2170      	movs	r1, #112	; 0x70
 80006fe:	430a      	orrs	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8000702:	183b      	adds	r3, r7, r0
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4249      	negs	r1, r1
 800070a:	430a      	orrs	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 800070e:	183b      	adds	r3, r7, r0
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	210f      	movs	r1, #15
 8000714:	430a      	orrs	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8000718:	230f      	movs	r3, #15
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2287      	movs	r2, #135	; 0x87
 800071e:	701a      	strb	r2, [r3, #0]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8000720:	230c      	movs	r3, #12
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2109      	movs	r1, #9
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fed6 	bl	80004dc <write_register>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	4053      	eors	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <rfm95_set_power+0xf6>
 800073e:	2300      	movs	r3, #0
 8000740:	e011      	b.n	8000766 <rfm95_set_power+0x11a>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	214d      	movs	r1, #77	; 0x4d
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fec5 	bl	80004dc <write_register>
 8000752:	0003      	movs	r3, r0
 8000754:	001a      	movs	r2, r3
 8000756:	2301      	movs	r3, #1
 8000758:	4053      	eors	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <rfm95_set_power+0x118>
 8000760:	2300      	movs	r3, #0
 8000762:	e000      	b.n	8000766 <rfm95_set_power+0x11a>

	return true;
 8000764:	2301      	movs	r3, #1
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b005      	add	sp, #20
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	080048b4 	.word	0x080048b4
 8000774:	08004a68 	.word	0x08004a68
 8000778:	080048e0 	.word	0x080048e0

0800077c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle, UART_HandleTypeDef *uart_handle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	2382      	movs	r3, #130	; 0x82
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	429a      	cmp	r2, r3
 8000792:	d005      	beq.n	80007a0 <rfm95_init+0x24>
 8000794:	4b77      	ldr	r3, [pc, #476]	; (8000974 <rfm95_init+0x1f8>)
 8000796:	4a78      	ldr	r2, [pc, #480]	; (8000978 <rfm95_init+0x1fc>)
 8000798:	4878      	ldr	r0, [pc, #480]	; (800097c <rfm95_init+0x200>)
 800079a:	21a0      	movs	r1, #160	; 0xa0
 800079c:	f003 f80e 	bl	80037bc <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <rfm95_init+0x3a>
 80007aa:	4b75      	ldr	r3, [pc, #468]	; (8000980 <rfm95_init+0x204>)
 80007ac:	4a72      	ldr	r2, [pc, #456]	; (8000978 <rfm95_init+0x1fc>)
 80007ae:	4873      	ldr	r0, [pc, #460]	; (800097c <rfm95_init+0x200>)
 80007b0:	21a1      	movs	r1, #161	; 0xa1
 80007b2:	f003 f803 	bl	80037bc <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	23e0      	movs	r3, #224	; 0xe0
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d005      	beq.n	80007d0 <rfm95_init+0x54>
 80007c4:	4b6f      	ldr	r3, [pc, #444]	; (8000984 <rfm95_init+0x208>)
 80007c6:	4a6c      	ldr	r2, [pc, #432]	; (8000978 <rfm95_init+0x1fc>)
 80007c8:	486c      	ldr	r0, [pc, #432]	; (800097c <rfm95_init+0x200>)
 80007ca:	21a2      	movs	r1, #162	; 0xa2
 80007cc:	f002 fff6 	bl	80037bc <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <rfm95_init+0x6a>
 80007da:	4b6b      	ldr	r3, [pc, #428]	; (8000988 <rfm95_init+0x20c>)
 80007dc:	4a66      	ldr	r2, [pc, #408]	; (8000978 <rfm95_init+0x1fc>)
 80007de:	4867      	ldr	r0, [pc, #412]	; (800097c <rfm95_init+0x200>)
 80007e0:	21a3      	movs	r1, #163	; 0xa3
 80007e2:	f002 ffeb 	bl	80037bc <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <rfm95_init+0x80>
 80007f0:	4b66      	ldr	r3, [pc, #408]	; (800098c <rfm95_init+0x210>)
 80007f2:	4a61      	ldr	r2, [pc, #388]	; (8000978 <rfm95_init+0x1fc>)
 80007f4:	4861      	ldr	r0, [pc, #388]	; (800097c <rfm95_init+0x200>)
 80007f6:	21a4      	movs	r1, #164	; 0xa4
 80007f8:	f002 ffe0 	bl	80037bc <__assert_func>

	reset(handle);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fea5 	bl	800054e <reset>



	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000804:	230f      	movs	r3, #15
 8000806:	18fa      	adds	r2, r7, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	2301      	movs	r3, #1
 800080c:	2142      	movs	r1, #66	; 0x42
 800080e:	f7ff fe27 	bl	8000460 <read_register>
 8000812:	0003      	movs	r3, r0
 8000814:	001a      	movs	r2, r3
 8000816:	2301      	movs	r3, #1
 8000818:	4053      	eors	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <rfm95_init+0xa8>
 8000820:	2300      	movs	r3, #0
 8000822:	e0a3      	b.n	800096c <rfm95_init+0x1f0>
	if (version != RFM9x_VER) return false;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b12      	cmp	r3, #18
 800082c:	d001      	beq.n	8000832 <rfm95_init+0xb6>
 800082e:	2300      	movs	r3, #0
 8000830:	e09c      	b.n	800096c <rfm95_init+0x1f0>


	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fe4f 	bl	80004dc <write_register>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	2301      	movs	r3, #1
 8000844:	4053      	eors	r3, r2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <rfm95_init+0xd4>
 800084c:	2300      	movs	r3, #0
 800084e:	e08d      	b.n	800096c <rfm95_init+0x1f0>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	2101      	movs	r1, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe40 	bl	80004dc <write_register>
 800085c:	0003      	movs	r3, r0
 800085e:	001a      	movs	r2, r3
 8000860:	2301      	movs	r3, #1
 8000862:	4053      	eors	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <rfm95_init+0xf2>
 800086a:	2300      	movs	r3, #0
 800086c:	e07e      	b.n	800096c <rfm95_init+0x1f0>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe31 	bl	80004dc <write_register>
 800087a:	0003      	movs	r3, r0
 800087c:	001a      	movs	r2, r3
 800087e:	2301      	movs	r3, #1
 8000880:	4053      	eors	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <rfm95_init+0x110>
 8000888:	2300      	movs	r3, #0
 800088a:	e06f      	b.n	800096c <rfm95_init+0x1f0>

	if (handle->on_after_interrupts_configured != NULL) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <rfm95_init+0x11e>
		handle->on_after_interrupts_configured();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000898:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2111      	movs	r1, #17
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fed4 	bl	800064c <rfm95_set_power>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <rfm95_init+0x13a>
 80008b2:	2300      	movs	r3, #0
 80008b4:	e05a      	b.n	800096c <rfm95_init+0x1f0>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2223      	movs	r2, #35	; 0x23
 80008ba:	210c      	movs	r1, #12
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe0d 	bl	80004dc <write_register>
 80008c2:	0003      	movs	r3, r0
 80008c4:	001a      	movs	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	4053      	eors	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <rfm95_init+0x158>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e04b      	b.n	800096c <rfm95_init+0x1f0>
	// Preamble set to 8 + 4.25 = 12.25 symbols.
	//if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
	//if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2234      	movs	r2, #52	; 0x34
 80008d8:	2139      	movs	r1, #57	; 0x39
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fdfe 	bl	80004dc <write_register>
 80008e0:	0003      	movs	r3, r0
 80008e2:	001a      	movs	r2, r3
 80008e4:	2301      	movs	r3, #1
 80008e6:	4053      	eors	r3, r2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <rfm95_init+0x176>
 80008ee:	2300      	movs	r3, #0
 80008f0:	e03c      	b.n	800096c <rfm95_init+0x1f0>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	210e      	movs	r1, #14
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fdef 	bl	80004dc <write_register>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	2301      	movs	r3, #1
 8000904:	4053      	eors	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <rfm95_init+0x194>
 800090c:	2300      	movs	r3, #0
 800090e:	e02d      	b.n	800096c <rfm95_init+0x1f0>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2200      	movs	r2, #0
 8000914:	210f      	movs	r1, #15
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fde0 	bl	80004dc <write_register>
 800091c:	0003      	movs	r3, r0
 800091e:	001a      	movs	r2, r3
 8000920:	2301      	movs	r3, #1
 8000922:	4053      	eors	r3, r2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <rfm95_init+0x1b2>
 800092a:	2300      	movs	r3, #0
 800092c:	e01e      	b.n	800096c <rfm95_init+0x1f0>

	// Maximum payload length of the RFM95 is 64.
	//if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;

	if(!configure_frequency(handle, 868100000)) return false;
 800092e:	4a18      	ldr	r2, [pc, #96]	; (8000990 <rfm95_init+0x214>)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fe29 	bl	800058c <configure_frequency>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	4053      	eors	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <rfm95_init+0x1d0>
 8000948:	2300      	movs	r3, #0
 800094a:	e00f      	b.n	800096c <rfm95_init+0x1f0>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2281      	movs	r2, #129	; 0x81
 8000950:	2101      	movs	r1, #1
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fdc2 	bl	80004dc <write_register>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	4053      	eors	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <rfm95_init+0x1ee>
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <rfm95_init+0x1f0>

	return true;
 800096a:	2301      	movs	r3, #1
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	08004904 	.word	0x08004904
 8000978:	08004a78 	.word	0x08004a78
 800097c:	080048e0 	.word	0x080048e0
 8000980:	08004938 	.word	0x08004938
 8000984:	08004974 	.word	0x08004974
 8000988:	080049ac 	.word	0x080049ac
 800098c:	080049e8 	.word	0x080049e8
 8000990:	33be27a0 	.word	0x33be27a0

08000994 <receive_package>:


bool receive_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t *payload_len, int8_t *snr, UART_HandleTypeDef *uart_handle) {
 8000994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000996:	b08f      	sub	sp, #60	; 0x3c
 8000998:	af00      	add	r7, sp, #0
 800099a:	6278      	str	r0, [r7, #36]	; 0x24
 800099c:	6239      	str	r1, [r7, #32]
 800099e:	61fa      	str	r2, [r7, #28]
 80009a0:	61bb      	str	r3, [r7, #24]
	*payload_len = 0;
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]


	//Stand-by mode previous to Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80009a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009aa:	2281      	movs	r2, #129	; 0x81
 80009ac:	2101      	movs	r1, #1
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fd94 	bl	80004dc <write_register>
 80009b4:	0003      	movs	r3, r0
 80009b6:	001a      	movs	r2, r3
 80009b8:	2301      	movs	r3, #1
 80009ba:	4053      	eors	r3, r2
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <receive_package+0x32>
 80009c2:	2300      	movs	r3, #0
 80009c4:	e138      	b.n	8000c38 <receive_package+0x2a4>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	2272      	movs	r2, #114	; 0x72
 80009ca:	211d      	movs	r1, #29
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff fd85 	bl	80004dc <write_register>
 80009d2:	0003      	movs	r3, r0
 80009d4:	001a      	movs	r2, r3
 80009d6:	2301      	movs	r3, #1
 80009d8:	4053      	eors	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <receive_package+0x50>
 80009e0:	2300      	movs	r3, #0
 80009e2:	e129      	b.n	8000c38 <receive_package+0x2a4>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xC4)) return false;
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	22c4      	movs	r2, #196	; 0xc4
 80009e8:	211e      	movs	r1, #30
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fd76 	bl	80004dc <write_register>
 80009f0:	0003      	movs	r3, r0
 80009f2:	001a      	movs	r2, r3
 80009f4:	2301      	movs	r3, #1
 80009f6:	4053      	eors	r3, r2
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <receive_package+0x6e>
 80009fe:	2300      	movs	r3, #0
 8000a00:	e11a      	b.n	8000c38 <receive_package+0x2a4>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	2204      	movs	r2, #4
 8000a06:	2126      	movs	r1, #38	; 0x26
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fd67 	bl	80004dc <write_register>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	001a      	movs	r2, r3
 8000a12:	2301      	movs	r3, #1
 8000a14:	4053      	eors	r3, r2
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <receive_package+0x8c>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e10b      	b.n	8000c38 <receive_package+0x2a4>

	// Set maximum symbol timeout.
	//if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 16)) return false;

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a22:	2227      	movs	r2, #39	; 0x27
 8000a24:	2133      	movs	r1, #51	; 0x33
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fd58 	bl	80004dc <write_register>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	001a      	movs	r2, r3
 8000a30:	2301      	movs	r3, #1
 8000a32:	4053      	eors	r3, r2
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <receive_package+0xaa>
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e0fc      	b.n	8000c38 <receive_package+0x2a4>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8000a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a40:	221d      	movs	r2, #29
 8000a42:	213b      	movs	r1, #59	; 0x3b
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fd49 	bl	80004dc <write_register>
 8000a4a:	0003      	movs	r3, r0
 8000a4c:	001a      	movs	r2, r3
 8000a4e:	2301      	movs	r3, #1
 8000a50:	4053      	eors	r3, r2
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <receive_package+0xc8>
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e0ed      	b.n	8000c38 <receive_package+0x2a4>

	// receive_at_scheduled_time(handle, rx1_target);


	//if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8000a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5e:	22ff      	movs	r2, #255	; 0xff
 8000a60:	2112      	movs	r1, #18
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fd3a 	bl	80004dc <write_register>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	4053      	eors	r3, r2
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <receive_package+0xe6>
 8000a76:	2300      	movs	r3, #0
 8000a78:	e0de      	b.n	8000c38 <receive_package+0x2a4>
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 8000a7a:	4a71      	ldr	r2, [pc, #452]	; (8000c40 <receive_package+0x2ac>)
 8000a7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a7e:	2301      	movs	r3, #1
 8000a80:	2112      	movs	r1, #18
 8000a82:	f7ff fced 	bl	8000460 <read_register>

	// Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_RX_CONTINUOUS)) return false;
 8000a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a88:	2285      	movs	r2, #133	; 0x85
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff fd25 	bl	80004dc <write_register>
 8000a92:	0003      	movs	r3, r0
 8000a94:	001a      	movs	r2, r3
 8000a96:	2301      	movs	r3, #1
 8000a98:	4053      	eors	r3, r2
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <receive_package+0x110>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	e0c9      	b.n	8000c38 <receive_package+0x2a4>

	HAL_UART_Transmit(uart_handle, "here1", 5, 10);
 8000aa4:	4967      	ldr	r1, [pc, #412]	; (8000c44 <receive_package+0x2b0>)
 8000aa6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000aa8:	230a      	movs	r3, #10
 8000aaa:	2205      	movs	r2, #5
 8000aac:	f002 fadc 	bl	8003068 <HAL_UART_Transmit>


	while (!(irqFlags & 0x40)){
 8000ab0:	e010      	b.n	8000ad4 <receive_package+0x140>
		HAL_Delay(10);
 8000ab2:	200a      	movs	r0, #10
 8000ab4:	f000 fcb0 	bl	8001418 <HAL_Delay>
		read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 8000ab8:	4a61      	ldr	r2, [pc, #388]	; (8000c40 <receive_package+0x2ac>)
 8000aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000abc:	2301      	movs	r3, #1
 8000abe:	2112      	movs	r1, #18
 8000ac0:	f7ff fcce 	bl	8000460 <read_register>

		if(irqFlags & 0xA0) return false;
 8000ac4:	4b5e      	ldr	r3, [pc, #376]	; (8000c40 <receive_package+0x2ac>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	23a0      	movs	r3, #160	; 0xa0
 8000acc:	4013      	ands	r3, r2
 8000ace:	d001      	beq.n	8000ad4 <receive_package+0x140>
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	e0b1      	b.n	8000c38 <receive_package+0x2a4>
	while (!(irqFlags & 0x40)){
 8000ad4:	4b5a      	ldr	r3, [pc, #360]	; (8000c40 <receive_package+0x2ac>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2340      	movs	r3, #64	; 0x40
 8000adc:	4013      	ands	r3, r2
 8000ade:	d0e8      	beq.n	8000ab2 <receive_package+0x11e>
	}

	HAL_UART_Transmit(uart_handle, &irqFlags, 1, 10);
 8000ae0:	4957      	ldr	r1, [pc, #348]	; (8000c40 <receive_package+0x2ac>)
 8000ae2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f002 fabe 	bl	8003068 <HAL_UART_Transmit>



	if(irqFlags & 0x40) {
 8000aec:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <receive_package+0x2ac>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	001a      	movs	r2, r3
 8000af2:	2340      	movs	r3, #64	; 0x40
 8000af4:	4013      	ands	r3, r2
 8000af6:	d100      	bne.n	8000afa <receive_package+0x166>
 8000af8:	e09d      	b.n	8000c36 <receive_package+0x2a2>
 8000afa:	466b      	mov	r3, sp
 8000afc:	001e      	movs	r6, r3

		 // Read received payload length.
		uint8_t payload_len_internal;
		if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8000afe:	2317      	movs	r3, #23
 8000b00:	2218      	movs	r2, #24
 8000b02:	189b      	adds	r3, r3, r2
 8000b04:	19da      	adds	r2, r3, r7
 8000b06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2113      	movs	r1, #19
 8000b0c:	f7ff fca8 	bl	8000460 <read_register>
 8000b10:	0003      	movs	r3, r0
 8000b12:	001a      	movs	r2, r3
 8000b14:	2301      	movs	r3, #1
 8000b16:	4053      	eors	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <receive_package+0x18e>
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e087      	b.n	8000c32 <receive_package+0x29e>

		uint8_t payload[payload_len_internal];
 8000b22:	2317      	movs	r3, #23
 8000b24:	2218      	movs	r2, #24
 8000b26:	189b      	adds	r3, r3, r2
 8000b28:	19db      	adds	r3, r3, r7
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	001a      	movs	r2, r3
 8000b2e:	3a01      	subs	r2, #1
 8000b30:	637a      	str	r2, [r7, #52]	; 0x34
 8000b32:	001c      	movs	r4, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	0015      	movs	r5, r2
 8000b38:	0020      	movs	r0, r4
 8000b3a:	0029      	movs	r1, r5
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	0f52      	lsrs	r2, r2, #29
 8000b40:	000c      	movs	r4, r1
 8000b42:	00e4      	lsls	r4, r4, #3
 8000b44:	617c      	str	r4, [r7, #20]
 8000b46:	697c      	ldr	r4, [r7, #20]
 8000b48:	4314      	orrs	r4, r2
 8000b4a:	617c      	str	r4, [r7, #20]
 8000b4c:	0002      	movs	r2, r0
 8000b4e:	00d2      	lsls	r2, r2, #3
 8000b50:	613a      	str	r2, [r7, #16]
 8000b52:	603b      	str	r3, [r7, #0]
 8000b54:	2200      	movs	r2, #0
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	6838      	ldr	r0, [r7, #0]
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	0002      	movs	r2, r0
 8000b5e:	0f52      	lsrs	r2, r2, #29
 8000b60:	000c      	movs	r4, r1
 8000b62:	00e4      	lsls	r4, r4, #3
 8000b64:	60fc      	str	r4, [r7, #12]
 8000b66:	68fc      	ldr	r4, [r7, #12]
 8000b68:	4314      	orrs	r4, r2
 8000b6a:	60fc      	str	r4, [r7, #12]
 8000b6c:	0002      	movs	r2, r0
 8000b6e:	00d2      	lsls	r2, r2, #3
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	3307      	adds	r3, #7
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	466a      	mov	r2, sp
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	469d      	mov	sp, r3
 8000b7e:	466b      	mov	r3, sp
 8000b80:	3300      	adds	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30


		// Read received payload itself.
		uint8_t fifoAddr;
		if (!read_register(handle, RFM95_REGISTER_FIFO_RX_CURRENT_ADDR, &fifoAddr, 1)) return false;
 8000b84:	2316      	movs	r3, #22
 8000b86:	2218      	movs	r2, #24
 8000b88:	189b      	adds	r3, r3, r2
 8000b8a:	19da      	adds	r2, r3, r7
 8000b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b8e:	2301      	movs	r3, #1
 8000b90:	2110      	movs	r1, #16
 8000b92:	f7ff fc65 	bl	8000460 <read_register>
 8000b96:	0003      	movs	r3, r0
 8000b98:	001a      	movs	r2, r3
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	4053      	eors	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <receive_package+0x214>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	e044      	b.n	8000c32 <receive_package+0x29e>
		if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, fifoAddr)) return false;
 8000ba8:	2316      	movs	r3, #22
 8000baa:	2218      	movs	r2, #24
 8000bac:	189b      	adds	r3, r3, r2
 8000bae:	19db      	adds	r3, r3, r7
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f7ff fc90 	bl	80004dc <write_register>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	001a      	movs	r2, r3
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	4053      	eors	r3, r2
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <receive_package+0x23a>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	e031      	b.n	8000c32 <receive_package+0x29e>

		if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload, payload_len_internal)) return false;
 8000bce:	2317      	movs	r3, #23
 8000bd0:	2218      	movs	r2, #24
 8000bd2:	189b      	adds	r3, r3, r2
 8000bd4:	19db      	adds	r3, r3, r7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000bdc:	2100      	movs	r1, #0
 8000bde:	f7ff fc3f 	bl	8000460 <read_register>
 8000be2:	0003      	movs	r3, r0
 8000be4:	001a      	movs	r2, r3
 8000be6:	2301      	movs	r3, #1
 8000be8:	4053      	eors	r3, r2
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <receive_package+0x260>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e01e      	b.n	8000c32 <receive_package+0x29e>

		HAL_UART_Transmit(uart_handle, payload, payload_len_internal, 10);
 8000bf4:	2317      	movs	r3, #23
 8000bf6:	2218      	movs	r2, #24
 8000bf8:	189b      	adds	r3, r3, r2
 8000bfa:	19db      	adds	r3, r3, r7
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c04:	230a      	movs	r3, #10
 8000c06:	f002 fa2f 	bl	8003068 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f000 fc04 	bl	8001418 <HAL_Delay>


		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	2101      	movs	r1, #1
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fc60 	bl	80004dc <write_register>
 8000c1c:	0003      	movs	r3, r0
 8000c1e:	001a      	movs	r2, r3
 8000c20:	2301      	movs	r3, #1
 8000c22:	4053      	eors	r3, r2
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <receive_package+0x29a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e001      	b.n	8000c32 <receive_package+0x29e>
 8000c2e:	46b5      	mov	sp, r6
 8000c30:	e001      	b.n	8000c36 <receive_package+0x2a2>
 8000c32:	46b5      	mov	sp, r6
 8000c34:	e000      	b.n	8000c38 <receive_package+0x2a4>

	}


	return true;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	0018      	movs	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	b00f      	add	sp, #60	; 0x3c
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	20000144 	.word	0x20000144
 8000c44:	08004a20 	.word	0x08004a20

08000c48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	1d39      	adds	r1, r7, #4
 8000c56:	4804      	ldr	r0, [pc, #16]	; (8000c68 <__io_putchar+0x20>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f002 fa05 	bl	8003068 <HAL_UART_Transmit>
  return ch;
 8000c5e:	687b      	ldr	r3, [r7, #4]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200001ac 	.word	0x200001ac

08000c6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b093      	sub	sp, #76	; 0x4c
 8000c70:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c72:	f000 fb6d 	bl	8001350 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c76:	f000 f871 	bl	8000d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7a:	f000 f91d 	bl	8000eb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c7e:	f000 f8eb 	bl	8000e58 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000c82:	f000 f8ab 	bl	8000ddc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <main+0xd8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f000 fe0b 	bl	80018a8 <HAL_GPIO_WritePin>
  uint8_t transmit_buffer = 0x42;
 8000c92:	213b      	movs	r1, #59	; 0x3b
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2242      	movs	r2, #66	; 0x42
 8000c98:	701a      	strb	r2, [r3, #0]
  char buffer[20];

  HAL_SPI_Transmit(&hspi1, &transmit_buffer, 1, RFM95_SPI_TIMEOUT);
 8000c9a:	1879      	adds	r1, r7, r1
 8000c9c:	482a      	ldr	r0, [pc, #168]	; (8000d48 <main+0xdc>)
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f001 fb43 	bl	800232c <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, 1, RFM95_SPI_TIMEOUT);
 8000ca6:	2324      	movs	r3, #36	; 0x24
 8000ca8:	18f9      	adds	r1, r7, r3
 8000caa:	4827      	ldr	r0, [pc, #156]	; (8000d48 <main+0xdc>)
 8000cac:	230a      	movs	r3, #10
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f001 fc94 	bl	80025dc <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <main+0xd8>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2101      	movs	r1, #1
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f000 fdf4 	bl	80018a8 <HAL_GPIO_WritePin>

	  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle, &huart2)) {
 8000cc0:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <main+0xe0>)
 8000cc2:	4b23      	ldr	r3, [pc, #140]	; (8000d50 <main+0xe4>)
 8000cc4:	0011      	movs	r1, r2
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f7ff fd58 	bl	800077c <rfm95_init>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	001a      	movs	r2, r3
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4053      	eors	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d112      	bne.n	8000d00 <main+0x94>

  } else {
	  uint8_t init_message_success[] = "RFM95 init success\n\r";
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <main+0xe8>)
 8000cde:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ce0:	c313      	stmia	r3!, {r0, r1, r4}
 8000ce2:	ca03      	ldmia	r2!, {r0, r1}
 8000ce4:	c303      	stmia	r3!, {r0, r1}
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, init_message_success, sizeof(init_message_success), 10);
 8000cea:	1d39      	adds	r1, r7, #4
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <main+0xe0>)
 8000cee:	230a      	movs	r3, #10
 8000cf0:	2215      	movs	r2, #21
 8000cf2:	f002 f9b9 	bl	8003068 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000cf6:	23fa      	movs	r3, #250	; 0xfa
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f000 fb8c 	bl	8001418 <HAL_Delay>
  }

  uint8_t payloadBuff = 0;
 8000d00:	2323      	movs	r3, #35	; 0x23
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
  size_t payload_len = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000d0c:	231c      	movs	r3, #28
 8000d0e:	18fa      	adds	r2, r7, r3
 8000d10:	2323      	movs	r3, #35	; 0x23
 8000d12:	18f9      	adds	r1, r7, r3
 8000d14:	480e      	ldr	r0, [pc, #56]	; (8000d50 <main+0xe4>)
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <main+0xe0>)
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f7ff fe3a 	bl	8000994 <receive_package>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d007      	beq.n	8000d34 <main+0xc8>
		uint8_t* message = "here2";
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <main+0xec>)
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_UART_Transmit(&huart2, message, 5, 10);
 8000d28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000d2a:	4808      	ldr	r0, [pc, #32]	; (8000d4c <main+0xe0>)
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	2205      	movs	r2, #5
 8000d30:	f002 f99a 	bl	8003068 <HAL_UART_Transmit>
	}

	payloadBuff = 0;
 8000d34:	2323      	movs	r3, #35	; 0x23
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
	payload_len = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000d40:	e7e4      	b.n	8000d0c <main+0xa0>
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	48000400 	.word	0x48000400
 8000d48:	20000148 	.word	0x20000148
 8000d4c:	200001ac 	.word	0x200001ac
 8000d50:	20000000 	.word	0x20000000
 8000d54:	08004a30 	.word	0x08004a30
 8000d58:	08004a28 	.word	0x08004a28

08000d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b091      	sub	sp, #68	; 0x44
 8000d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d62:	2410      	movs	r4, #16
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	0018      	movs	r0, r3
 8000d68:	2330      	movs	r3, #48	; 0x30
 8000d6a:	001a      	movs	r2, r3
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f002 fd7d 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d72:	003b      	movs	r3, r7
 8000d74:	0018      	movs	r0, r3
 8000d76:	2310      	movs	r3, #16
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f002 fd76 	bl	800386c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d80:	0021      	movs	r1, r4
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2202      	movs	r2, #2
 8000d86:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2210      	movs	r2, #16
 8000d92:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fda1 	bl	80018e4 <HAL_RCC_OscConfig>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000da6:	f000 f90d 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000daa:	003b      	movs	r3, r7
 8000dac:	2207      	movs	r2, #7
 8000dae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db0:	003b      	movs	r3, r7
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000db6:	003b      	movs	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dbc:	003b      	movs	r3, r7
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f001 f8a6 	bl	8001f18 <HAL_RCC_ClockConfig>
 8000dcc:	1e03      	subs	r3, r0, #0
 8000dce:	d001      	beq.n	8000dd4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000dd0:	f000 f8f8 	bl	8000fc4 <Error_Handler>
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b011      	add	sp, #68	; 0x44
 8000dda:	bd90      	pop	{r4, r7, pc}

08000ddc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000de0:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000de2:	4a1c      	ldr	r2, [pc, #112]	; (8000e54 <MX_SPI1_Init+0x78>)
 8000de4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000de8:	2282      	movs	r2, #130	; 0x82
 8000dea:	0052      	lsls	r2, r2, #1
 8000dec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000df6:	22e0      	movs	r2, #224	; 0xe0
 8000df8:	00d2      	lsls	r2, r2, #3
 8000dfa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e0a:	2280      	movs	r2, #128	; 0x80
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e12:	2210      	movs	r2, #16
 8000e14:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e2a:	2207      	movs	r2, #7
 8000e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e3a:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <MX_SPI1_Init+0x74>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f001 f9bd 	bl	80021bc <HAL_SPI_Init>
 8000e42:	1e03      	subs	r3, r0, #0
 8000e44:	d001      	beq.n	8000e4a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e46:	f000 f8bd 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e4a:	46c0      	nop			; (mov r8, r8)
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000148 	.word	0x20000148
 8000e54:	40013000 	.word	0x40013000

08000e58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e5e:	4a15      	ldr	r2, [pc, #84]	; (8000eb4 <MX_USART2_UART_Init+0x5c>)
 8000e60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e64:	2296      	movs	r2, #150	; 0x96
 8000e66:	0212      	lsls	r2, r2, #8
 8000e68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6a:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e70:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e7e:	220c      	movs	r2, #12
 8000e80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e88:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e94:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <MX_USART2_UART_Init+0x58>)
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f002 f88f 	bl	8002fc0 <HAL_UART_Init>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ea6:	f000 f88d 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200001ac 	.word	0x200001ac
 8000eb4:	40004400 	.word	0x40004400

08000eb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b089      	sub	sp, #36	; 0x24
 8000ebc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebe:	240c      	movs	r4, #12
 8000ec0:	193b      	adds	r3, r7, r4
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	2314      	movs	r3, #20
 8000ec6:	001a      	movs	r2, r3
 8000ec8:	2100      	movs	r1, #0
 8000eca:	f002 fccf 	bl	800386c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ece:	4b3a      	ldr	r3, [pc, #232]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000ed0:	695a      	ldr	r2, [r3, #20]
 8000ed2:	4b39      	ldr	r3, [pc, #228]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000ed4:	2180      	movs	r1, #128	; 0x80
 8000ed6:	0289      	lsls	r1, r1, #10
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	4b36      	ldr	r3, [pc, #216]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000ede:	695a      	ldr	r2, [r3, #20]
 8000ee0:	2380      	movs	r3, #128	; 0x80
 8000ee2:	029b      	lsls	r3, r3, #10
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000eec:	695a      	ldr	r2, [r3, #20]
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	02c9      	lsls	r1, r1, #11
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	615a      	str	r2, [r3, #20]
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000efa:	695a      	ldr	r2, [r3, #20]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	02db      	lsls	r3, r3, #11
 8000f00:	4013      	ands	r3, r2
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0309      	lsls	r1, r1, #12
 8000f10:	430a      	orrs	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_GPIO_Init+0x100>)
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	031b      	lsls	r3, r3, #12
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	603b      	str	r3, [r7, #0]
 8000f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000f22:	4b26      	ldr	r3, [pc, #152]	; (8000fbc <MX_GPIO_Init+0x104>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	2101      	movs	r1, #1
 8000f28:	0018      	movs	r0, r3
 8000f2a:	f000 fcbd 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f2e:	23a0      	movs	r3, #160	; 0xa0
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	4823      	ldr	r0, [pc, #140]	; (8000fc0 <MX_GPIO_Init+0x108>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	0019      	movs	r1, r3
 8000f38:	f000 fcb6 	bl	80018a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8000f3c:	193b      	adds	r3, r7, r4
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2201      	movs	r2, #1
 8000f46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	4a19      	ldr	r2, [pc, #100]	; (8000fbc <MX_GPIO_Init+0x104>)
 8000f58:	0019      	movs	r1, r3
 8000f5a:	0010      	movs	r0, r2
 8000f5c:	f000 fb34 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f60:	0021      	movs	r1, r4
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	22a0      	movs	r2, #160	; 0xa0
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	000c      	movs	r4, r1
 8000f6c:	193b      	adds	r3, r7, r4
 8000f6e:	2201      	movs	r2, #1
 8000f70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	4a0f      	ldr	r2, [pc, #60]	; (8000fc0 <MX_GPIO_Init+0x108>)
 8000f82:	0019      	movs	r1, r3
 8000f84:	0010      	movs	r0, r2
 8000f86:	f000 fb1f 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f8a:	0021      	movs	r1, r4
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	22e0      	movs	r2, #224	; 0xe0
 8000f90:	00d2      	lsls	r2, r2, #3
 8000f92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	187a      	adds	r2, r7, r1
 8000fa2:	2390      	movs	r3, #144	; 0x90
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 fb0d 	bl	80015c8 <HAL_GPIO_Init>

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b009      	add	sp, #36	; 0x24
 8000fb4:	bd90      	pop	{r4, r7, pc}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <Error_Handler+0x8>
	...

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd6:	4b0f      	ldr	r3, [pc, #60]	; (8001014 <HAL_MspInit+0x44>)
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <HAL_MspInit+0x44>)
 8000fdc:	2101      	movs	r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_MspInit+0x44>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	4013      	ands	r3, r2
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x44>)
 8000ff0:	69da      	ldr	r2, [r3, #28]
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_MspInit+0x44>)
 8000ff4:	2180      	movs	r1, #128	; 0x80
 8000ff6:	0549      	lsls	r1, r1, #21
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	61da      	str	r2, [r3, #28]
 8000ffc:	4b05      	ldr	r3, [pc, #20]	; (8001014 <HAL_MspInit+0x44>)
 8000ffe:	69da      	ldr	r2, [r3, #28]
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	055b      	lsls	r3, r3, #21
 8001004:	4013      	ands	r3, r2
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40021000 	.word	0x40021000

08001018 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b08b      	sub	sp, #44	; 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	2414      	movs	r4, #20
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	2314      	movs	r3, #20
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f002 fc1e 	bl	800386c <memset>
  if(hspi->Instance==SPI1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a1c      	ldr	r2, [pc, #112]	; (80010a8 <HAL_SPI_MspInit+0x90>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d132      	bne.n	80010a0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103a:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_SPI_MspInit+0x94>)
 800103c:	699a      	ldr	r2, [r3, #24]
 800103e:	4b1b      	ldr	r3, [pc, #108]	; (80010ac <HAL_SPI_MspInit+0x94>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0149      	lsls	r1, r1, #5
 8001044:	430a      	orrs	r2, r1
 8001046:	619a      	str	r2, [r3, #24]
 8001048:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_SPI_MspInit+0x94>)
 800104a:	699a      	ldr	r2, [r3, #24]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	015b      	lsls	r3, r3, #5
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_SPI_MspInit+0x94>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_SPI_MspInit+0x94>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	0289      	lsls	r1, r1, #10
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_SPI_MspInit+0x94>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	029b      	lsls	r3, r3, #10
 800106c:	4013      	ands	r3, r2
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001072:	0021      	movs	r1, r4
 8001074:	187b      	adds	r3, r7, r1
 8001076:	22e0      	movs	r2, #224	; 0xe0
 8001078:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	2202      	movs	r2, #2
 800107e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	187b      	adds	r3, r7, r1
 8001088:	2203      	movs	r2, #3
 800108a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800108c:	187b      	adds	r3, r7, r1
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	187a      	adds	r2, r7, r1
 8001094:	2390      	movs	r3, #144	; 0x90
 8001096:	05db      	lsls	r3, r3, #23
 8001098:	0011      	movs	r1, r2
 800109a:	0018      	movs	r0, r3
 800109c:	f000 fa94 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010a0:	46c0      	nop			; (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	b00b      	add	sp, #44	; 0x2c
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	40013000 	.word	0x40013000
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b08b      	sub	sp, #44	; 0x2c
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	2414      	movs	r4, #20
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	2314      	movs	r3, #20
 80010c0:	001a      	movs	r2, r3
 80010c2:	2100      	movs	r1, #0
 80010c4:	f002 fbd2 	bl	800386c <memset>
  if(huart->Instance==USART2)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <HAL_UART_MspInit+0x90>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d132      	bne.n	8001138 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010d4:	69da      	ldr	r2, [r3, #28]
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	0289      	lsls	r1, r1, #10
 80010dc:	430a      	orrs	r2, r1
 80010de:	61da      	str	r2, [r3, #28]
 80010e0:	4b18      	ldr	r3, [pc, #96]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	029b      	lsls	r3, r3, #10
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010f0:	695a      	ldr	r2, [r3, #20]
 80010f2:	4b14      	ldr	r3, [pc, #80]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010f4:	2180      	movs	r1, #128	; 0x80
 80010f6:	0289      	lsls	r1, r1, #10
 80010f8:	430a      	orrs	r2, r1
 80010fa:	615a      	str	r2, [r3, #20]
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <HAL_UART_MspInit+0x94>)
 80010fe:	695a      	ldr	r2, [r3, #20]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800110a:	0021      	movs	r1, r4
 800110c:	187b      	adds	r3, r7, r1
 800110e:	220c      	movs	r2, #12
 8001110:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	187b      	adds	r3, r7, r1
 8001114:	2202      	movs	r2, #2
 8001116:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	187b      	adds	r3, r7, r1
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800111e:	187b      	adds	r3, r7, r1
 8001120:	2203      	movs	r2, #3
 8001122:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001124:	187b      	adds	r3, r7, r1
 8001126:	2201      	movs	r2, #1
 8001128:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	187a      	adds	r2, r7, r1
 800112c:	2390      	movs	r3, #144	; 0x90
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	0011      	movs	r1, r2
 8001132:	0018      	movs	r0, r3
 8001134:	f000 fa48 	bl	80015c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b00b      	add	sp, #44	; 0x2c
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	40004400 	.word	0x40004400
 8001144:	40021000 	.word	0x40021000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800114c:	e7fe      	b.n	800114c <NMI_Handler+0x4>

0800114e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <HardFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800116c:	f000 f938 	bl	80013e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001170:	46c0      	nop			; (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	af00      	add	r7, sp, #0
  return 1;
 800117a:	2301      	movs	r3, #1
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <_kill>:

int _kill(int pid, int sig)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800118c:	f002 fb34 	bl	80037f8 <__errno>
 8001190:	0003      	movs	r3, r0
 8001192:	2216      	movs	r2, #22
 8001194:	601a      	str	r2, [r3, #0]
  return -1;
 8001196:	2301      	movs	r3, #1
 8001198:	425b      	negs	r3, r3
}
 800119a:	0018      	movs	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <_exit>:

void _exit (int status)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011aa:	2301      	movs	r3, #1
 80011ac:	425a      	negs	r2, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	0011      	movs	r1, r2
 80011b2:	0018      	movs	r0, r3
 80011b4:	f7ff ffe5 	bl	8001182 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011b8:	e7fe      	b.n	80011b8 <_exit+0x16>

080011ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b086      	sub	sp, #24
 80011be:	af00      	add	r7, sp, #0
 80011c0:	60f8      	str	r0, [r7, #12]
 80011c2:	60b9      	str	r1, [r7, #8]
 80011c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	e00a      	b.n	80011e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011cc:	e000      	b.n	80011d0 <_read+0x16>
 80011ce:	bf00      	nop
 80011d0:	0001      	movs	r1, r0
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	b2ca      	uxtb	r2, r1
 80011da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3301      	adds	r3, #1
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbf0      	blt.n	80011cc <_read+0x12>
  }

  return len;
 80011ea:	687b      	ldr	r3, [r7, #4]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b006      	add	sp, #24
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	e009      	b.n	800121a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1c5a      	adds	r2, r3, #1
 800120a:	60ba      	str	r2, [r7, #8]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	0018      	movs	r0, r3
 8001210:	f7ff fd1a 	bl	8000c48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	3301      	adds	r3, #1
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbf1      	blt.n	8001206 <_write+0x12>
  }
  return len;
 8001222:	687b      	ldr	r3, [r7, #4]
}
 8001224:	0018      	movs	r0, r3
 8001226:	46bd      	mov	sp, r7
 8001228:	b006      	add	sp, #24
 800122a:	bd80      	pop	{r7, pc}

0800122c <_close>:

int _close(int file)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	0192      	lsls	r2, r2, #6
 8001250:	605a      	str	r2, [r3, #4]
  return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b002      	add	sp, #8
 800125a:	bd80      	pop	{r7, pc}

0800125c <_isatty>:

int _isatty(int file)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001264:	2301      	movs	r3, #1
}
 8001266:	0018      	movs	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}

0800126e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800127a:	2300      	movs	r3, #0
}
 800127c:	0018      	movs	r0, r3
 800127e:	46bd      	mov	sp, r7
 8001280:	b004      	add	sp, #16
 8001282:	bd80      	pop	{r7, pc}

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	18d3      	adds	r3, r2, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f002 faa0 	bl	80037f8 <__errno>
 80012b8:	0003      	movs	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	2301      	movs	r3, #1
 80012c0:	425b      	negs	r3, r3
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	18d2      	adds	r2, r2, r3
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b006      	add	sp, #24
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20002000 	.word	0x20002000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20000230 	.word	0x20000230
 80012ec:	20000248 	.word	0x20000248

080012f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012fc:	480d      	ldr	r0, [pc, #52]	; (8001334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480d      	ldr	r0, [pc, #52]	; (8001338 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490e      	ldr	r1, [pc, #56]	; (800133c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0b      	ldr	r4, [pc, #44]	; (8001348 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001326:	f7ff ffe3 	bl	80012f0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800132a:	f002 fa7b 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fc9d 	bl	8000c6c <main>

08001332 <LoopForever>:

LoopForever:
    b LoopForever
 8001332:	e7fe      	b.n	8001332 <LoopForever>
  ldr   r0, =_estack
 8001334:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800133c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001340:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 8001344:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001348:	20000248 	.word	0x20000248

0800134c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800134c:	e7fe      	b.n	800134c <ADC1_IRQHandler>
	...

08001350 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001354:	4b07      	ldr	r3, [pc, #28]	; (8001374 <HAL_Init+0x24>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_Init+0x24>)
 800135a:	2110      	movs	r1, #16
 800135c:	430a      	orrs	r2, r1
 800135e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001360:	2003      	movs	r0, #3
 8001362:	f000 f809 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001366:	f7ff fe33 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_InitTick+0x5c>)
 8001382:	681c      	ldr	r4, [r3, #0]
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	0019      	movs	r1, r3
 800138a:	23fa      	movs	r3, #250	; 0xfa
 800138c:	0098      	lsls	r0, r3, #2
 800138e:	f7fe fec5 	bl	800011c <__udivsi3>
 8001392:	0003      	movs	r3, r0
 8001394:	0019      	movs	r1, r3
 8001396:	0020      	movs	r0, r4
 8001398:	f7fe fec0 	bl	800011c <__udivsi3>
 800139c:	0003      	movs	r3, r0
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f905 	bl	80015ae <HAL_SYSTICK_Config>
 80013a4:	1e03      	subs	r3, r0, #0
 80013a6:	d001      	beq.n	80013ac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e00f      	b.n	80013cc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d80b      	bhi.n	80013ca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b2:	6879      	ldr	r1, [r7, #4]
 80013b4:	2301      	movs	r3, #1
 80013b6:	425b      	negs	r3, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 f8e2 	bl	8001584 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_InitTick+0x64>)
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e000      	b.n	80013cc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
}
 80013cc:	0018      	movs	r0, r3
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b003      	add	sp, #12
 80013d2:	bd90      	pop	{r4, r7, pc}
 80013d4:	200000b8 	.word	0x200000b8
 80013d8:	200000c0 	.word	0x200000c0
 80013dc:	200000bc 	.word	0x200000bc

080013e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_IncTick+0x1c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	001a      	movs	r2, r3
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <HAL_IncTick+0x20>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	18d2      	adds	r2, r2, r3
 80013f0:	4b03      	ldr	r3, [pc, #12]	; (8001400 <HAL_IncTick+0x20>)
 80013f2:	601a      	str	r2, [r3, #0]
}
 80013f4:	46c0      	nop			; (mov r8, r8)
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	200000c0 	.word	0x200000c0
 8001400:	20000234 	.word	0x20000234

08001404 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_GetTick+0x10>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	20000234 	.word	0x20000234

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff fff0 	bl	8001404 <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	3301      	adds	r3, #1
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001a      	movs	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	189b      	adds	r3, r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	f7ff ffe0 	bl	8001404 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46c0      	nop			; (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bd80      	pop	{r7, pc}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	200000c0 	.word	0x200000c0

08001460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b590      	push	{r4, r7, lr}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	0002      	movs	r2, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800146e:	1dfb      	adds	r3, r7, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	2b7f      	cmp	r3, #127	; 0x7f
 8001474:	d828      	bhi.n	80014c8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001476:	4a2f      	ldr	r2, [pc, #188]	; (8001534 <__NVIC_SetPriority+0xd4>)
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	089b      	lsrs	r3, r3, #2
 8001480:	33c0      	adds	r3, #192	; 0xc0
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	589b      	ldr	r3, [r3, r2]
 8001486:	1dfa      	adds	r2, r7, #7
 8001488:	7812      	ldrb	r2, [r2, #0]
 800148a:	0011      	movs	r1, r2
 800148c:	2203      	movs	r2, #3
 800148e:	400a      	ands	r2, r1
 8001490:	00d2      	lsls	r2, r2, #3
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	4091      	lsls	r1, r2
 8001496:	000a      	movs	r2, r1
 8001498:	43d2      	mvns	r2, r2
 800149a:	401a      	ands	r2, r3
 800149c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	019b      	lsls	r3, r3, #6
 80014a2:	22ff      	movs	r2, #255	; 0xff
 80014a4:	401a      	ands	r2, r3
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	0018      	movs	r0, r3
 80014ac:	2303      	movs	r3, #3
 80014ae:	4003      	ands	r3, r0
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b4:	481f      	ldr	r0, [pc, #124]	; (8001534 <__NVIC_SetPriority+0xd4>)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	430a      	orrs	r2, r1
 80014c0:	33c0      	adds	r3, #192	; 0xc0
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014c6:	e031      	b.n	800152c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c8:	4a1b      	ldr	r2, [pc, #108]	; (8001538 <__NVIC_SetPriority+0xd8>)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	0019      	movs	r1, r3
 80014d0:	230f      	movs	r3, #15
 80014d2:	400b      	ands	r3, r1
 80014d4:	3b08      	subs	r3, #8
 80014d6:	089b      	lsrs	r3, r3, #2
 80014d8:	3306      	adds	r3, #6
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	18d3      	adds	r3, r2, r3
 80014de:	3304      	adds	r3, #4
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1dfa      	adds	r2, r7, #7
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	0011      	movs	r1, r2
 80014e8:	2203      	movs	r2, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	00d2      	lsls	r2, r2, #3
 80014ee:	21ff      	movs	r1, #255	; 0xff
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	401a      	ands	r2, r3
 80014f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	22ff      	movs	r2, #255	; 0xff
 8001500:	401a      	ands	r2, r3
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4003      	ands	r3, r0
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <__NVIC_SetPriority+0xd8>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	001c      	movs	r4, r3
 8001518:	230f      	movs	r3, #15
 800151a:	4023      	ands	r3, r4
 800151c:	3b08      	subs	r3, #8
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	430a      	orrs	r2, r1
 8001522:	3306      	adds	r3, #6
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	18c3      	adds	r3, r0, r3
 8001528:	3304      	adds	r3, #4
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	46c0      	nop			; (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	b003      	add	sp, #12
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	e000e100 	.word	0xe000e100
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	1e5a      	subs	r2, r3, #1
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	045b      	lsls	r3, r3, #17
 800154c:	429a      	cmp	r2, r3
 800154e:	d301      	bcc.n	8001554 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001550:	2301      	movs	r3, #1
 8001552:	e010      	b.n	8001576 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <SysTick_Config+0x44>)
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	3a01      	subs	r2, #1
 800155a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155c:	2301      	movs	r3, #1
 800155e:	425b      	negs	r3, r3
 8001560:	2103      	movs	r1, #3
 8001562:	0018      	movs	r0, r3
 8001564:	f7ff ff7c 	bl	8001460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x44>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x44>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	0018      	movs	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	210f      	movs	r1, #15
 8001590:	187b      	adds	r3, r7, r1
 8001592:	1c02      	adds	r2, r0, #0
 8001594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	187b      	adds	r3, r7, r1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	b25b      	sxtb	r3, r3
 800159e:	0011      	movs	r1, r2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7ff ff5d 	bl	8001460 <__NVIC_SetPriority>
}
 80015a6:	46c0      	nop			; (mov r8, r8)
 80015a8:	46bd      	mov	sp, r7
 80015aa:	b004      	add	sp, #16
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ffbf 	bl	800153c <SysTick_Config>
 80015be:	0003      	movs	r3, r0
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b002      	add	sp, #8
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d6:	e14f      	b.n	8001878 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2101      	movs	r1, #1
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4091      	lsls	r1, r2
 80015e2:	000a      	movs	r2, r1
 80015e4:	4013      	ands	r3, r2
 80015e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d100      	bne.n	80015f0 <HAL_GPIO_Init+0x28>
 80015ee:	e140      	b.n	8001872 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2203      	movs	r2, #3
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d005      	beq.n	8001608 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2203      	movs	r2, #3
 8001602:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001604:	2b02      	cmp	r3, #2
 8001606:	d130      	bne.n	800166a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	2203      	movs	r2, #3
 8001614:	409a      	lsls	r2, r3
 8001616:	0013      	movs	r3, r2
 8001618:	43da      	mvns	r2, r3
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68da      	ldr	r2, [r3, #12]
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800163e:	2201      	movs	r2, #1
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
 8001644:	0013      	movs	r3, r2
 8001646:	43da      	mvns	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	4013      	ands	r3, r2
 800164c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	2201      	movs	r2, #1
 8001656:	401a      	ands	r2, r3
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2203      	movs	r2, #3
 8001670:	4013      	ands	r3, r2
 8001672:	2b03      	cmp	r3, #3
 8001674:	d017      	beq.n	80016a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	409a      	lsls	r2, r3
 8001684:	0013      	movs	r3, r2
 8001686:	43da      	mvns	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2203      	movs	r2, #3
 80016ac:	4013      	ands	r3, r2
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d123      	bne.n	80016fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	08da      	lsrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	3208      	adds	r2, #8
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	58d3      	ldr	r3, [r2, r3]
 80016be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	2207      	movs	r2, #7
 80016c4:	4013      	ands	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	409a      	lsls	r2, r3
 80016cc:	0013      	movs	r3, r2
 80016ce:	43da      	mvns	r2, r3
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4013      	ands	r3, r2
 80016d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	691a      	ldr	r2, [r3, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	2107      	movs	r1, #7
 80016de:	400b      	ands	r3, r1
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	409a      	lsls	r2, r3
 80016e4:	0013      	movs	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	0092      	lsls	r2, r2, #2
 80016f6:	6939      	ldr	r1, [r7, #16]
 80016f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	2203      	movs	r2, #3
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	43da      	mvns	r2, r3
 800170c:	693b      	ldr	r3, [r7, #16]
 800170e:	4013      	ands	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2203      	movs	r2, #3
 8001718:	401a      	ands	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	409a      	lsls	r2, r3
 8001720:	0013      	movs	r3, r2
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	23c0      	movs	r3, #192	; 0xc0
 8001734:	029b      	lsls	r3, r3, #10
 8001736:	4013      	ands	r3, r2
 8001738:	d100      	bne.n	800173c <HAL_GPIO_Init+0x174>
 800173a:	e09a      	b.n	8001872 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173c:	4b54      	ldr	r3, [pc, #336]	; (8001890 <HAL_GPIO_Init+0x2c8>)
 800173e:	699a      	ldr	r2, [r3, #24]
 8001740:	4b53      	ldr	r3, [pc, #332]	; (8001890 <HAL_GPIO_Init+0x2c8>)
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	619a      	str	r2, [r3, #24]
 8001748:	4b51      	ldr	r3, [pc, #324]	; (8001890 <HAL_GPIO_Init+0x2c8>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2201      	movs	r2, #1
 800174e:	4013      	ands	r3, r2
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001754:	4a4f      	ldr	r2, [pc, #316]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	089b      	lsrs	r3, r3, #2
 800175a:	3302      	adds	r3, #2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	589b      	ldr	r3, [r3, r2]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2203      	movs	r2, #3
 8001766:	4013      	ands	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	409a      	lsls	r2, r3
 800176e:	0013      	movs	r3, r2
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	2390      	movs	r3, #144	; 0x90
 800177c:	05db      	lsls	r3, r3, #23
 800177e:	429a      	cmp	r2, r3
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x1e2>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a44      	ldr	r2, [pc, #272]	; (8001898 <HAL_GPIO_Init+0x2d0>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x1de>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a43      	ldr	r2, [pc, #268]	; (800189c <HAL_GPIO_Init+0x2d4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x1da>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a42      	ldr	r2, [pc, #264]	; (80018a0 <HAL_GPIO_Init+0x2d8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x1d6>
 800179a:	2303      	movs	r3, #3
 800179c:	e006      	b.n	80017ac <HAL_GPIO_Init+0x1e4>
 800179e:	2305      	movs	r3, #5
 80017a0:	e004      	b.n	80017ac <HAL_GPIO_Init+0x1e4>
 80017a2:	2302      	movs	r3, #2
 80017a4:	e002      	b.n	80017ac <HAL_GPIO_Init+0x1e4>
 80017a6:	2301      	movs	r3, #1
 80017a8:	e000      	b.n	80017ac <HAL_GPIO_Init+0x1e4>
 80017aa:	2300      	movs	r3, #0
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	2103      	movs	r1, #3
 80017b0:	400a      	ands	r2, r1
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	4093      	lsls	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017bc:	4935      	ldr	r1, [pc, #212]	; (8001894 <HAL_GPIO_Init+0x2cc>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ca:	4b36      	ldr	r3, [pc, #216]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	43da      	mvns	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685a      	ldr	r2, [r3, #4]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	025b      	lsls	r3, r3, #9
 80017e2:	4013      	ands	r3, r2
 80017e4:	d003      	beq.n	80017ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	43da      	mvns	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	029b      	lsls	r3, r3, #10
 800180c:	4013      	ands	r3, r2
 800180e:	d003      	beq.n	8001818 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001818:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	43da      	mvns	r2, r3
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	4013      	ands	r3, r2
 800182c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	035b      	lsls	r3, r3, #13
 8001836:	4013      	ands	r3, r2
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	43da      	mvns	r2, r3
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	2380      	movs	r3, #128	; 0x80
 800185e:	039b      	lsls	r3, r3, #14
 8001860:	4013      	ands	r3, r2
 8001862:	d003      	beq.n	800186c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4313      	orrs	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_GPIO_Init+0x2dc>)
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3301      	adds	r3, #1
 8001876:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	40da      	lsrs	r2, r3
 8001880:	1e13      	subs	r3, r2, #0
 8001882:	d000      	beq.n	8001886 <HAL_GPIO_Init+0x2be>
 8001884:	e6a8      	b.n	80015d8 <HAL_GPIO_Init+0x10>
  } 
}
 8001886:	46c0      	nop			; (mov r8, r8)
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b006      	add	sp, #24
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40021000 	.word	0x40021000
 8001894:	40010000 	.word	0x40010000
 8001898:	48000400 	.word	0x48000400
 800189c:	48000800 	.word	0x48000800
 80018a0:	48000c00 	.word	0x48000c00
 80018a4:	40010400 	.word	0x40010400

080018a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	0008      	movs	r0, r1
 80018b2:	0011      	movs	r1, r2
 80018b4:	1cbb      	adds	r3, r7, #2
 80018b6:	1c02      	adds	r2, r0, #0
 80018b8:	801a      	strh	r2, [r3, #0]
 80018ba:	1c7b      	adds	r3, r7, #1
 80018bc:	1c0a      	adds	r2, r1, #0
 80018be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018c0:	1c7b      	adds	r3, r7, #1
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	881a      	ldrh	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d0:	e003      	b.n	80018da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d2:	1cbb      	adds	r3, r7, #2
 80018d4:	881a      	ldrh	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	46bd      	mov	sp, r7
 80018de:	b002      	add	sp, #8
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e301      	b.n	8001efa <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d100      	bne.n	8001902 <HAL_RCC_OscConfig+0x1e>
 8001900:	e08d      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001902:	4bc3      	ldr	r3, [pc, #780]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	220c      	movs	r2, #12
 8001908:	4013      	ands	r3, r2
 800190a:	2b04      	cmp	r3, #4
 800190c:	d00e      	beq.n	800192c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800190e:	4bc0      	ldr	r3, [pc, #768]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	220c      	movs	r2, #12
 8001914:	4013      	ands	r3, r2
 8001916:	2b08      	cmp	r3, #8
 8001918:	d116      	bne.n	8001948 <HAL_RCC_OscConfig+0x64>
 800191a:	4bbd      	ldr	r3, [pc, #756]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	025b      	lsls	r3, r3, #9
 8001922:	401a      	ands	r2, r3
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	429a      	cmp	r2, r3
 800192a:	d10d      	bne.n	8001948 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192c:	4bb8      	ldr	r3, [pc, #736]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	029b      	lsls	r3, r3, #10
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x56>
 8001938:	e070      	b.n	8001a1c <HAL_RCC_OscConfig+0x138>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d000      	beq.n	8001944 <HAL_RCC_OscConfig+0x60>
 8001942:	e06b      	b.n	8001a1c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e2d8      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d107      	bne.n	8001960 <HAL_RCC_OscConfig+0x7c>
 8001950:	4baf      	ldr	r3, [pc, #700]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4bae      	ldr	r3, [pc, #696]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001956:	2180      	movs	r1, #128	; 0x80
 8001958:	0249      	lsls	r1, r1, #9
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e02f      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10c      	bne.n	8001982 <HAL_RCC_OscConfig+0x9e>
 8001968:	4ba9      	ldr	r3, [pc, #676]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4ba8      	ldr	r3, [pc, #672]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800196e:	49a9      	ldr	r1, [pc, #676]	; (8001c14 <HAL_RCC_OscConfig+0x330>)
 8001970:	400a      	ands	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4ba6      	ldr	r3, [pc, #664]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4ba5      	ldr	r3, [pc, #660]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800197a:	49a7      	ldr	r1, [pc, #668]	; (8001c18 <HAL_RCC_OscConfig+0x334>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	e01e      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b05      	cmp	r3, #5
 8001988:	d10e      	bne.n	80019a8 <HAL_RCC_OscConfig+0xc4>
 800198a:	4ba1      	ldr	r3, [pc, #644]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4ba0      	ldr	r3, [pc, #640]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001990:	2180      	movs	r1, #128	; 0x80
 8001992:	02c9      	lsls	r1, r1, #11
 8001994:	430a      	orrs	r2, r1
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	4b9d      	ldr	r3, [pc, #628]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4b9c      	ldr	r3, [pc, #624]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 800199e:	2180      	movs	r1, #128	; 0x80
 80019a0:	0249      	lsls	r1, r1, #9
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xdc>
 80019a8:	4b99      	ldr	r3, [pc, #612]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b98      	ldr	r3, [pc, #608]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	4999      	ldr	r1, [pc, #612]	; (8001c14 <HAL_RCC_OscConfig+0x330>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b96      	ldr	r3, [pc, #600]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b95      	ldr	r3, [pc, #596]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	4997      	ldr	r1, [pc, #604]	; (8001c18 <HAL_RCC_OscConfig+0x334>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d014      	beq.n	80019f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c8:	f7ff fd1c 	bl	8001404 <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d0:	e008      	b.n	80019e4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d2:	f7ff fd17 	bl	8001404 <HAL_GetTick>
 80019d6:	0002      	movs	r2, r0
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b64      	cmp	r3, #100	; 0x64
 80019de:	d901      	bls.n	80019e4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019e0:	2303      	movs	r3, #3
 80019e2:	e28a      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e4:	4b8a      	ldr	r3, [pc, #552]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	4013      	ands	r3, r2
 80019ee:	d0f0      	beq.n	80019d2 <HAL_RCC_OscConfig+0xee>
 80019f0:	e015      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff fd07 	bl	8001404 <HAL_GetTick>
 80019f6:	0003      	movs	r3, r0
 80019f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fc:	f7ff fd02 	bl	8001404 <HAL_GetTick>
 8001a00:	0002      	movs	r2, r0
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	; 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e275      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0e:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	029b      	lsls	r3, r3, #10
 8001a16:	4013      	ands	r3, r2
 8001a18:	d1f0      	bne.n	80019fc <HAL_RCC_OscConfig+0x118>
 8001a1a:	e000      	b.n	8001a1e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a1c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2202      	movs	r2, #2
 8001a24:	4013      	ands	r3, r2
 8001a26:	d100      	bne.n	8001a2a <HAL_RCC_OscConfig+0x146>
 8001a28:	e069      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a2a:	4b79      	ldr	r3, [pc, #484]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	220c      	movs	r2, #12
 8001a30:	4013      	ands	r3, r2
 8001a32:	d00b      	beq.n	8001a4c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a34:	4b76      	ldr	r3, [pc, #472]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d11c      	bne.n	8001a7a <HAL_RCC_OscConfig+0x196>
 8001a40:	4b73      	ldr	r3, [pc, #460]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	2380      	movs	r3, #128	; 0x80
 8001a46:	025b      	lsls	r3, r3, #9
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d116      	bne.n	8001a7a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a4c:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d001      	beq.n	8001a62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e24b      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	22f8      	movs	r2, #248	; 0xf8
 8001a68:	4393      	bics	r3, r2
 8001a6a:	0019      	movs	r1, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	00da      	lsls	r2, r3, #3
 8001a72:	4b67      	ldr	r3, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a78:	e041      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d024      	beq.n	8001acc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a82:	4b63      	ldr	r3, [pc, #396]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	4b62      	ldr	r3, [pc, #392]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff fcb9 	bl	8001404 <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff fcb4 	bl	8001404 <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e227      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b59      	ldr	r3, [pc, #356]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2202      	movs	r2, #2
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	d0f1      	beq.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab4:	4b56      	ldr	r3, [pc, #344]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	22f8      	movs	r2, #248	; 0xf8
 8001aba:	4393      	bics	r3, r2
 8001abc:	0019      	movs	r1, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00da      	lsls	r2, r3, #3
 8001ac4:	4b52      	ldr	r3, [pc, #328]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	e018      	b.n	8001afe <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001acc:	4b50      	ldr	r3, [pc, #320]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b4f      	ldr	r3, [pc, #316]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	438a      	bics	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fc94 	bl	8001404 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae2:	f7ff fc8f 	bl	8001404 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e202      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af4:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f1      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2208      	movs	r2, #8
 8001b04:	4013      	ands	r3, r2
 8001b06:	d036      	beq.n	8001b76 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d019      	beq.n	8001b44 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b10:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b16:	2101      	movs	r1, #1
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1c:	f7ff fc72 	bl	8001404 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff fc6d 	bl	8001404 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e1e0      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b38:	4b35      	ldr	r3, [pc, #212]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d0f1      	beq.n	8001b26 <HAL_RCC_OscConfig+0x242>
 8001b42:	e018      	b.n	8001b76 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b44:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b48:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	438a      	bics	r2, r1
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b50:	f7ff fc58 	bl	8001404 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b5a:	f7ff fc53 	bl	8001404 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e1c6      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b6c:	4b28      	ldr	r3, [pc, #160]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d1f1      	bne.n	8001b5a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d100      	bne.n	8001b82 <HAL_RCC_OscConfig+0x29e>
 8001b80:	e0b4      	b.n	8001cec <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b82:	201f      	movs	r0, #31
 8001b84:	183b      	adds	r3, r7, r0
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b8a:	4b21      	ldr	r3, [pc, #132]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	2380      	movs	r3, #128	; 0x80
 8001b90:	055b      	lsls	r3, r3, #21
 8001b92:	4013      	ands	r3, r2
 8001b94:	d110      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b1e      	ldr	r3, [pc, #120]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	2180      	movs	r1, #128	; 0x80
 8001b9e:	0549      	lsls	r1, r1, #21
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	61da      	str	r2, [r3, #28]
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	2380      	movs	r3, #128	; 0x80
 8001baa:	055b      	lsls	r3, r3, #21
 8001bac:	4013      	ands	r3, r2
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bb2:	183b      	adds	r3, r7, r0
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d11a      	bne.n	8001bfa <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bc4:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bca:	2180      	movs	r1, #128	; 0x80
 8001bcc:	0049      	lsls	r1, r1, #1
 8001bce:	430a      	orrs	r2, r1
 8001bd0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd2:	f7ff fc17 	bl	8001404 <HAL_GetTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bdc:	f7ff fc12 	bl	8001404 <HAL_GetTick>
 8001be0:	0002      	movs	r2, r0
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	; 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e185      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <HAL_RCC_OscConfig+0x338>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d10e      	bne.n	8001c20 <HAL_RCC_OscConfig+0x33c>
 8001c02:	4b03      	ldr	r3, [pc, #12]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001c04:	6a1a      	ldr	r2, [r3, #32]
 8001c06:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	621a      	str	r2, [r3, #32]
 8001c0e:	e035      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c10:	40021000 	.word	0x40021000
 8001c14:	fffeffff 	.word	0xfffeffff
 8001c18:	fffbffff 	.word	0xfffbffff
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10c      	bne.n	8001c42 <HAL_RCC_OscConfig+0x35e>
 8001c28:	4bb6      	ldr	r3, [pc, #728]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c2a:	6a1a      	ldr	r2, [r3, #32]
 8001c2c:	4bb5      	ldr	r3, [pc, #724]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	438a      	bics	r2, r1
 8001c32:	621a      	str	r2, [r3, #32]
 8001c34:	4bb3      	ldr	r3, [pc, #716]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	4bb2      	ldr	r3, [pc, #712]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	621a      	str	r2, [r3, #32]
 8001c40:	e01c      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x380>
 8001c4a:	4bae      	ldr	r3, [pc, #696]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c4c:	6a1a      	ldr	r2, [r3, #32]
 8001c4e:	4bad      	ldr	r3, [pc, #692]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c50:	2104      	movs	r1, #4
 8001c52:	430a      	orrs	r2, r1
 8001c54:	621a      	str	r2, [r3, #32]
 8001c56:	4bab      	ldr	r3, [pc, #684]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	4baa      	ldr	r3, [pc, #680]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	621a      	str	r2, [r3, #32]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x398>
 8001c64:	4ba7      	ldr	r3, [pc, #668]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c66:	6a1a      	ldr	r2, [r3, #32]
 8001c68:	4ba6      	ldr	r3, [pc, #664]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	438a      	bics	r2, r1
 8001c6e:	621a      	str	r2, [r3, #32]
 8001c70:	4ba4      	ldr	r3, [pc, #656]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c72:	6a1a      	ldr	r2, [r3, #32]
 8001c74:	4ba3      	ldr	r3, [pc, #652]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001c76:	2104      	movs	r1, #4
 8001c78:	438a      	bics	r2, r1
 8001c7a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d014      	beq.n	8001cae <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fbbe 	bl	8001404 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	e009      	b.n	8001ca2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7ff fbb9 	bl	8001404 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	4a9b      	ldr	r2, [pc, #620]	; (8001f08 <HAL_RCC_OscConfig+0x624>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e12b      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b98      	ldr	r3, [pc, #608]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x3aa>
 8001cac:	e013      	b.n	8001cd6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7ff fba9 	bl	8001404 <HAL_GetTick>
 8001cb2:	0003      	movs	r3, r0
 8001cb4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e009      	b.n	8001ccc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7ff fba4 	bl	8001404 <HAL_GetTick>
 8001cbc:	0002      	movs	r2, r0
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	4a91      	ldr	r2, [pc, #580]	; (8001f08 <HAL_RCC_OscConfig+0x624>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e116      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ccc:	4b8d      	ldr	r3, [pc, #564]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	18fb      	adds	r3, r7, r3
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d105      	bne.n	8001cec <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce0:	4b88      	ldr	r3, [pc, #544]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	4b87      	ldr	r3, [pc, #540]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ce6:	4989      	ldr	r1, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x628>)
 8001ce8:	400a      	ands	r2, r1
 8001cea:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d12a      	bne.n	8001d54 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001cfe:	4b81      	ldr	r3, [pc, #516]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d02:	4b80      	ldr	r3, [pc, #512]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d04:	2104      	movs	r1, #4
 8001d06:	430a      	orrs	r2, r1
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d0a:	4b7e      	ldr	r3, [pc, #504]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d0e:	4b7d      	ldr	r3, [pc, #500]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb75 	bl	8001404 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d20:	f7ff fb70 	bl	8001404 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0e3      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d32:	4b74      	ldr	r3, [pc, #464]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	2202      	movs	r2, #2
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d0f1      	beq.n	8001d20 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d3c:	4b71      	ldr	r3, [pc, #452]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	22f8      	movs	r2, #248	; 0xf8
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	00da      	lsls	r2, r3, #3
 8001d4c:	4b6d      	ldr	r3, [pc, #436]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	635a      	str	r2, [r3, #52]	; 0x34
 8001d52:	e034      	b.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	3305      	adds	r3, #5
 8001d5a:	d111      	bne.n	8001d80 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d5c:	4b69      	ldr	r3, [pc, #420]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d68:	4b66      	ldr	r3, [pc, #408]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6c:	22f8      	movs	r2, #248	; 0xf8
 8001d6e:	4393      	bics	r3, r2
 8001d70:	0019      	movs	r1, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	699b      	ldr	r3, [r3, #24]
 8001d76:	00da      	lsls	r2, r3, #3
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7e:	e01e      	b.n	8001dbe <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d80:	4b60      	ldr	r3, [pc, #384]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d84:	4b5f      	ldr	r3, [pc, #380]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d86:	2104      	movs	r1, #4
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d8c:	4b5d      	ldr	r3, [pc, #372]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d90:	4b5c      	ldr	r3, [pc, #368]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001d92:	2101      	movs	r1, #1
 8001d94:	438a      	bics	r2, r1
 8001d96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d98:	f7ff fb34 	bl	8001404 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001da2:	f7ff fb2f 	bl	8001404 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0a2      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db8:	2202      	movs	r2, #2
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d1f1      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d100      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x4e4>
 8001dc6:	e097      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	220c      	movs	r2, #12
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x4f2>
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d14c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b48      	ldr	r3, [pc, #288]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001de4:	494a      	ldr	r1, [pc, #296]	; (8001f10 <HAL_RCC_OscConfig+0x62c>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dea:	f7ff fb0b 	bl	8001404 <HAL_GetTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fb06 	bl	8001404 <HAL_GetTick>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e079      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	2380      	movs	r3, #128	; 0x80
 8001e0c:	049b      	lsls	r3, r3, #18
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e12:	4b3c      	ldr	r3, [pc, #240]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e16:	220f      	movs	r2, #15
 8001e18:	4393      	bics	r3, r2
 8001e1a:	0019      	movs	r1, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e20:	4b38      	ldr	r3, [pc, #224]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e22:	430a      	orrs	r2, r1
 8001e24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e26:	4b37      	ldr	r3, [pc, #220]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <HAL_RCC_OscConfig+0x630>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	0019      	movs	r1, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	431a      	orrs	r2, r3
 8001e3a:	4b32      	ldr	r3, [pc, #200]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e40:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	0449      	lsls	r1, r1, #17
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fad9 	bl	8001404 <HAL_GetTick>
 8001e52:	0003      	movs	r3, r0
 8001e54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff fad4 	bl	8001404 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e047      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6a:	4b26      	ldr	r3, [pc, #152]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	2380      	movs	r3, #128	; 0x80
 8001e70:	049b      	lsls	r3, r3, #18
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0f0      	beq.n	8001e58 <HAL_RCC_OscConfig+0x574>
 8001e76:	e03f      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001e7e:	4924      	ldr	r1, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x62c>)
 8001e80:	400a      	ands	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e84:	f7ff fabe 	bl	8001404 <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e8e:	f7ff fab9 	bl	8001404 <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e02c      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	049b      	lsls	r3, r3, #18
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f0      	bne.n	8001e8e <HAL_RCC_OscConfig+0x5aa>
 8001eac:	e024      	b.n	8001ef8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d101      	bne.n	8001eba <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e01f      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ec0:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_RCC_OscConfig+0x620>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	2380      	movs	r3, #128	; 0x80
 8001eca:	025b      	lsls	r3, r3, #9
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	23f0      	movs	r3, #240	; 0xf0
 8001ee8:	039b      	lsls	r3, r3, #14
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	0018      	movs	r0, r3
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b008      	add	sp, #32
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40021000 	.word	0x40021000
 8001f08:	00001388 	.word	0x00001388
 8001f0c:	efffffff 	.word	0xefffffff
 8001f10:	feffffff 	.word	0xfeffffff
 8001f14:	ffc2ffff 	.word	0xffc2ffff

08001f18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b3      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4013      	ands	r3, r2
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d911      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b55      	ldr	r3, [pc, #340]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e09a      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d015      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d006      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f72:	4b4b      	ldr	r3, [pc, #300]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f78:	21e0      	movs	r1, #224	; 0xe0
 8001f7a:	00c9      	lsls	r1, r1, #3
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f80:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	22f0      	movs	r2, #240	; 0xf0
 8001f86:	4393      	bics	r3, r2
 8001f88:	0019      	movs	r1, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2201      	movs	r2, #1
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d040      	beq.n	8002020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b3e      	ldr	r3, [pc, #248]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	029b      	lsls	r3, r3, #10
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06e      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	049b      	lsls	r3, r3, #18
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e062      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fce:	4b34      	ldr	r3, [pc, #208]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d101      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e05b      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fdc:	4b30      	ldr	r3, [pc, #192]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	4393      	bics	r3, r2
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8001fec:	430a      	orrs	r2, r1
 8001fee:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ff0:	f7ff fa08 	bl	8001404 <HAL_GetTick>
 8001ff4:	0003      	movs	r3, r0
 8001ff6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff8:	e009      	b.n	800200e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ffa:	f7ff fa03 	bl	8001404 <HAL_GetTick>
 8001ffe:	0002      	movs	r2, r0
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x18c>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e042      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200e:	4b24      	ldr	r3, [pc, #144]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	220c      	movs	r2, #12
 8002014:	401a      	ands	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	429a      	cmp	r2, r3
 800201e:	d1ec      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002020:	4b1e      	ldr	r3, [pc, #120]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d211      	bcs.n	8002052 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2201      	movs	r2, #1
 8002034:	4393      	bics	r3, r2
 8002036:	0019      	movs	r1, r3
 8002038:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002040:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x184>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2201      	movs	r2, #1
 8002046:	4013      	ands	r3, r2
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d001      	beq.n	8002052 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e020      	b.n	8002094 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2204      	movs	r2, #4
 8002058:	4013      	ands	r3, r2
 800205a:	d009      	beq.n	8002070 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_RCC_ClockConfig+0x190>)
 8002062:	4013      	ands	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002070:	f000 f820 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 8002074:	0001      	movs	r1, r0
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <HAL_RCC_ClockConfig+0x188>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	220f      	movs	r2, #15
 800207e:	4013      	ands	r3, r2
 8002080:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x194>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	000a      	movs	r2, r1
 8002086:	40da      	lsrs	r2, r3
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x198>)
 800208a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800208c:	2003      	movs	r0, #3
 800208e:	f7ff f973 	bl	8001378 <HAL_InitTick>
  
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b004      	add	sp, #16
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40022000 	.word	0x40022000
 80020a0:	40021000 	.word	0x40021000
 80020a4:	00001388 	.word	0x00001388
 80020a8:	fffff8ff 	.word	0xfffff8ff
 80020ac:	08004a84 	.word	0x08004a84
 80020b0:	200000b8 	.word	0x200000b8

080020b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b4:	b590      	push	{r4, r7, lr}
 80020b6:	b08f      	sub	sp, #60	; 0x3c
 80020b8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020ba:	2314      	movs	r3, #20
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020c2:	c313      	stmia	r3!, {r0, r1, r4}
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	4a29      	ldr	r2, [pc, #164]	; (8002170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020ce:	c313      	stmia	r3!, {r0, r1, r4}
 80020d0:	6812      	ldr	r2, [r2, #0]
 80020d2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	220c      	movs	r2, #12
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b04      	cmp	r3, #4
 80020f6:	d002      	beq.n	80020fe <HAL_RCC_GetSysClockFreq+0x4a>
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d003      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x50>
 80020fc:	e02d      	b.n	800215a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020fe:	4b1e      	ldr	r3, [pc, #120]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002100:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002102:	e02d      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	220f      	movs	r2, #15
 800210a:	4013      	ands	r3, r2
 800210c:	2214      	movs	r2, #20
 800210e:	18ba      	adds	r2, r7, r2
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	1d3a      	adds	r2, r7, #4
 800211e:	5cd3      	ldrb	r3, [r2, r3]
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	4013      	ands	r3, r2
 800212a:	d009      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800212c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800212e:	4812      	ldr	r0, [pc, #72]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002130:	f7fd fff4 	bl	800011c <__udivsi3>
 8002134:	0003      	movs	r3, r0
 8002136:	001a      	movs	r2, r3
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	4353      	muls	r3, r2
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
 800213e:	e009      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002142:	000a      	movs	r2, r1
 8002144:	0152      	lsls	r2, r2, #5
 8002146:	1a52      	subs	r2, r2, r1
 8002148:	0193      	lsls	r3, r2, #6
 800214a:	1a9b      	subs	r3, r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	185b      	adds	r3, r3, r1
 8002150:	021b      	lsls	r3, r3, #8
 8002152:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002158:	e002      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800215a:	4b07      	ldr	r3, [pc, #28]	; (8002178 <HAL_RCC_GetSysClockFreq+0xc4>)
 800215c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800215e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b00f      	add	sp, #60	; 0x3c
 8002168:	bd90      	pop	{r4, r7, pc}
 800216a:	46c0      	nop			; (mov r8, r8)
 800216c:	08004a48 	.word	0x08004a48
 8002170:	08004a58 	.word	0x08004a58
 8002174:	40021000 	.word	0x40021000
 8002178:	007a1200 	.word	0x007a1200

0800217c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002180:	4b02      	ldr	r3, [pc, #8]	; (800218c <HAL_RCC_GetHCLKFreq+0x10>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	200000b8 	.word	0x200000b8

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002194:	f7ff fff2 	bl	800217c <HAL_RCC_GetHCLKFreq>
 8002198:	0001      	movs	r1, r0
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	2207      	movs	r2, #7
 80021a2:	4013      	ands	r3, r2
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a6:	5cd3      	ldrb	r3, [r2, r3]
 80021a8:	40d9      	lsrs	r1, r3
 80021aa:	000b      	movs	r3, r1
}    
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08004a94 	.word	0x08004a94

080021bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0a8      	b.n	8002320 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d109      	bne.n	80021ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	2382      	movs	r3, #130	; 0x82
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	429a      	cmp	r2, r3
 80021e0:	d009      	beq.n	80021f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	61da      	str	r2, [r3, #28]
 80021e8:	e005      	b.n	80021f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	225d      	movs	r2, #93	; 0x5d
 8002200:	5c9b      	ldrb	r3, [r3, r2]
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	d107      	bne.n	8002218 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	225c      	movs	r2, #92	; 0x5c
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f7fe ff00 	bl	8001018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	225d      	movs	r2, #93	; 0x5d
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2140      	movs	r1, #64	; 0x40
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68da      	ldr	r2, [r3, #12]
 8002234:	23e0      	movs	r3, #224	; 0xe0
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	429a      	cmp	r2, r3
 800223a:	d902      	bls.n	8002242 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	e002      	b.n	8002248 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	23f0      	movs	r3, #240	; 0xf0
 800224e:	011b      	lsls	r3, r3, #4
 8002250:	429a      	cmp	r2, r3
 8002252:	d008      	beq.n	8002266 <HAL_SPI_Init+0xaa>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	23e0      	movs	r3, #224	; 0xe0
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	429a      	cmp	r2, r3
 800225e:	d002      	beq.n	8002266 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2200      	movs	r2, #0
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	2382      	movs	r3, #130	; 0x82
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6899      	ldr	r1, [r3, #8]
 8002274:	2384      	movs	r3, #132	; 0x84
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	400b      	ands	r3, r1
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2102      	movs	r1, #2
 8002282:	400b      	ands	r3, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	2101      	movs	r1, #1
 800228c:	400b      	ands	r3, r1
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6999      	ldr	r1, [r3, #24]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	400b      	ands	r3, r1
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	2138      	movs	r1, #56	; 0x38
 80022a2:	400b      	ands	r3, r1
 80022a4:	431a      	orrs	r2, r3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	2180      	movs	r1, #128	; 0x80
 80022ac:	400b      	ands	r3, r1
 80022ae:	431a      	orrs	r2, r3
 80022b0:	0011      	movs	r1, r2
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	019b      	lsls	r3, r3, #6
 80022ba:	401a      	ands	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	2204      	movs	r2, #4
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	2110      	movs	r1, #16
 80022d4:	400b      	ands	r3, r1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	2108      	movs	r1, #8
 80022de:	400b      	ands	r3, r1
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	23f0      	movs	r3, #240	; 0xf0
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	400b      	ands	r3, r1
 80022ec:	431a      	orrs	r2, r3
 80022ee:	0011      	movs	r1, r2
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	2380      	movs	r3, #128	; 0x80
 80022f4:	015b      	lsls	r3, r3, #5
 80022f6:	401a      	ands	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	69da      	ldr	r2, [r3, #28]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4907      	ldr	r1, [pc, #28]	; (8002328 <HAL_SPI_Init+0x16c>)
 800230c:	400a      	ands	r2, r1
 800230e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2200      	movs	r2, #0
 8002314:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	225d      	movs	r2, #93	; 0x5d
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800231e:	2300      	movs	r3, #0
}
 8002320:	0018      	movs	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	b004      	add	sp, #16
 8002326:	bd80      	pop	{r7, pc}
 8002328:	fffff7ff 	.word	0xfffff7ff

0800232c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b088      	sub	sp, #32
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	1dbb      	adds	r3, r7, #6
 800233a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800233c:	231f      	movs	r3, #31
 800233e:	18fb      	adds	r3, r7, r3
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	225c      	movs	r2, #92	; 0x5c
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_SPI_Transmit+0x26>
 800234e:	2302      	movs	r3, #2
 8002350:	e140      	b.n	80025d4 <HAL_SPI_Transmit+0x2a8>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	225c      	movs	r2, #92	; 0x5c
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800235a:	f7ff f853 	bl	8001404 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002362:	2316      	movs	r3, #22
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	1dba      	adds	r2, r7, #6
 8002368:	8812      	ldrh	r2, [r2, #0]
 800236a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	225d      	movs	r2, #93	; 0x5d
 8002370:	5c9b      	ldrb	r3, [r3, r2]
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d004      	beq.n	8002382 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002378:	231f      	movs	r3, #31
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2202      	movs	r2, #2
 800237e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002380:	e11d      	b.n	80025be <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_SPI_Transmit+0x64>
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d104      	bne.n	800239a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002390:	231f      	movs	r3, #31
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	2201      	movs	r2, #1
 8002396:	701a      	strb	r2, [r3, #0]
    goto error;
 8002398:	e111      	b.n	80025be <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	225d      	movs	r2, #93	; 0x5d
 800239e:	2103      	movs	r1, #3
 80023a0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	1dba      	adds	r2, r7, #6
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1dba      	adds	r2, r7, #6
 80023ba:	8812      	ldrh	r2, [r2, #0]
 80023bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2200      	movs	r2, #0
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2244      	movs	r2, #68	; 0x44
 80023c8:	2100      	movs	r1, #0
 80023ca:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2246      	movs	r2, #70	; 0x46
 80023d0:	2100      	movs	r1, #0
 80023d2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d110      	bne.n	800240e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2140      	movs	r1, #64	; 0x40
 80023f8:	438a      	bics	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	01c9      	lsls	r1, r1, #7
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2240      	movs	r2, #64	; 0x40
 8002416:	4013      	ands	r3, r2
 8002418:	2b40      	cmp	r3, #64	; 0x40
 800241a:	d007      	beq.n	800242c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2140      	movs	r1, #64	; 0x40
 8002428:	430a      	orrs	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68da      	ldr	r2, [r3, #12]
 8002430:	23e0      	movs	r3, #224	; 0xe0
 8002432:	00db      	lsls	r3, r3, #3
 8002434:	429a      	cmp	r2, r3
 8002436:	d94e      	bls.n	80024d6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_SPI_Transmit+0x11e>
 8002440:	2316      	movs	r3, #22
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d13f      	bne.n	80024ca <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800244e:	881a      	ldrh	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245a:	1c9a      	adds	r2, r3, #2
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002464:	b29b      	uxth	r3, r3
 8002466:	3b01      	subs	r3, #1
 8002468:	b29a      	uxth	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800246e:	e02c      	b.n	80024ca <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2202      	movs	r2, #2
 8002478:	4013      	ands	r3, r2
 800247a:	2b02      	cmp	r3, #2
 800247c:	d112      	bne.n	80024a4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002482:	881a      	ldrh	r2, [r3, #0]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248e:	1c9a      	adds	r2, r3, #2
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024a2:	e012      	b.n	80024ca <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a4:	f7fe ffae 	bl	8001404 <HAL_GetTick>
 80024a8:	0002      	movs	r2, r0
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d802      	bhi.n	80024ba <HAL_SPI_Transmit+0x18e>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	3301      	adds	r3, #1
 80024b8:	d102      	bne.n	80024c0 <HAL_SPI_Transmit+0x194>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d104      	bne.n	80024ca <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024c0:	231f      	movs	r3, #31
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	2203      	movs	r2, #3
 80024c6:	701a      	strb	r2, [r3, #0]
          goto error;
 80024c8:	e079      	b.n	80025be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1cd      	bne.n	8002470 <HAL_SPI_Transmit+0x144>
 80024d4:	e04f      	b.n	8002576 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <HAL_SPI_Transmit+0x1bc>
 80024de:	2316      	movs	r3, #22
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	881b      	ldrh	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d141      	bne.n	800256c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800250e:	e02d      	b.n	800256c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d113      	bne.n	8002546 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	7812      	ldrb	r2, [r2, #0]
 800252a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002544:	e012      	b.n	800256c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002546:	f7fe ff5d 	bl	8001404 <HAL_GetTick>
 800254a:	0002      	movs	r2, r0
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d802      	bhi.n	800255c <HAL_SPI_Transmit+0x230>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	3301      	adds	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_SPI_Transmit+0x236>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d104      	bne.n	800256c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002562:	231f      	movs	r3, #31
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2203      	movs	r2, #3
 8002568:	701a      	strb	r2, [r3, #0]
          goto error;
 800256a:	e028      	b.n	80025be <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002570:	b29b      	uxth	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1cc      	bne.n	8002510 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	6839      	ldr	r1, [r7, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	0018      	movs	r0, r3
 800257e:	f000 fcd9 	bl	8002f34 <SPI_EndRxTxTransaction>
 8002582:	1e03      	subs	r3, r0, #0
 8002584:	d002      	beq.n	800258c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2220      	movs	r2, #32
 800258a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80025b2:	231f      	movs	r3, #31
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e000      	b.n	80025be <HAL_SPI_Transmit+0x292>
  }

error:
 80025bc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	225d      	movs	r2, #93	; 0x5d
 80025c2:	2101      	movs	r1, #1
 80025c4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	225c      	movs	r2, #92	; 0x5c
 80025ca:	2100      	movs	r1, #0
 80025cc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025ce:	231f      	movs	r3, #31
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	781b      	ldrb	r3, [r3, #0]
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b008      	add	sp, #32
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b089      	sub	sp, #36	; 0x24
 80025e0:	af02      	add	r7, sp, #8
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	60b9      	str	r1, [r7, #8]
 80025e6:	603b      	str	r3, [r7, #0]
 80025e8:	1dbb      	adds	r3, r7, #6
 80025ea:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025ec:	2317      	movs	r3, #23
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	2382      	movs	r3, #130	; 0x82
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d113      	bne.n	8002628 <HAL_SPI_Receive+0x4c>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10f      	bne.n	8002628 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	225d      	movs	r2, #93	; 0x5d
 800260c:	2104      	movs	r1, #4
 800260e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002610:	1dbb      	adds	r3, r7, #6
 8002612:	881c      	ldrh	r4, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	68b9      	ldr	r1, [r7, #8]
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	0023      	movs	r3, r4
 8002620:	f000 f928 	bl	8002874 <HAL_SPI_TransmitReceive>
 8002624:	0003      	movs	r3, r0
 8002626:	e11c      	b.n	8002862 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	225c      	movs	r2, #92	; 0x5c
 800262c:	5c9b      	ldrb	r3, [r3, r2]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_SPI_Receive+0x5a>
 8002632:	2302      	movs	r3, #2
 8002634:	e115      	b.n	8002862 <HAL_SPI_Receive+0x286>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	225c      	movs	r2, #92	; 0x5c
 800263a:	2101      	movs	r1, #1
 800263c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800263e:	f7fe fee1 	bl	8001404 <HAL_GetTick>
 8002642:	0003      	movs	r3, r0
 8002644:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	225d      	movs	r2, #93	; 0x5d
 800264a:	5c9b      	ldrb	r3, [r3, r2]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b01      	cmp	r3, #1
 8002650:	d004      	beq.n	800265c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002652:	2317      	movs	r3, #23
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2202      	movs	r2, #2
 8002658:	701a      	strb	r2, [r3, #0]
    goto error;
 800265a:	e0f7      	b.n	800284c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_SPI_Receive+0x8e>
 8002662:	1dbb      	adds	r3, r7, #6
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d104      	bne.n	8002674 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800266a:	2317      	movs	r3, #23
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
    goto error;
 8002672:	e0eb      	b.n	800284c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	225d      	movs	r2, #93	; 0x5d
 8002678:	2104      	movs	r1, #4
 800267a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	68ba      	ldr	r2, [r7, #8]
 8002686:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1dba      	adds	r2, r7, #6
 800268c:	2144      	movs	r1, #68	; 0x44
 800268e:	8812      	ldrh	r2, [r2, #0]
 8002690:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	1dba      	adds	r2, r7, #6
 8002696:	2146      	movs	r1, #70	; 0x46
 8002698:	8812      	ldrh	r2, [r2, #0]
 800269a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	23e0      	movs	r3, #224	; 0xe0
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d908      	bls.n	80026d8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4966      	ldr	r1, [pc, #408]	; (800286c <HAL_SPI_Receive+0x290>)
 80026d2:	400a      	ands	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]
 80026d6:	e008      	b.n	80026ea <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2180      	movs	r1, #128	; 0x80
 80026e4:	0149      	lsls	r1, r1, #5
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10f      	bne.n	8002716 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2140      	movs	r1, #64	; 0x40
 8002702:	438a      	bics	r2, r1
 8002704:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4957      	ldr	r1, [pc, #348]	; (8002870 <HAL_SPI_Receive+0x294>)
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2240      	movs	r2, #64	; 0x40
 800271e:	4013      	ands	r3, r2
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d007      	beq.n	8002734 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2140      	movs	r1, #64	; 0x40
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	23e0      	movs	r3, #224	; 0xe0
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	429a      	cmp	r2, r3
 800273e:	d900      	bls.n	8002742 <HAL_SPI_Receive+0x166>
 8002740:	e069      	b.n	8002816 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002742:	e031      	b.n	80027a8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2201      	movs	r2, #1
 800274c:	4013      	ands	r3, r2
 800274e:	2b01      	cmp	r3, #1
 8002750:	d117      	bne.n	8002782 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	330c      	adds	r3, #12
 8002758:	001a      	movs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	7812      	ldrb	r2, [r2, #0]
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2246      	movs	r2, #70	; 0x46
 8002772:	5a9b      	ldrh	r3, [r3, r2]
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b299      	uxth	r1, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2246      	movs	r2, #70	; 0x46
 800277e:	5299      	strh	r1, [r3, r2]
 8002780:	e012      	b.n	80027a8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002782:	f7fe fe3f 	bl	8001404 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	683a      	ldr	r2, [r7, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d802      	bhi.n	8002798 <HAL_SPI_Receive+0x1bc>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	d102      	bne.n	800279e <HAL_SPI_Receive+0x1c2>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d104      	bne.n	80027a8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800279e:	2317      	movs	r3, #23
 80027a0:	18fb      	adds	r3, r7, r3
 80027a2:	2203      	movs	r2, #3
 80027a4:	701a      	strb	r2, [r3, #0]
          goto error;
 80027a6:	e051      	b.n	800284c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2246      	movs	r2, #70	; 0x46
 80027ac:	5a9b      	ldrh	r3, [r3, r2]
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1c7      	bne.n	8002744 <HAL_SPI_Receive+0x168>
 80027b4:	e035      	b.n	8002822 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	2201      	movs	r2, #1
 80027be:	4013      	ands	r3, r2
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d115      	bne.n	80027f0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	b292      	uxth	r2, r2
 80027d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	1c9a      	adds	r2, r3, #2
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2246      	movs	r2, #70	; 0x46
 80027e0:	5a9b      	ldrh	r3, [r3, r2]
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b299      	uxth	r1, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2246      	movs	r2, #70	; 0x46
 80027ec:	5299      	strh	r1, [r3, r2]
 80027ee:	e012      	b.n	8002816 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027f0:	f7fe fe08 	bl	8001404 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d802      	bhi.n	8002806 <HAL_SPI_Receive+0x22a>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	3301      	adds	r3, #1
 8002804:	d102      	bne.n	800280c <HAL_SPI_Receive+0x230>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800280c:	2317      	movs	r3, #23
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	2203      	movs	r2, #3
 8002812:	701a      	strb	r2, [r3, #0]
          goto error;
 8002814:	e01a      	b.n	800284c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2246      	movs	r2, #70	; 0x46
 800281a:	5a9b      	ldrh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1c9      	bne.n	80027b6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	6839      	ldr	r1, [r7, #0]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fb25 	bl	8002e78 <SPI_EndRxTransaction>
 800282e:	1e03      	subs	r3, r0, #0
 8002830:	d002      	beq.n	8002838 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2220      	movs	r2, #32
 8002836:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	2b00      	cmp	r3, #0
 800283e:	d004      	beq.n	800284a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002840:	2317      	movs	r3, #23
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]
 8002848:	e000      	b.n	800284c <HAL_SPI_Receive+0x270>
  }

error :
 800284a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	225d      	movs	r2, #93	; 0x5d
 8002850:	2101      	movs	r1, #1
 8002852:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	225c      	movs	r2, #92	; 0x5c
 8002858:	2100      	movs	r1, #0
 800285a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800285c:	2317      	movs	r3, #23
 800285e:	18fb      	adds	r3, r7, r3
 8002860:	781b      	ldrb	r3, [r3, #0]
}
 8002862:	0018      	movs	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	b007      	add	sp, #28
 8002868:	bd90      	pop	{r4, r7, pc}
 800286a:	46c0      	nop			; (mov r8, r8)
 800286c:	ffffefff 	.word	0xffffefff
 8002870:	ffffbfff 	.word	0xffffbfff

08002874 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	001a      	movs	r2, r3
 8002882:	1cbb      	adds	r3, r7, #2
 8002884:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002886:	2301      	movs	r3, #1
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800288a:	2323      	movs	r3, #35	; 0x23
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	225c      	movs	r2, #92	; 0x5c
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d101      	bne.n	80028a0 <HAL_SPI_TransmitReceive+0x2c>
 800289c:	2302      	movs	r3, #2
 800289e:	e1b5      	b.n	8002c0c <HAL_SPI_TransmitReceive+0x398>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	225c      	movs	r2, #92	; 0x5c
 80028a4:	2101      	movs	r1, #1
 80028a6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028a8:	f7fe fdac 	bl	8001404 <HAL_GetTick>
 80028ac:	0003      	movs	r3, r0
 80028ae:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028b0:	201b      	movs	r0, #27
 80028b2:	183b      	adds	r3, r7, r0
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	215d      	movs	r1, #93	; 0x5d
 80028b8:	5c52      	ldrb	r2, [r2, r1]
 80028ba:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028c2:	2312      	movs	r3, #18
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	1cba      	adds	r2, r7, #2
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028cc:	183b      	adds	r3, r7, r0
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d011      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x84>
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	2382      	movs	r3, #130	; 0x82
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	429a      	cmp	r2, r3
 80028dc:	d107      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <HAL_SPI_TransmitReceive+0x7a>
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d004      	beq.n	80028f8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028ee:	2323      	movs	r3, #35	; 0x23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2202      	movs	r2, #2
 80028f4:	701a      	strb	r2, [r3, #0]
    goto error;
 80028f6:	e17e      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_SPI_TransmitReceive+0x98>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_SPI_TransmitReceive+0x98>
 8002904:	1cbb      	adds	r3, r7, #2
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d104      	bne.n	8002916 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800290c:	2323      	movs	r3, #35	; 0x23
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
    goto error;
 8002914:	e16f      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	225d      	movs	r2, #93	; 0x5d
 800291a:	5c9b      	ldrb	r3, [r3, r2]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b04      	cmp	r3, #4
 8002920:	d003      	beq.n	800292a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	225d      	movs	r2, #93	; 0x5d
 8002926:	2105      	movs	r1, #5
 8002928:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2200      	movs	r2, #0
 800292e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1cba      	adds	r2, r7, #2
 800293a:	2146      	movs	r1, #70	; 0x46
 800293c:	8812      	ldrh	r2, [r2, #0]
 800293e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1cba      	adds	r2, r7, #2
 8002944:	2144      	movs	r1, #68	; 0x44
 8002946:	8812      	ldrh	r2, [r2, #0]
 8002948:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	68ba      	ldr	r2, [r7, #8]
 800294e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1cba      	adds	r2, r7, #2
 8002954:	8812      	ldrh	r2, [r2, #0]
 8002956:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1cba      	adds	r2, r7, #2
 800295c:	8812      	ldrh	r2, [r2, #0]
 800295e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	23e0      	movs	r3, #224	; 0xe0
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	429a      	cmp	r2, r3
 8002976:	d908      	bls.n	800298a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	49a4      	ldr	r1, [pc, #656]	; (8002c14 <HAL_SPI_TransmitReceive+0x3a0>)
 8002984:	400a      	ands	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
 8002988:	e008      	b.n	800299c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685a      	ldr	r2, [r3, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2180      	movs	r1, #128	; 0x80
 8002996:	0149      	lsls	r1, r1, #5
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2240      	movs	r2, #64	; 0x40
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d007      	beq.n	80029ba <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2140      	movs	r1, #64	; 0x40
 80029b6:	430a      	orrs	r2, r1
 80029b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	23e0      	movs	r3, #224	; 0xe0
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d800      	bhi.n	80029c8 <HAL_SPI_TransmitReceive+0x154>
 80029c6:	e07f      	b.n	8002ac8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x168>
 80029d0:	2312      	movs	r3, #18
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d000      	beq.n	80029dc <HAL_SPI_TransmitReceive+0x168>
 80029da:	e069      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	1c9a      	adds	r2, r3, #2
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a00:	e056      	b.n	8002ab0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d11b      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x1d4>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_SPI_TransmitReceive+0x1d4>
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d113      	bne.n	8002a48 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a24:	881a      	ldrh	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a30:	1c9a      	adds	r2, r3, #2
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d11c      	bne.n	8002a90 <HAL_SPI_TransmitReceive+0x21c>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2246      	movs	r2, #70	; 0x46
 8002a5a:	5a9b      	ldrh	r3, [r3, r2]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	b292      	uxth	r2, r2
 8002a6e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	1c9a      	adds	r2, r3, #2
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2246      	movs	r2, #70	; 0x46
 8002a7e:	5a9b      	ldrh	r3, [r3, r2]
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	3b01      	subs	r3, #1
 8002a84:	b299      	uxth	r1, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2246      	movs	r2, #70	; 0x46
 8002a8a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002a90:	f7fe fcb8 	bl	8001404 <HAL_GetTick>
 8002a94:	0002      	movs	r2, r0
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d807      	bhi.n	8002ab0 <HAL_SPI_TransmitReceive+0x23c>
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	d004      	beq.n	8002ab0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002aa6:	2323      	movs	r3, #35	; 0x23
 8002aa8:	18fb      	adds	r3, r7, r3
 8002aaa:	2203      	movs	r2, #3
 8002aac:	701a      	strb	r2, [r3, #0]
        goto error;
 8002aae:	e0a2      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1a3      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x18e>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2246      	movs	r2, #70	; 0x46
 8002abe:	5a9b      	ldrh	r3, [r3, r2]
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d19d      	bne.n	8002a02 <HAL_SPI_TransmitReceive+0x18e>
 8002ac6:	e085      	b.n	8002bd4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d005      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x268>
 8002ad0:	2312      	movs	r3, #18
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d000      	beq.n	8002adc <HAL_SPI_TransmitReceive+0x268>
 8002ada:	e070      	b.n	8002bbe <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	330c      	adds	r3, #12
 8002ae6:	7812      	ldrb	r2, [r2, #0]
 8002ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	1c5a      	adds	r2, r3, #1
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b02:	e05c      	b.n	8002bbe <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d11c      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x2d8>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d017      	beq.n	8002b4c <HAL_SPI_TransmitReceive+0x2d8>
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d114      	bne.n	8002b4c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	330c      	adds	r3, #12
 8002b2c:	7812      	ldrb	r2, [r2, #0]
 8002b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d11e      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x324>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2246      	movs	r2, #70	; 0x46
 8002b5e:	5a9b      	ldrh	r3, [r3, r2]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	001a      	movs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	7812      	ldrb	r2, [r2, #0]
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2246      	movs	r2, #70	; 0x46
 8002b86:	5a9b      	ldrh	r3, [r3, r2]
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b299      	uxth	r1, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2246      	movs	r2, #70	; 0x46
 8002b92:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b94:	2301      	movs	r3, #1
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b98:	f7fe fc34 	bl	8001404 <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d802      	bhi.n	8002bae <HAL_SPI_TransmitReceive+0x33a>
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	3301      	adds	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x340>
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d104      	bne.n	8002bbe <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002bb4:	2323      	movs	r3, #35	; 0x23
 8002bb6:	18fb      	adds	r3, r7, r3
 8002bb8:	2203      	movs	r2, #3
 8002bba:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bbc:	e01b      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d19d      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x290>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2246      	movs	r2, #70	; 0x46
 8002bcc:	5a9b      	ldrh	r3, [r3, r2]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d197      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f000 f9aa 	bl	8002f34 <SPI_EndRxTxTransaction>
 8002be0:	1e03      	subs	r3, r0, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002be4:	2323      	movs	r3, #35	; 0x23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	661a      	str	r2, [r3, #96]	; 0x60
 8002bf2:	e000      	b.n	8002bf6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002bf4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	225d      	movs	r2, #93	; 0x5d
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	225c      	movs	r2, #92	; 0x5c
 8002c02:	2100      	movs	r1, #0
 8002c04:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c06:	2323      	movs	r3, #35	; 0x23
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	781b      	ldrb	r3, [r3, #0]
}
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	b00a      	add	sp, #40	; 0x28
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	ffffefff 	.word	0xffffefff

08002c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	1dfb      	adds	r3, r7, #7
 8002c26:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c28:	f7fe fbec 	bl	8001404 <HAL_GetTick>
 8002c2c:	0002      	movs	r2, r0
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	18d3      	adds	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c38:	f7fe fbe4 	bl	8001404 <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c40:	4b3a      	ldr	r3, [pc, #232]	; (8002d2c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	015b      	lsls	r3, r3, #5
 8002c46:	0d1b      	lsrs	r3, r3, #20
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	4353      	muls	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c4e:	e058      	b.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	d055      	beq.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c56:	f7fe fbd5 	bl	8001404 <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d902      	bls.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d142      	bne.n	8002cf2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	21e0      	movs	r1, #224	; 0xe0
 8002c78:	438a      	bics	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	685a      	ldr	r2, [r3, #4]
 8002c80:	2382      	movs	r3, #130	; 0x82
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d113      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d005      	beq.n	8002ca0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d107      	bne.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	438a      	bics	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cb4:	2380      	movs	r3, #128	; 0x80
 8002cb6:	019b      	lsls	r3, r3, #6
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d110      	bne.n	8002cde <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	491a      	ldr	r1, [pc, #104]	; (8002d30 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2180      	movs	r1, #128	; 0x80
 8002cd8:	0189      	lsls	r1, r1, #6
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	225d      	movs	r2, #93	; 0x5d
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	225c      	movs	r2, #92	; 0x5c
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e017      	b.n	8002d22 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	425a      	negs	r2, r3
 8002d12:	4153      	adcs	r3, r2
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	001a      	movs	r2, r3
 8002d18:	1dfb      	adds	r3, r7, #7
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d197      	bne.n	8002c50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	0018      	movs	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	b008      	add	sp, #32
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	200000b8 	.word	0x200000b8
 8002d30:	ffffdfff 	.word	0xffffdfff

08002d34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08a      	sub	sp, #40	; 0x28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
 8002d40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d42:	2317      	movs	r3, #23
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2200      	movs	r2, #0
 8002d48:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d4a:	f7fe fb5b 	bl	8001404 <HAL_GetTick>
 8002d4e:	0002      	movs	r2, r0
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	683a      	ldr	r2, [r7, #0]
 8002d56:	18d3      	adds	r3, r2, r3
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d5a:	f7fe fb53 	bl	8001404 <HAL_GetTick>
 8002d5e:	0003      	movs	r3, r0
 8002d60:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	330c      	adds	r3, #12
 8002d68:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d6a:	4b41      	ldr	r3, [pc, #260]	; (8002e70 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	0013      	movs	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	189b      	adds	r3, r3, r2
 8002d74:	00da      	lsls	r2, r3, #3
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	0d1b      	lsrs	r3, r3, #20
 8002d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d7c:	4353      	muls	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d80:	e068      	b.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	23c0      	movs	r3, #192	; 0xc0
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d10a      	bne.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	2117      	movs	r1, #23
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d9e:	187b      	adds	r3, r7, r1
 8002da0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	d055      	beq.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002da8:	f7fe fb2c 	bl	8001404 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d902      	bls.n	8002dbe <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d142      	bne.n	8002e44 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	21e0      	movs	r1, #224	; 0xe0
 8002dca:	438a      	bics	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	2382      	movs	r3, #130	; 0x82
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d113      	bne.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	2380      	movs	r3, #128	; 0x80
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d005      	beq.n	8002df2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	689a      	ldr	r2, [r3, #8]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d107      	bne.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2140      	movs	r1, #64	; 0x40
 8002dfe:	438a      	bics	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e06:	2380      	movs	r3, #128	; 0x80
 8002e08:	019b      	lsls	r3, r3, #6
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d110      	bne.n	8002e30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	0189      	lsls	r1, r1, #6
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	225d      	movs	r2, #93	; 0x5d
 8002e34:	2101      	movs	r1, #1
 8002e36:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	225c      	movs	r2, #92	; 0x5c
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e010      	b.n	8002e66 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d18e      	bne.n	8002d82 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	0018      	movs	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	b00a      	add	sp, #40	; 0x28
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	200000b8 	.word	0x200000b8
 8002e74:	ffffdfff 	.word	0xffffdfff

08002e78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	2382      	movs	r3, #130	; 0x82
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d113      	bne.n	8002eb8 <SPI_EndRxTransaction+0x40>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d005      	beq.n	8002ea8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	00db      	lsls	r3, r3, #3
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d107      	bne.n	8002eb8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2140      	movs	r1, #64	; 0x40
 8002eb4:	438a      	bics	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	0013      	movs	r3, r2
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2180      	movs	r1, #128	; 0x80
 8002ec6:	f7ff fea7 	bl	8002c18 <SPI_WaitFlagStateUntilTimeout>
 8002eca:	1e03      	subs	r3, r0, #0
 8002ecc:	d007      	beq.n	8002ede <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e026      	b.n	8002f2c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	2382      	movs	r3, #130	; 0x82
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11f      	bne.n	8002f2a <SPI_EndRxTransaction+0xb2>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689a      	ldr	r2, [r3, #8]
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d005      	beq.n	8002f02 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2380      	movs	r3, #128	; 0x80
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d113      	bne.n	8002f2a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	23c0      	movs	r3, #192	; 0xc0
 8002f06:	00d9      	lsls	r1, r3, #3
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	0013      	movs	r3, r2
 8002f10:	2200      	movs	r2, #0
 8002f12:	f7ff ff0f 	bl	8002d34 <SPI_WaitFifoStateUntilTimeout>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d007      	beq.n	8002f2a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1e:	2220      	movs	r2, #32
 8002f20:	431a      	orrs	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e000      	b.n	8002f2c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f40:	68ba      	ldr	r2, [r7, #8]
 8002f42:	23c0      	movs	r3, #192	; 0xc0
 8002f44:	0159      	lsls	r1, r3, #5
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	2200      	movs	r2, #0
 8002f50:	f7ff fef0 	bl	8002d34 <SPI_WaitFifoStateUntilTimeout>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d007      	beq.n	8002f68 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e027      	b.n	8002fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	0013      	movs	r3, r2
 8002f72:	2200      	movs	r2, #0
 8002f74:	2180      	movs	r1, #128	; 0x80
 8002f76:	f7ff fe4f 	bl	8002c18 <SPI_WaitFlagStateUntilTimeout>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d007      	beq.n	8002f8e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f82:	2220      	movs	r2, #32
 8002f84:	431a      	orrs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e014      	b.n	8002fb8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	23c0      	movs	r3, #192	; 0xc0
 8002f92:	00d9      	lsls	r1, r3, #3
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f7ff fec9 	bl	8002d34 <SPI_WaitFifoStateUntilTimeout>
 8002fa2:	1e03      	subs	r3, r0, #0
 8002fa4:	d007      	beq.n	8002fb6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002faa:	2220      	movs	r2, #32
 8002fac:	431a      	orrs	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e000      	b.n	8002fb8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	0018      	movs	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b004      	add	sp, #16
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e044      	b.n	800305c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2274      	movs	r2, #116	; 0x74
 8002fde:	2100      	movs	r1, #0
 8002fe0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f7fe f863 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	438a      	bics	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	0018      	movs	r0, r3
 8003004:	f000 f8da 	bl	80031bc <UART_SetConfig>
 8003008:	0003      	movs	r3, r0
 800300a:	2b01      	cmp	r3, #1
 800300c:	d101      	bne.n	8003012 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e024      	b.n	800305c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 fa0d 	bl	800343c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	490d      	ldr	r1, [pc, #52]	; (8003064 <HAL_UART_Init+0xa4>)
 800302e:	400a      	ands	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2108      	movs	r1, #8
 800303e:	438a      	bics	r2, r1
 8003040:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2101      	movs	r1, #1
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	0018      	movs	r0, r3
 8003056:	f000 faa5 	bl	80035a4 <UART_CheckIdleState>
 800305a:	0003      	movs	r3, r0
}
 800305c:	0018      	movs	r0, r3
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	fffff7ff 	.word	0xfffff7ff

08003068 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08a      	sub	sp, #40	; 0x28
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	603b      	str	r3, [r7, #0]
 8003074:	1dbb      	adds	r3, r7, #6
 8003076:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307c:	2b20      	cmp	r3, #32
 800307e:	d000      	beq.n	8003082 <HAL_UART_Transmit+0x1a>
 8003080:	e096      	b.n	80031b0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <HAL_UART_Transmit+0x28>
 8003088:	1dbb      	adds	r3, r7, #6
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e08e      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	2380      	movs	r3, #128	; 0x80
 800309a:	015b      	lsls	r3, r3, #5
 800309c:	429a      	cmp	r2, r3
 800309e:	d109      	bne.n	80030b4 <HAL_UART_Transmit+0x4c>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4013      	ands	r3, r2
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e07e      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2274      	movs	r2, #116	; 0x74
 80030b8:	5c9b      	ldrb	r3, [r3, r2]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x5a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e077      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2274      	movs	r2, #116	; 0x74
 80030c6:	2101      	movs	r1, #1
 80030c8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	2100      	movs	r1, #0
 80030d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2221      	movs	r2, #33	; 0x21
 80030d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030d8:	f7fe f994 	bl	8001404 <HAL_GetTick>
 80030dc:	0003      	movs	r3, r0
 80030de:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1dba      	adds	r2, r7, #6
 80030e4:	2150      	movs	r1, #80	; 0x50
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1dba      	adds	r2, r7, #6
 80030ee:	2152      	movs	r1, #82	; 0x52
 80030f0:	8812      	ldrh	r2, [r2, #0]
 80030f2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	2380      	movs	r3, #128	; 0x80
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d108      	bne.n	8003112 <HAL_UART_Transmit+0xaa>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	691b      	ldr	r3, [r3, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e003      	b.n	800311a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2274      	movs	r2, #116	; 0x74
 800311e:	2100      	movs	r1, #0
 8003120:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003122:	e02d      	b.n	8003180 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	0013      	movs	r3, r2
 800312e:	2200      	movs	r2, #0
 8003130:	2180      	movs	r1, #128	; 0x80
 8003132:	f000 fa7f 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003136:	1e03      	subs	r3, r0, #0
 8003138:	d001      	beq.n	800313e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e039      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	881a      	ldrh	r2, [r3, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	05d2      	lsls	r2, r2, #23
 800314e:	0dd2      	lsrs	r2, r2, #23
 8003150:	b292      	uxth	r2, r2
 8003152:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	3302      	adds	r3, #2
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e008      	b.n	800316e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	b292      	uxth	r2, r2
 8003166:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	3301      	adds	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2252      	movs	r2, #82	; 0x52
 8003172:	5a9b      	ldrh	r3, [r3, r2]
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b299      	uxth	r1, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2252      	movs	r2, #82	; 0x52
 800317e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2252      	movs	r2, #82	; 0x52
 8003184:	5a9b      	ldrh	r3, [r3, r2]
 8003186:	b29b      	uxth	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1cb      	bne.n	8003124 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	0013      	movs	r3, r2
 8003196:	2200      	movs	r2, #0
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	f000 fa4b 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 800319e:	1e03      	subs	r3, r0, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e005      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	0018      	movs	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	b008      	add	sp, #32
 80031b8:	bd80      	pop	{r7, pc}
	...

080031bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031c4:	231e      	movs	r3, #30
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	2200      	movs	r2, #0
 80031ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	431a      	orrs	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a8d      	ldr	r2, [pc, #564]	; (8003420 <UART_SetConfig+0x264>)
 80031ec:	4013      	ands	r3, r2
 80031ee:	0019      	movs	r1, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a88      	ldr	r2, [pc, #544]	; (8003424 <UART_SetConfig+0x268>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a7f      	ldr	r2, [pc, #508]	; (8003428 <UART_SetConfig+0x26c>)
 800322a:	4013      	ands	r3, r2
 800322c:	0019      	movs	r1, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	430a      	orrs	r2, r1
 8003236:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a7b      	ldr	r2, [pc, #492]	; (800342c <UART_SetConfig+0x270>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d127      	bne.n	8003292 <UART_SetConfig+0xd6>
 8003242:	4b7b      	ldr	r3, [pc, #492]	; (8003430 <UART_SetConfig+0x274>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	2203      	movs	r2, #3
 8003248:	4013      	ands	r3, r2
 800324a:	2b03      	cmp	r3, #3
 800324c:	d00d      	beq.n	800326a <UART_SetConfig+0xae>
 800324e:	d81b      	bhi.n	8003288 <UART_SetConfig+0xcc>
 8003250:	2b02      	cmp	r3, #2
 8003252:	d014      	beq.n	800327e <UART_SetConfig+0xc2>
 8003254:	d818      	bhi.n	8003288 <UART_SetConfig+0xcc>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d002      	beq.n	8003260 <UART_SetConfig+0xa4>
 800325a:	2b01      	cmp	r3, #1
 800325c:	d00a      	beq.n	8003274 <UART_SetConfig+0xb8>
 800325e:	e013      	b.n	8003288 <UART_SetConfig+0xcc>
 8003260:	231f      	movs	r3, #31
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
 8003268:	e021      	b.n	80032ae <UART_SetConfig+0xf2>
 800326a:	231f      	movs	r3, #31
 800326c:	18fb      	adds	r3, r7, r3
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e01c      	b.n	80032ae <UART_SetConfig+0xf2>
 8003274:	231f      	movs	r3, #31
 8003276:	18fb      	adds	r3, r7, r3
 8003278:	2204      	movs	r2, #4
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	e017      	b.n	80032ae <UART_SetConfig+0xf2>
 800327e:	231f      	movs	r3, #31
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	2208      	movs	r2, #8
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e012      	b.n	80032ae <UART_SetConfig+0xf2>
 8003288:	231f      	movs	r3, #31
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2210      	movs	r2, #16
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e00d      	b.n	80032ae <UART_SetConfig+0xf2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a67      	ldr	r2, [pc, #412]	; (8003434 <UART_SetConfig+0x278>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d104      	bne.n	80032a6 <UART_SetConfig+0xea>
 800329c:	231f      	movs	r3, #31
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e003      	b.n	80032ae <UART_SetConfig+0xf2>
 80032a6:	231f      	movs	r3, #31
 80032a8:	18fb      	adds	r3, r7, r3
 80032aa:	2210      	movs	r2, #16
 80032ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69da      	ldr	r2, [r3, #28]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	021b      	lsls	r3, r3, #8
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d15d      	bne.n	8003376 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80032ba:	231f      	movs	r3, #31
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d015      	beq.n	80032f0 <UART_SetConfig+0x134>
 80032c4:	dc18      	bgt.n	80032f8 <UART_SetConfig+0x13c>
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d00d      	beq.n	80032e6 <UART_SetConfig+0x12a>
 80032ca:	dc15      	bgt.n	80032f8 <UART_SetConfig+0x13c>
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <UART_SetConfig+0x11a>
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d005      	beq.n	80032e0 <UART_SetConfig+0x124>
 80032d4:	e010      	b.n	80032f8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032d6:	f7fe ff5b 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80032da:	0003      	movs	r3, r0
 80032dc:	61bb      	str	r3, [r7, #24]
        break;
 80032de:	e012      	b.n	8003306 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e0:	4b55      	ldr	r3, [pc, #340]	; (8003438 <UART_SetConfig+0x27c>)
 80032e2:	61bb      	str	r3, [r7, #24]
        break;
 80032e4:	e00f      	b.n	8003306 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032e6:	f7fe fee5 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80032ea:	0003      	movs	r3, r0
 80032ec:	61bb      	str	r3, [r7, #24]
        break;
 80032ee:	e00a      	b.n	8003306 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	61bb      	str	r3, [r7, #24]
        break;
 80032f6:	e006      	b.n	8003306 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032fc:	231e      	movs	r3, #30
 80032fe:	18fb      	adds	r3, r7, r3
 8003300:	2201      	movs	r2, #1
 8003302:	701a      	strb	r2, [r3, #0]
        break;
 8003304:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d100      	bne.n	800330e <UART_SetConfig+0x152>
 800330c:	e07b      	b.n	8003406 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	005a      	lsls	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	18d2      	adds	r2, r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	0019      	movs	r1, r3
 8003320:	0010      	movs	r0, r2
 8003322:	f7fc fefb 	bl	800011c <__udivsi3>
 8003326:	0003      	movs	r3, r0
 8003328:	b29b      	uxth	r3, r3
 800332a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	2b0f      	cmp	r3, #15
 8003330:	d91c      	bls.n	800336c <UART_SetConfig+0x1b0>
 8003332:	693a      	ldr	r2, [r7, #16]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	025b      	lsls	r3, r3, #9
 8003338:	429a      	cmp	r2, r3
 800333a:	d217      	bcs.n	800336c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	b29a      	uxth	r2, r3
 8003340:	200e      	movs	r0, #14
 8003342:	183b      	adds	r3, r7, r0
 8003344:	210f      	movs	r1, #15
 8003346:	438a      	bics	r2, r1
 8003348:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	085b      	lsrs	r3, r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	2207      	movs	r2, #7
 8003352:	4013      	ands	r3, r2
 8003354:	b299      	uxth	r1, r3
 8003356:	183b      	adds	r3, r7, r0
 8003358:	183a      	adds	r2, r7, r0
 800335a:	8812      	ldrh	r2, [r2, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	183a      	adds	r2, r7, r0
 8003366:	8812      	ldrh	r2, [r2, #0]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	e04c      	b.n	8003406 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800336c:	231e      	movs	r3, #30
 800336e:	18fb      	adds	r3, r7, r3
 8003370:	2201      	movs	r2, #1
 8003372:	701a      	strb	r2, [r3, #0]
 8003374:	e047      	b.n	8003406 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003376:	231f      	movs	r3, #31
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d015      	beq.n	80033ac <UART_SetConfig+0x1f0>
 8003380:	dc18      	bgt.n	80033b4 <UART_SetConfig+0x1f8>
 8003382:	2b04      	cmp	r3, #4
 8003384:	d00d      	beq.n	80033a2 <UART_SetConfig+0x1e6>
 8003386:	dc15      	bgt.n	80033b4 <UART_SetConfig+0x1f8>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <UART_SetConfig+0x1d6>
 800338c:	2b02      	cmp	r3, #2
 800338e:	d005      	beq.n	800339c <UART_SetConfig+0x1e0>
 8003390:	e010      	b.n	80033b4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003392:	f7fe fefd 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003396:	0003      	movs	r3, r0
 8003398:	61bb      	str	r3, [r7, #24]
        break;
 800339a:	e012      	b.n	80033c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800339c:	4b26      	ldr	r3, [pc, #152]	; (8003438 <UART_SetConfig+0x27c>)
 800339e:	61bb      	str	r3, [r7, #24]
        break;
 80033a0:	e00f      	b.n	80033c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a2:	f7fe fe87 	bl	80020b4 <HAL_RCC_GetSysClockFreq>
 80033a6:	0003      	movs	r3, r0
 80033a8:	61bb      	str	r3, [r7, #24]
        break;
 80033aa:	e00a      	b.n	80033c2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ac:	2380      	movs	r3, #128	; 0x80
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	61bb      	str	r3, [r7, #24]
        break;
 80033b2:	e006      	b.n	80033c2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033b8:	231e      	movs	r3, #30
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]
        break;
 80033c0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01e      	beq.n	8003406 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	085a      	lsrs	r2, r3, #1
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	18d2      	adds	r2, r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	0019      	movs	r1, r3
 80033d8:	0010      	movs	r0, r2
 80033da:	f7fc fe9f 	bl	800011c <__udivsi3>
 80033de:	0003      	movs	r3, r0
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	2b0f      	cmp	r3, #15
 80033e8:	d909      	bls.n	80033fe <UART_SetConfig+0x242>
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	2380      	movs	r3, #128	; 0x80
 80033ee:	025b      	lsls	r3, r3, #9
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d204      	bcs.n	80033fe <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	60da      	str	r2, [r3, #12]
 80033fc:	e003      	b.n	8003406 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80033fe:	231e      	movs	r3, #30
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	2201      	movs	r2, #1
 8003404:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003412:	231e      	movs	r3, #30
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	781b      	ldrb	r3, [r3, #0]
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b008      	add	sp, #32
 800341e:	bd80      	pop	{r7, pc}
 8003420:	ffff69f3 	.word	0xffff69f3
 8003424:	ffffcfff 	.word	0xffffcfff
 8003428:	fffff4ff 	.word	0xfffff4ff
 800342c:	40013800 	.word	0x40013800
 8003430:	40021000 	.word	0x40021000
 8003434:	40004400 	.word	0x40004400
 8003438:	007a1200 	.word	0x007a1200

0800343c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	2201      	movs	r2, #1
 800344a:	4013      	ands	r3, r2
 800344c:	d00b      	beq.n	8003466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <UART_AdvFeatureConfig+0x144>)
 8003456:	4013      	ands	r3, r2
 8003458:	0019      	movs	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346a:	2202      	movs	r2, #2
 800346c:	4013      	ands	r3, r2
 800346e:	d00b      	beq.n	8003488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4a43      	ldr	r2, [pc, #268]	; (8003584 <UART_AdvFeatureConfig+0x148>)
 8003478:	4013      	ands	r3, r2
 800347a:	0019      	movs	r1, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	2204      	movs	r2, #4
 800348e:	4013      	ands	r3, r2
 8003490:	d00b      	beq.n	80034aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a3b      	ldr	r2, [pc, #236]	; (8003588 <UART_AdvFeatureConfig+0x14c>)
 800349a:	4013      	ands	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	2208      	movs	r2, #8
 80034b0:	4013      	ands	r3, r2
 80034b2:	d00b      	beq.n	80034cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a34      	ldr	r2, [pc, #208]	; (800358c <UART_AdvFeatureConfig+0x150>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d0:	2210      	movs	r2, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	d00b      	beq.n	80034ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a2c      	ldr	r2, [pc, #176]	; (8003590 <UART_AdvFeatureConfig+0x154>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2220      	movs	r2, #32
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a25      	ldr	r2, [pc, #148]	; (8003594 <UART_AdvFeatureConfig+0x158>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	2240      	movs	r2, #64	; 0x40
 8003516:	4013      	ands	r3, r2
 8003518:	d01d      	beq.n	8003556 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <UART_AdvFeatureConfig+0x15c>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003536:	2380      	movs	r3, #128	; 0x80
 8003538:	035b      	lsls	r3, r3, #13
 800353a:	429a      	cmp	r2, r3
 800353c:	d10b      	bne.n	8003556 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a15      	ldr	r2, [pc, #84]	; (800359c <UART_AdvFeatureConfig+0x160>)
 8003546:	4013      	ands	r3, r2
 8003548:	0019      	movs	r1, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355a:	2280      	movs	r2, #128	; 0x80
 800355c:	4013      	ands	r3, r2
 800355e:	d00b      	beq.n	8003578 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4a0e      	ldr	r2, [pc, #56]	; (80035a0 <UART_AdvFeatureConfig+0x164>)
 8003568:	4013      	ands	r3, r2
 800356a:	0019      	movs	r1, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	605a      	str	r2, [r3, #4]
  }
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	46bd      	mov	sp, r7
 800357c:	b002      	add	sp, #8
 800357e:	bd80      	pop	{r7, pc}
 8003580:	fffdffff 	.word	0xfffdffff
 8003584:	fffeffff 	.word	0xfffeffff
 8003588:	fffbffff 	.word	0xfffbffff
 800358c:	ffff7fff 	.word	0xffff7fff
 8003590:	ffffefff 	.word	0xffffefff
 8003594:	ffffdfff 	.word	0xffffdfff
 8003598:	ffefffff 	.word	0xffefffff
 800359c:	ff9fffff 	.word	0xff9fffff
 80035a0:	fff7ffff 	.word	0xfff7ffff

080035a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2280      	movs	r2, #128	; 0x80
 80035b0:	2100      	movs	r1, #0
 80035b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035b4:	f7fd ff26 	bl	8001404 <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2208      	movs	r2, #8
 80035c4:	4013      	ands	r3, r2
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d10c      	bne.n	80035e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	0391      	lsls	r1, r2, #14
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4a17      	ldr	r2, [pc, #92]	; (8003630 <UART_CheckIdleState+0x8c>)
 80035d4:	9200      	str	r2, [sp, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f000 f82c 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 80035dc:	1e03      	subs	r3, r0, #0
 80035de:	d001      	beq.n	80035e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e021      	b.n	8003628 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2204      	movs	r2, #4
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d10c      	bne.n	800360c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	03d1      	lsls	r1, r2, #15
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <UART_CheckIdleState+0x8c>)
 80035fc:	9200      	str	r2, [sp, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	f000 f818 	bl	8003634 <UART_WaitOnFlagUntilTimeout>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e00d      	b.n	8003628 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2220      	movs	r2, #32
 8003616:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2274      	movs	r2, #116	; 0x74
 8003622:	2100      	movs	r1, #0
 8003624:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b004      	add	sp, #16
 800362e:	bd80      	pop	{r7, pc}
 8003630:	01ffffff 	.word	0x01ffffff

08003634 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b094      	sub	sp, #80	; 0x50
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	1dfb      	adds	r3, r7, #7
 8003642:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003644:	e0a3      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003648:	3301      	adds	r3, #1
 800364a:	d100      	bne.n	800364e <UART_WaitOnFlagUntilTimeout+0x1a>
 800364c:	e09f      	b.n	800378e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fd fed9 	bl	8001404 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <UART_WaitOnFlagUntilTimeout+0x30>
 800365e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003660:	2b00      	cmp	r3, #0
 8003662:	d13d      	bne.n	80036e0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8310 	mrs	r3, PRIMASK
 8003668:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800366c:	647b      	str	r3, [r7, #68]	; 0x44
 800366e:	2301      	movs	r3, #1
 8003670:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003674:	f383 8810 	msr	PRIMASK, r3
}
 8003678:	46c0      	nop			; (mov r8, r8)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	494c      	ldr	r1, [pc, #304]	; (80037b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003686:	400a      	ands	r2, r1
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003690:	f383 8810 	msr	PRIMASK, r3
}
 8003694:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003696:	f3ef 8310 	mrs	r3, PRIMASK
 800369a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800369c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	643b      	str	r3, [r7, #64]	; 0x40
 80036a0:	2301      	movs	r3, #1
 80036a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036a6:	f383 8810 	msr	PRIMASK, r3
}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2101      	movs	r1, #1
 80036b8:	438a      	bics	r2, r1
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	f383 8810 	msr	PRIMASK, r3
}
 80036c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2220      	movs	r2, #32
 80036cc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2220      	movs	r2, #32
 80036d2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2274      	movs	r2, #116	; 0x74
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e067      	b.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2204      	movs	r2, #4
 80036e8:	4013      	ands	r3, r2
 80036ea:	d050      	beq.n	800378e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69da      	ldr	r2, [r3, #28]
 80036f2:	2380      	movs	r3, #128	; 0x80
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	401a      	ands	r2, r3
 80036f8:	2380      	movs	r3, #128	; 0x80
 80036fa:	011b      	lsls	r3, r3, #4
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d146      	bne.n	800378e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	0112      	lsls	r2, r2, #4
 8003708:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800370a:	f3ef 8310 	mrs	r3, PRIMASK
 800370e:	613b      	str	r3, [r7, #16]
  return(result);
 8003710:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003714:	2301      	movs	r3, #1
 8003716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4923      	ldr	r1, [pc, #140]	; (80037b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800372c:	400a      	ands	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003732:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373c:	f3ef 8310 	mrs	r3, PRIMASK
 8003740:	61fb      	str	r3, [r7, #28]
  return(result);
 8003742:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003744:	64bb      	str	r3, [r7, #72]	; 0x48
 8003746:	2301      	movs	r3, #1
 8003748:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f383 8810 	msr	PRIMASK, r3
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2101      	movs	r1, #1
 800375e:	438a      	bics	r2, r1
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003768:	f383 8810 	msr	PRIMASK, r3
}
 800376c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2280      	movs	r2, #128	; 0x80
 800377e:	2120      	movs	r1, #32
 8003780:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2274      	movs	r2, #116	; 0x74
 8003786:	2100      	movs	r1, #0
 8003788:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e010      	b.n	80037b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	69db      	ldr	r3, [r3, #28]
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	4013      	ands	r3, r2
 8003798:	68ba      	ldr	r2, [r7, #8]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	425a      	negs	r2, r3
 800379e:	4153      	adcs	r3, r2
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	001a      	movs	r2, r3
 80037a4:	1dfb      	adds	r3, r7, #7
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d100      	bne.n	80037ae <UART_WaitOnFlagUntilTimeout+0x17a>
 80037ac:	e74b      	b.n	8003646 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	0018      	movs	r0, r3
 80037b2:	46bd      	mov	sp, r7
 80037b4:	b014      	add	sp, #80	; 0x50
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	fffffe5f 	.word	0xfffffe5f

080037bc <__assert_func>:
 80037bc:	b530      	push	{r4, r5, lr}
 80037be:	0014      	movs	r4, r2
 80037c0:	001a      	movs	r2, r3
 80037c2:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <__assert_func+0x2c>)
 80037c4:	0005      	movs	r5, r0
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	b085      	sub	sp, #20
 80037ca:	68d8      	ldr	r0, [r3, #12]
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <__assert_func+0x30>)
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	d101      	bne.n	80037d6 <__assert_func+0x1a>
 80037d2:	4b07      	ldr	r3, [pc, #28]	; (80037f0 <__assert_func+0x34>)
 80037d4:	001c      	movs	r4, r3
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	9100      	str	r1, [sp, #0]
 80037da:	002b      	movs	r3, r5
 80037dc:	4905      	ldr	r1, [pc, #20]	; (80037f4 <__assert_func+0x38>)
 80037de:	9402      	str	r4, [sp, #8]
 80037e0:	f000 f810 	bl	8003804 <fiprintf>
 80037e4:	f000 fbfc 	bl	8003fe0 <abort>
 80037e8:	200000c4 	.word	0x200000c4
 80037ec:	08004a9c 	.word	0x08004a9c
 80037f0:	08004ad7 	.word	0x08004ad7
 80037f4:	08004aa9 	.word	0x08004aa9

080037f8 <__errno>:
 80037f8:	4b01      	ldr	r3, [pc, #4]	; (8003800 <__errno+0x8>)
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	4770      	bx	lr
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	200000c4 	.word	0x200000c4

08003804 <fiprintf>:
 8003804:	b40e      	push	{r1, r2, r3}
 8003806:	b503      	push	{r0, r1, lr}
 8003808:	0001      	movs	r1, r0
 800380a:	ab03      	add	r3, sp, #12
 800380c:	4804      	ldr	r0, [pc, #16]	; (8003820 <fiprintf+0x1c>)
 800380e:	cb04      	ldmia	r3!, {r2}
 8003810:	6800      	ldr	r0, [r0, #0]
 8003812:	9301      	str	r3, [sp, #4]
 8003814:	f000 f85a 	bl	80038cc <_vfiprintf_r>
 8003818:	b002      	add	sp, #8
 800381a:	bc08      	pop	{r3}
 800381c:	b003      	add	sp, #12
 800381e:	4718      	bx	r3
 8003820:	200000c4 	.word	0x200000c4

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	2600      	movs	r6, #0
 8003828:	4d0c      	ldr	r5, [pc, #48]	; (800385c <__libc_init_array+0x38>)
 800382a:	4c0d      	ldr	r4, [pc, #52]	; (8003860 <__libc_init_array+0x3c>)
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	42a6      	cmp	r6, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	2600      	movs	r6, #0
 8003836:	f001 f831 	bl	800489c <_init>
 800383a:	4d0a      	ldr	r5, [pc, #40]	; (8003864 <__libc_init_array+0x40>)
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <__libc_init_array+0x44>)
 800383e:	1b64      	subs	r4, r4, r5
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	42a6      	cmp	r6, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	00b3      	lsls	r3, r6, #2
 800384a:	58eb      	ldr	r3, [r5, r3]
 800384c:	4798      	blx	r3
 800384e:	3601      	adds	r6, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	00b3      	lsls	r3, r6, #2
 8003854:	58eb      	ldr	r3, [r5, r3]
 8003856:	4798      	blx	r3
 8003858:	3601      	adds	r6, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	08004b78 	.word	0x08004b78
 8003860:	08004b78 	.word	0x08004b78
 8003864:	08004b78 	.word	0x08004b78
 8003868:	08004b7c 	.word	0x08004b7c

0800386c <memset>:
 800386c:	0003      	movs	r3, r0
 800386e:	1882      	adds	r2, r0, r2
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	7019      	strb	r1, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <__sfputc_r>:
 800387c:	6893      	ldr	r3, [r2, #8]
 800387e:	b510      	push	{r4, lr}
 8003880:	3b01      	subs	r3, #1
 8003882:	6093      	str	r3, [r2, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	da04      	bge.n	8003892 <__sfputc_r+0x16>
 8003888:	6994      	ldr	r4, [r2, #24]
 800388a:	42a3      	cmp	r3, r4
 800388c:	db07      	blt.n	800389e <__sfputc_r+0x22>
 800388e:	290a      	cmp	r1, #10
 8003890:	d005      	beq.n	800389e <__sfputc_r+0x22>
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	1c58      	adds	r0, r3, #1
 8003896:	6010      	str	r0, [r2, #0]
 8003898:	7019      	strb	r1, [r3, #0]
 800389a:	0008      	movs	r0, r1
 800389c:	bd10      	pop	{r4, pc}
 800389e:	f000 fad1 	bl	8003e44 <__swbuf_r>
 80038a2:	0001      	movs	r1, r0
 80038a4:	e7f9      	b.n	800389a <__sfputc_r+0x1e>

080038a6 <__sfputs_r>:
 80038a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a8:	0006      	movs	r6, r0
 80038aa:	000f      	movs	r7, r1
 80038ac:	0014      	movs	r4, r2
 80038ae:	18d5      	adds	r5, r2, r3
 80038b0:	42ac      	cmp	r4, r5
 80038b2:	d101      	bne.n	80038b8 <__sfputs_r+0x12>
 80038b4:	2000      	movs	r0, #0
 80038b6:	e007      	b.n	80038c8 <__sfputs_r+0x22>
 80038b8:	7821      	ldrb	r1, [r4, #0]
 80038ba:	003a      	movs	r2, r7
 80038bc:	0030      	movs	r0, r6
 80038be:	f7ff ffdd 	bl	800387c <__sfputc_r>
 80038c2:	3401      	adds	r4, #1
 80038c4:	1c43      	adds	r3, r0, #1
 80038c6:	d1f3      	bne.n	80038b0 <__sfputs_r+0xa>
 80038c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038cc <_vfiprintf_r>:
 80038cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ce:	b0a1      	sub	sp, #132	; 0x84
 80038d0:	0006      	movs	r6, r0
 80038d2:	000c      	movs	r4, r1
 80038d4:	001f      	movs	r7, r3
 80038d6:	9203      	str	r2, [sp, #12]
 80038d8:	2800      	cmp	r0, #0
 80038da:	d004      	beq.n	80038e6 <_vfiprintf_r+0x1a>
 80038dc:	6983      	ldr	r3, [r0, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <_vfiprintf_r+0x1a>
 80038e2:	f000 fcb3 	bl	800424c <__sinit>
 80038e6:	4b8e      	ldr	r3, [pc, #568]	; (8003b20 <_vfiprintf_r+0x254>)
 80038e8:	429c      	cmp	r4, r3
 80038ea:	d11c      	bne.n	8003926 <_vfiprintf_r+0x5a>
 80038ec:	6874      	ldr	r4, [r6, #4]
 80038ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038f0:	07db      	lsls	r3, r3, #31
 80038f2:	d405      	bmi.n	8003900 <_vfiprintf_r+0x34>
 80038f4:	89a3      	ldrh	r3, [r4, #12]
 80038f6:	059b      	lsls	r3, r3, #22
 80038f8:	d402      	bmi.n	8003900 <_vfiprintf_r+0x34>
 80038fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038fc:	f000 fd47 	bl	800438e <__retarget_lock_acquire_recursive>
 8003900:	89a3      	ldrh	r3, [r4, #12]
 8003902:	071b      	lsls	r3, r3, #28
 8003904:	d502      	bpl.n	800390c <_vfiprintf_r+0x40>
 8003906:	6923      	ldr	r3, [r4, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <_vfiprintf_r+0x7c>
 800390c:	0021      	movs	r1, r4
 800390e:	0030      	movs	r0, r6
 8003910:	f000 faee 	bl	8003ef0 <__swsetup_r>
 8003914:	2800      	cmp	r0, #0
 8003916:	d017      	beq.n	8003948 <_vfiprintf_r+0x7c>
 8003918:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391a:	07db      	lsls	r3, r3, #31
 800391c:	d50d      	bpl.n	800393a <_vfiprintf_r+0x6e>
 800391e:	2001      	movs	r0, #1
 8003920:	4240      	negs	r0, r0
 8003922:	b021      	add	sp, #132	; 0x84
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003926:	4b7f      	ldr	r3, [pc, #508]	; (8003b24 <_vfiprintf_r+0x258>)
 8003928:	429c      	cmp	r4, r3
 800392a:	d101      	bne.n	8003930 <_vfiprintf_r+0x64>
 800392c:	68b4      	ldr	r4, [r6, #8]
 800392e:	e7de      	b.n	80038ee <_vfiprintf_r+0x22>
 8003930:	4b7d      	ldr	r3, [pc, #500]	; (8003b28 <_vfiprintf_r+0x25c>)
 8003932:	429c      	cmp	r4, r3
 8003934:	d1db      	bne.n	80038ee <_vfiprintf_r+0x22>
 8003936:	68f4      	ldr	r4, [r6, #12]
 8003938:	e7d9      	b.n	80038ee <_vfiprintf_r+0x22>
 800393a:	89a3      	ldrh	r3, [r4, #12]
 800393c:	059b      	lsls	r3, r3, #22
 800393e:	d4ee      	bmi.n	800391e <_vfiprintf_r+0x52>
 8003940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003942:	f000 fd25 	bl	8004390 <__retarget_lock_release_recursive>
 8003946:	e7ea      	b.n	800391e <_vfiprintf_r+0x52>
 8003948:	2300      	movs	r3, #0
 800394a:	ad08      	add	r5, sp, #32
 800394c:	616b      	str	r3, [r5, #20]
 800394e:	3320      	adds	r3, #32
 8003950:	766b      	strb	r3, [r5, #25]
 8003952:	3310      	adds	r3, #16
 8003954:	76ab      	strb	r3, [r5, #26]
 8003956:	9707      	str	r7, [sp, #28]
 8003958:	9f03      	ldr	r7, [sp, #12]
 800395a:	783b      	ldrb	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <_vfiprintf_r+0x98>
 8003960:	2b25      	cmp	r3, #37	; 0x25
 8003962:	d14e      	bne.n	8003a02 <_vfiprintf_r+0x136>
 8003964:	9b03      	ldr	r3, [sp, #12]
 8003966:	1afb      	subs	r3, r7, r3
 8003968:	9305      	str	r3, [sp, #20]
 800396a:	9b03      	ldr	r3, [sp, #12]
 800396c:	429f      	cmp	r7, r3
 800396e:	d00d      	beq.n	800398c <_vfiprintf_r+0xc0>
 8003970:	9b05      	ldr	r3, [sp, #20]
 8003972:	0021      	movs	r1, r4
 8003974:	0030      	movs	r0, r6
 8003976:	9a03      	ldr	r2, [sp, #12]
 8003978:	f7ff ff95 	bl	80038a6 <__sfputs_r>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d100      	bne.n	8003982 <_vfiprintf_r+0xb6>
 8003980:	e0b5      	b.n	8003aee <_vfiprintf_r+0x222>
 8003982:	696a      	ldr	r2, [r5, #20]
 8003984:	9b05      	ldr	r3, [sp, #20]
 8003986:	4694      	mov	ip, r2
 8003988:	4463      	add	r3, ip
 800398a:	616b      	str	r3, [r5, #20]
 800398c:	783b      	ldrb	r3, [r7, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d100      	bne.n	8003994 <_vfiprintf_r+0xc8>
 8003992:	e0ac      	b.n	8003aee <_vfiprintf_r+0x222>
 8003994:	2201      	movs	r2, #1
 8003996:	1c7b      	adds	r3, r7, #1
 8003998:	9303      	str	r3, [sp, #12]
 800399a:	2300      	movs	r3, #0
 800399c:	4252      	negs	r2, r2
 800399e:	606a      	str	r2, [r5, #4]
 80039a0:	a904      	add	r1, sp, #16
 80039a2:	3254      	adds	r2, #84	; 0x54
 80039a4:	1852      	adds	r2, r2, r1
 80039a6:	602b      	str	r3, [r5, #0]
 80039a8:	60eb      	str	r3, [r5, #12]
 80039aa:	60ab      	str	r3, [r5, #8]
 80039ac:	7013      	strb	r3, [r2, #0]
 80039ae:	65ab      	str	r3, [r5, #88]	; 0x58
 80039b0:	9b03      	ldr	r3, [sp, #12]
 80039b2:	2205      	movs	r2, #5
 80039b4:	7819      	ldrb	r1, [r3, #0]
 80039b6:	485d      	ldr	r0, [pc, #372]	; (8003b2c <_vfiprintf_r+0x260>)
 80039b8:	f000 fd58 	bl	800446c <memchr>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	1c5f      	adds	r7, r3, #1
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d120      	bne.n	8003a06 <_vfiprintf_r+0x13a>
 80039c4:	682a      	ldr	r2, [r5, #0]
 80039c6:	06d3      	lsls	r3, r2, #27
 80039c8:	d504      	bpl.n	80039d4 <_vfiprintf_r+0x108>
 80039ca:	2353      	movs	r3, #83	; 0x53
 80039cc:	a904      	add	r1, sp, #16
 80039ce:	185b      	adds	r3, r3, r1
 80039d0:	2120      	movs	r1, #32
 80039d2:	7019      	strb	r1, [r3, #0]
 80039d4:	0713      	lsls	r3, r2, #28
 80039d6:	d504      	bpl.n	80039e2 <_vfiprintf_r+0x116>
 80039d8:	2353      	movs	r3, #83	; 0x53
 80039da:	a904      	add	r1, sp, #16
 80039dc:	185b      	adds	r3, r3, r1
 80039de:	212b      	movs	r1, #43	; 0x2b
 80039e0:	7019      	strb	r1, [r3, #0]
 80039e2:	9b03      	ldr	r3, [sp, #12]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b2a      	cmp	r3, #42	; 0x2a
 80039e8:	d016      	beq.n	8003a18 <_vfiprintf_r+0x14c>
 80039ea:	2100      	movs	r1, #0
 80039ec:	68eb      	ldr	r3, [r5, #12]
 80039ee:	9f03      	ldr	r7, [sp, #12]
 80039f0:	783a      	ldrb	r2, [r7, #0]
 80039f2:	1c78      	adds	r0, r7, #1
 80039f4:	3a30      	subs	r2, #48	; 0x30
 80039f6:	4684      	mov	ip, r0
 80039f8:	2a09      	cmp	r2, #9
 80039fa:	d94f      	bls.n	8003a9c <_vfiprintf_r+0x1d0>
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d111      	bne.n	8003a24 <_vfiprintf_r+0x158>
 8003a00:	e017      	b.n	8003a32 <_vfiprintf_r+0x166>
 8003a02:	3701      	adds	r7, #1
 8003a04:	e7a9      	b.n	800395a <_vfiprintf_r+0x8e>
 8003a06:	4b49      	ldr	r3, [pc, #292]	; (8003b2c <_vfiprintf_r+0x260>)
 8003a08:	682a      	ldr	r2, [r5, #0]
 8003a0a:	1ac0      	subs	r0, r0, r3
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4083      	lsls	r3, r0
 8003a10:	4313      	orrs	r3, r2
 8003a12:	602b      	str	r3, [r5, #0]
 8003a14:	9703      	str	r7, [sp, #12]
 8003a16:	e7cb      	b.n	80039b0 <_vfiprintf_r+0xe4>
 8003a18:	9b07      	ldr	r3, [sp, #28]
 8003a1a:	1d19      	adds	r1, r3, #4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	9107      	str	r1, [sp, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	db01      	blt.n	8003a28 <_vfiprintf_r+0x15c>
 8003a24:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a26:	e004      	b.n	8003a32 <_vfiprintf_r+0x166>
 8003a28:	425b      	negs	r3, r3
 8003a2a:	60eb      	str	r3, [r5, #12]
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	602b      	str	r3, [r5, #0]
 8003a32:	783b      	ldrb	r3, [r7, #0]
 8003a34:	2b2e      	cmp	r3, #46	; 0x2e
 8003a36:	d10a      	bne.n	8003a4e <_vfiprintf_r+0x182>
 8003a38:	787b      	ldrb	r3, [r7, #1]
 8003a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3c:	d137      	bne.n	8003aae <_vfiprintf_r+0x1e2>
 8003a3e:	9b07      	ldr	r3, [sp, #28]
 8003a40:	3702      	adds	r7, #2
 8003a42:	1d1a      	adds	r2, r3, #4
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	9207      	str	r2, [sp, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	db2d      	blt.n	8003aa8 <_vfiprintf_r+0x1dc>
 8003a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a4e:	2203      	movs	r2, #3
 8003a50:	7839      	ldrb	r1, [r7, #0]
 8003a52:	4837      	ldr	r0, [pc, #220]	; (8003b30 <_vfiprintf_r+0x264>)
 8003a54:	f000 fd0a 	bl	800446c <memchr>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	d007      	beq.n	8003a6c <_vfiprintf_r+0x1a0>
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <_vfiprintf_r+0x264>)
 8003a5e:	682a      	ldr	r2, [r5, #0]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	2340      	movs	r3, #64	; 0x40
 8003a64:	4083      	lsls	r3, r0
 8003a66:	4313      	orrs	r3, r2
 8003a68:	3701      	adds	r7, #1
 8003a6a:	602b      	str	r3, [r5, #0]
 8003a6c:	7839      	ldrb	r1, [r7, #0]
 8003a6e:	1c7b      	adds	r3, r7, #1
 8003a70:	2206      	movs	r2, #6
 8003a72:	4830      	ldr	r0, [pc, #192]	; (8003b34 <_vfiprintf_r+0x268>)
 8003a74:	9303      	str	r3, [sp, #12]
 8003a76:	7629      	strb	r1, [r5, #24]
 8003a78:	f000 fcf8 	bl	800446c <memchr>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	d045      	beq.n	8003b0c <_vfiprintf_r+0x240>
 8003a80:	4b2d      	ldr	r3, [pc, #180]	; (8003b38 <_vfiprintf_r+0x26c>)
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d127      	bne.n	8003ad6 <_vfiprintf_r+0x20a>
 8003a86:	2207      	movs	r2, #7
 8003a88:	9b07      	ldr	r3, [sp, #28]
 8003a8a:	3307      	adds	r3, #7
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	3308      	adds	r3, #8
 8003a90:	9307      	str	r3, [sp, #28]
 8003a92:	696b      	ldr	r3, [r5, #20]
 8003a94:	9a04      	ldr	r2, [sp, #16]
 8003a96:	189b      	adds	r3, r3, r2
 8003a98:	616b      	str	r3, [r5, #20]
 8003a9a:	e75d      	b.n	8003958 <_vfiprintf_r+0x8c>
 8003a9c:	210a      	movs	r1, #10
 8003a9e:	434b      	muls	r3, r1
 8003aa0:	4667      	mov	r7, ip
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	3909      	subs	r1, #9
 8003aa6:	e7a3      	b.n	80039f0 <_vfiprintf_r+0x124>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	425b      	negs	r3, r3
 8003aac:	e7ce      	b.n	8003a4c <_vfiprintf_r+0x180>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	3701      	adds	r7, #1
 8003ab4:	606b      	str	r3, [r5, #4]
 8003ab6:	7839      	ldrb	r1, [r7, #0]
 8003ab8:	1c78      	adds	r0, r7, #1
 8003aba:	3930      	subs	r1, #48	; 0x30
 8003abc:	4684      	mov	ip, r0
 8003abe:	2909      	cmp	r1, #9
 8003ac0:	d903      	bls.n	8003aca <_vfiprintf_r+0x1fe>
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0c3      	beq.n	8003a4e <_vfiprintf_r+0x182>
 8003ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ac8:	e7c1      	b.n	8003a4e <_vfiprintf_r+0x182>
 8003aca:	230a      	movs	r3, #10
 8003acc:	435a      	muls	r2, r3
 8003ace:	4667      	mov	r7, ip
 8003ad0:	1852      	adds	r2, r2, r1
 8003ad2:	3b09      	subs	r3, #9
 8003ad4:	e7ef      	b.n	8003ab6 <_vfiprintf_r+0x1ea>
 8003ad6:	ab07      	add	r3, sp, #28
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	0022      	movs	r2, r4
 8003adc:	0029      	movs	r1, r5
 8003ade:	0030      	movs	r0, r6
 8003ae0:	4b16      	ldr	r3, [pc, #88]	; (8003b3c <_vfiprintf_r+0x270>)
 8003ae2:	e000      	b.n	8003ae6 <_vfiprintf_r+0x21a>
 8003ae4:	bf00      	nop
 8003ae6:	9004      	str	r0, [sp, #16]
 8003ae8:	9b04      	ldr	r3, [sp, #16]
 8003aea:	3301      	adds	r3, #1
 8003aec:	d1d1      	bne.n	8003a92 <_vfiprintf_r+0x1c6>
 8003aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003af0:	07db      	lsls	r3, r3, #31
 8003af2:	d405      	bmi.n	8003b00 <_vfiprintf_r+0x234>
 8003af4:	89a3      	ldrh	r3, [r4, #12]
 8003af6:	059b      	lsls	r3, r3, #22
 8003af8:	d402      	bmi.n	8003b00 <_vfiprintf_r+0x234>
 8003afa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003afc:	f000 fc48 	bl	8004390 <__retarget_lock_release_recursive>
 8003b00:	89a3      	ldrh	r3, [r4, #12]
 8003b02:	065b      	lsls	r3, r3, #25
 8003b04:	d500      	bpl.n	8003b08 <_vfiprintf_r+0x23c>
 8003b06:	e70a      	b.n	800391e <_vfiprintf_r+0x52>
 8003b08:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b0a:	e70a      	b.n	8003922 <_vfiprintf_r+0x56>
 8003b0c:	ab07      	add	r3, sp, #28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	0022      	movs	r2, r4
 8003b12:	0029      	movs	r1, r5
 8003b14:	0030      	movs	r0, r6
 8003b16:	4b09      	ldr	r3, [pc, #36]	; (8003b3c <_vfiprintf_r+0x270>)
 8003b18:	f000 f882 	bl	8003c20 <_printf_i>
 8003b1c:	e7e3      	b.n	8003ae6 <_vfiprintf_r+0x21a>
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	08004b30 	.word	0x08004b30
 8003b24:	08004b50 	.word	0x08004b50
 8003b28:	08004b10 	.word	0x08004b10
 8003b2c:	08004adc 	.word	0x08004adc
 8003b30:	08004ae2 	.word	0x08004ae2
 8003b34:	08004ae6 	.word	0x08004ae6
 8003b38:	00000000 	.word	0x00000000
 8003b3c:	080038a7 	.word	0x080038a7

08003b40 <_printf_common>:
 8003b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b42:	0015      	movs	r5, r2
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	688a      	ldr	r2, [r1, #8]
 8003b48:	690b      	ldr	r3, [r1, #16]
 8003b4a:	000c      	movs	r4, r1
 8003b4c:	9000      	str	r0, [sp, #0]
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	da00      	bge.n	8003b54 <_printf_common+0x14>
 8003b52:	0013      	movs	r3, r2
 8003b54:	0022      	movs	r2, r4
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	3243      	adds	r2, #67	; 0x43
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d001      	beq.n	8003b64 <_printf_common+0x24>
 8003b60:	3301      	adds	r3, #1
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	069b      	lsls	r3, r3, #26
 8003b68:	d502      	bpl.n	8003b70 <_printf_common+0x30>
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	602b      	str	r3, [r5, #0]
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	2306      	movs	r3, #6
 8003b74:	0017      	movs	r7, r2
 8003b76:	401f      	ands	r7, r3
 8003b78:	421a      	tst	r2, r3
 8003b7a:	d027      	beq.n	8003bcc <_printf_common+0x8c>
 8003b7c:	0023      	movs	r3, r4
 8003b7e:	3343      	adds	r3, #67	; 0x43
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	4193      	sbcs	r3, r2
 8003b86:	6822      	ldr	r2, [r4, #0]
 8003b88:	0692      	lsls	r2, r2, #26
 8003b8a:	d430      	bmi.n	8003bee <_printf_common+0xae>
 8003b8c:	0022      	movs	r2, r4
 8003b8e:	9901      	ldr	r1, [sp, #4]
 8003b90:	9800      	ldr	r0, [sp, #0]
 8003b92:	9e08      	ldr	r6, [sp, #32]
 8003b94:	3243      	adds	r2, #67	; 0x43
 8003b96:	47b0      	blx	r6
 8003b98:	1c43      	adds	r3, r0, #1
 8003b9a:	d025      	beq.n	8003be8 <_printf_common+0xa8>
 8003b9c:	2306      	movs	r3, #6
 8003b9e:	6820      	ldr	r0, [r4, #0]
 8003ba0:	682a      	ldr	r2, [r5, #0]
 8003ba2:	68e1      	ldr	r1, [r4, #12]
 8003ba4:	2500      	movs	r5, #0
 8003ba6:	4003      	ands	r3, r0
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d103      	bne.n	8003bb4 <_printf_common+0x74>
 8003bac:	1a8d      	subs	r5, r1, r2
 8003bae:	43eb      	mvns	r3, r5
 8003bb0:	17db      	asrs	r3, r3, #31
 8003bb2:	401d      	ands	r5, r3
 8003bb4:	68a3      	ldr	r3, [r4, #8]
 8003bb6:	6922      	ldr	r2, [r4, #16]
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	dd01      	ble.n	8003bc0 <_printf_common+0x80>
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	18ed      	adds	r5, r5, r3
 8003bc0:	2700      	movs	r7, #0
 8003bc2:	42bd      	cmp	r5, r7
 8003bc4:	d120      	bne.n	8003c08 <_printf_common+0xc8>
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e010      	b.n	8003bec <_printf_common+0xac>
 8003bca:	3701      	adds	r7, #1
 8003bcc:	68e3      	ldr	r3, [r4, #12]
 8003bce:	682a      	ldr	r2, [r5, #0]
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	42bb      	cmp	r3, r7
 8003bd4:	ddd2      	ble.n	8003b7c <_printf_common+0x3c>
 8003bd6:	0022      	movs	r2, r4
 8003bd8:	2301      	movs	r3, #1
 8003bda:	9901      	ldr	r1, [sp, #4]
 8003bdc:	9800      	ldr	r0, [sp, #0]
 8003bde:	9e08      	ldr	r6, [sp, #32]
 8003be0:	3219      	adds	r2, #25
 8003be2:	47b0      	blx	r6
 8003be4:	1c43      	adds	r3, r0, #1
 8003be6:	d1f0      	bne.n	8003bca <_printf_common+0x8a>
 8003be8:	2001      	movs	r0, #1
 8003bea:	4240      	negs	r0, r0
 8003bec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bee:	2030      	movs	r0, #48	; 0x30
 8003bf0:	18e1      	adds	r1, r4, r3
 8003bf2:	3143      	adds	r1, #67	; 0x43
 8003bf4:	7008      	strb	r0, [r1, #0]
 8003bf6:	0021      	movs	r1, r4
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	3145      	adds	r1, #69	; 0x45
 8003bfc:	7809      	ldrb	r1, [r1, #0]
 8003bfe:	18a2      	adds	r2, r4, r2
 8003c00:	3243      	adds	r2, #67	; 0x43
 8003c02:	3302      	adds	r3, #2
 8003c04:	7011      	strb	r1, [r2, #0]
 8003c06:	e7c1      	b.n	8003b8c <_printf_common+0x4c>
 8003c08:	0022      	movs	r2, r4
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	9901      	ldr	r1, [sp, #4]
 8003c0e:	9800      	ldr	r0, [sp, #0]
 8003c10:	9e08      	ldr	r6, [sp, #32]
 8003c12:	321a      	adds	r2, #26
 8003c14:	47b0      	blx	r6
 8003c16:	1c43      	adds	r3, r0, #1
 8003c18:	d0e6      	beq.n	8003be8 <_printf_common+0xa8>
 8003c1a:	3701      	adds	r7, #1
 8003c1c:	e7d1      	b.n	8003bc2 <_printf_common+0x82>
	...

08003c20 <_printf_i>:
 8003c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c22:	b08b      	sub	sp, #44	; 0x2c
 8003c24:	9206      	str	r2, [sp, #24]
 8003c26:	000a      	movs	r2, r1
 8003c28:	3243      	adds	r2, #67	; 0x43
 8003c2a:	9307      	str	r3, [sp, #28]
 8003c2c:	9005      	str	r0, [sp, #20]
 8003c2e:	9204      	str	r2, [sp, #16]
 8003c30:	7e0a      	ldrb	r2, [r1, #24]
 8003c32:	000c      	movs	r4, r1
 8003c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c36:	2a78      	cmp	r2, #120	; 0x78
 8003c38:	d807      	bhi.n	8003c4a <_printf_i+0x2a>
 8003c3a:	2a62      	cmp	r2, #98	; 0x62
 8003c3c:	d809      	bhi.n	8003c52 <_printf_i+0x32>
 8003c3e:	2a00      	cmp	r2, #0
 8003c40:	d100      	bne.n	8003c44 <_printf_i+0x24>
 8003c42:	e0c1      	b.n	8003dc8 <_printf_i+0x1a8>
 8003c44:	2a58      	cmp	r2, #88	; 0x58
 8003c46:	d100      	bne.n	8003c4a <_printf_i+0x2a>
 8003c48:	e08c      	b.n	8003d64 <_printf_i+0x144>
 8003c4a:	0026      	movs	r6, r4
 8003c4c:	3642      	adds	r6, #66	; 0x42
 8003c4e:	7032      	strb	r2, [r6, #0]
 8003c50:	e022      	b.n	8003c98 <_printf_i+0x78>
 8003c52:	0010      	movs	r0, r2
 8003c54:	3863      	subs	r0, #99	; 0x63
 8003c56:	2815      	cmp	r0, #21
 8003c58:	d8f7      	bhi.n	8003c4a <_printf_i+0x2a>
 8003c5a:	f7fc fa55 	bl	8000108 <__gnu_thumb1_case_shi>
 8003c5e:	0016      	.short	0x0016
 8003c60:	fff6001f 	.word	0xfff6001f
 8003c64:	fff6fff6 	.word	0xfff6fff6
 8003c68:	001ffff6 	.word	0x001ffff6
 8003c6c:	fff6fff6 	.word	0xfff6fff6
 8003c70:	fff6fff6 	.word	0xfff6fff6
 8003c74:	003600a8 	.word	0x003600a8
 8003c78:	fff6009a 	.word	0xfff6009a
 8003c7c:	00b9fff6 	.word	0x00b9fff6
 8003c80:	0036fff6 	.word	0x0036fff6
 8003c84:	fff6fff6 	.word	0xfff6fff6
 8003c88:	009e      	.short	0x009e
 8003c8a:	0026      	movs	r6, r4
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	3642      	adds	r6, #66	; 0x42
 8003c90:	1d11      	adds	r1, r2, #4
 8003c92:	6019      	str	r1, [r3, #0]
 8003c94:	6813      	ldr	r3, [r2, #0]
 8003c96:	7033      	strb	r3, [r6, #0]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e0a7      	b.n	8003dec <_printf_i+0x1cc>
 8003c9c:	6808      	ldr	r0, [r1, #0]
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	1d0a      	adds	r2, r1, #4
 8003ca2:	0605      	lsls	r5, r0, #24
 8003ca4:	d50b      	bpl.n	8003cbe <_printf_i+0x9e>
 8003ca6:	680d      	ldr	r5, [r1, #0]
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	2d00      	cmp	r5, #0
 8003cac:	da03      	bge.n	8003cb6 <_printf_i+0x96>
 8003cae:	232d      	movs	r3, #45	; 0x2d
 8003cb0:	9a04      	ldr	r2, [sp, #16]
 8003cb2:	426d      	negs	r5, r5
 8003cb4:	7013      	strb	r3, [r2, #0]
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <_printf_i+0x21c>)
 8003cb8:	270a      	movs	r7, #10
 8003cba:	9303      	str	r3, [sp, #12]
 8003cbc:	e01b      	b.n	8003cf6 <_printf_i+0xd6>
 8003cbe:	680d      	ldr	r5, [r1, #0]
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	0641      	lsls	r1, r0, #25
 8003cc4:	d5f1      	bpl.n	8003caa <_printf_i+0x8a>
 8003cc6:	b22d      	sxth	r5, r5
 8003cc8:	e7ef      	b.n	8003caa <_printf_i+0x8a>
 8003cca:	680d      	ldr	r5, [r1, #0]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	1d08      	adds	r0, r1, #4
 8003cd0:	6018      	str	r0, [r3, #0]
 8003cd2:	062e      	lsls	r6, r5, #24
 8003cd4:	d501      	bpl.n	8003cda <_printf_i+0xba>
 8003cd6:	680d      	ldr	r5, [r1, #0]
 8003cd8:	e003      	b.n	8003ce2 <_printf_i+0xc2>
 8003cda:	066d      	lsls	r5, r5, #25
 8003cdc:	d5fb      	bpl.n	8003cd6 <_printf_i+0xb6>
 8003cde:	680d      	ldr	r5, [r1, #0]
 8003ce0:	b2ad      	uxth	r5, r5
 8003ce2:	4b56      	ldr	r3, [pc, #344]	; (8003e3c <_printf_i+0x21c>)
 8003ce4:	2708      	movs	r7, #8
 8003ce6:	9303      	str	r3, [sp, #12]
 8003ce8:	2a6f      	cmp	r2, #111	; 0x6f
 8003cea:	d000      	beq.n	8003cee <_printf_i+0xce>
 8003cec:	3702      	adds	r7, #2
 8003cee:	0023      	movs	r3, r4
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	3343      	adds	r3, #67	; 0x43
 8003cf4:	701a      	strb	r2, [r3, #0]
 8003cf6:	6863      	ldr	r3, [r4, #4]
 8003cf8:	60a3      	str	r3, [r4, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db03      	blt.n	8003d06 <_printf_i+0xe6>
 8003cfe:	2204      	movs	r2, #4
 8003d00:	6821      	ldr	r1, [r4, #0]
 8003d02:	4391      	bics	r1, r2
 8003d04:	6021      	str	r1, [r4, #0]
 8003d06:	2d00      	cmp	r5, #0
 8003d08:	d102      	bne.n	8003d10 <_printf_i+0xf0>
 8003d0a:	9e04      	ldr	r6, [sp, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00c      	beq.n	8003d2a <_printf_i+0x10a>
 8003d10:	9e04      	ldr	r6, [sp, #16]
 8003d12:	0028      	movs	r0, r5
 8003d14:	0039      	movs	r1, r7
 8003d16:	f7fc fa87 	bl	8000228 <__aeabi_uidivmod>
 8003d1a:	9b03      	ldr	r3, [sp, #12]
 8003d1c:	3e01      	subs	r6, #1
 8003d1e:	5c5b      	ldrb	r3, [r3, r1]
 8003d20:	7033      	strb	r3, [r6, #0]
 8003d22:	002b      	movs	r3, r5
 8003d24:	0005      	movs	r5, r0
 8003d26:	429f      	cmp	r7, r3
 8003d28:	d9f3      	bls.n	8003d12 <_printf_i+0xf2>
 8003d2a:	2f08      	cmp	r7, #8
 8003d2c:	d109      	bne.n	8003d42 <_printf_i+0x122>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	07db      	lsls	r3, r3, #31
 8003d32:	d506      	bpl.n	8003d42 <_printf_i+0x122>
 8003d34:	6863      	ldr	r3, [r4, #4]
 8003d36:	6922      	ldr	r2, [r4, #16]
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	dc02      	bgt.n	8003d42 <_printf_i+0x122>
 8003d3c:	2330      	movs	r3, #48	; 0x30
 8003d3e:	3e01      	subs	r6, #1
 8003d40:	7033      	strb	r3, [r6, #0]
 8003d42:	9b04      	ldr	r3, [sp, #16]
 8003d44:	1b9b      	subs	r3, r3, r6
 8003d46:	6123      	str	r3, [r4, #16]
 8003d48:	9b07      	ldr	r3, [sp, #28]
 8003d4a:	0021      	movs	r1, r4
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	9805      	ldr	r0, [sp, #20]
 8003d50:	9b06      	ldr	r3, [sp, #24]
 8003d52:	aa09      	add	r2, sp, #36	; 0x24
 8003d54:	f7ff fef4 	bl	8003b40 <_printf_common>
 8003d58:	1c43      	adds	r3, r0, #1
 8003d5a:	d14c      	bne.n	8003df6 <_printf_i+0x1d6>
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	4240      	negs	r0, r0
 8003d60:	b00b      	add	sp, #44	; 0x2c
 8003d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d64:	3145      	adds	r1, #69	; 0x45
 8003d66:	700a      	strb	r2, [r1, #0]
 8003d68:	4a34      	ldr	r2, [pc, #208]	; (8003e3c <_printf_i+0x21c>)
 8003d6a:	9203      	str	r2, [sp, #12]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	6821      	ldr	r1, [r4, #0]
 8003d70:	ca20      	ldmia	r2!, {r5}
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	0608      	lsls	r0, r1, #24
 8003d76:	d516      	bpl.n	8003da6 <_printf_i+0x186>
 8003d78:	07cb      	lsls	r3, r1, #31
 8003d7a:	d502      	bpl.n	8003d82 <_printf_i+0x162>
 8003d7c:	2320      	movs	r3, #32
 8003d7e:	4319      	orrs	r1, r3
 8003d80:	6021      	str	r1, [r4, #0]
 8003d82:	2710      	movs	r7, #16
 8003d84:	2d00      	cmp	r5, #0
 8003d86:	d1b2      	bne.n	8003cee <_printf_i+0xce>
 8003d88:	2320      	movs	r3, #32
 8003d8a:	6822      	ldr	r2, [r4, #0]
 8003d8c:	439a      	bics	r2, r3
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	e7ad      	b.n	8003cee <_printf_i+0xce>
 8003d92:	2220      	movs	r2, #32
 8003d94:	6809      	ldr	r1, [r1, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	6022      	str	r2, [r4, #0]
 8003d9a:	0022      	movs	r2, r4
 8003d9c:	2178      	movs	r1, #120	; 0x78
 8003d9e:	3245      	adds	r2, #69	; 0x45
 8003da0:	7011      	strb	r1, [r2, #0]
 8003da2:	4a27      	ldr	r2, [pc, #156]	; (8003e40 <_printf_i+0x220>)
 8003da4:	e7e1      	b.n	8003d6a <_printf_i+0x14a>
 8003da6:	0648      	lsls	r0, r1, #25
 8003da8:	d5e6      	bpl.n	8003d78 <_printf_i+0x158>
 8003daa:	b2ad      	uxth	r5, r5
 8003dac:	e7e4      	b.n	8003d78 <_printf_i+0x158>
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	680d      	ldr	r5, [r1, #0]
 8003db2:	1d10      	adds	r0, r2, #4
 8003db4:	6949      	ldr	r1, [r1, #20]
 8003db6:	6018      	str	r0, [r3, #0]
 8003db8:	6813      	ldr	r3, [r2, #0]
 8003dba:	062e      	lsls	r6, r5, #24
 8003dbc:	d501      	bpl.n	8003dc2 <_printf_i+0x1a2>
 8003dbe:	6019      	str	r1, [r3, #0]
 8003dc0:	e002      	b.n	8003dc8 <_printf_i+0x1a8>
 8003dc2:	066d      	lsls	r5, r5, #25
 8003dc4:	d5fb      	bpl.n	8003dbe <_printf_i+0x19e>
 8003dc6:	8019      	strh	r1, [r3, #0]
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9e04      	ldr	r6, [sp, #16]
 8003dcc:	6123      	str	r3, [r4, #16]
 8003dce:	e7bb      	b.n	8003d48 <_printf_i+0x128>
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	1d11      	adds	r1, r2, #4
 8003dd4:	6019      	str	r1, [r3, #0]
 8003dd6:	6816      	ldr	r6, [r2, #0]
 8003dd8:	2100      	movs	r1, #0
 8003dda:	0030      	movs	r0, r6
 8003ddc:	6862      	ldr	r2, [r4, #4]
 8003dde:	f000 fb45 	bl	800446c <memchr>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d001      	beq.n	8003dea <_printf_i+0x1ca>
 8003de6:	1b80      	subs	r0, r0, r6
 8003de8:	6060      	str	r0, [r4, #4]
 8003dea:	6863      	ldr	r3, [r4, #4]
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	2300      	movs	r3, #0
 8003df0:	9a04      	ldr	r2, [sp, #16]
 8003df2:	7013      	strb	r3, [r2, #0]
 8003df4:	e7a8      	b.n	8003d48 <_printf_i+0x128>
 8003df6:	6923      	ldr	r3, [r4, #16]
 8003df8:	0032      	movs	r2, r6
 8003dfa:	9906      	ldr	r1, [sp, #24]
 8003dfc:	9805      	ldr	r0, [sp, #20]
 8003dfe:	9d07      	ldr	r5, [sp, #28]
 8003e00:	47a8      	blx	r5
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d0aa      	beq.n	8003d5c <_printf_i+0x13c>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	079b      	lsls	r3, r3, #30
 8003e0a:	d415      	bmi.n	8003e38 <_printf_i+0x218>
 8003e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e0e:	68e0      	ldr	r0, [r4, #12]
 8003e10:	4298      	cmp	r0, r3
 8003e12:	daa5      	bge.n	8003d60 <_printf_i+0x140>
 8003e14:	0018      	movs	r0, r3
 8003e16:	e7a3      	b.n	8003d60 <_printf_i+0x140>
 8003e18:	0022      	movs	r2, r4
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	9906      	ldr	r1, [sp, #24]
 8003e1e:	9805      	ldr	r0, [sp, #20]
 8003e20:	9e07      	ldr	r6, [sp, #28]
 8003e22:	3219      	adds	r2, #25
 8003e24:	47b0      	blx	r6
 8003e26:	1c43      	adds	r3, r0, #1
 8003e28:	d098      	beq.n	8003d5c <_printf_i+0x13c>
 8003e2a:	3501      	adds	r5, #1
 8003e2c:	68e3      	ldr	r3, [r4, #12]
 8003e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	dcf0      	bgt.n	8003e18 <_printf_i+0x1f8>
 8003e36:	e7e9      	b.n	8003e0c <_printf_i+0x1ec>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	e7f7      	b.n	8003e2c <_printf_i+0x20c>
 8003e3c:	08004aed 	.word	0x08004aed
 8003e40:	08004afe 	.word	0x08004afe

08003e44 <__swbuf_r>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	0005      	movs	r5, r0
 8003e48:	000e      	movs	r6, r1
 8003e4a:	0014      	movs	r4, r2
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d004      	beq.n	8003e5a <__swbuf_r+0x16>
 8003e50:	6983      	ldr	r3, [r0, #24]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <__swbuf_r+0x16>
 8003e56:	f000 f9f9 	bl	800424c <__sinit>
 8003e5a:	4b22      	ldr	r3, [pc, #136]	; (8003ee4 <__swbuf_r+0xa0>)
 8003e5c:	429c      	cmp	r4, r3
 8003e5e:	d12e      	bne.n	8003ebe <__swbuf_r+0x7a>
 8003e60:	686c      	ldr	r4, [r5, #4]
 8003e62:	69a3      	ldr	r3, [r4, #24]
 8003e64:	60a3      	str	r3, [r4, #8]
 8003e66:	89a3      	ldrh	r3, [r4, #12]
 8003e68:	071b      	lsls	r3, r3, #28
 8003e6a:	d532      	bpl.n	8003ed2 <__swbuf_r+0x8e>
 8003e6c:	6923      	ldr	r3, [r4, #16]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d02f      	beq.n	8003ed2 <__swbuf_r+0x8e>
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	6922      	ldr	r2, [r4, #16]
 8003e76:	b2f7      	uxtb	r7, r6
 8003e78:	1a98      	subs	r0, r3, r2
 8003e7a:	6963      	ldr	r3, [r4, #20]
 8003e7c:	b2f6      	uxtb	r6, r6
 8003e7e:	4283      	cmp	r3, r0
 8003e80:	dc05      	bgt.n	8003e8e <__swbuf_r+0x4a>
 8003e82:	0021      	movs	r1, r4
 8003e84:	0028      	movs	r0, r5
 8003e86:	f000 f93f 	bl	8004108 <_fflush_r>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d127      	bne.n	8003ede <__swbuf_r+0x9a>
 8003e8e:	68a3      	ldr	r3, [r4, #8]
 8003e90:	3001      	adds	r0, #1
 8003e92:	3b01      	subs	r3, #1
 8003e94:	60a3      	str	r3, [r4, #8]
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	6022      	str	r2, [r4, #0]
 8003e9c:	701f      	strb	r7, [r3, #0]
 8003e9e:	6963      	ldr	r3, [r4, #20]
 8003ea0:	4283      	cmp	r3, r0
 8003ea2:	d004      	beq.n	8003eae <__swbuf_r+0x6a>
 8003ea4:	89a3      	ldrh	r3, [r4, #12]
 8003ea6:	07db      	lsls	r3, r3, #31
 8003ea8:	d507      	bpl.n	8003eba <__swbuf_r+0x76>
 8003eaa:	2e0a      	cmp	r6, #10
 8003eac:	d105      	bne.n	8003eba <__swbuf_r+0x76>
 8003eae:	0021      	movs	r1, r4
 8003eb0:	0028      	movs	r0, r5
 8003eb2:	f000 f929 	bl	8004108 <_fflush_r>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d111      	bne.n	8003ede <__swbuf_r+0x9a>
 8003eba:	0030      	movs	r0, r6
 8003ebc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <__swbuf_r+0xa4>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d101      	bne.n	8003ec8 <__swbuf_r+0x84>
 8003ec4:	68ac      	ldr	r4, [r5, #8]
 8003ec6:	e7cc      	b.n	8003e62 <__swbuf_r+0x1e>
 8003ec8:	4b08      	ldr	r3, [pc, #32]	; (8003eec <__swbuf_r+0xa8>)
 8003eca:	429c      	cmp	r4, r3
 8003ecc:	d1c9      	bne.n	8003e62 <__swbuf_r+0x1e>
 8003ece:	68ec      	ldr	r4, [r5, #12]
 8003ed0:	e7c7      	b.n	8003e62 <__swbuf_r+0x1e>
 8003ed2:	0021      	movs	r1, r4
 8003ed4:	0028      	movs	r0, r5
 8003ed6:	f000 f80b 	bl	8003ef0 <__swsetup_r>
 8003eda:	2800      	cmp	r0, #0
 8003edc:	d0c9      	beq.n	8003e72 <__swbuf_r+0x2e>
 8003ede:	2601      	movs	r6, #1
 8003ee0:	4276      	negs	r6, r6
 8003ee2:	e7ea      	b.n	8003eba <__swbuf_r+0x76>
 8003ee4:	08004b30 	.word	0x08004b30
 8003ee8:	08004b50 	.word	0x08004b50
 8003eec:	08004b10 	.word	0x08004b10

08003ef0 <__swsetup_r>:
 8003ef0:	4b37      	ldr	r3, [pc, #220]	; (8003fd0 <__swsetup_r+0xe0>)
 8003ef2:	b570      	push	{r4, r5, r6, lr}
 8003ef4:	681d      	ldr	r5, [r3, #0]
 8003ef6:	0006      	movs	r6, r0
 8003ef8:	000c      	movs	r4, r1
 8003efa:	2d00      	cmp	r5, #0
 8003efc:	d005      	beq.n	8003f0a <__swsetup_r+0x1a>
 8003efe:	69ab      	ldr	r3, [r5, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <__swsetup_r+0x1a>
 8003f04:	0028      	movs	r0, r5
 8003f06:	f000 f9a1 	bl	800424c <__sinit>
 8003f0a:	4b32      	ldr	r3, [pc, #200]	; (8003fd4 <__swsetup_r+0xe4>)
 8003f0c:	429c      	cmp	r4, r3
 8003f0e:	d10f      	bne.n	8003f30 <__swsetup_r+0x40>
 8003f10:	686c      	ldr	r4, [r5, #4]
 8003f12:	230c      	movs	r3, #12
 8003f14:	5ee2      	ldrsh	r2, [r4, r3]
 8003f16:	b293      	uxth	r3, r2
 8003f18:	0711      	lsls	r1, r2, #28
 8003f1a:	d42d      	bmi.n	8003f78 <__swsetup_r+0x88>
 8003f1c:	06d9      	lsls	r1, r3, #27
 8003f1e:	d411      	bmi.n	8003f44 <__swsetup_r+0x54>
 8003f20:	2309      	movs	r3, #9
 8003f22:	2001      	movs	r0, #1
 8003f24:	6033      	str	r3, [r6, #0]
 8003f26:	3337      	adds	r3, #55	; 0x37
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	81a3      	strh	r3, [r4, #12]
 8003f2c:	4240      	negs	r0, r0
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	4b29      	ldr	r3, [pc, #164]	; (8003fd8 <__swsetup_r+0xe8>)
 8003f32:	429c      	cmp	r4, r3
 8003f34:	d101      	bne.n	8003f3a <__swsetup_r+0x4a>
 8003f36:	68ac      	ldr	r4, [r5, #8]
 8003f38:	e7eb      	b.n	8003f12 <__swsetup_r+0x22>
 8003f3a:	4b28      	ldr	r3, [pc, #160]	; (8003fdc <__swsetup_r+0xec>)
 8003f3c:	429c      	cmp	r4, r3
 8003f3e:	d1e8      	bne.n	8003f12 <__swsetup_r+0x22>
 8003f40:	68ec      	ldr	r4, [r5, #12]
 8003f42:	e7e6      	b.n	8003f12 <__swsetup_r+0x22>
 8003f44:	075b      	lsls	r3, r3, #29
 8003f46:	d513      	bpl.n	8003f70 <__swsetup_r+0x80>
 8003f48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f4a:	2900      	cmp	r1, #0
 8003f4c:	d008      	beq.n	8003f60 <__swsetup_r+0x70>
 8003f4e:	0023      	movs	r3, r4
 8003f50:	3344      	adds	r3, #68	; 0x44
 8003f52:	4299      	cmp	r1, r3
 8003f54:	d002      	beq.n	8003f5c <__swsetup_r+0x6c>
 8003f56:	0030      	movs	r0, r6
 8003f58:	f000 fa94 	bl	8004484 <_free_r>
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f60:	2224      	movs	r2, #36	; 0x24
 8003f62:	89a3      	ldrh	r3, [r4, #12]
 8003f64:	4393      	bics	r3, r2
 8003f66:	81a3      	strh	r3, [r4, #12]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6063      	str	r3, [r4, #4]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	6023      	str	r3, [r4, #0]
 8003f70:	2308      	movs	r3, #8
 8003f72:	89a2      	ldrh	r2, [r4, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <__swsetup_r+0xa6>
 8003f7e:	21a0      	movs	r1, #160	; 0xa0
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	0089      	lsls	r1, r1, #2
 8003f86:	0092      	lsls	r2, r2, #2
 8003f88:	400b      	ands	r3, r1
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d003      	beq.n	8003f96 <__swsetup_r+0xa6>
 8003f8e:	0021      	movs	r1, r4
 8003f90:	0030      	movs	r0, r6
 8003f92:	f000 fa27 	bl	80043e4 <__smakebuf_r>
 8003f96:	220c      	movs	r2, #12
 8003f98:	5ea3      	ldrsh	r3, [r4, r2]
 8003f9a:	2001      	movs	r0, #1
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	b299      	uxth	r1, r3
 8003fa0:	4002      	ands	r2, r0
 8003fa2:	4203      	tst	r3, r0
 8003fa4:	d00f      	beq.n	8003fc6 <__swsetup_r+0xd6>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60a2      	str	r2, [r4, #8]
 8003faa:	6962      	ldr	r2, [r4, #20]
 8003fac:	4252      	negs	r2, r2
 8003fae:	61a2      	str	r2, [r4, #24]
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	6922      	ldr	r2, [r4, #16]
 8003fb4:	4282      	cmp	r2, r0
 8003fb6:	d1ba      	bne.n	8003f2e <__swsetup_r+0x3e>
 8003fb8:	060a      	lsls	r2, r1, #24
 8003fba:	d5b8      	bpl.n	8003f2e <__swsetup_r+0x3e>
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	81a3      	strh	r3, [r4, #12]
 8003fc2:	3801      	subs	r0, #1
 8003fc4:	e7b3      	b.n	8003f2e <__swsetup_r+0x3e>
 8003fc6:	0788      	lsls	r0, r1, #30
 8003fc8:	d400      	bmi.n	8003fcc <__swsetup_r+0xdc>
 8003fca:	6962      	ldr	r2, [r4, #20]
 8003fcc:	60a2      	str	r2, [r4, #8]
 8003fce:	e7ef      	b.n	8003fb0 <__swsetup_r+0xc0>
 8003fd0:	200000c4 	.word	0x200000c4
 8003fd4:	08004b30 	.word	0x08004b30
 8003fd8:	08004b50 	.word	0x08004b50
 8003fdc:	08004b10 	.word	0x08004b10

08003fe0 <abort>:
 8003fe0:	2006      	movs	r0, #6
 8003fe2:	b510      	push	{r4, lr}
 8003fe4:	f000 fb6c 	bl	80046c0 <raise>
 8003fe8:	2001      	movs	r0, #1
 8003fea:	f7fd f8da 	bl	80011a2 <_exit>
	...

08003ff0 <__sflush_r>:
 8003ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ff2:	898b      	ldrh	r3, [r1, #12]
 8003ff4:	0005      	movs	r5, r0
 8003ff6:	000c      	movs	r4, r1
 8003ff8:	071a      	lsls	r2, r3, #28
 8003ffa:	d45f      	bmi.n	80040bc <__sflush_r+0xcc>
 8003ffc:	684a      	ldr	r2, [r1, #4]
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	dc04      	bgt.n	800400c <__sflush_r+0x1c>
 8004002:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004004:	2a00      	cmp	r2, #0
 8004006:	dc01      	bgt.n	800400c <__sflush_r+0x1c>
 8004008:	2000      	movs	r0, #0
 800400a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800400c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800400e:	2f00      	cmp	r7, #0
 8004010:	d0fa      	beq.n	8004008 <__sflush_r+0x18>
 8004012:	2200      	movs	r2, #0
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	682e      	ldr	r6, [r5, #0]
 8004018:	602a      	str	r2, [r5, #0]
 800401a:	001a      	movs	r2, r3
 800401c:	0149      	lsls	r1, r1, #5
 800401e:	400a      	ands	r2, r1
 8004020:	420b      	tst	r3, r1
 8004022:	d034      	beq.n	800408e <__sflush_r+0x9e>
 8004024:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004026:	89a3      	ldrh	r3, [r4, #12]
 8004028:	075b      	lsls	r3, r3, #29
 800402a:	d506      	bpl.n	800403a <__sflush_r+0x4a>
 800402c:	6863      	ldr	r3, [r4, #4]
 800402e:	1ac0      	subs	r0, r0, r3
 8004030:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <__sflush_r+0x4a>
 8004036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004038:	1ac0      	subs	r0, r0, r3
 800403a:	0002      	movs	r2, r0
 800403c:	6a21      	ldr	r1, [r4, #32]
 800403e:	2300      	movs	r3, #0
 8004040:	0028      	movs	r0, r5
 8004042:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004044:	47b8      	blx	r7
 8004046:	89a1      	ldrh	r1, [r4, #12]
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d106      	bne.n	800405a <__sflush_r+0x6a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	2b1d      	cmp	r3, #29
 8004050:	d831      	bhi.n	80040b6 <__sflush_r+0xc6>
 8004052:	4a2c      	ldr	r2, [pc, #176]	; (8004104 <__sflush_r+0x114>)
 8004054:	40da      	lsrs	r2, r3
 8004056:	07d3      	lsls	r3, r2, #31
 8004058:	d52d      	bpl.n	80040b6 <__sflush_r+0xc6>
 800405a:	2300      	movs	r3, #0
 800405c:	6063      	str	r3, [r4, #4]
 800405e:	6923      	ldr	r3, [r4, #16]
 8004060:	6023      	str	r3, [r4, #0]
 8004062:	04cb      	lsls	r3, r1, #19
 8004064:	d505      	bpl.n	8004072 <__sflush_r+0x82>
 8004066:	1c43      	adds	r3, r0, #1
 8004068:	d102      	bne.n	8004070 <__sflush_r+0x80>
 800406a:	682b      	ldr	r3, [r5, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d100      	bne.n	8004072 <__sflush_r+0x82>
 8004070:	6560      	str	r0, [r4, #84]	; 0x54
 8004072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004074:	602e      	str	r6, [r5, #0]
 8004076:	2900      	cmp	r1, #0
 8004078:	d0c6      	beq.n	8004008 <__sflush_r+0x18>
 800407a:	0023      	movs	r3, r4
 800407c:	3344      	adds	r3, #68	; 0x44
 800407e:	4299      	cmp	r1, r3
 8004080:	d002      	beq.n	8004088 <__sflush_r+0x98>
 8004082:	0028      	movs	r0, r5
 8004084:	f000 f9fe 	bl	8004484 <_free_r>
 8004088:	2000      	movs	r0, #0
 800408a:	6360      	str	r0, [r4, #52]	; 0x34
 800408c:	e7bd      	b.n	800400a <__sflush_r+0x1a>
 800408e:	2301      	movs	r3, #1
 8004090:	0028      	movs	r0, r5
 8004092:	6a21      	ldr	r1, [r4, #32]
 8004094:	47b8      	blx	r7
 8004096:	1c43      	adds	r3, r0, #1
 8004098:	d1c5      	bne.n	8004026 <__sflush_r+0x36>
 800409a:	682b      	ldr	r3, [r5, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0c2      	beq.n	8004026 <__sflush_r+0x36>
 80040a0:	2b1d      	cmp	r3, #29
 80040a2:	d001      	beq.n	80040a8 <__sflush_r+0xb8>
 80040a4:	2b16      	cmp	r3, #22
 80040a6:	d101      	bne.n	80040ac <__sflush_r+0xbc>
 80040a8:	602e      	str	r6, [r5, #0]
 80040aa:	e7ad      	b.n	8004008 <__sflush_r+0x18>
 80040ac:	2340      	movs	r3, #64	; 0x40
 80040ae:	89a2      	ldrh	r2, [r4, #12]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	81a3      	strh	r3, [r4, #12]
 80040b4:	e7a9      	b.n	800400a <__sflush_r+0x1a>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	430b      	orrs	r3, r1
 80040ba:	e7fa      	b.n	80040b2 <__sflush_r+0xc2>
 80040bc:	690f      	ldr	r7, [r1, #16]
 80040be:	2f00      	cmp	r7, #0
 80040c0:	d0a2      	beq.n	8004008 <__sflush_r+0x18>
 80040c2:	680a      	ldr	r2, [r1, #0]
 80040c4:	600f      	str	r7, [r1, #0]
 80040c6:	1bd2      	subs	r2, r2, r7
 80040c8:	9201      	str	r2, [sp, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	079b      	lsls	r3, r3, #30
 80040ce:	d100      	bne.n	80040d2 <__sflush_r+0xe2>
 80040d0:	694a      	ldr	r2, [r1, #20]
 80040d2:	60a2      	str	r2, [r4, #8]
 80040d4:	9b01      	ldr	r3, [sp, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	dc00      	bgt.n	80040dc <__sflush_r+0xec>
 80040da:	e795      	b.n	8004008 <__sflush_r+0x18>
 80040dc:	003a      	movs	r2, r7
 80040de:	0028      	movs	r0, r5
 80040e0:	9b01      	ldr	r3, [sp, #4]
 80040e2:	6a21      	ldr	r1, [r4, #32]
 80040e4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040e6:	47b0      	blx	r6
 80040e8:	2800      	cmp	r0, #0
 80040ea:	dc06      	bgt.n	80040fa <__sflush_r+0x10a>
 80040ec:	2340      	movs	r3, #64	; 0x40
 80040ee:	2001      	movs	r0, #1
 80040f0:	89a2      	ldrh	r2, [r4, #12]
 80040f2:	4240      	negs	r0, r0
 80040f4:	4313      	orrs	r3, r2
 80040f6:	81a3      	strh	r3, [r4, #12]
 80040f8:	e787      	b.n	800400a <__sflush_r+0x1a>
 80040fa:	9b01      	ldr	r3, [sp, #4]
 80040fc:	183f      	adds	r7, r7, r0
 80040fe:	1a1b      	subs	r3, r3, r0
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	e7e7      	b.n	80040d4 <__sflush_r+0xe4>
 8004104:	20400001 	.word	0x20400001

08004108 <_fflush_r>:
 8004108:	690b      	ldr	r3, [r1, #16]
 800410a:	b570      	push	{r4, r5, r6, lr}
 800410c:	0005      	movs	r5, r0
 800410e:	000c      	movs	r4, r1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d102      	bne.n	800411a <_fflush_r+0x12>
 8004114:	2500      	movs	r5, #0
 8004116:	0028      	movs	r0, r5
 8004118:	bd70      	pop	{r4, r5, r6, pc}
 800411a:	2800      	cmp	r0, #0
 800411c:	d004      	beq.n	8004128 <_fflush_r+0x20>
 800411e:	6983      	ldr	r3, [r0, #24]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <_fflush_r+0x20>
 8004124:	f000 f892 	bl	800424c <__sinit>
 8004128:	4b14      	ldr	r3, [pc, #80]	; (800417c <_fflush_r+0x74>)
 800412a:	429c      	cmp	r4, r3
 800412c:	d11b      	bne.n	8004166 <_fflush_r+0x5e>
 800412e:	686c      	ldr	r4, [r5, #4]
 8004130:	220c      	movs	r2, #12
 8004132:	5ea3      	ldrsh	r3, [r4, r2]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0ed      	beq.n	8004114 <_fflush_r+0xc>
 8004138:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800413a:	07d2      	lsls	r2, r2, #31
 800413c:	d404      	bmi.n	8004148 <_fflush_r+0x40>
 800413e:	059b      	lsls	r3, r3, #22
 8004140:	d402      	bmi.n	8004148 <_fflush_r+0x40>
 8004142:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004144:	f000 f923 	bl	800438e <__retarget_lock_acquire_recursive>
 8004148:	0028      	movs	r0, r5
 800414a:	0021      	movs	r1, r4
 800414c:	f7ff ff50 	bl	8003ff0 <__sflush_r>
 8004150:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004152:	0005      	movs	r5, r0
 8004154:	07db      	lsls	r3, r3, #31
 8004156:	d4de      	bmi.n	8004116 <_fflush_r+0xe>
 8004158:	89a3      	ldrh	r3, [r4, #12]
 800415a:	059b      	lsls	r3, r3, #22
 800415c:	d4db      	bmi.n	8004116 <_fflush_r+0xe>
 800415e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004160:	f000 f916 	bl	8004390 <__retarget_lock_release_recursive>
 8004164:	e7d7      	b.n	8004116 <_fflush_r+0xe>
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <_fflush_r+0x78>)
 8004168:	429c      	cmp	r4, r3
 800416a:	d101      	bne.n	8004170 <_fflush_r+0x68>
 800416c:	68ac      	ldr	r4, [r5, #8]
 800416e:	e7df      	b.n	8004130 <_fflush_r+0x28>
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <_fflush_r+0x7c>)
 8004172:	429c      	cmp	r4, r3
 8004174:	d1dc      	bne.n	8004130 <_fflush_r+0x28>
 8004176:	68ec      	ldr	r4, [r5, #12]
 8004178:	e7da      	b.n	8004130 <_fflush_r+0x28>
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	08004b30 	.word	0x08004b30
 8004180:	08004b50 	.word	0x08004b50
 8004184:	08004b10 	.word	0x08004b10

08004188 <std>:
 8004188:	2300      	movs	r3, #0
 800418a:	b510      	push	{r4, lr}
 800418c:	0004      	movs	r4, r0
 800418e:	6003      	str	r3, [r0, #0]
 8004190:	6043      	str	r3, [r0, #4]
 8004192:	6083      	str	r3, [r0, #8]
 8004194:	8181      	strh	r1, [r0, #12]
 8004196:	6643      	str	r3, [r0, #100]	; 0x64
 8004198:	0019      	movs	r1, r3
 800419a:	81c2      	strh	r2, [r0, #14]
 800419c:	6103      	str	r3, [r0, #16]
 800419e:	6143      	str	r3, [r0, #20]
 80041a0:	6183      	str	r3, [r0, #24]
 80041a2:	2208      	movs	r2, #8
 80041a4:	305c      	adds	r0, #92	; 0x5c
 80041a6:	f7ff fb61 	bl	800386c <memset>
 80041aa:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <std+0x38>)
 80041ac:	6224      	str	r4, [r4, #32]
 80041ae:	6263      	str	r3, [r4, #36]	; 0x24
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <std+0x3c>)
 80041b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80041b4:	4b04      	ldr	r3, [pc, #16]	; (80041c8 <std+0x40>)
 80041b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041b8:	4b04      	ldr	r3, [pc, #16]	; (80041cc <std+0x44>)
 80041ba:	6323      	str	r3, [r4, #48]	; 0x30
 80041bc:	bd10      	pop	{r4, pc}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	08004701 	.word	0x08004701
 80041c4:	08004729 	.word	0x08004729
 80041c8:	08004761 	.word	0x08004761
 80041cc:	0800478d 	.word	0x0800478d

080041d0 <_cleanup_r>:
 80041d0:	b510      	push	{r4, lr}
 80041d2:	4902      	ldr	r1, [pc, #8]	; (80041dc <_cleanup_r+0xc>)
 80041d4:	f000 f8ba 	bl	800434c <_fwalk_reent>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	08004109 	.word	0x08004109

080041e0 <__sfmoreglue>:
 80041e0:	b570      	push	{r4, r5, r6, lr}
 80041e2:	2568      	movs	r5, #104	; 0x68
 80041e4:	1e4a      	subs	r2, r1, #1
 80041e6:	4355      	muls	r5, r2
 80041e8:	000e      	movs	r6, r1
 80041ea:	0029      	movs	r1, r5
 80041ec:	3174      	adds	r1, #116	; 0x74
 80041ee:	f000 f9b5 	bl	800455c <_malloc_r>
 80041f2:	1e04      	subs	r4, r0, #0
 80041f4:	d008      	beq.n	8004208 <__sfmoreglue+0x28>
 80041f6:	2100      	movs	r1, #0
 80041f8:	002a      	movs	r2, r5
 80041fa:	6001      	str	r1, [r0, #0]
 80041fc:	6046      	str	r6, [r0, #4]
 80041fe:	300c      	adds	r0, #12
 8004200:	60a0      	str	r0, [r4, #8]
 8004202:	3268      	adds	r2, #104	; 0x68
 8004204:	f7ff fb32 	bl	800386c <memset>
 8004208:	0020      	movs	r0, r4
 800420a:	bd70      	pop	{r4, r5, r6, pc}

0800420c <__sfp_lock_acquire>:
 800420c:	b510      	push	{r4, lr}
 800420e:	4802      	ldr	r0, [pc, #8]	; (8004218 <__sfp_lock_acquire+0xc>)
 8004210:	f000 f8bd 	bl	800438e <__retarget_lock_acquire_recursive>
 8004214:	bd10      	pop	{r4, pc}
 8004216:	46c0      	nop			; (mov r8, r8)
 8004218:	20000239 	.word	0x20000239

0800421c <__sfp_lock_release>:
 800421c:	b510      	push	{r4, lr}
 800421e:	4802      	ldr	r0, [pc, #8]	; (8004228 <__sfp_lock_release+0xc>)
 8004220:	f000 f8b6 	bl	8004390 <__retarget_lock_release_recursive>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000239 	.word	0x20000239

0800422c <__sinit_lock_acquire>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4802      	ldr	r0, [pc, #8]	; (8004238 <__sinit_lock_acquire+0xc>)
 8004230:	f000 f8ad 	bl	800438e <__retarget_lock_acquire_recursive>
 8004234:	bd10      	pop	{r4, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	2000023a 	.word	0x2000023a

0800423c <__sinit_lock_release>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4802      	ldr	r0, [pc, #8]	; (8004248 <__sinit_lock_release+0xc>)
 8004240:	f000 f8a6 	bl	8004390 <__retarget_lock_release_recursive>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	2000023a 	.word	0x2000023a

0800424c <__sinit>:
 800424c:	b513      	push	{r0, r1, r4, lr}
 800424e:	0004      	movs	r4, r0
 8004250:	f7ff ffec 	bl	800422c <__sinit_lock_acquire>
 8004254:	69a3      	ldr	r3, [r4, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <__sinit+0x14>
 800425a:	f7ff ffef 	bl	800423c <__sinit_lock_release>
 800425e:	bd13      	pop	{r0, r1, r4, pc}
 8004260:	64a3      	str	r3, [r4, #72]	; 0x48
 8004262:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004264:	6523      	str	r3, [r4, #80]	; 0x50
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <__sinit+0x68>)
 8004268:	4a13      	ldr	r2, [pc, #76]	; (80042b8 <__sinit+0x6c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	62a2      	str	r2, [r4, #40]	; 0x28
 800426e:	9301      	str	r3, [sp, #4]
 8004270:	42a3      	cmp	r3, r4
 8004272:	d101      	bne.n	8004278 <__sinit+0x2c>
 8004274:	2301      	movs	r3, #1
 8004276:	61a3      	str	r3, [r4, #24]
 8004278:	0020      	movs	r0, r4
 800427a:	f000 f81f 	bl	80042bc <__sfp>
 800427e:	6060      	str	r0, [r4, #4]
 8004280:	0020      	movs	r0, r4
 8004282:	f000 f81b 	bl	80042bc <__sfp>
 8004286:	60a0      	str	r0, [r4, #8]
 8004288:	0020      	movs	r0, r4
 800428a:	f000 f817 	bl	80042bc <__sfp>
 800428e:	2200      	movs	r2, #0
 8004290:	2104      	movs	r1, #4
 8004292:	60e0      	str	r0, [r4, #12]
 8004294:	6860      	ldr	r0, [r4, #4]
 8004296:	f7ff ff77 	bl	8004188 <std>
 800429a:	2201      	movs	r2, #1
 800429c:	2109      	movs	r1, #9
 800429e:	68a0      	ldr	r0, [r4, #8]
 80042a0:	f7ff ff72 	bl	8004188 <std>
 80042a4:	2202      	movs	r2, #2
 80042a6:	2112      	movs	r1, #18
 80042a8:	68e0      	ldr	r0, [r4, #12]
 80042aa:	f7ff ff6d 	bl	8004188 <std>
 80042ae:	2301      	movs	r3, #1
 80042b0:	61a3      	str	r3, [r4, #24]
 80042b2:	e7d2      	b.n	800425a <__sinit+0xe>
 80042b4:	08004ad8 	.word	0x08004ad8
 80042b8:	080041d1 	.word	0x080041d1

080042bc <__sfp>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	0007      	movs	r7, r0
 80042c0:	f7ff ffa4 	bl	800420c <__sfp_lock_acquire>
 80042c4:	4b1f      	ldr	r3, [pc, #124]	; (8004344 <__sfp+0x88>)
 80042c6:	681e      	ldr	r6, [r3, #0]
 80042c8:	69b3      	ldr	r3, [r6, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d102      	bne.n	80042d4 <__sfp+0x18>
 80042ce:	0030      	movs	r0, r6
 80042d0:	f7ff ffbc 	bl	800424c <__sinit>
 80042d4:	3648      	adds	r6, #72	; 0x48
 80042d6:	68b4      	ldr	r4, [r6, #8]
 80042d8:	6873      	ldr	r3, [r6, #4]
 80042da:	3b01      	subs	r3, #1
 80042dc:	d504      	bpl.n	80042e8 <__sfp+0x2c>
 80042de:	6833      	ldr	r3, [r6, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d022      	beq.n	800432a <__sfp+0x6e>
 80042e4:	6836      	ldr	r6, [r6, #0]
 80042e6:	e7f6      	b.n	80042d6 <__sfp+0x1a>
 80042e8:	220c      	movs	r2, #12
 80042ea:	5ea5      	ldrsh	r5, [r4, r2]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	d11a      	bne.n	8004326 <__sfp+0x6a>
 80042f0:	0020      	movs	r0, r4
 80042f2:	4b15      	ldr	r3, [pc, #84]	; (8004348 <__sfp+0x8c>)
 80042f4:	3058      	adds	r0, #88	; 0x58
 80042f6:	60e3      	str	r3, [r4, #12]
 80042f8:	6665      	str	r5, [r4, #100]	; 0x64
 80042fa:	f000 f847 	bl	800438c <__retarget_lock_init_recursive>
 80042fe:	f7ff ff8d 	bl	800421c <__sfp_lock_release>
 8004302:	0020      	movs	r0, r4
 8004304:	2208      	movs	r2, #8
 8004306:	0029      	movs	r1, r5
 8004308:	6025      	str	r5, [r4, #0]
 800430a:	60a5      	str	r5, [r4, #8]
 800430c:	6065      	str	r5, [r4, #4]
 800430e:	6125      	str	r5, [r4, #16]
 8004310:	6165      	str	r5, [r4, #20]
 8004312:	61a5      	str	r5, [r4, #24]
 8004314:	305c      	adds	r0, #92	; 0x5c
 8004316:	f7ff faa9 	bl	800386c <memset>
 800431a:	6365      	str	r5, [r4, #52]	; 0x34
 800431c:	63a5      	str	r5, [r4, #56]	; 0x38
 800431e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004320:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004322:	0020      	movs	r0, r4
 8004324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004326:	3468      	adds	r4, #104	; 0x68
 8004328:	e7d7      	b.n	80042da <__sfp+0x1e>
 800432a:	2104      	movs	r1, #4
 800432c:	0038      	movs	r0, r7
 800432e:	f7ff ff57 	bl	80041e0 <__sfmoreglue>
 8004332:	1e04      	subs	r4, r0, #0
 8004334:	6030      	str	r0, [r6, #0]
 8004336:	d1d5      	bne.n	80042e4 <__sfp+0x28>
 8004338:	f7ff ff70 	bl	800421c <__sfp_lock_release>
 800433c:	230c      	movs	r3, #12
 800433e:	603b      	str	r3, [r7, #0]
 8004340:	e7ef      	b.n	8004322 <__sfp+0x66>
 8004342:	46c0      	nop			; (mov r8, r8)
 8004344:	08004ad8 	.word	0x08004ad8
 8004348:	ffff0001 	.word	0xffff0001

0800434c <_fwalk_reent>:
 800434c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434e:	0004      	movs	r4, r0
 8004350:	0006      	movs	r6, r0
 8004352:	2700      	movs	r7, #0
 8004354:	9101      	str	r1, [sp, #4]
 8004356:	3448      	adds	r4, #72	; 0x48
 8004358:	6863      	ldr	r3, [r4, #4]
 800435a:	68a5      	ldr	r5, [r4, #8]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	9b00      	ldr	r3, [sp, #0]
 8004360:	3b01      	subs	r3, #1
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	d504      	bpl.n	8004370 <_fwalk_reent+0x24>
 8004366:	6824      	ldr	r4, [r4, #0]
 8004368:	2c00      	cmp	r4, #0
 800436a:	d1f5      	bne.n	8004358 <_fwalk_reent+0xc>
 800436c:	0038      	movs	r0, r7
 800436e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004370:	89ab      	ldrh	r3, [r5, #12]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d908      	bls.n	8004388 <_fwalk_reent+0x3c>
 8004376:	220e      	movs	r2, #14
 8004378:	5eab      	ldrsh	r3, [r5, r2]
 800437a:	3301      	adds	r3, #1
 800437c:	d004      	beq.n	8004388 <_fwalk_reent+0x3c>
 800437e:	0029      	movs	r1, r5
 8004380:	0030      	movs	r0, r6
 8004382:	9b01      	ldr	r3, [sp, #4]
 8004384:	4798      	blx	r3
 8004386:	4307      	orrs	r7, r0
 8004388:	3568      	adds	r5, #104	; 0x68
 800438a:	e7e8      	b.n	800435e <_fwalk_reent+0x12>

0800438c <__retarget_lock_init_recursive>:
 800438c:	4770      	bx	lr

0800438e <__retarget_lock_acquire_recursive>:
 800438e:	4770      	bx	lr

08004390 <__retarget_lock_release_recursive>:
 8004390:	4770      	bx	lr
	...

08004394 <__swhatbuf_r>:
 8004394:	b570      	push	{r4, r5, r6, lr}
 8004396:	000e      	movs	r6, r1
 8004398:	001d      	movs	r5, r3
 800439a:	230e      	movs	r3, #14
 800439c:	5ec9      	ldrsh	r1, [r1, r3]
 800439e:	0014      	movs	r4, r2
 80043a0:	b096      	sub	sp, #88	; 0x58
 80043a2:	2900      	cmp	r1, #0
 80043a4:	da08      	bge.n	80043b8 <__swhatbuf_r+0x24>
 80043a6:	220c      	movs	r2, #12
 80043a8:	5eb3      	ldrsh	r3, [r6, r2]
 80043aa:	2200      	movs	r2, #0
 80043ac:	602a      	str	r2, [r5, #0]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	d411      	bmi.n	80043d6 <__swhatbuf_r+0x42>
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	e00f      	b.n	80043d8 <__swhatbuf_r+0x44>
 80043b8:	466a      	mov	r2, sp
 80043ba:	f000 fa13 	bl	80047e4 <_fstat_r>
 80043be:	2800      	cmp	r0, #0
 80043c0:	dbf1      	blt.n	80043a6 <__swhatbuf_r+0x12>
 80043c2:	23f0      	movs	r3, #240	; 0xf0
 80043c4:	9901      	ldr	r1, [sp, #4]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4019      	ands	r1, r3
 80043ca:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <__swhatbuf_r+0x4c>)
 80043cc:	18c9      	adds	r1, r1, r3
 80043ce:	424b      	negs	r3, r1
 80043d0:	4159      	adcs	r1, r3
 80043d2:	6029      	str	r1, [r5, #0]
 80043d4:	e7ed      	b.n	80043b2 <__swhatbuf_r+0x1e>
 80043d6:	2340      	movs	r3, #64	; 0x40
 80043d8:	2000      	movs	r0, #0
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	b016      	add	sp, #88	; 0x58
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	ffffe000 	.word	0xffffe000

080043e4 <__smakebuf_r>:
 80043e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043e6:	2602      	movs	r6, #2
 80043e8:	898b      	ldrh	r3, [r1, #12]
 80043ea:	0005      	movs	r5, r0
 80043ec:	000c      	movs	r4, r1
 80043ee:	4233      	tst	r3, r6
 80043f0:	d006      	beq.n	8004400 <__smakebuf_r+0x1c>
 80043f2:	0023      	movs	r3, r4
 80043f4:	3347      	adds	r3, #71	; 0x47
 80043f6:	6023      	str	r3, [r4, #0]
 80043f8:	6123      	str	r3, [r4, #16]
 80043fa:	2301      	movs	r3, #1
 80043fc:	6163      	str	r3, [r4, #20]
 80043fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004400:	466a      	mov	r2, sp
 8004402:	ab01      	add	r3, sp, #4
 8004404:	f7ff ffc6 	bl	8004394 <__swhatbuf_r>
 8004408:	9900      	ldr	r1, [sp, #0]
 800440a:	0007      	movs	r7, r0
 800440c:	0028      	movs	r0, r5
 800440e:	f000 f8a5 	bl	800455c <_malloc_r>
 8004412:	2800      	cmp	r0, #0
 8004414:	d108      	bne.n	8004428 <__smakebuf_r+0x44>
 8004416:	220c      	movs	r2, #12
 8004418:	5ea3      	ldrsh	r3, [r4, r2]
 800441a:	059a      	lsls	r2, r3, #22
 800441c:	d4ef      	bmi.n	80043fe <__smakebuf_r+0x1a>
 800441e:	2203      	movs	r2, #3
 8004420:	4393      	bics	r3, r2
 8004422:	431e      	orrs	r6, r3
 8004424:	81a6      	strh	r6, [r4, #12]
 8004426:	e7e4      	b.n	80043f2 <__smakebuf_r+0xe>
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <__smakebuf_r+0x84>)
 800442a:	62ab      	str	r3, [r5, #40]	; 0x28
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	89a2      	ldrh	r2, [r4, #12]
 8004430:	6020      	str	r0, [r4, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	81a3      	strh	r3, [r4, #12]
 8004436:	9b00      	ldr	r3, [sp, #0]
 8004438:	6120      	str	r0, [r4, #16]
 800443a:	6163      	str	r3, [r4, #20]
 800443c:	9b01      	ldr	r3, [sp, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00d      	beq.n	800445e <__smakebuf_r+0x7a>
 8004442:	0028      	movs	r0, r5
 8004444:	230e      	movs	r3, #14
 8004446:	5ee1      	ldrsh	r1, [r4, r3]
 8004448:	f000 f9de 	bl	8004808 <_isatty_r>
 800444c:	2800      	cmp	r0, #0
 800444e:	d006      	beq.n	800445e <__smakebuf_r+0x7a>
 8004450:	2203      	movs	r2, #3
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	4393      	bics	r3, r2
 8004456:	001a      	movs	r2, r3
 8004458:	2301      	movs	r3, #1
 800445a:	4313      	orrs	r3, r2
 800445c:	81a3      	strh	r3, [r4, #12]
 800445e:	89a0      	ldrh	r0, [r4, #12]
 8004460:	4307      	orrs	r7, r0
 8004462:	81a7      	strh	r7, [r4, #12]
 8004464:	e7cb      	b.n	80043fe <__smakebuf_r+0x1a>
 8004466:	46c0      	nop			; (mov r8, r8)
 8004468:	080041d1 	.word	0x080041d1

0800446c <memchr>:
 800446c:	b2c9      	uxtb	r1, r1
 800446e:	1882      	adds	r2, r0, r2
 8004470:	4290      	cmp	r0, r2
 8004472:	d101      	bne.n	8004478 <memchr+0xc>
 8004474:	2000      	movs	r0, #0
 8004476:	4770      	bx	lr
 8004478:	7803      	ldrb	r3, [r0, #0]
 800447a:	428b      	cmp	r3, r1
 800447c:	d0fb      	beq.n	8004476 <memchr+0xa>
 800447e:	3001      	adds	r0, #1
 8004480:	e7f6      	b.n	8004470 <memchr+0x4>
	...

08004484 <_free_r>:
 8004484:	b570      	push	{r4, r5, r6, lr}
 8004486:	0005      	movs	r5, r0
 8004488:	2900      	cmp	r1, #0
 800448a:	d010      	beq.n	80044ae <_free_r+0x2a>
 800448c:	1f0c      	subs	r4, r1, #4
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	da00      	bge.n	8004496 <_free_r+0x12>
 8004494:	18e4      	adds	r4, r4, r3
 8004496:	0028      	movs	r0, r5
 8004498:	f000 f9dc 	bl	8004854 <__malloc_lock>
 800449c:	4a1d      	ldr	r2, [pc, #116]	; (8004514 <_free_r+0x90>)
 800449e:	6813      	ldr	r3, [r2, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <_free_r+0x2c>
 80044a4:	6063      	str	r3, [r4, #4]
 80044a6:	6014      	str	r4, [r2, #0]
 80044a8:	0028      	movs	r0, r5
 80044aa:	f000 f9db 	bl	8004864 <__malloc_unlock>
 80044ae:	bd70      	pop	{r4, r5, r6, pc}
 80044b0:	42a3      	cmp	r3, r4
 80044b2:	d908      	bls.n	80044c6 <_free_r+0x42>
 80044b4:	6821      	ldr	r1, [r4, #0]
 80044b6:	1860      	adds	r0, r4, r1
 80044b8:	4283      	cmp	r3, r0
 80044ba:	d1f3      	bne.n	80044a4 <_free_r+0x20>
 80044bc:	6818      	ldr	r0, [r3, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	1841      	adds	r1, r0, r1
 80044c2:	6021      	str	r1, [r4, #0]
 80044c4:	e7ee      	b.n	80044a4 <_free_r+0x20>
 80044c6:	001a      	movs	r2, r3
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d001      	beq.n	80044d2 <_free_r+0x4e>
 80044ce:	42a3      	cmp	r3, r4
 80044d0:	d9f9      	bls.n	80044c6 <_free_r+0x42>
 80044d2:	6811      	ldr	r1, [r2, #0]
 80044d4:	1850      	adds	r0, r2, r1
 80044d6:	42a0      	cmp	r0, r4
 80044d8:	d10b      	bne.n	80044f2 <_free_r+0x6e>
 80044da:	6820      	ldr	r0, [r4, #0]
 80044dc:	1809      	adds	r1, r1, r0
 80044de:	1850      	adds	r0, r2, r1
 80044e0:	6011      	str	r1, [r2, #0]
 80044e2:	4283      	cmp	r3, r0
 80044e4:	d1e0      	bne.n	80044a8 <_free_r+0x24>
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	1841      	adds	r1, r0, r1
 80044ec:	6011      	str	r1, [r2, #0]
 80044ee:	6053      	str	r3, [r2, #4]
 80044f0:	e7da      	b.n	80044a8 <_free_r+0x24>
 80044f2:	42a0      	cmp	r0, r4
 80044f4:	d902      	bls.n	80044fc <_free_r+0x78>
 80044f6:	230c      	movs	r3, #12
 80044f8:	602b      	str	r3, [r5, #0]
 80044fa:	e7d5      	b.n	80044a8 <_free_r+0x24>
 80044fc:	6821      	ldr	r1, [r4, #0]
 80044fe:	1860      	adds	r0, r4, r1
 8004500:	4283      	cmp	r3, r0
 8004502:	d103      	bne.n	800450c <_free_r+0x88>
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	1841      	adds	r1, r0, r1
 800450a:	6021      	str	r1, [r4, #0]
 800450c:	6063      	str	r3, [r4, #4]
 800450e:	6054      	str	r4, [r2, #4]
 8004510:	e7ca      	b.n	80044a8 <_free_r+0x24>
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	2000023c 	.word	0x2000023c

08004518 <sbrk_aligned>:
 8004518:	b570      	push	{r4, r5, r6, lr}
 800451a:	4e0f      	ldr	r6, [pc, #60]	; (8004558 <sbrk_aligned+0x40>)
 800451c:	000d      	movs	r5, r1
 800451e:	6831      	ldr	r1, [r6, #0]
 8004520:	0004      	movs	r4, r0
 8004522:	2900      	cmp	r1, #0
 8004524:	d102      	bne.n	800452c <sbrk_aligned+0x14>
 8004526:	f000 f88f 	bl	8004648 <_sbrk_r>
 800452a:	6030      	str	r0, [r6, #0]
 800452c:	0029      	movs	r1, r5
 800452e:	0020      	movs	r0, r4
 8004530:	f000 f88a 	bl	8004648 <_sbrk_r>
 8004534:	1c43      	adds	r3, r0, #1
 8004536:	d00a      	beq.n	800454e <sbrk_aligned+0x36>
 8004538:	2303      	movs	r3, #3
 800453a:	1cc5      	adds	r5, r0, #3
 800453c:	439d      	bics	r5, r3
 800453e:	42a8      	cmp	r0, r5
 8004540:	d007      	beq.n	8004552 <sbrk_aligned+0x3a>
 8004542:	1a29      	subs	r1, r5, r0
 8004544:	0020      	movs	r0, r4
 8004546:	f000 f87f 	bl	8004648 <_sbrk_r>
 800454a:	1c43      	adds	r3, r0, #1
 800454c:	d101      	bne.n	8004552 <sbrk_aligned+0x3a>
 800454e:	2501      	movs	r5, #1
 8004550:	426d      	negs	r5, r5
 8004552:	0028      	movs	r0, r5
 8004554:	bd70      	pop	{r4, r5, r6, pc}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	20000240 	.word	0x20000240

0800455c <_malloc_r>:
 800455c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800455e:	2203      	movs	r2, #3
 8004560:	1ccb      	adds	r3, r1, #3
 8004562:	4393      	bics	r3, r2
 8004564:	3308      	adds	r3, #8
 8004566:	0006      	movs	r6, r0
 8004568:	001f      	movs	r7, r3
 800456a:	2b0c      	cmp	r3, #12
 800456c:	d232      	bcs.n	80045d4 <_malloc_r+0x78>
 800456e:	270c      	movs	r7, #12
 8004570:	42b9      	cmp	r1, r7
 8004572:	d831      	bhi.n	80045d8 <_malloc_r+0x7c>
 8004574:	0030      	movs	r0, r6
 8004576:	f000 f96d 	bl	8004854 <__malloc_lock>
 800457a:	4d32      	ldr	r5, [pc, #200]	; (8004644 <_malloc_r+0xe8>)
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	001c      	movs	r4, r3
 8004580:	2c00      	cmp	r4, #0
 8004582:	d12e      	bne.n	80045e2 <_malloc_r+0x86>
 8004584:	0039      	movs	r1, r7
 8004586:	0030      	movs	r0, r6
 8004588:	f7ff ffc6 	bl	8004518 <sbrk_aligned>
 800458c:	0004      	movs	r4, r0
 800458e:	1c43      	adds	r3, r0, #1
 8004590:	d11e      	bne.n	80045d0 <_malloc_r+0x74>
 8004592:	682c      	ldr	r4, [r5, #0]
 8004594:	0025      	movs	r5, r4
 8004596:	2d00      	cmp	r5, #0
 8004598:	d14a      	bne.n	8004630 <_malloc_r+0xd4>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	0029      	movs	r1, r5
 800459e:	18e3      	adds	r3, r4, r3
 80045a0:	0030      	movs	r0, r6
 80045a2:	9301      	str	r3, [sp, #4]
 80045a4:	f000 f850 	bl	8004648 <_sbrk_r>
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	4283      	cmp	r3, r0
 80045ac:	d143      	bne.n	8004636 <_malloc_r+0xda>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	3703      	adds	r7, #3
 80045b2:	1aff      	subs	r7, r7, r3
 80045b4:	2303      	movs	r3, #3
 80045b6:	439f      	bics	r7, r3
 80045b8:	3708      	adds	r7, #8
 80045ba:	2f0c      	cmp	r7, #12
 80045bc:	d200      	bcs.n	80045c0 <_malloc_r+0x64>
 80045be:	270c      	movs	r7, #12
 80045c0:	0039      	movs	r1, r7
 80045c2:	0030      	movs	r0, r6
 80045c4:	f7ff ffa8 	bl	8004518 <sbrk_aligned>
 80045c8:	1c43      	adds	r3, r0, #1
 80045ca:	d034      	beq.n	8004636 <_malloc_r+0xda>
 80045cc:	6823      	ldr	r3, [r4, #0]
 80045ce:	19df      	adds	r7, r3, r7
 80045d0:	6027      	str	r7, [r4, #0]
 80045d2:	e013      	b.n	80045fc <_malloc_r+0xa0>
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	dacb      	bge.n	8004570 <_malloc_r+0x14>
 80045d8:	230c      	movs	r3, #12
 80045da:	2500      	movs	r5, #0
 80045dc:	6033      	str	r3, [r6, #0]
 80045de:	0028      	movs	r0, r5
 80045e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045e2:	6822      	ldr	r2, [r4, #0]
 80045e4:	1bd1      	subs	r1, r2, r7
 80045e6:	d420      	bmi.n	800462a <_malloc_r+0xce>
 80045e8:	290b      	cmp	r1, #11
 80045ea:	d917      	bls.n	800461c <_malloc_r+0xc0>
 80045ec:	19e2      	adds	r2, r4, r7
 80045ee:	6027      	str	r7, [r4, #0]
 80045f0:	42a3      	cmp	r3, r4
 80045f2:	d111      	bne.n	8004618 <_malloc_r+0xbc>
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	6863      	ldr	r3, [r4, #4]
 80045f8:	6011      	str	r1, [r2, #0]
 80045fa:	6053      	str	r3, [r2, #4]
 80045fc:	0030      	movs	r0, r6
 80045fe:	0025      	movs	r5, r4
 8004600:	f000 f930 	bl	8004864 <__malloc_unlock>
 8004604:	2207      	movs	r2, #7
 8004606:	350b      	adds	r5, #11
 8004608:	1d23      	adds	r3, r4, #4
 800460a:	4395      	bics	r5, r2
 800460c:	1aea      	subs	r2, r5, r3
 800460e:	429d      	cmp	r5, r3
 8004610:	d0e5      	beq.n	80045de <_malloc_r+0x82>
 8004612:	1b5b      	subs	r3, r3, r5
 8004614:	50a3      	str	r3, [r4, r2]
 8004616:	e7e2      	b.n	80045de <_malloc_r+0x82>
 8004618:	605a      	str	r2, [r3, #4]
 800461a:	e7ec      	b.n	80045f6 <_malloc_r+0x9a>
 800461c:	6862      	ldr	r2, [r4, #4]
 800461e:	42a3      	cmp	r3, r4
 8004620:	d101      	bne.n	8004626 <_malloc_r+0xca>
 8004622:	602a      	str	r2, [r5, #0]
 8004624:	e7ea      	b.n	80045fc <_malloc_r+0xa0>
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	e7e8      	b.n	80045fc <_malloc_r+0xa0>
 800462a:	0023      	movs	r3, r4
 800462c:	6864      	ldr	r4, [r4, #4]
 800462e:	e7a7      	b.n	8004580 <_malloc_r+0x24>
 8004630:	002c      	movs	r4, r5
 8004632:	686d      	ldr	r5, [r5, #4]
 8004634:	e7af      	b.n	8004596 <_malloc_r+0x3a>
 8004636:	230c      	movs	r3, #12
 8004638:	0030      	movs	r0, r6
 800463a:	6033      	str	r3, [r6, #0]
 800463c:	f000 f912 	bl	8004864 <__malloc_unlock>
 8004640:	e7cd      	b.n	80045de <_malloc_r+0x82>
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	2000023c 	.word	0x2000023c

08004648 <_sbrk_r>:
 8004648:	2300      	movs	r3, #0
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	4d06      	ldr	r5, [pc, #24]	; (8004668 <_sbrk_r+0x20>)
 800464e:	0004      	movs	r4, r0
 8004650:	0008      	movs	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fe16 	bl	8001284 <_sbrk>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d103      	bne.n	8004664 <_sbrk_r+0x1c>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d000      	beq.n	8004664 <_sbrk_r+0x1c>
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	bd70      	pop	{r4, r5, r6, pc}
 8004666:	46c0      	nop			; (mov r8, r8)
 8004668:	20000244 	.word	0x20000244

0800466c <_raise_r>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	0004      	movs	r4, r0
 8004670:	000d      	movs	r5, r1
 8004672:	291f      	cmp	r1, #31
 8004674:	d904      	bls.n	8004680 <_raise_r+0x14>
 8004676:	2316      	movs	r3, #22
 8004678:	6003      	str	r3, [r0, #0]
 800467a:	2001      	movs	r0, #1
 800467c:	4240      	negs	r0, r0
 800467e:	bd70      	pop	{r4, r5, r6, pc}
 8004680:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004682:	2b00      	cmp	r3, #0
 8004684:	d004      	beq.n	8004690 <_raise_r+0x24>
 8004686:	008a      	lsls	r2, r1, #2
 8004688:	189b      	adds	r3, r3, r2
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	2a00      	cmp	r2, #0
 800468e:	d108      	bne.n	80046a2 <_raise_r+0x36>
 8004690:	0020      	movs	r0, r4
 8004692:	f000 f831 	bl	80046f8 <_getpid_r>
 8004696:	002a      	movs	r2, r5
 8004698:	0001      	movs	r1, r0
 800469a:	0020      	movs	r0, r4
 800469c:	f000 f81a 	bl	80046d4 <_kill_r>
 80046a0:	e7ed      	b.n	800467e <_raise_r+0x12>
 80046a2:	2000      	movs	r0, #0
 80046a4:	2a01      	cmp	r2, #1
 80046a6:	d0ea      	beq.n	800467e <_raise_r+0x12>
 80046a8:	1c51      	adds	r1, r2, #1
 80046aa:	d103      	bne.n	80046b4 <_raise_r+0x48>
 80046ac:	2316      	movs	r3, #22
 80046ae:	3001      	adds	r0, #1
 80046b0:	6023      	str	r3, [r4, #0]
 80046b2:	e7e4      	b.n	800467e <_raise_r+0x12>
 80046b4:	2400      	movs	r4, #0
 80046b6:	0028      	movs	r0, r5
 80046b8:	601c      	str	r4, [r3, #0]
 80046ba:	4790      	blx	r2
 80046bc:	0020      	movs	r0, r4
 80046be:	e7de      	b.n	800467e <_raise_r+0x12>

080046c0 <raise>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	4b03      	ldr	r3, [pc, #12]	; (80046d0 <raise+0x10>)
 80046c4:	0001      	movs	r1, r0
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	f7ff ffd0 	bl	800466c <_raise_r>
 80046cc:	bd10      	pop	{r4, pc}
 80046ce:	46c0      	nop			; (mov r8, r8)
 80046d0:	200000c4 	.word	0x200000c4

080046d4 <_kill_r>:
 80046d4:	2300      	movs	r3, #0
 80046d6:	b570      	push	{r4, r5, r6, lr}
 80046d8:	4d06      	ldr	r5, [pc, #24]	; (80046f4 <_kill_r+0x20>)
 80046da:	0004      	movs	r4, r0
 80046dc:	0008      	movs	r0, r1
 80046de:	0011      	movs	r1, r2
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	f7fc fd4e 	bl	8001182 <_kill>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d103      	bne.n	80046f2 <_kill_r+0x1e>
 80046ea:	682b      	ldr	r3, [r5, #0]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d000      	beq.n	80046f2 <_kill_r+0x1e>
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	bd70      	pop	{r4, r5, r6, pc}
 80046f4:	20000244 	.word	0x20000244

080046f8 <_getpid_r>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	f7fc fd3c 	bl	8001176 <_getpid>
 80046fe:	bd10      	pop	{r4, pc}

08004700 <__sread>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	000c      	movs	r4, r1
 8004704:	250e      	movs	r5, #14
 8004706:	5f49      	ldrsh	r1, [r1, r5]
 8004708:	f000 f8b4 	bl	8004874 <_read_r>
 800470c:	2800      	cmp	r0, #0
 800470e:	db03      	blt.n	8004718 <__sread+0x18>
 8004710:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004712:	181b      	adds	r3, r3, r0
 8004714:	6563      	str	r3, [r4, #84]	; 0x54
 8004716:	bd70      	pop	{r4, r5, r6, pc}
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	4a02      	ldr	r2, [pc, #8]	; (8004724 <__sread+0x24>)
 800471c:	4013      	ands	r3, r2
 800471e:	81a3      	strh	r3, [r4, #12]
 8004720:	e7f9      	b.n	8004716 <__sread+0x16>
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	ffffefff 	.word	0xffffefff

08004728 <__swrite>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	001f      	movs	r7, r3
 800472c:	898b      	ldrh	r3, [r1, #12]
 800472e:	0005      	movs	r5, r0
 8004730:	000c      	movs	r4, r1
 8004732:	0016      	movs	r6, r2
 8004734:	05db      	lsls	r3, r3, #23
 8004736:	d505      	bpl.n	8004744 <__swrite+0x1c>
 8004738:	230e      	movs	r3, #14
 800473a:	5ec9      	ldrsh	r1, [r1, r3]
 800473c:	2200      	movs	r2, #0
 800473e:	2302      	movs	r3, #2
 8004740:	f000 f874 	bl	800482c <_lseek_r>
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	4a05      	ldr	r2, [pc, #20]	; (800475c <__swrite+0x34>)
 8004748:	0028      	movs	r0, r5
 800474a:	4013      	ands	r3, r2
 800474c:	81a3      	strh	r3, [r4, #12]
 800474e:	0032      	movs	r2, r6
 8004750:	230e      	movs	r3, #14
 8004752:	5ee1      	ldrsh	r1, [r4, r3]
 8004754:	003b      	movs	r3, r7
 8004756:	f000 f81f 	bl	8004798 <_write_r>
 800475a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475c:	ffffefff 	.word	0xffffefff

08004760 <__sseek>:
 8004760:	b570      	push	{r4, r5, r6, lr}
 8004762:	000c      	movs	r4, r1
 8004764:	250e      	movs	r5, #14
 8004766:	5f49      	ldrsh	r1, [r1, r5]
 8004768:	f000 f860 	bl	800482c <_lseek_r>
 800476c:	89a3      	ldrh	r3, [r4, #12]
 800476e:	1c42      	adds	r2, r0, #1
 8004770:	d103      	bne.n	800477a <__sseek+0x1a>
 8004772:	4a05      	ldr	r2, [pc, #20]	; (8004788 <__sseek+0x28>)
 8004774:	4013      	ands	r3, r2
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	bd70      	pop	{r4, r5, r6, pc}
 800477a:	2280      	movs	r2, #128	; 0x80
 800477c:	0152      	lsls	r2, r2, #5
 800477e:	4313      	orrs	r3, r2
 8004780:	81a3      	strh	r3, [r4, #12]
 8004782:	6560      	str	r0, [r4, #84]	; 0x54
 8004784:	e7f8      	b.n	8004778 <__sseek+0x18>
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	ffffefff 	.word	0xffffefff

0800478c <__sclose>:
 800478c:	b510      	push	{r4, lr}
 800478e:	230e      	movs	r3, #14
 8004790:	5ec9      	ldrsh	r1, [r1, r3]
 8004792:	f000 f815 	bl	80047c0 <_close_r>
 8004796:	bd10      	pop	{r4, pc}

08004798 <_write_r>:
 8004798:	b570      	push	{r4, r5, r6, lr}
 800479a:	0004      	movs	r4, r0
 800479c:	0008      	movs	r0, r1
 800479e:	0011      	movs	r1, r2
 80047a0:	001a      	movs	r2, r3
 80047a2:	2300      	movs	r3, #0
 80047a4:	4d05      	ldr	r5, [pc, #20]	; (80047bc <_write_r+0x24>)
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	f7fc fd24 	bl	80011f4 <_write>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d103      	bne.n	80047b8 <_write_r+0x20>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d000      	beq.n	80047b8 <_write_r+0x20>
 80047b6:	6023      	str	r3, [r4, #0]
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	20000244 	.word	0x20000244

080047c0 <_close_r>:
 80047c0:	2300      	movs	r3, #0
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	4d06      	ldr	r5, [pc, #24]	; (80047e0 <_close_r+0x20>)
 80047c6:	0004      	movs	r4, r0
 80047c8:	0008      	movs	r0, r1
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	f7fc fd2e 	bl	800122c <_close>
 80047d0:	1c43      	adds	r3, r0, #1
 80047d2:	d103      	bne.n	80047dc <_close_r+0x1c>
 80047d4:	682b      	ldr	r3, [r5, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d000      	beq.n	80047dc <_close_r+0x1c>
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	20000244 	.word	0x20000244

080047e4 <_fstat_r>:
 80047e4:	2300      	movs	r3, #0
 80047e6:	b570      	push	{r4, r5, r6, lr}
 80047e8:	4d06      	ldr	r5, [pc, #24]	; (8004804 <_fstat_r+0x20>)
 80047ea:	0004      	movs	r4, r0
 80047ec:	0008      	movs	r0, r1
 80047ee:	0011      	movs	r1, r2
 80047f0:	602b      	str	r3, [r5, #0]
 80047f2:	f7fc fd25 	bl	8001240 <_fstat>
 80047f6:	1c43      	adds	r3, r0, #1
 80047f8:	d103      	bne.n	8004802 <_fstat_r+0x1e>
 80047fa:	682b      	ldr	r3, [r5, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d000      	beq.n	8004802 <_fstat_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd70      	pop	{r4, r5, r6, pc}
 8004804:	20000244 	.word	0x20000244

08004808 <_isatty_r>:
 8004808:	2300      	movs	r3, #0
 800480a:	b570      	push	{r4, r5, r6, lr}
 800480c:	4d06      	ldr	r5, [pc, #24]	; (8004828 <_isatty_r+0x20>)
 800480e:	0004      	movs	r4, r0
 8004810:	0008      	movs	r0, r1
 8004812:	602b      	str	r3, [r5, #0]
 8004814:	f7fc fd22 	bl	800125c <_isatty>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d103      	bne.n	8004824 <_isatty_r+0x1c>
 800481c:	682b      	ldr	r3, [r5, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d000      	beq.n	8004824 <_isatty_r+0x1c>
 8004822:	6023      	str	r3, [r4, #0]
 8004824:	bd70      	pop	{r4, r5, r6, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	20000244 	.word	0x20000244

0800482c <_lseek_r>:
 800482c:	b570      	push	{r4, r5, r6, lr}
 800482e:	0004      	movs	r4, r0
 8004830:	0008      	movs	r0, r1
 8004832:	0011      	movs	r1, r2
 8004834:	001a      	movs	r2, r3
 8004836:	2300      	movs	r3, #0
 8004838:	4d05      	ldr	r5, [pc, #20]	; (8004850 <_lseek_r+0x24>)
 800483a:	602b      	str	r3, [r5, #0]
 800483c:	f7fc fd17 	bl	800126e <_lseek>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d103      	bne.n	800484c <_lseek_r+0x20>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d000      	beq.n	800484c <_lseek_r+0x20>
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	bd70      	pop	{r4, r5, r6, pc}
 800484e:	46c0      	nop			; (mov r8, r8)
 8004850:	20000244 	.word	0x20000244

08004854 <__malloc_lock>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4802      	ldr	r0, [pc, #8]	; (8004860 <__malloc_lock+0xc>)
 8004858:	f7ff fd99 	bl	800438e <__retarget_lock_acquire_recursive>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20000238 	.word	0x20000238

08004864 <__malloc_unlock>:
 8004864:	b510      	push	{r4, lr}
 8004866:	4802      	ldr	r0, [pc, #8]	; (8004870 <__malloc_unlock+0xc>)
 8004868:	f7ff fd92 	bl	8004390 <__retarget_lock_release_recursive>
 800486c:	bd10      	pop	{r4, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000238 	.word	0x20000238

08004874 <_read_r>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	0004      	movs	r4, r0
 8004878:	0008      	movs	r0, r1
 800487a:	0011      	movs	r1, r2
 800487c:	001a      	movs	r2, r3
 800487e:	2300      	movs	r3, #0
 8004880:	4d05      	ldr	r5, [pc, #20]	; (8004898 <_read_r+0x24>)
 8004882:	602b      	str	r3, [r5, #0]
 8004884:	f7fc fc99 	bl	80011ba <_read>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d103      	bne.n	8004894 <_read_r+0x20>
 800488c:	682b      	ldr	r3, [r5, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d000      	beq.n	8004894 <_read_r+0x20>
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	20000244 	.word	0x20000244

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
