
LoRa_beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004804  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b70  08004b70  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b78  08004b78  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08004b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000128  08004ca8  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004ca8  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000acb3  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000191a  00000000  00000000  0002ae03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002c720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002cfb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100de  00000000  00000000  0002d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b256  00000000  00000000  0003d886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060e47  00000000  00000000  00048adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9923  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002740  00000000  00000000  000a9974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080048ac 	.word	0x080048ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	080048ac 	.word	0x080048ac

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__udivmoddi4>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	4657      	mov	r7, sl
 8000278:	464e      	mov	r6, r9
 800027a:	4645      	mov	r5, r8
 800027c:	46de      	mov	lr, fp
 800027e:	b5e0      	push	{r5, r6, r7, lr}
 8000280:	0004      	movs	r4, r0
 8000282:	000d      	movs	r5, r1
 8000284:	4692      	mov	sl, r2
 8000286:	4699      	mov	r9, r3
 8000288:	b083      	sub	sp, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d830      	bhi.n	80002f0 <__udivmoddi4+0x7c>
 800028e:	d02d      	beq.n	80002ec <__udivmoddi4+0x78>
 8000290:	4649      	mov	r1, r9
 8000292:	4650      	mov	r0, sl
 8000294:	f000 f8ba 	bl	800040c <__clzdi2>
 8000298:	0029      	movs	r1, r5
 800029a:	0006      	movs	r6, r0
 800029c:	0020      	movs	r0, r4
 800029e:	f000 f8b5 	bl	800040c <__clzdi2>
 80002a2:	1a33      	subs	r3, r6, r0
 80002a4:	4698      	mov	r8, r3
 80002a6:	3b20      	subs	r3, #32
 80002a8:	469b      	mov	fp, r3
 80002aa:	d433      	bmi.n	8000314 <__udivmoddi4+0xa0>
 80002ac:	465a      	mov	r2, fp
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	4642      	mov	r2, r8
 80002b4:	001f      	movs	r7, r3
 80002b6:	4653      	mov	r3, sl
 80002b8:	4093      	lsls	r3, r2
 80002ba:	001e      	movs	r6, r3
 80002bc:	42af      	cmp	r7, r5
 80002be:	d83a      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80002c0:	42af      	cmp	r7, r5
 80002c2:	d100      	bne.n	80002c6 <__udivmoddi4+0x52>
 80002c4:	e078      	b.n	80003b8 <__udivmoddi4+0x144>
 80002c6:	465b      	mov	r3, fp
 80002c8:	1ba4      	subs	r4, r4, r6
 80002ca:	41bd      	sbcs	r5, r7
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	da00      	bge.n	80002d2 <__udivmoddi4+0x5e>
 80002d0:	e075      	b.n	80003be <__udivmoddi4+0x14a>
 80002d2:	2200      	movs	r2, #0
 80002d4:	2300      	movs	r3, #0
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	465a      	mov	r2, fp
 80002de:	4093      	lsls	r3, r2
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	2301      	movs	r3, #1
 80002e4:	4642      	mov	r2, r8
 80002e6:	4093      	lsls	r3, r2
 80002e8:	9300      	str	r3, [sp, #0]
 80002ea:	e028      	b.n	800033e <__udivmoddi4+0xca>
 80002ec:	4282      	cmp	r2, r0
 80002ee:	d9cf      	bls.n	8000290 <__udivmoddi4+0x1c>
 80002f0:	2200      	movs	r2, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	9200      	str	r2, [sp, #0]
 80002f6:	9301      	str	r3, [sp, #4]
 80002f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <__udivmoddi4+0x8e>
 80002fe:	601c      	str	r4, [r3, #0]
 8000300:	605d      	str	r5, [r3, #4]
 8000302:	9800      	ldr	r0, [sp, #0]
 8000304:	9901      	ldr	r1, [sp, #4]
 8000306:	b003      	add	sp, #12
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	46bb      	mov	fp, r7
 800030c:	46b2      	mov	sl, r6
 800030e:	46a9      	mov	r9, r5
 8000310:	46a0      	mov	r8, r4
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000314:	4642      	mov	r2, r8
 8000316:	2320      	movs	r3, #32
 8000318:	1a9b      	subs	r3, r3, r2
 800031a:	4652      	mov	r2, sl
 800031c:	40da      	lsrs	r2, r3
 800031e:	4641      	mov	r1, r8
 8000320:	0013      	movs	r3, r2
 8000322:	464a      	mov	r2, r9
 8000324:	408a      	lsls	r2, r1
 8000326:	0017      	movs	r7, r2
 8000328:	4642      	mov	r2, r8
 800032a:	431f      	orrs	r7, r3
 800032c:	4653      	mov	r3, sl
 800032e:	4093      	lsls	r3, r2
 8000330:	001e      	movs	r6, r3
 8000332:	42af      	cmp	r7, r5
 8000334:	d9c4      	bls.n	80002c0 <__udivmoddi4+0x4c>
 8000336:	2200      	movs	r2, #0
 8000338:	2300      	movs	r3, #0
 800033a:	9200      	str	r2, [sp, #0]
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	4643      	mov	r3, r8
 8000340:	2b00      	cmp	r3, #0
 8000342:	d0d9      	beq.n	80002f8 <__udivmoddi4+0x84>
 8000344:	07fb      	lsls	r3, r7, #31
 8000346:	0872      	lsrs	r2, r6, #1
 8000348:	431a      	orrs	r2, r3
 800034a:	4646      	mov	r6, r8
 800034c:	087b      	lsrs	r3, r7, #1
 800034e:	e00e      	b.n	800036e <__udivmoddi4+0xfa>
 8000350:	42ab      	cmp	r3, r5
 8000352:	d101      	bne.n	8000358 <__udivmoddi4+0xe4>
 8000354:	42a2      	cmp	r2, r4
 8000356:	d80c      	bhi.n	8000372 <__udivmoddi4+0xfe>
 8000358:	1aa4      	subs	r4, r4, r2
 800035a:	419d      	sbcs	r5, r3
 800035c:	2001      	movs	r0, #1
 800035e:	1924      	adds	r4, r4, r4
 8000360:	416d      	adcs	r5, r5
 8000362:	2100      	movs	r1, #0
 8000364:	3e01      	subs	r6, #1
 8000366:	1824      	adds	r4, r4, r0
 8000368:	414d      	adcs	r5, r1
 800036a:	2e00      	cmp	r6, #0
 800036c:	d006      	beq.n	800037c <__udivmoddi4+0x108>
 800036e:	42ab      	cmp	r3, r5
 8000370:	d9ee      	bls.n	8000350 <__udivmoddi4+0xdc>
 8000372:	3e01      	subs	r6, #1
 8000374:	1924      	adds	r4, r4, r4
 8000376:	416d      	adcs	r5, r5
 8000378:	2e00      	cmp	r6, #0
 800037a:	d1f8      	bne.n	800036e <__udivmoddi4+0xfa>
 800037c:	9800      	ldr	r0, [sp, #0]
 800037e:	9901      	ldr	r1, [sp, #4]
 8000380:	465b      	mov	r3, fp
 8000382:	1900      	adds	r0, r0, r4
 8000384:	4169      	adcs	r1, r5
 8000386:	2b00      	cmp	r3, #0
 8000388:	db24      	blt.n	80003d4 <__udivmoddi4+0x160>
 800038a:	002b      	movs	r3, r5
 800038c:	465a      	mov	r2, fp
 800038e:	4644      	mov	r4, r8
 8000390:	40d3      	lsrs	r3, r2
 8000392:	002a      	movs	r2, r5
 8000394:	40e2      	lsrs	r2, r4
 8000396:	001c      	movs	r4, r3
 8000398:	465b      	mov	r3, fp
 800039a:	0015      	movs	r5, r2
 800039c:	2b00      	cmp	r3, #0
 800039e:	db2a      	blt.n	80003f6 <__udivmoddi4+0x182>
 80003a0:	0026      	movs	r6, r4
 80003a2:	409e      	lsls	r6, r3
 80003a4:	0033      	movs	r3, r6
 80003a6:	0026      	movs	r6, r4
 80003a8:	4647      	mov	r7, r8
 80003aa:	40be      	lsls	r6, r7
 80003ac:	0032      	movs	r2, r6
 80003ae:	1a80      	subs	r0, r0, r2
 80003b0:	4199      	sbcs	r1, r3
 80003b2:	9000      	str	r0, [sp, #0]
 80003b4:	9101      	str	r1, [sp, #4]
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x84>
 80003b8:	42a3      	cmp	r3, r4
 80003ba:	d8bc      	bhi.n	8000336 <__udivmoddi4+0xc2>
 80003bc:	e783      	b.n	80002c6 <__udivmoddi4+0x52>
 80003be:	4642      	mov	r2, r8
 80003c0:	2320      	movs	r3, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	1a9b      	subs	r3, r3, r2
 80003c6:	2200      	movs	r2, #0
 80003c8:	9100      	str	r1, [sp, #0]
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	2201      	movs	r2, #1
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	9201      	str	r2, [sp, #4]
 80003d2:	e786      	b.n	80002e2 <__udivmoddi4+0x6e>
 80003d4:	4642      	mov	r2, r8
 80003d6:	2320      	movs	r3, #32
 80003d8:	1a9b      	subs	r3, r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	4646      	mov	r6, r8
 80003de:	409a      	lsls	r2, r3
 80003e0:	0023      	movs	r3, r4
 80003e2:	40f3      	lsrs	r3, r6
 80003e4:	4644      	mov	r4, r8
 80003e6:	4313      	orrs	r3, r2
 80003e8:	002a      	movs	r2, r5
 80003ea:	40e2      	lsrs	r2, r4
 80003ec:	001c      	movs	r4, r3
 80003ee:	465b      	mov	r3, fp
 80003f0:	0015      	movs	r5, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	dad4      	bge.n	80003a0 <__udivmoddi4+0x12c>
 80003f6:	4642      	mov	r2, r8
 80003f8:	002f      	movs	r7, r5
 80003fa:	2320      	movs	r3, #32
 80003fc:	0026      	movs	r6, r4
 80003fe:	4097      	lsls	r7, r2
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	40de      	lsrs	r6, r3
 8000404:	003b      	movs	r3, r7
 8000406:	4333      	orrs	r3, r6
 8000408:	e7cd      	b.n	80003a6 <__udivmoddi4+0x132>
 800040a:	46c0      	nop			; (mov r8, r8)

0800040c <__clzdi2>:
 800040c:	b510      	push	{r4, lr}
 800040e:	2900      	cmp	r1, #0
 8000410:	d103      	bne.n	800041a <__clzdi2+0xe>
 8000412:	f000 f807 	bl	8000424 <__clzsi2>
 8000416:	3020      	adds	r0, #32
 8000418:	e002      	b.n	8000420 <__clzdi2+0x14>
 800041a:	0008      	movs	r0, r1
 800041c:	f000 f802 	bl	8000424 <__clzsi2>
 8000420:	bd10      	pop	{r4, pc}
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__clzsi2>:
 8000424:	211c      	movs	r1, #28
 8000426:	2301      	movs	r3, #1
 8000428:	041b      	lsls	r3, r3, #16
 800042a:	4298      	cmp	r0, r3
 800042c:	d301      	bcc.n	8000432 <__clzsi2+0xe>
 800042e:	0c00      	lsrs	r0, r0, #16
 8000430:	3910      	subs	r1, #16
 8000432:	0a1b      	lsrs	r3, r3, #8
 8000434:	4298      	cmp	r0, r3
 8000436:	d301      	bcc.n	800043c <__clzsi2+0x18>
 8000438:	0a00      	lsrs	r0, r0, #8
 800043a:	3908      	subs	r1, #8
 800043c:	091b      	lsrs	r3, r3, #4
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0x22>
 8000442:	0900      	lsrs	r0, r0, #4
 8000444:	3904      	subs	r1, #4
 8000446:	a202      	add	r2, pc, #8	; (adr r2, 8000450 <__clzsi2+0x2c>)
 8000448:	5c10      	ldrb	r0, [r2, r0]
 800044a:	1840      	adds	r0, r0, r1
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	02020304 	.word	0x02020304
 8000454:	01010101 	.word	0x01010101
	...

08000460 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	60f8      	str	r0, [r7, #12]
 8000468:	607a      	str	r2, [r7, #4]
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	240b      	movs	r4, #11
 800046e:	193b      	adds	r3, r7, r4
 8000470:	1c0a      	adds	r2, r1, #0
 8000472:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	6858      	ldr	r0, [r3, #4]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	891b      	ldrh	r3, [r3, #8]
 800047c:	2200      	movs	r2, #0
 800047e:	0019      	movs	r1, r3
 8000480:	f001 fa1a 	bl	80018b8 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	227f      	movs	r2, #127	; 0x7f
 800048a:	4013      	ands	r3, r2
 800048c:	b2da      	uxtb	r2, r3
 800048e:	2117      	movs	r1, #23
 8000490:	187b      	adds	r3, r7, r1
 8000492:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	6818      	ldr	r0, [r3, #0]
 8000498:	1879      	adds	r1, r7, r1
 800049a:	230a      	movs	r3, #10
 800049c:	2201      	movs	r2, #1
 800049e:	f001 ff4d 	bl	800233c <HAL_SPI_Transmit>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <read_register+0x4a>
		return false;
 80004a6:	2300      	movs	r3, #0
 80004a8:	e014      	b.n	80004d4 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6818      	ldr	r0, [r3, #0]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	b29a      	uxth	r2, r3
 80004b2:	6879      	ldr	r1, [r7, #4]
 80004b4:	230a      	movs	r3, #10
 80004b6:	f002 f899 	bl	80025ec <HAL_SPI_Receive>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <read_register+0x62>
		return false;
 80004be:	2300      	movs	r3, #0
 80004c0:	e008      	b.n	80004d4 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	6858      	ldr	r0, [r3, #4]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	891b      	ldrh	r3, [r3, #8]
 80004ca:	2201      	movs	r2, #1
 80004cc:	0019      	movs	r1, r3
 80004ce:	f001 f9f3 	bl	80018b8 <HAL_GPIO_WritePin>

	return true;
 80004d2:	2301      	movs	r3, #1
}
 80004d4:	0018      	movs	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b007      	add	sp, #28
 80004da:	bd90      	pop	{r4, r7, pc}

080004dc <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	0008      	movs	r0, r1
 80004e6:	0011      	movs	r1, r2
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	1c02      	adds	r2, r0, #0
 80004ec:	701a      	strb	r2, [r3, #0]
 80004ee:	1cbb      	adds	r3, r7, #2
 80004f0:	1c0a      	adds	r2, r1, #0
 80004f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	6858      	ldr	r0, [r3, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	891b      	ldrh	r3, [r3, #8]
 80004fc:	2200      	movs	r2, #0
 80004fe:	0019      	movs	r1, r3
 8000500:	f001 f9da 	bl	80018b8 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8000504:	1cfb      	adds	r3, r7, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2280      	movs	r2, #128	; 0x80
 800050a:	4252      	negs	r2, r2
 800050c:	4313      	orrs	r3, r2
 800050e:	b2da      	uxtb	r2, r3
 8000510:	210c      	movs	r1, #12
 8000512:	187b      	adds	r3, r7, r1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	187b      	adds	r3, r7, r1
 8000518:	1cba      	adds	r2, r7, #2
 800051a:	7812      	ldrb	r2, [r2, #0]
 800051c:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6818      	ldr	r0, [r3, #0]
 8000522:	1879      	adds	r1, r7, r1
 8000524:	230a      	movs	r3, #10
 8000526:	2202      	movs	r2, #2
 8000528:	f001 ff08 	bl	800233c <HAL_SPI_Transmit>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <write_register+0x58>
		return false;
 8000530:	2300      	movs	r3, #0
 8000532:	e008      	b.n	8000546 <write_register+0x6a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	6858      	ldr	r0, [r3, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	891b      	ldrh	r3, [r3, #8]
 800053c:	2201      	movs	r2, #1
 800053e:	0019      	movs	r1, r3
 8000540:	f001 f9ba 	bl	80018b8 <HAL_GPIO_WritePin>

	return true;
 8000544:	2301      	movs	r3, #1
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b004      	add	sp, #16
 800054c:	bd80      	pop	{r7, pc}

0800054e <reset>:

static void reset(rfm95_handle_t *handle)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	68d8      	ldr	r0, [r3, #12]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8a1b      	ldrh	r3, [r3, #16]
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f001 f9a9 	bl	80018b8 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000566:	2001      	movs	r0, #1
 8000568:	f000 ff5e 	bl	8001428 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	68d8      	ldr	r0, [r3, #12]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	8a1b      	ldrh	r3, [r3, #16]
 8000574:	2201      	movs	r2, #1
 8000576:	0019      	movs	r1, r3
 8000578:	f001 f99e 	bl	80018b8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f000 ff53 	bl	8001428 <HAL_Delay>
}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	b002      	add	sp, #8
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 800058c:	b5b0      	push	{r4, r5, r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6178      	str	r0, [r7, #20]
 8000594:	6139      	str	r1, [r7, #16]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000596:	6939      	ldr	r1, [r7, #16]
 8000598:	000a      	movs	r2, r1
 800059a:	2100      	movs	r1, #0
 800059c:	000b      	movs	r3, r1
 800059e:	0b51      	lsrs	r1, r2, #13
 80005a0:	6079      	str	r1, [r7, #4]
 80005a2:	04d3      	lsls	r3, r2, #19
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4a28      	ldr	r2, [pc, #160]	; (8000648 <configure_frequency+0xbc>)
 80005a8:	2300      	movs	r3, #0
 80005aa:	6838      	ldr	r0, [r7, #0]
 80005ac:	6879      	ldr	r1, [r7, #4]
 80005ae:	f7ff fe41 	bl	8000234 <__aeabi_uldivmod>
 80005b2:	0002      	movs	r2, r0
 80005b4:	000b      	movs	r3, r1
 80005b6:	61ba      	str	r2, [r7, #24]
 80005b8:	61fb      	str	r3, [r7, #28]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	041b      	lsls	r3, r3, #16
 80005be:	69ba      	ldr	r2, [r7, #24]
 80005c0:	0c12      	lsrs	r2, r2, #16
 80005c2:	60ba      	str	r2, [r7, #8]
 80005c4:	68ba      	ldr	r2, [r7, #8]
 80005c6:	431a      	orrs	r2, r3
 80005c8:	60ba      	str	r2, [r7, #8]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	0c1b      	lsrs	r3, r3, #16
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	7a3a      	ldrb	r2, [r7, #8]
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	2106      	movs	r1, #6
 80005d6:	0018      	movs	r0, r3
 80005d8:	f7ff ff80 	bl	80004dc <write_register>
 80005dc:	0003      	movs	r3, r0
 80005de:	001a      	movs	r2, r3
 80005e0:	2301      	movs	r3, #1
 80005e2:	4053      	eors	r3, r2
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <configure_frequency+0x62>
 80005ea:	2300      	movs	r3, #0
 80005ec:	e028      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	061b      	lsls	r3, r3, #24
 80005f2:	69ba      	ldr	r2, [r7, #24]
 80005f4:	0a14      	lsrs	r4, r2, #8
 80005f6:	431c      	orrs	r4, r3
 80005f8:	69fb      	ldr	r3, [r7, #28]
 80005fa:	0a1d      	lsrs	r5, r3, #8
 80005fc:	b2e2      	uxtb	r2, r4
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	2107      	movs	r1, #7
 8000602:	0018      	movs	r0, r3
 8000604:	f7ff ff6a 	bl	80004dc <write_register>
 8000608:	0003      	movs	r3, r0
 800060a:	001a      	movs	r2, r3
 800060c:	2301      	movs	r3, #1
 800060e:	4053      	eors	r3, r2
 8000610:	b2db      	uxtb	r3, r3
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <configure_frequency+0x8e>
 8000616:	2300      	movs	r3, #0
 8000618:	e012      	b.n	8000640 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800061a:	69ba      	ldr	r2, [r7, #24]
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	1c13      	adds	r3, r2, #0
 8000620:	b2da      	uxtb	r2, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	2108      	movs	r1, #8
 8000626:	0018      	movs	r0, r3
 8000628:	f7ff ff58 	bl	80004dc <write_register>
 800062c:	0003      	movs	r3, r0
 800062e:	001a      	movs	r2, r3
 8000630:	2301      	movs	r3, #1
 8000632:	4053      	eors	r3, r2
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <configure_frequency+0xb2>
 800063a:	2300      	movs	r3, #0
 800063c:	e000      	b.n	8000640 <configure_frequency+0xb4>

	return true;
 800063e:	2301      	movs	r3, #1
}
 8000640:	0018      	movs	r0, r3
 8000642:	46bd      	mov	sp, r7
 8000644:	b008      	add	sp, #32
 8000646:	bdb0      	pop	{r4, r5, r7, pc}
 8000648:	01e84800 	.word	0x01e84800

0800064c <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 800064c:	b590      	push	{r4, r7, lr}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	000a      	movs	r2, r1
 8000656:	1cfb      	adds	r3, r7, #3
 8000658:	701a      	strb	r2, [r3, #0]
	assert((power >= 2 && power <= 17) || power == 20);
 800065a:	1cfb      	adds	r3, r7, #3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	2b01      	cmp	r3, #1
 8000662:	dd04      	ble.n	800066e <rfm95_set_power+0x22>
 8000664:	1cfb      	adds	r3, r7, #3
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b25b      	sxtb	r3, r3
 800066a:	2b11      	cmp	r3, #17
 800066c:	dd0a      	ble.n	8000684 <rfm95_set_power+0x38>
 800066e:	1cfb      	adds	r3, r7, #3
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	2b14      	cmp	r3, #20
 8000676:	d005      	beq.n	8000684 <rfm95_set_power+0x38>
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <rfm95_set_power+0x124>)
 800067a:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <rfm95_set_power+0x128>)
 800067c:	483e      	ldr	r0, [pc, #248]	; (8000778 <rfm95_set_power+0x12c>)
 800067e:	2184      	movs	r1, #132	; 0x84
 8000680:	f003 f8a4 	bl	80037cc <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8000684:	200c      	movs	r0, #12
 8000686:	183b      	adds	r3, r7, r0
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 800068c:	240f      	movs	r4, #15
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8000694:	1cfb      	adds	r3, r7, #3
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	b25b      	sxtb	r3, r3
 800069a:	2b01      	cmp	r3, #1
 800069c:	dd26      	ble.n	80006ec <rfm95_set_power+0xa0>
 800069e:	1cfb      	adds	r3, r7, #3
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	b25b      	sxtb	r3, r3
 80006a4:	2b11      	cmp	r3, #17
 80006a6:	dc21      	bgt.n	80006ec <rfm95_set_power+0xa0>
		pa_config.max_power = 7;
 80006a8:	183b      	adds	r3, r7, r0
 80006aa:	781a      	ldrb	r2, [r3, #0]
 80006ac:	2170      	movs	r1, #112	; 0x70
 80006ae:	430a      	orrs	r2, r1
 80006b0:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80006b2:	183b      	adds	r3, r7, r0
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	2180      	movs	r1, #128	; 0x80
 80006b8:	4249      	negs	r1, r1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 80006be:	1cfb      	adds	r3, r7, #3
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3b02      	subs	r3, #2
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	1c1a      	adds	r2, r3, #0
 80006c8:	230f      	movs	r3, #15
 80006ca:	4013      	ands	r3, r2
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	183b      	adds	r3, r7, r0
 80006d0:	210f      	movs	r1, #15
 80006d2:	400a      	ands	r2, r1
 80006d4:	0010      	movs	r0, r2
 80006d6:	781a      	ldrb	r2, [r3, #0]
 80006d8:	210f      	movs	r1, #15
 80006da:	438a      	bics	r2, r1
 80006dc:	1c11      	adds	r1, r2, #0
 80006de:	1c02      	adds	r2, r0, #0
 80006e0:	430a      	orrs	r2, r1
 80006e2:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2284      	movs	r2, #132	; 0x84
 80006e8:	701a      	strb	r2, [r3, #0]
 80006ea:	e019      	b.n	8000720 <rfm95_set_power+0xd4>

	} else if (power == 20) {
 80006ec:	1cfb      	adds	r3, r7, #3
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	2b14      	cmp	r3, #20
 80006f4:	d114      	bne.n	8000720 <rfm95_set_power+0xd4>
		pa_config.max_power = 7;
 80006f6:	200c      	movs	r0, #12
 80006f8:	183b      	adds	r3, r7, r0
 80006fa:	781a      	ldrb	r2, [r3, #0]
 80006fc:	2170      	movs	r1, #112	; 0x70
 80006fe:	430a      	orrs	r2, r1
 8000700:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8000702:	183b      	adds	r3, r7, r0
 8000704:	781a      	ldrb	r2, [r3, #0]
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	4249      	negs	r1, r1
 800070a:	430a      	orrs	r2, r1
 800070c:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 800070e:	183b      	adds	r3, r7, r0
 8000710:	781a      	ldrb	r2, [r3, #0]
 8000712:	210f      	movs	r1, #15
 8000714:	430a      	orrs	r2, r1
 8000716:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8000718:	230f      	movs	r3, #15
 800071a:	18fb      	adds	r3, r7, r3
 800071c:	2287      	movs	r2, #135	; 0x87
 800071e:	701a      	strb	r2, [r3, #0]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8000720:	230c      	movs	r3, #12
 8000722:	18fb      	adds	r3, r7, r3
 8000724:	781a      	ldrb	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2109      	movs	r1, #9
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff fed6 	bl	80004dc <write_register>
 8000730:	0003      	movs	r3, r0
 8000732:	001a      	movs	r2, r3
 8000734:	2301      	movs	r3, #1
 8000736:	4053      	eors	r3, r2
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <rfm95_set_power+0xf6>
 800073e:	2300      	movs	r3, #0
 8000740:	e011      	b.n	8000766 <rfm95_set_power+0x11a>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8000742:	230f      	movs	r3, #15
 8000744:	18fb      	adds	r3, r7, r3
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	214d      	movs	r1, #77	; 0x4d
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff fec5 	bl	80004dc <write_register>
 8000752:	0003      	movs	r3, r0
 8000754:	001a      	movs	r2, r3
 8000756:	2301      	movs	r3, #1
 8000758:	4053      	eors	r3, r2
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <rfm95_set_power+0x118>
 8000760:	2300      	movs	r3, #0
 8000762:	e000      	b.n	8000766 <rfm95_set_power+0x11a>

	return true;
 8000764:	2301      	movs	r3, #1
}
 8000766:	0018      	movs	r0, r3
 8000768:	46bd      	mov	sp, r7
 800076a:	b005      	add	sp, #20
 800076c:	bd90      	pop	{r4, r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	080048c4 	.word	0x080048c4
 8000774:	08004a68 	.word	0x08004a68
 8000778:	080048f0 	.word	0x080048f0

0800077c <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle, UART_HandleTypeDef *uart_handle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	2382      	movs	r3, #130	; 0x82
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	429a      	cmp	r2, r3
 8000792:	d005      	beq.n	80007a0 <rfm95_init+0x24>
 8000794:	4b8e      	ldr	r3, [pc, #568]	; (80009d0 <rfm95_init+0x254>)
 8000796:	4a8f      	ldr	r2, [pc, #572]	; (80009d4 <rfm95_init+0x258>)
 8000798:	488f      	ldr	r0, [pc, #572]	; (80009d8 <rfm95_init+0x25c>)
 800079a:	219f      	movs	r1, #159	; 0x9f
 800079c:	f003 f816 	bl	80037cc <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	689b      	ldr	r3, [r3, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d005      	beq.n	80007b6 <rfm95_init+0x3a>
 80007aa:	4b8c      	ldr	r3, [pc, #560]	; (80009dc <rfm95_init+0x260>)
 80007ac:	4a89      	ldr	r2, [pc, #548]	; (80009d4 <rfm95_init+0x258>)
 80007ae:	488a      	ldr	r0, [pc, #552]	; (80009d8 <rfm95_init+0x25c>)
 80007b0:	21a0      	movs	r1, #160	; 0xa0
 80007b2:	f003 f80b 	bl	80037cc <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	68da      	ldr	r2, [r3, #12]
 80007bc:	23e0      	movs	r3, #224	; 0xe0
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d005      	beq.n	80007d0 <rfm95_init+0x54>
 80007c4:	4b86      	ldr	r3, [pc, #536]	; (80009e0 <rfm95_init+0x264>)
 80007c6:	4a83      	ldr	r2, [pc, #524]	; (80009d4 <rfm95_init+0x258>)
 80007c8:	4883      	ldr	r0, [pc, #524]	; (80009d8 <rfm95_init+0x25c>)
 80007ca:	21a1      	movs	r1, #161	; 0xa1
 80007cc:	f002 fffe 	bl	80037cc <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691b      	ldr	r3, [r3, #16]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d005      	beq.n	80007e6 <rfm95_init+0x6a>
 80007da:	4b82      	ldr	r3, [pc, #520]	; (80009e4 <rfm95_init+0x268>)
 80007dc:	4a7d      	ldr	r2, [pc, #500]	; (80009d4 <rfm95_init+0x258>)
 80007de:	487e      	ldr	r0, [pc, #504]	; (80009d8 <rfm95_init+0x25c>)
 80007e0:	21a2      	movs	r1, #162	; 0xa2
 80007e2:	f002 fff3 	bl	80037cc <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d005      	beq.n	80007fc <rfm95_init+0x80>
 80007f0:	4b7d      	ldr	r3, [pc, #500]	; (80009e8 <rfm95_init+0x26c>)
 80007f2:	4a78      	ldr	r2, [pc, #480]	; (80009d4 <rfm95_init+0x258>)
 80007f4:	4878      	ldr	r0, [pc, #480]	; (80009d8 <rfm95_init+0x25c>)
 80007f6:	21a3      	movs	r1, #163	; 0xa3
 80007f8:	f002 ffe8 	bl	80037cc <__assert_func>

	reset(handle);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fea5 	bl	800054e <reset>



	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000804:	230f      	movs	r3, #15
 8000806:	18fa      	adds	r2, r7, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	2301      	movs	r3, #1
 800080c:	2142      	movs	r1, #66	; 0x42
 800080e:	f7ff fe27 	bl	8000460 <read_register>
 8000812:	0003      	movs	r3, r0
 8000814:	001a      	movs	r2, r3
 8000816:	2301      	movs	r3, #1
 8000818:	4053      	eors	r3, r2
 800081a:	b2db      	uxtb	r3, r3
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <rfm95_init+0xa8>
 8000820:	2300      	movs	r3, #0
 8000822:	e0d0      	b.n	80009c6 <rfm95_init+0x24a>
	if (version != RFM9x_VER) return false;
 8000824:	230f      	movs	r3, #15
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b12      	cmp	r3, #18
 800082c:	d001      	beq.n	8000832 <rfm95_init+0xb6>
 800082e:	2300      	movs	r3, #0
 8000830:	e0c9      	b.n	80009c6 <rfm95_init+0x24a>


	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2200      	movs	r2, #0
 8000836:	2101      	movs	r1, #1
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fe4f 	bl	80004dc <write_register>
 800083e:	0003      	movs	r3, r0
 8000840:	001a      	movs	r2, r3
 8000842:	2301      	movs	r3, #1
 8000844:	4053      	eors	r3, r2
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <rfm95_init+0xd4>
 800084c:	2300      	movs	r3, #0
 800084e:	e0ba      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	2101      	movs	r1, #1
 8000856:	0018      	movs	r0, r3
 8000858:	f7ff fe40 	bl	80004dc <write_register>
 800085c:	0003      	movs	r3, r0
 800085e:	001a      	movs	r2, r3
 8000860:	2301      	movs	r3, #1
 8000862:	4053      	eors	r3, r2
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <rfm95_init+0xf2>
 800086a:	2300      	movs	r3, #0
 800086c:	e0ab      	b.n	80009c6 <rfm95_init+0x24a>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe31 	bl	80004dc <write_register>
 800087a:	0003      	movs	r3, r0
 800087c:	001a      	movs	r2, r3
 800087e:	2301      	movs	r3, #1
 8000880:	4053      	eors	r3, r2
 8000882:	b2db      	uxtb	r3, r3
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <rfm95_init+0x110>
 8000888:	2300      	movs	r3, #0
 800088a:	e09c      	b.n	80009c6 <rfm95_init+0x24a>

	if (handle->on_after_interrupts_configured != NULL) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000890:	2b00      	cmp	r3, #0
 8000892:	d002      	beq.n	800089a <rfm95_init+0x11e>
		handle->on_after_interrupts_configured();
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000898:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2111      	movs	r1, #17
 800089e:	0018      	movs	r0, r3
 80008a0:	f7ff fed4 	bl	800064c <rfm95_set_power>
 80008a4:	0003      	movs	r3, r0
 80008a6:	001a      	movs	r2, r3
 80008a8:	2301      	movs	r3, #1
 80008aa:	4053      	eors	r3, r2
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <rfm95_init+0x13a>
 80008b2:	2300      	movs	r3, #0
 80008b4:	e087      	b.n	80009c6 <rfm95_init+0x24a>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2223      	movs	r2, #35	; 0x23
 80008ba:	210c      	movs	r1, #12
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe0d 	bl	80004dc <write_register>
 80008c2:	0003      	movs	r3, r0
 80008c4:	001a      	movs	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	4053      	eors	r3, r2
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <rfm95_init+0x158>
 80008d0:	2300      	movs	r3, #0
 80008d2:	e078      	b.n	80009c6 <rfm95_init+0x24a>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2200      	movs	r2, #0
 80008d8:	2120      	movs	r1, #32
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fdfe 	bl	80004dc <write_register>
 80008e0:	0003      	movs	r3, r0
 80008e2:	001a      	movs	r2, r3
 80008e4:	2301      	movs	r3, #1
 80008e6:	4053      	eors	r3, r2
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <rfm95_init+0x176>
 80008ee:	2300      	movs	r3, #0
 80008f0:	e069      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2208      	movs	r2, #8
 80008f6:	2121      	movs	r1, #33	; 0x21
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fdef 	bl	80004dc <write_register>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	2301      	movs	r3, #1
 8000904:	4053      	eors	r3, r2
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <rfm95_init+0x194>
 800090c:	2300      	movs	r3, #0
 800090e:	e05a      	b.n	80009c6 <rfm95_init+0x24a>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2234      	movs	r2, #52	; 0x34
 8000914:	2139      	movs	r1, #57	; 0x39
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fde0 	bl	80004dc <write_register>
 800091c:	0003      	movs	r3, r0
 800091e:	001a      	movs	r2, r3
 8000920:	2301      	movs	r3, #1
 8000922:	4053      	eors	r3, r2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <rfm95_init+0x1b2>
 800092a:	2300      	movs	r3, #0
 800092c:	e04b      	b.n	80009c6 <rfm95_init+0x24a>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2280      	movs	r2, #128	; 0x80
 8000932:	210e      	movs	r1, #14
 8000934:	0018      	movs	r0, r3
 8000936:	f7ff fdd1 	bl	80004dc <write_register>
 800093a:	0003      	movs	r3, r0
 800093c:	001a      	movs	r2, r3
 800093e:	2301      	movs	r3, #1
 8000940:	4053      	eors	r3, r2
 8000942:	b2db      	uxtb	r3, r3
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <rfm95_init+0x1d0>
 8000948:	2300      	movs	r3, #0
 800094a:	e03c      	b.n	80009c6 <rfm95_init+0x24a>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2200      	movs	r2, #0
 8000950:	210f      	movs	r1, #15
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fdc2 	bl	80004dc <write_register>
 8000958:	0003      	movs	r3, r0
 800095a:	001a      	movs	r2, r3
 800095c:	2301      	movs	r3, #1
 800095e:	4053      	eors	r3, r2
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <rfm95_init+0x1ee>
 8000966:	2300      	movs	r3, #0
 8000968:	e02d      	b.n	80009c6 <rfm95_init+0x24a>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2240      	movs	r2, #64	; 0x40
 800096e:	2123      	movs	r1, #35	; 0x23
 8000970:	0018      	movs	r0, r3
 8000972:	f7ff fdb3 	bl	80004dc <write_register>
 8000976:	0003      	movs	r3, r0
 8000978:	001a      	movs	r2, r3
 800097a:	2301      	movs	r3, #1
 800097c:	4053      	eors	r3, r2
 800097e:	b2db      	uxtb	r3, r3
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <rfm95_init+0x20c>
 8000984:	2300      	movs	r3, #0
 8000986:	e01e      	b.n	80009c6 <rfm95_init+0x24a>

	if(!configure_frequency(handle, 868100000)) return false;
 8000988:	4a18      	ldr	r2, [pc, #96]	; (80009ec <rfm95_init+0x270>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff fdfc 	bl	800058c <configure_frequency>
 8000994:	0003      	movs	r3, r0
 8000996:	001a      	movs	r2, r3
 8000998:	2301      	movs	r3, #1
 800099a:	4053      	eors	r3, r2
 800099c:	b2db      	uxtb	r3, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <rfm95_init+0x22a>
 80009a2:	2300      	movs	r3, #0
 80009a4:	e00f      	b.n	80009c6 <rfm95_init+0x24a>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	2280      	movs	r2, #128	; 0x80
 80009aa:	2101      	movs	r1, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f7ff fd95 	bl	80004dc <write_register>
 80009b2:	0003      	movs	r3, r0
 80009b4:	001a      	movs	r2, r3
 80009b6:	2301      	movs	r3, #1
 80009b8:	4053      	eors	r3, r2
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <rfm95_init+0x248>
 80009c0:	2300      	movs	r3, #0
 80009c2:	e000      	b.n	80009c6 <rfm95_init+0x24a>

	return true;
 80009c4:	2301      	movs	r3, #1
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b004      	add	sp, #16
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	08004914 	.word	0x08004914
 80009d4:	08004a78 	.word	0x08004a78
 80009d8:	080048f0 	.word	0x080048f0
 80009dc:	08004948 	.word	0x08004948
 80009e0:	08004984 	.word	0x08004984
 80009e4:	080049bc 	.word	0x080049bc
 80009e8:	080049f8 	.word	0x080049f8
 80009ec:	33be27a0 	.word	0x33be27a0

080009f0 <receive_package>:


bool receive_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t *payload_len, int8_t *snr, UART_HandleTypeDef *uart_handle) {
 80009f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f2:	46c6      	mov	lr, r8
 80009f4:	b500      	push	{lr}
 80009f6:	b08e      	sub	sp, #56	; 0x38
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6278      	str	r0, [r7, #36]	; 0x24
 80009fc:	6239      	str	r1, [r7, #32]
 80009fe:	61fa      	str	r2, [r7, #28]
 8000a00:	61bb      	str	r3, [r7, #24]
	*payload_len = 0;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]

	//uint32_t rx1_target, rx1_window_symbols;
	//calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);

	//Stand-by mode previous to Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8000a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a0a:	2281      	movs	r2, #129	; 0x81
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f7ff fd64 	bl	80004dc <write_register>
 8000a14:	0003      	movs	r3, r0
 8000a16:	001a      	movs	r2, r3
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4053      	eors	r3, r2
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <receive_package+0x36>
 8000a22:	2300      	movs	r3, #0
 8000a24:	e129      	b.n	8000c7a <receive_package+0x28a>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2272      	movs	r2, #114	; 0x72
 8000a2a:	211d      	movs	r1, #29
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff fd55 	bl	80004dc <write_register>
 8000a32:	0003      	movs	r3, r0
 8000a34:	001a      	movs	r2, r3
 8000a36:	2301      	movs	r3, #1
 8000a38:	4053      	eors	r3, r2
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <receive_package+0x54>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e11a      	b.n	8000c7a <receive_package+0x28a>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xC2)) return false;
 8000a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a46:	22c2      	movs	r2, #194	; 0xc2
 8000a48:	211e      	movs	r1, #30
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f7ff fd46 	bl	80004dc <write_register>
 8000a50:	0003      	movs	r3, r0
 8000a52:	001a      	movs	r2, r3
 8000a54:	2301      	movs	r3, #1
 8000a56:	4053      	eors	r3, r2
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <receive_package+0x72>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e10b      	b.n	8000c7a <receive_package+0x28a>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	2204      	movs	r2, #4
 8000a66:	2126      	movs	r1, #38	; 0x26
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fd37 	bl	80004dc <write_register>
 8000a6e:	0003      	movs	r3, r0
 8000a70:	001a      	movs	r2, r3
 8000a72:	2301      	movs	r3, #1
 8000a74:	4053      	eors	r3, r2
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <receive_package+0x90>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	e0fc      	b.n	8000c7a <receive_package+0x28a>

	// Set maximum symbol timeout.
	//if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8000a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a82:	2227      	movs	r2, #39	; 0x27
 8000a84:	2133      	movs	r1, #51	; 0x33
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fd28 	bl	80004dc <write_register>
 8000a8c:	0003      	movs	r3, r0
 8000a8e:	001a      	movs	r2, r3
 8000a90:	2301      	movs	r3, #1
 8000a92:	4053      	eors	r3, r2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <receive_package+0xae>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e0ed      	b.n	8000c7a <receive_package+0x28a>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	221d      	movs	r2, #29
 8000aa2:	213b      	movs	r1, #59	; 0x3b
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff fd19 	bl	80004dc <write_register>
 8000aaa:	0003      	movs	r3, r0
 8000aac:	001a      	movs	r2, r3
 8000aae:	2301      	movs	r3, #1
 8000ab0:	4053      	eors	r3, r2
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <receive_package+0xcc>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	e0de      	b.n	8000c7a <receive_package+0x28a>

	// receive_at_scheduled_time(handle, rx1_target);


	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8000abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2140      	movs	r1, #64	; 0x40
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fd0a 	bl	80004dc <write_register>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	001a      	movs	r2, r3
 8000acc:	2301      	movs	r3, #1
 8000ace:	4053      	eors	r3, r2
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <receive_package+0xea>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	e0cf      	b.n	8000c7a <receive_package+0x28a>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8000ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000adc:	22ff      	movs	r2, #255	; 0xff
 8000ade:	2112      	movs	r1, #18
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fcfb 	bl	80004dc <write_register>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	001a      	movs	r2, r3
 8000aea:	2301      	movs	r3, #1
 8000aec:	4053      	eors	r3, r2
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <receive_package+0x108>
 8000af4:	2300      	movs	r3, #0
 8000af6:	e0c0      	b.n	8000c7a <receive_package+0x28a>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8000af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000afa:	22ac      	movs	r2, #172	; 0xac
 8000afc:	2100      	movs	r1, #0
 8000afe:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8000b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b02:	22b0      	movs	r2, #176	; 0xb0
 8000b04:	2100      	movs	r1, #0
 8000b06:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	22b4      	movs	r2, #180	; 0xb4
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	5099      	str	r1, [r3, r2]



	// Clear flags
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8000b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b12:	22ff      	movs	r2, #255	; 0xff
 8000b14:	2112      	movs	r1, #18
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fce0 	bl	80004dc <write_register>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	001a      	movs	r2, r3
 8000b20:	2301      	movs	r3, #1
 8000b22:	4053      	eors	r3, r2
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <receive_package+0x13e>
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e0a5      	b.n	8000c7a <receive_package+0x28a>
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 8000b2e:	4a56      	ldr	r2, [pc, #344]	; (8000c88 <receive_package+0x298>)
 8000b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b32:	2301      	movs	r3, #1
 8000b34:	2112      	movs	r1, #18
 8000b36:	f7ff fc93 	bl	8000460 <read_register>

	// Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_RX_CONTINUOUS)) return false;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	2285      	movs	r2, #133	; 0x85
 8000b3e:	2101      	movs	r1, #1
 8000b40:	0018      	movs	r0, r3
 8000b42:	f7ff fccb 	bl	80004dc <write_register>
 8000b46:	0003      	movs	r3, r0
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	4053      	eors	r3, r2
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00c      	beq.n	8000b6e <receive_package+0x17e>
 8000b54:	2300      	movs	r3, #0
 8000b56:	e090      	b.n	8000c7a <receive_package+0x28a>

	while (irqFlags == 0x00){
		read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 8000b58:	4a4b      	ldr	r2, [pc, #300]	; (8000c88 <receive_package+0x298>)
 8000b5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	2112      	movs	r1, #18
 8000b60:	f7ff fc7e 	bl	8000460 <read_register>
		HAL_Delay(500);
 8000b64:	23fa      	movs	r3, #250	; 0xfa
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f000 fc5d 	bl	8001428 <HAL_Delay>
	while (irqFlags == 0x00){
 8000b6e:	4b46      	ldr	r3, [pc, #280]	; (8000c88 <receive_package+0x298>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f0      	beq.n	8000b58 <receive_package+0x168>
	}


	 // Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8000b76:	2317      	movs	r3, #23
 8000b78:	2218      	movs	r2, #24
 8000b7a:	189b      	adds	r3, r3, r2
 8000b7c:	19da      	adds	r2, r3, r7
 8000b7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000b80:	2301      	movs	r3, #1
 8000b82:	2113      	movs	r1, #19
 8000b84:	f7ff fc6c 	bl	8000460 <read_register>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4053      	eors	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <receive_package+0x1aa>
 8000b96:	2300      	movs	r3, #0
 8000b98:	e06f      	b.n	8000c7a <receive_package+0x28a>

	uint8_t payload[payload_len_internal];
 8000b9a:	2317      	movs	r3, #23
 8000b9c:	2218      	movs	r2, #24
 8000b9e:	189b      	adds	r3, r3, r2
 8000ba0:	19db      	adds	r3, r3, r7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	466a      	mov	r2, sp
 8000ba6:	4690      	mov	r8, r2
 8000ba8:	001a      	movs	r2, r3
 8000baa:	3a01      	subs	r2, #1
 8000bac:	637a      	str	r2, [r7, #52]	; 0x34
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	60fa      	str	r2, [r7, #12]
 8000bb4:	68b8      	ldr	r0, [r7, #8]
 8000bb6:	68f9      	ldr	r1, [r7, #12]
 8000bb8:	0002      	movs	r2, r0
 8000bba:	0f52      	lsrs	r2, r2, #29
 8000bbc:	000e      	movs	r6, r1
 8000bbe:	00f6      	lsls	r6, r6, #3
 8000bc0:	617e      	str	r6, [r7, #20]
 8000bc2:	697e      	ldr	r6, [r7, #20]
 8000bc4:	4316      	orrs	r6, r2
 8000bc6:	617e      	str	r6, [r7, #20]
 8000bc8:	0002      	movs	r2, r0
 8000bca:	00d2      	lsls	r2, r2, #3
 8000bcc:	613a      	str	r2, [r7, #16]
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	607a      	str	r2, [r7, #4]
 8000bd4:	6838      	ldr	r0, [r7, #0]
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	0002      	movs	r2, r0
 8000bda:	0f52      	lsrs	r2, r2, #29
 8000bdc:	000e      	movs	r6, r1
 8000bde:	00f5      	lsls	r5, r6, #3
 8000be0:	4315      	orrs	r5, r2
 8000be2:	0002      	movs	r2, r0
 8000be4:	00d4      	lsls	r4, r2, #3
 8000be6:	3307      	adds	r3, #7
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	00db      	lsls	r3, r3, #3
 8000bec:	466a      	mov	r2, sp
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	469d      	mov	sp, r3
 8000bf2:	466b      	mov	r3, sp
 8000bf4:	3300      	adds	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30

	 // Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210d      	movs	r1, #13
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f7ff fc6c 	bl	80004dc <write_register>
 8000c04:	0003      	movs	r3, r0
 8000c06:	001a      	movs	r2, r3
 8000c08:	2301      	movs	r3, #1
 8000c0a:	4053      	eors	r3, r2
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <receive_package+0x226>
 8000c12:	2300      	movs	r3, #0
 8000c14:	e030      	b.n	8000c78 <receive_package+0x288>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload, payload_len_internal)) return false;
 8000c16:	2317      	movs	r3, #23
 8000c18:	2218      	movs	r2, #24
 8000c1a:	189b      	adds	r3, r3, r2
 8000c1c:	19db      	adds	r3, r3, r7
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000c24:	2100      	movs	r1, #0
 8000c26:	f7ff fc1b 	bl	8000460 <read_register>
 8000c2a:	0003      	movs	r3, r0
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4053      	eors	r3, r2
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <receive_package+0x24c>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e01d      	b.n	8000c78 <receive_package+0x288>

	HAL_UART_Transmit(uart_handle, payload, payload_len_internal, 10);
 8000c3c:	2317      	movs	r3, #23
 8000c3e:	2218      	movs	r2, #24
 8000c40:	189b      	adds	r3, r3, r2
 8000c42:	19db      	adds	r3, r3, r7
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c4a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000c4c:	230a      	movs	r3, #10
 8000c4e:	f002 fa13 	bl	8003078 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000c52:	2064      	movs	r0, #100	; 0x64
 8000c54:	f000 fbe8 	bl	8001428 <HAL_Delay>


	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	2280      	movs	r2, #128	; 0x80
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f7ff fc3c 	bl	80004dc <write_register>
 8000c64:	0003      	movs	r3, r0
 8000c66:	001a      	movs	r2, r3
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4053      	eors	r3, r2
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <receive_package+0x286>
 8000c72:	2300      	movs	r3, #0
 8000c74:	e000      	b.n	8000c78 <receive_package+0x288>


	return true;
 8000c76:	2301      	movs	r3, #1
 8000c78:	46c5      	mov	sp, r8
}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b00e      	add	sp, #56	; 0x38
 8000c80:	bc80      	pop	{r7}
 8000c82:	46b8      	mov	r8, r7
 8000c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20000144 	.word	0x20000144

08000c8c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000c94:	2301      	movs	r3, #1
 8000c96:	425b      	negs	r3, r3
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	4804      	ldr	r0, [pc, #16]	; (8000cac <__io_putchar+0x20>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	f002 f9eb 	bl	8003078 <HAL_UART_Transmit>
  return ch;
 8000ca2:	687b      	ldr	r3, [r7, #4]
}
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	200001ac 	.word	0x200001ac

08000cb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb0:	b5b0      	push	{r4, r5, r7, lr}
 8000cb2:	b090      	sub	sp, #64	; 0x40
 8000cb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb6:	f000 fb53 	bl	8001360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cba:	f000 f857 	bl	8000d6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cbe:	f000 f903 	bl	8000ec8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cc2:	f000 f8d1 	bl	8000e68 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cc6:	f000 f891 	bl	8000dec <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000cca:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <main+0xa8>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2101      	movs	r1, #1
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	f000 fdf1 	bl	80018b8 <HAL_GPIO_WritePin>
  uint8_t transmit_buffer = 0x42;
 8000cd6:	2137      	movs	r1, #55	; 0x37
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2242      	movs	r2, #66	; 0x42
 8000cdc:	701a      	strb	r2, [r3, #0]
  char buffer[20];

  HAL_SPI_Transmit(&hspi1, &transmit_buffer, 1, RFM95_SPI_TIMEOUT);
 8000cde:	1879      	adds	r1, r7, r1
 8000ce0:	481e      	ldr	r0, [pc, #120]	; (8000d5c <main+0xac>)
 8000ce2:	230a      	movs	r3, #10
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f001 fb29 	bl	800233c <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, 1, RFM95_SPI_TIMEOUT);
 8000cea:	2320      	movs	r3, #32
 8000cec:	18f9      	adds	r1, r7, r3
 8000cee:	481b      	ldr	r0, [pc, #108]	; (8000d5c <main+0xac>)
 8000cf0:	230a      	movs	r3, #10
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f001 fc7a 	bl	80025ec <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <main+0xa8>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f000 fdda 	bl	80018b8 <HAL_GPIO_WritePin>

	  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle, &huart2)) {
 8000d04:	4a16      	ldr	r2, [pc, #88]	; (8000d60 <main+0xb0>)
 8000d06:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <main+0xb4>)
 8000d08:	0011      	movs	r1, r2
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f7ff fd36 	bl	800077c <rfm95_init>
 8000d10:	0003      	movs	r3, r0
 8000d12:	001a      	movs	r2, r3
 8000d14:	2301      	movs	r3, #1
 8000d16:	4053      	eors	r3, r2
 8000d18:	b2db      	uxtb	r3, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d113      	bne.n	8000d46 <main+0x96>

  } else {
	  uint8_t init_message_success[] = "RFM95 init success\n\r";
 8000d1e:	2108      	movs	r1, #8
 8000d20:	187b      	adds	r3, r7, r1
 8000d22:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <main+0xb8>)
 8000d24:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000d26:	c331      	stmia	r3!, {r0, r4, r5}
 8000d28:	ca11      	ldmia	r2!, {r0, r4}
 8000d2a:	c311      	stmia	r3!, {r0, r4}
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, init_message_success, sizeof(init_message_success), 10);
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	480b      	ldr	r0, [pc, #44]	; (8000d60 <main+0xb0>)
 8000d34:	230a      	movs	r3, #10
 8000d36:	2215      	movs	r2, #21
 8000d38:	f002 f99e 	bl	8003078 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000d3c:	23fa      	movs	r3, #250	; 0xfa
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 fb71 	bl	8001428 <HAL_Delay>
  while (1)
  {
	uint8_t payloadBuff;
	size_t payload_len;

	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000d46:	003a      	movs	r2, r7
 8000d48:	1df9      	adds	r1, r7, #7
 8000d4a:	4806      	ldr	r0, [pc, #24]	; (8000d64 <main+0xb4>)
 8000d4c:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <main+0xb0>)
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2300      	movs	r3, #0
 8000d52:	f7ff fe4d 	bl	80009f0 <receive_package>
  {
 8000d56:	e7f6      	b.n	8000d46 <main+0x96>
 8000d58:	48000400 	.word	0x48000400
 8000d5c:	20000148 	.word	0x20000148
 8000d60:	200001ac 	.word	0x200001ac
 8000d64:	20000000 	.word	0x20000000
 8000d68:	08004a30 	.word	0x08004a30

08000d6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b091      	sub	sp, #68	; 0x44
 8000d70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d72:	2410      	movs	r4, #16
 8000d74:	193b      	adds	r3, r7, r4
 8000d76:	0018      	movs	r0, r3
 8000d78:	2330      	movs	r3, #48	; 0x30
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f002 fd7d 	bl	800387c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d82:	003b      	movs	r3, r7
 8000d84:	0018      	movs	r0, r3
 8000d86:	2310      	movs	r3, #16
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f002 fd76 	bl	800387c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d90:	0021      	movs	r1, r4
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2202      	movs	r2, #2
 8000d96:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2210      	movs	r2, #16
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	0018      	movs	r0, r3
 8000dae:	f000 fda1 	bl	80018f4 <HAL_RCC_OscConfig>
 8000db2:	1e03      	subs	r3, r0, #0
 8000db4:	d001      	beq.n	8000dba <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000db6:	f000 f90d 	bl	8000fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dba:	003b      	movs	r3, r7
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dc0:	003b      	movs	r3, r7
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f001 f8a6 	bl	8001f28 <HAL_RCC_ClockConfig>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000de0:	f000 f8f8 	bl	8000fd4 <Error_Handler>
  }
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b011      	add	sp, #68	; 0x44
 8000dea:	bd90      	pop	{r4, r7, pc}

08000dec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df0:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000df2:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_SPI1_Init+0x78>)
 8000df4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000df6:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000df8:	2282      	movs	r2, #130	; 0x82
 8000dfa:	0052      	lsls	r2, r2, #1
 8000dfc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e04:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e06:	22e0      	movs	r2, #224	; 0xe0
 8000e08:	00d2      	lsls	r2, r2, #3
 8000e0a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e12:	4b13      	ldr	r3, [pc, #76]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	0092      	lsls	r2, r2, #2
 8000e1e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e22:	2210      	movs	r2, #16
 8000e24:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e4a:	4b05      	ldr	r3, [pc, #20]	; (8000e60 <MX_SPI1_Init+0x74>)
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	f001 f9bd 	bl	80021cc <HAL_SPI_Init>
 8000e52:	1e03      	subs	r3, r0, #0
 8000e54:	d001      	beq.n	8000e5a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e56:	f000 f8bd 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	20000148 	.word	0x20000148
 8000e64:	40013000 	.word	0x40013000

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e6e:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <MX_USART2_UART_Init+0x5c>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e74:	2296      	movs	r2, #150	; 0x96
 8000e76:	0212      	lsls	r2, r2, #8
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <MX_USART2_UART_Init+0x58>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 f88f 	bl	8002fd0 <HAL_UART_Init>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eb6:	f000 f88d 	bl	8000fd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200001ac 	.word	0x200001ac
 8000ec4:	40004400 	.word	0x40004400

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	240c      	movs	r4, #12
 8000ed0:	193b      	adds	r3, r7, r4
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	2314      	movs	r3, #20
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f002 fccf 	bl	800387c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	4b3a      	ldr	r3, [pc, #232]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000ee0:	695a      	ldr	r2, [r3, #20]
 8000ee2:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000ee4:	2180      	movs	r1, #128	; 0x80
 8000ee6:	0289      	lsls	r1, r1, #10
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	615a      	str	r2, [r3, #20]
 8000eec:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000eee:	695a      	ldr	r2, [r3, #20]
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	029b      	lsls	r3, r3, #10
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	4b33      	ldr	r3, [pc, #204]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000efc:	695a      	ldr	r2, [r3, #20]
 8000efe:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	02c9      	lsls	r1, r1, #11
 8000f04:	430a      	orrs	r2, r1
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f0a:	695a      	ldr	r2, [r3, #20]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	02db      	lsls	r3, r3, #11
 8000f10:	4013      	ands	r3, r2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b2b      	ldr	r3, [pc, #172]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0309      	lsls	r1, r1, #12
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <MX_GPIO_Init+0x100>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	031b      	lsls	r3, r3, #12
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000f32:	4b26      	ldr	r3, [pc, #152]	; (8000fcc <MX_GPIO_Init+0x104>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	2101      	movs	r1, #1
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 fcbd 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000f3e:	23a0      	movs	r3, #160	; 0xa0
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <MX_GPIO_Init+0x108>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	0019      	movs	r1, r3
 8000f48:	f000 fcb6 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8000f4c:	193b      	adds	r3, r7, r4
 8000f4e:	2201      	movs	r2, #1
 8000f50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2201      	movs	r2, #1
 8000f56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	4a19      	ldr	r2, [pc, #100]	; (8000fcc <MX_GPIO_Init+0x104>)
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f000 fb34 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000f70:	0021      	movs	r1, r4
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	22a0      	movs	r2, #160	; 0xa0
 8000f76:	0092      	lsls	r2, r2, #2
 8000f78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	000c      	movs	r4, r1
 8000f7c:	193b      	adds	r3, r7, r4
 8000f7e:	2201      	movs	r2, #1
 8000f80:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	193b      	adds	r3, r7, r4
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <MX_GPIO_Init+0x108>)
 8000f92:	0019      	movs	r1, r3
 8000f94:	0010      	movs	r0, r2
 8000f96:	f000 fb1f 	bl	80015d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000f9a:	0021      	movs	r1, r4
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	22e0      	movs	r2, #224	; 0xe0
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb0:	187a      	adds	r2, r7, r1
 8000fb2:	2390      	movs	r3, #144	; 0x90
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f000 fb0d 	bl	80015d8 <HAL_GPIO_Init>

}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b009      	add	sp, #36	; 0x24
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400
 8000fd0:	48000800 	.word	0x48000800

08000fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fd8:	b672      	cpsid	i
}
 8000fda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <Error_Handler+0x8>
	...

08000fe0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	; (8001024 <HAL_MspInit+0x44>)
 8000fe8:	699a      	ldr	r2, [r3, #24]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_MspInit+0x44>)
 8000fec:	2101      	movs	r1, #1
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	619a      	str	r2, [r3, #24]
 8000ff2:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <HAL_MspInit+0x44>)
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <HAL_MspInit+0x44>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	0549      	lsls	r1, r1, #21
 8001008:	430a      	orrs	r2, r1
 800100a:	61da      	str	r2, [r3, #28]
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <HAL_MspInit+0x44>)
 800100e:	69da      	ldr	r2, [r3, #28]
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	055b      	lsls	r3, r3, #21
 8001014:	4013      	ands	r3, r2
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b08b      	sub	sp, #44	; 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	2414      	movs	r4, #20
 8001032:	193b      	adds	r3, r7, r4
 8001034:	0018      	movs	r0, r3
 8001036:	2314      	movs	r3, #20
 8001038:	001a      	movs	r2, r3
 800103a:	2100      	movs	r1, #0
 800103c:	f002 fc1e 	bl	800387c <memset>
  if(hspi->Instance==SPI1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_SPI_MspInit+0x90>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d132      	bne.n	80010b0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800104c:	699a      	ldr	r2, [r3, #24]
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	0149      	lsls	r1, r1, #5
 8001054:	430a      	orrs	r2, r1
 8001056:	619a      	str	r2, [r3, #24]
 8001058:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800105a:	699a      	ldr	r2, [r3, #24]
 800105c:	2380      	movs	r3, #128	; 0x80
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001068:	695a      	ldr	r2, [r3, #20]
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <HAL_SPI_MspInit+0x94>)
 800106c:	2180      	movs	r1, #128	; 0x80
 800106e:	0289      	lsls	r1, r1, #10
 8001070:	430a      	orrs	r2, r1
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_SPI_MspInit+0x94>)
 8001076:	695a      	ldr	r2, [r3, #20]
 8001078:	2380      	movs	r3, #128	; 0x80
 800107a:	029b      	lsls	r3, r3, #10
 800107c:	4013      	ands	r3, r2
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	0021      	movs	r1, r4
 8001084:	187b      	adds	r3, r7, r1
 8001086:	22e0      	movs	r2, #224	; 0xe0
 8001088:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2202      	movs	r2, #2
 800108e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2203      	movs	r2, #3
 800109a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800109c:	187b      	adds	r3, r7, r1
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	187a      	adds	r2, r7, r1
 80010a4:	2390      	movs	r3, #144	; 0x90
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	0011      	movs	r1, r2
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fa94 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010b0:	46c0      	nop			; (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	b00b      	add	sp, #44	; 0x2c
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	40013000 	.word	0x40013000
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08b      	sub	sp, #44	; 0x2c
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	2414      	movs	r4, #20
 80010ca:	193b      	adds	r3, r7, r4
 80010cc:	0018      	movs	r0, r3
 80010ce:	2314      	movs	r3, #20
 80010d0:	001a      	movs	r2, r3
 80010d2:	2100      	movs	r1, #0
 80010d4:	f002 fbd2 	bl	800387c <memset>
  if(huart->Instance==USART2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_UART_MspInit+0x90>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d132      	bne.n	8001148 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_UART_MspInit+0x94>)
 80010e4:	69da      	ldr	r2, [r3, #28]
 80010e6:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <HAL_UART_MspInit+0x94>)
 80010e8:	2180      	movs	r1, #128	; 0x80
 80010ea:	0289      	lsls	r1, r1, #10
 80010ec:	430a      	orrs	r2, r1
 80010ee:	61da      	str	r2, [r3, #28]
 80010f0:	4b18      	ldr	r3, [pc, #96]	; (8001154 <HAL_UART_MspInit+0x94>)
 80010f2:	69da      	ldr	r2, [r3, #28]
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fe:	4b15      	ldr	r3, [pc, #84]	; (8001154 <HAL_UART_MspInit+0x94>)
 8001100:	695a      	ldr	r2, [r3, #20]
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_UART_MspInit+0x94>)
 8001104:	2180      	movs	r1, #128	; 0x80
 8001106:	0289      	lsls	r1, r1, #10
 8001108:	430a      	orrs	r2, r1
 800110a:	615a      	str	r2, [r3, #20]
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_UART_MspInit+0x94>)
 800110e:	695a      	ldr	r2, [r3, #20]
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	029b      	lsls	r3, r3, #10
 8001114:	4013      	ands	r3, r2
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800111a:	0021      	movs	r1, r4
 800111c:	187b      	adds	r3, r7, r1
 800111e:	220c      	movs	r2, #12
 8001120:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2202      	movs	r2, #2
 8001126:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2203      	movs	r2, #3
 8001132:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2201      	movs	r2, #1
 8001138:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113a:	187a      	adds	r2, r7, r1
 800113c:	2390      	movs	r3, #144	; 0x90
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	0011      	movs	r1, r2
 8001142:	0018      	movs	r0, r3
 8001144:	f000 fa48 	bl	80015d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b00b      	add	sp, #44	; 0x2c
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	40004400 	.word	0x40004400
 8001154:	40021000 	.word	0x40021000

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001168:	46c0      	nop			; (mov r8, r8)
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800117c:	f000 f938 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
  return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <_kill>:

int _kill(int pid, int sig)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800119c:	f002 fb34 	bl	8003808 <__errno>
 80011a0:	0003      	movs	r3, r0
 80011a2:	2216      	movs	r2, #22
 80011a4:	601a      	str	r2, [r3, #0]
  return -1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	425b      	negs	r3, r3
}
 80011aa:	0018      	movs	r0, r3
 80011ac:	46bd      	mov	sp, r7
 80011ae:	b002      	add	sp, #8
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <_exit>:

void _exit (int status)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011ba:	2301      	movs	r3, #1
 80011bc:	425a      	negs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	0011      	movs	r1, r2
 80011c2:	0018      	movs	r0, r3
 80011c4:	f7ff ffe5 	bl	8001192 <_kill>
  while (1) {}    /* Make sure we hang here */
 80011c8:	e7fe      	b.n	80011c8 <_exit+0x16>

080011ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b086      	sub	sp, #24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e00a      	b.n	80011f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011dc:	e000      	b.n	80011e0 <_read+0x16>
 80011de:	bf00      	nop
 80011e0:	0001      	movs	r1, r0
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	1c5a      	adds	r2, r3, #1
 80011e6:	60ba      	str	r2, [r7, #8]
 80011e8:	b2ca      	uxtb	r2, r1
 80011ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	3301      	adds	r3, #1
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	429a      	cmp	r2, r3
 80011f8:	dbf0      	blt.n	80011dc <_read+0x12>
  }

  return len;
 80011fa:	687b      	ldr	r3, [r7, #4]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b006      	add	sp, #24
 8001202:	bd80      	pop	{r7, pc}

08001204 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e009      	b.n	800122a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff fd34 	bl	8000c8c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	dbf1      	blt.n	8001216 <_write+0x12>
  }
  return len;
 8001232:	687b      	ldr	r3, [r7, #4]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b006      	add	sp, #24
 800123a:	bd80      	pop	{r7, pc}

0800123c <_close>:

int _close(int file)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001244:	2301      	movs	r3, #1
 8001246:	425b      	negs	r3, r3
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	0192      	lsls	r2, r2, #6
 8001260:	605a      	str	r2, [r3, #4]
  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	0018      	movs	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <_isatty>:

int _isatty(int file)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b084      	sub	sp, #16
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b004      	add	sp, #16
 8001292:	bd80      	pop	{r7, pc}

08001294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800129c:	4a14      	ldr	r2, [pc, #80]	; (80012f0 <_sbrk+0x5c>)
 800129e:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <_sbrk+0x60>)
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d102      	bne.n	80012b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012b0:	4b11      	ldr	r3, [pc, #68]	; (80012f8 <_sbrk+0x64>)
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <_sbrk+0x68>)
 80012b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012b6:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <_sbrk+0x64>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	18d3      	adds	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d207      	bcs.n	80012d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012c4:	f002 faa0 	bl	8003808 <__errno>
 80012c8:	0003      	movs	r3, r0
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ce:	2301      	movs	r3, #1
 80012d0:	425b      	negs	r3, r3
 80012d2:	e009      	b.n	80012e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012d4:	4b08      	ldr	r3, [pc, #32]	; (80012f8 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	18d2      	adds	r2, r2, r3
 80012e2:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <_sbrk+0x64>)
 80012e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012e6:	68fb      	ldr	r3, [r7, #12]
}
 80012e8:	0018      	movs	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b006      	add	sp, #24
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20002000 	.word	0x20002000
 80012f4:	00000400 	.word	0x00000400
 80012f8:	20000230 	.word	0x20000230
 80012fc:	20000248 	.word	0x20000248

08001300 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001304:	46c0      	nop			; (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800130e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopForever+0x6>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopForever+0xe>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopForever+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001336:	f7ff ffe3 	bl	8001300 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800133a:	f002 fa7b 	bl	8003834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800133e:	f7ff fcb7 	bl	8000cb0 <main>

08001342 <LoopForever>:

LoopForever:
    b LoopForever
 8001342:	e7fe      	b.n	8001342 <LoopForever>
  ldr   r0, =_estack
 8001344:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001350:	08004b80 	.word	0x08004b80
  ldr r2, =_sbss
 8001354:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001358:	20000248 	.word	0x20000248

0800135c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC1_IRQHandler>
	...

08001360 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001364:	4b07      	ldr	r3, [pc, #28]	; (8001384 <HAL_Init+0x24>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_Init+0x24>)
 800136a:	2110      	movs	r1, #16
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001370:	2003      	movs	r0, #3
 8001372:	f000 f809 	bl	8001388 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001376:	f7ff fe33 	bl	8000fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	0018      	movs	r0, r3
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	40022000 	.word	0x40022000

08001388 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001388:	b590      	push	{r4, r7, lr}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <HAL_InitTick+0x5c>)
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	4b14      	ldr	r3, [pc, #80]	; (80013e8 <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	0019      	movs	r1, r3
 800139a:	23fa      	movs	r3, #250	; 0xfa
 800139c:	0098      	lsls	r0, r3, #2
 800139e:	f7fe febd 	bl	800011c <__udivsi3>
 80013a2:	0003      	movs	r3, r0
 80013a4:	0019      	movs	r1, r3
 80013a6:	0020      	movs	r0, r4
 80013a8:	f7fe feb8 	bl	800011c <__udivsi3>
 80013ac:	0003      	movs	r3, r0
 80013ae:	0018      	movs	r0, r3
 80013b0:	f000 f905 	bl	80015be <HAL_SYSTICK_Config>
 80013b4:	1e03      	subs	r3, r0, #0
 80013b6:	d001      	beq.n	80013bc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e00f      	b.n	80013dc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b03      	cmp	r3, #3
 80013c0:	d80b      	bhi.n	80013da <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	2301      	movs	r3, #1
 80013c6:	425b      	negs	r3, r3
 80013c8:	2200      	movs	r2, #0
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f8e2 	bl	8001594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_InitTick+0x64>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
 80013d8:	e000      	b.n	80013dc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b003      	add	sp, #12
 80013e2:	bd90      	pop	{r4, r7, pc}
 80013e4:	200000b8 	.word	0x200000b8
 80013e8:	200000c0 	.word	0x200000c0
 80013ec:	200000bc 	.word	0x200000bc

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	001a      	movs	r2, r3
 80013fa:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	18d2      	adds	r2, r2, r3
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_IncTick+0x20>)
 8001402:	601a      	str	r2, [r3, #0]
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	200000c0 	.word	0x200000c0
 8001410:	20000234 	.word	0x20000234

08001414 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b02      	ldr	r3, [pc, #8]	; (8001424 <HAL_GetTick+0x10>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	0018      	movs	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000234 	.word	0x20000234

08001428 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b084      	sub	sp, #16
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001430:	f7ff fff0 	bl	8001414 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	d005      	beq.n	800144e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <HAL_Delay+0x44>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	001a      	movs	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	189b      	adds	r3, r3, r2
 800144c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	f7ff ffe0 	bl	8001414 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	429a      	cmp	r2, r3
 800145e:	d8f7      	bhi.n	8001450 <HAL_Delay+0x28>
  {
  }
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	200000c0 	.word	0x200000c0

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b7f      	cmp	r3, #127	; 0x7f
 8001484:	d828      	bhi.n	80014d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001486:	4a2f      	ldr	r2, [pc, #188]	; (8001544 <__NVIC_SetPriority+0xd4>)
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25b      	sxtb	r3, r3
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	33c0      	adds	r3, #192	; 0xc0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	589b      	ldr	r3, [r3, r2]
 8001496:	1dfa      	adds	r2, r7, #7
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	0011      	movs	r1, r2
 800149c:	2203      	movs	r2, #3
 800149e:	400a      	ands	r2, r1
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	21ff      	movs	r1, #255	; 0xff
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	401a      	ands	r2, r3
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	2303      	movs	r3, #3
 80014be:	4003      	ands	r3, r0
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	481f      	ldr	r0, [pc, #124]	; (8001544 <__NVIC_SetPriority+0xd4>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	33c0      	adds	r3, #192	; 0xc0
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014d6:	e031      	b.n	800153c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	4a1b      	ldr	r2, [pc, #108]	; (8001548 <__NVIC_SetPriority+0xd8>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0019      	movs	r1, r3
 80014e0:	230f      	movs	r3, #15
 80014e2:	400b      	ands	r3, r1
 80014e4:	3b08      	subs	r3, #8
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3306      	adds	r3, #6
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1dfa      	adds	r2, r7, #7
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	0011      	movs	r1, r2
 80014f8:	2203      	movs	r2, #3
 80014fa:	400a      	ands	r2, r1
 80014fc:	00d2      	lsls	r2, r2, #3
 80014fe:	21ff      	movs	r1, #255	; 0xff
 8001500:	4091      	lsls	r1, r2
 8001502:	000a      	movs	r2, r1
 8001504:	43d2      	mvns	r2, r2
 8001506:	401a      	ands	r2, r3
 8001508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	22ff      	movs	r2, #255	; 0xff
 8001510:	401a      	ands	r2, r3
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	2303      	movs	r3, #3
 800151a:	4003      	ands	r3, r0
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001520:	4809      	ldr	r0, [pc, #36]	; (8001548 <__NVIC_SetPriority+0xd8>)
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	001c      	movs	r4, r3
 8001528:	230f      	movs	r3, #15
 800152a:	4023      	ands	r3, r4
 800152c:	3b08      	subs	r3, #8
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	430a      	orrs	r2, r1
 8001532:	3306      	adds	r3, #6
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	18c3      	adds	r3, r0, r3
 8001538:	3304      	adds	r3, #4
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b003      	add	sp, #12
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	045b      	lsls	r3, r3, #17
 800155c:	429a      	cmp	r2, r3
 800155e:	d301      	bcc.n	8001564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001560:	2301      	movs	r3, #1
 8001562:	e010      	b.n	8001586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001564:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <SysTick_Config+0x44>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	3a01      	subs	r2, #1
 800156a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156c:	2301      	movs	r3, #1
 800156e:	425b      	negs	r3, r3
 8001570:	2103      	movs	r1, #3
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff ff7c 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <SysTick_Config+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	; (8001590 <SysTick_Config+0x44>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	210f      	movs	r1, #15
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	1c02      	adds	r2, r0, #0
 80015a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>
}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	0018      	movs	r0, r3
 80015ca:	f7ff ffbf 	bl	800154c <SysTick_Config>
 80015ce:	0003      	movs	r3, r0
}
 80015d0:	0018      	movs	r0, r3
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b002      	add	sp, #8
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	e14f      	b.n	8001888 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2101      	movs	r1, #1
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	4013      	ands	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d100      	bne.n	8001600 <HAL_GPIO_Init+0x28>
 80015fe:	e140      	b.n	8001882 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2203      	movs	r2, #3
 8001606:	4013      	ands	r3, r2
 8001608:	2b01      	cmp	r3, #1
 800160a:	d005      	beq.n	8001618 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2203      	movs	r2, #3
 8001612:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001614:	2b02      	cmp	r3, #2
 8001616:	d130      	bne.n	800167a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	43da      	mvns	r2, r3
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	409a      	lsls	r2, r3
 800163a:	0013      	movs	r3, r2
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800164e:	2201      	movs	r2, #1
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	2201      	movs	r2, #1
 8001666:	401a      	ands	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2203      	movs	r2, #3
 8001680:	4013      	ands	r3, r2
 8001682:	2b03      	cmp	r3, #3
 8001684:	d017      	beq.n	80016b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	2203      	movs	r2, #3
 8001692:	409a      	lsls	r2, r3
 8001694:	0013      	movs	r3, r2
 8001696:	43da      	mvns	r2, r3
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	4013      	ands	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	689a      	ldr	r2, [r3, #8]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	409a      	lsls	r2, r3
 80016a8:	0013      	movs	r3, r2
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2203      	movs	r2, #3
 80016bc:	4013      	ands	r3, r2
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d123      	bne.n	800170a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	08da      	lsrs	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	3208      	adds	r2, #8
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	58d3      	ldr	r3, [r2, r3]
 80016ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	2207      	movs	r2, #7
 80016d4:	4013      	ands	r3, r2
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	220f      	movs	r2, #15
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2107      	movs	r1, #7
 80016ee:	400b      	ands	r3, r1
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	0092      	lsls	r2, r2, #2
 8001706:	6939      	ldr	r1, [r7, #16]
 8001708:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	2203      	movs	r2, #3
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	43da      	mvns	r2, r3
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	4013      	ands	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	401a      	ands	r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	23c0      	movs	r3, #192	; 0xc0
 8001744:	029b      	lsls	r3, r3, #10
 8001746:	4013      	ands	r3, r2
 8001748:	d100      	bne.n	800174c <HAL_GPIO_Init+0x174>
 800174a:	e09a      	b.n	8001882 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174c:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <HAL_GPIO_Init+0x2c8>)
 800174e:	699a      	ldr	r2, [r3, #24]
 8001750:	4b53      	ldr	r3, [pc, #332]	; (80018a0 <HAL_GPIO_Init+0x2c8>)
 8001752:	2101      	movs	r1, #1
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	4b51      	ldr	r3, [pc, #324]	; (80018a0 <HAL_GPIO_Init+0x2c8>)
 800175a:	699b      	ldr	r3, [r3, #24]
 800175c:	2201      	movs	r2, #1
 800175e:	4013      	ands	r3, r2
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001764:	4a4f      	ldr	r2, [pc, #316]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	589b      	ldr	r3, [r3, r2]
 8001770:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2203      	movs	r2, #3
 8001776:	4013      	ands	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	220f      	movs	r2, #15
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	43da      	mvns	r2, r3
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4013      	ands	r3, r2
 8001786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	2390      	movs	r3, #144	; 0x90
 800178c:	05db      	lsls	r3, r3, #23
 800178e:	429a      	cmp	r2, r3
 8001790:	d013      	beq.n	80017ba <HAL_GPIO_Init+0x1e2>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a44      	ldr	r2, [pc, #272]	; (80018a8 <HAL_GPIO_Init+0x2d0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d00d      	beq.n	80017b6 <HAL_GPIO_Init+0x1de>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a43      	ldr	r2, [pc, #268]	; (80018ac <HAL_GPIO_Init+0x2d4>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d007      	beq.n	80017b2 <HAL_GPIO_Init+0x1da>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a42      	ldr	r2, [pc, #264]	; (80018b0 <HAL_GPIO_Init+0x2d8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_GPIO_Init+0x1d6>
 80017aa:	2303      	movs	r3, #3
 80017ac:	e006      	b.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e004      	b.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017b2:	2302      	movs	r3, #2
 80017b4:	e002      	b.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017b6:	2301      	movs	r3, #1
 80017b8:	e000      	b.n	80017bc <HAL_GPIO_Init+0x1e4>
 80017ba:	2300      	movs	r3, #0
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	2103      	movs	r1, #3
 80017c0:	400a      	ands	r2, r1
 80017c2:	0092      	lsls	r2, r2, #2
 80017c4:	4093      	lsls	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017cc:	4935      	ldr	r1, [pc, #212]	; (80018a4 <HAL_GPIO_Init+0x2cc>)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	089b      	lsrs	r3, r3, #2
 80017d2:	3302      	adds	r3, #2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017da:	4b36      	ldr	r3, [pc, #216]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4013      	ands	r3, r2
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017fe:	4b2d      	ldr	r3, [pc, #180]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001804:	4b2b      	ldr	r3, [pc, #172]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	43da      	mvns	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4313      	orrs	r3, r2
 8001826:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	43da      	mvns	r2, r3
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	4013      	ands	r3, r2
 800183c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	035b      	lsls	r3, r3, #13
 8001846:	4013      	ands	r3, r2
 8001848:	d003      	beq.n	8001852 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	039b      	lsls	r3, r3, #14
 8001870:	4013      	ands	r3, r2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_GPIO_Init+0x2dc>)
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	40da      	lsrs	r2, r3
 8001890:	1e13      	subs	r3, r2, #0
 8001892:	d000      	beq.n	8001896 <HAL_GPIO_Init+0x2be>
 8001894:	e6a8      	b.n	80015e8 <HAL_GPIO_Init+0x10>
  } 
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46c0      	nop			; (mov r8, r8)
 800189a:	46bd      	mov	sp, r7
 800189c:	b006      	add	sp, #24
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40010000 	.word	0x40010000
 80018a8:	48000400 	.word	0x48000400
 80018ac:	48000800 	.word	0x48000800
 80018b0:	48000c00 	.word	0x48000c00
 80018b4:	40010400 	.word	0x40010400

080018b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	0008      	movs	r0, r1
 80018c2:	0011      	movs	r1, r2
 80018c4:	1cbb      	adds	r3, r7, #2
 80018c6:	1c02      	adds	r2, r0, #0
 80018c8:	801a      	strh	r2, [r3, #0]
 80018ca:	1c7b      	adds	r3, r7, #1
 80018cc:	1c0a      	adds	r2, r1, #0
 80018ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d0:	1c7b      	adds	r3, r7, #1
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018d8:	1cbb      	adds	r3, r7, #2
 80018da:	881a      	ldrh	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e0:	e003      	b.n	80018ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e2:	1cbb      	adds	r3, r7, #2
 80018e4:	881a      	ldrh	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	46bd      	mov	sp, r7
 80018ee:	b002      	add	sp, #8
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e301      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	4013      	ands	r3, r2
 800190e:	d100      	bne.n	8001912 <HAL_RCC_OscConfig+0x1e>
 8001910:	e08d      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001912:	4bc3      	ldr	r3, [pc, #780]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	220c      	movs	r2, #12
 8001918:	4013      	ands	r3, r2
 800191a:	2b04      	cmp	r3, #4
 800191c:	d00e      	beq.n	800193c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800191e:	4bc0      	ldr	r3, [pc, #768]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	220c      	movs	r2, #12
 8001924:	4013      	ands	r3, r2
 8001926:	2b08      	cmp	r3, #8
 8001928:	d116      	bne.n	8001958 <HAL_RCC_OscConfig+0x64>
 800192a:	4bbd      	ldr	r3, [pc, #756]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800192c:	685a      	ldr	r2, [r3, #4]
 800192e:	2380      	movs	r3, #128	; 0x80
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	401a      	ands	r2, r3
 8001934:	2380      	movs	r3, #128	; 0x80
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	429a      	cmp	r2, r3
 800193a:	d10d      	bne.n	8001958 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4bb8      	ldr	r3, [pc, #736]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	029b      	lsls	r3, r3, #10
 8001944:	4013      	ands	r3, r2
 8001946:	d100      	bne.n	800194a <HAL_RCC_OscConfig+0x56>
 8001948:	e070      	b.n	8001a2c <HAL_RCC_OscConfig+0x138>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d000      	beq.n	8001954 <HAL_RCC_OscConfig+0x60>
 8001952:	e06b      	b.n	8001a2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e2d8      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d107      	bne.n	8001970 <HAL_RCC_OscConfig+0x7c>
 8001960:	4baf      	ldr	r3, [pc, #700]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4bae      	ldr	r3, [pc, #696]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	430a      	orrs	r2, r1
 800196c:	601a      	str	r2, [r3, #0]
 800196e:	e02f      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d10c      	bne.n	8001992 <HAL_RCC_OscConfig+0x9e>
 8001978:	4ba9      	ldr	r3, [pc, #676]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4ba8      	ldr	r3, [pc, #672]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800197e:	49a9      	ldr	r1, [pc, #676]	; (8001c24 <HAL_RCC_OscConfig+0x330>)
 8001980:	400a      	ands	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	4ba6      	ldr	r3, [pc, #664]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	4ba5      	ldr	r3, [pc, #660]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800198a:	49a7      	ldr	r1, [pc, #668]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 800198c:	400a      	ands	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e01e      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b05      	cmp	r3, #5
 8001998:	d10e      	bne.n	80019b8 <HAL_RCC_OscConfig+0xc4>
 800199a:	4ba1      	ldr	r3, [pc, #644]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4ba0      	ldr	r3, [pc, #640]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	02c9      	lsls	r1, r1, #11
 80019a4:	430a      	orrs	r2, r1
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	4b9d      	ldr	r3, [pc, #628]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4b9c      	ldr	r3, [pc, #624]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	0249      	lsls	r1, r1, #9
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 80019b8:	4b99      	ldr	r3, [pc, #612]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b98      	ldr	r3, [pc, #608]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019be:	4999      	ldr	r1, [pc, #612]	; (8001c24 <HAL_RCC_OscConfig+0x330>)
 80019c0:	400a      	ands	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	4b96      	ldr	r3, [pc, #600]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b95      	ldr	r3, [pc, #596]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	4997      	ldr	r1, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x334>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d014      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fd1c 	bl	8001414 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e2:	f7ff fd17 	bl	8001414 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e28a      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f4:	4b8a      	ldr	r3, [pc, #552]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	029b      	lsls	r3, r3, #10
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0xee>
 8001a00:	e015      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff fd07 	bl	8001414 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fd02 	bl	8001414 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e275      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	029b      	lsls	r3, r3, #10
 8001a26:	4013      	ands	r3, r2
 8001a28:	d1f0      	bne.n	8001a0c <HAL_RCC_OscConfig+0x118>
 8001a2a:	e000      	b.n	8001a2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d100      	bne.n	8001a3a <HAL_RCC_OscConfig+0x146>
 8001a38:	e069      	b.n	8001b0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a3a:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	4013      	ands	r3, r2
 8001a42:	d00b      	beq.n	8001a5c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a44:	4b76      	ldr	r3, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	220c      	movs	r2, #12
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d11c      	bne.n	8001a8a <HAL_RCC_OscConfig+0x196>
 8001a50:	4b73      	ldr	r3, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	2380      	movs	r3, #128	; 0x80
 8001a56:	025b      	lsls	r3, r3, #9
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d116      	bne.n	8001a8a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5c:	4b70      	ldr	r3, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d005      	beq.n	8001a72 <HAL_RCC_OscConfig+0x17e>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d001      	beq.n	8001a72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e24b      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a72:	4b6b      	ldr	r3, [pc, #428]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	22f8      	movs	r2, #248	; 0xf8
 8001a78:	4393      	bics	r3, r2
 8001a7a:	0019      	movs	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00da      	lsls	r2, r3, #3
 8001a82:	4b67      	ldr	r3, [pc, #412]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a84:	430a      	orrs	r2, r1
 8001a86:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	e041      	b.n	8001b0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d024      	beq.n	8001adc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	430a      	orrs	r2, r1
 8001a9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9e:	f7ff fcb9 	bl	8001414 <HAL_GetTick>
 8001aa2:	0003      	movs	r3, r0
 8001aa4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aa8:	f7ff fcb4 	bl	8001414 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e227      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aba:	4b59      	ldr	r3, [pc, #356]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2202      	movs	r2, #2
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d0f1      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	22f8      	movs	r2, #248	; 0xf8
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	00da      	lsls	r2, r3, #3
 8001ad4:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	e018      	b.n	8001b0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001adc:	4b50      	ldr	r3, [pc, #320]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	4b4f      	ldr	r3, [pc, #316]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	438a      	bics	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff fc94 	bl	8001414 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc8f 	bl	8001414 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e202      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f1      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2208      	movs	r2, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	d036      	beq.n	8001b86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d019      	beq.n	8001b54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b24:	4b3e      	ldr	r3, [pc, #248]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b26:	2101      	movs	r1, #1
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff fc72 	bl	8001414 <HAL_GetTick>
 8001b30:	0003      	movs	r3, r0
 8001b32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b36:	f7ff fc6d 	bl	8001414 <HAL_GetTick>
 8001b3a:	0002      	movs	r2, r0
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e1e0      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b48:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d0f1      	beq.n	8001b36 <HAL_RCC_OscConfig+0x242>
 8001b52:	e018      	b.n	8001b86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b54:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	438a      	bics	r2, r1
 8001b5e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7ff fc58 	bl	8001414 <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b6a:	f7ff fc53 	bl	8001414 <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e1c6      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b7c:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	2202      	movs	r2, #2
 8001b82:	4013      	ands	r3, r2
 8001b84:	d1f1      	bne.n	8001b6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2204      	movs	r2, #4
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	d100      	bne.n	8001b92 <HAL_RCC_OscConfig+0x29e>
 8001b90:	e0b4      	b.n	8001cfc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	201f      	movs	r0, #31
 8001b94:	183b      	adds	r3, r7, r0
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	69da      	ldr	r2, [r3, #28]
 8001b9e:	2380      	movs	r3, #128	; 0x80
 8001ba0:	055b      	lsls	r3, r3, #21
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d110      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	2180      	movs	r1, #128	; 0x80
 8001bae:	0549      	lsls	r1, r1, #21
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	61da      	str	r2, [r3, #28]
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	055b      	lsls	r3, r3, #21
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001bc2:	183b      	adds	r3, r7, r0
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d11a      	bne.n	8001c0a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bd4:	4b15      	ldr	r3, [pc, #84]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b14      	ldr	r3, [pc, #80]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 8001bda:	2180      	movs	r1, #128	; 0x80
 8001bdc:	0049      	lsls	r1, r1, #1
 8001bde:	430a      	orrs	r2, r1
 8001be0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fc17 	bl	8001414 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bec:	f7ff fc12 	bl	8001414 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e185      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <HAL_RCC_OscConfig+0x338>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d10e      	bne.n	8001c30 <HAL_RCC_OscConfig+0x33c>
 8001c12:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001c14:	6a1a      	ldr	r2, [r3, #32]
 8001c16:	4b02      	ldr	r3, [pc, #8]	; (8001c20 <HAL_RCC_OscConfig+0x32c>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	621a      	str	r2, [r3, #32]
 8001c1e:	e035      	b.n	8001c8c <HAL_RCC_OscConfig+0x398>
 8001c20:	40021000 	.word	0x40021000
 8001c24:	fffeffff 	.word	0xfffeffff
 8001c28:	fffbffff 	.word	0xfffbffff
 8001c2c:	40007000 	.word	0x40007000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <HAL_RCC_OscConfig+0x35e>
 8001c38:	4bb6      	ldr	r3, [pc, #728]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c3a:	6a1a      	ldr	r2, [r3, #32]
 8001c3c:	4bb5      	ldr	r3, [pc, #724]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	438a      	bics	r2, r1
 8001c42:	621a      	str	r2, [r3, #32]
 8001c44:	4bb3      	ldr	r3, [pc, #716]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c46:	6a1a      	ldr	r2, [r3, #32]
 8001c48:	4bb2      	ldr	r3, [pc, #712]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	438a      	bics	r2, r1
 8001c4e:	621a      	str	r2, [r3, #32]
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x398>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x380>
 8001c5a:	4bae      	ldr	r3, [pc, #696]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c5c:	6a1a      	ldr	r2, [r3, #32]
 8001c5e:	4bad      	ldr	r3, [pc, #692]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c60:	2104      	movs	r1, #4
 8001c62:	430a      	orrs	r2, r1
 8001c64:	621a      	str	r2, [r3, #32]
 8001c66:	4bab      	ldr	r3, [pc, #684]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4baa      	ldr	r3, [pc, #680]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	621a      	str	r2, [r3, #32]
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x398>
 8001c74:	4ba7      	ldr	r3, [pc, #668]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	4ba6      	ldr	r3, [pc, #664]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	621a      	str	r2, [r3, #32]
 8001c80:	4ba4      	ldr	r3, [pc, #656]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c82:	6a1a      	ldr	r2, [r3, #32]
 8001c84:	4ba3      	ldr	r3, [pc, #652]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001c86:	2104      	movs	r1, #4
 8001c88:	438a      	bics	r2, r1
 8001c8a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d014      	beq.n	8001cbe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbbe 	bl	8001414 <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9c:	e009      	b.n	8001cb2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff fbb9 	bl	8001414 <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	4a9b      	ldr	r2, [pc, #620]	; (8001f18 <HAL_RCC_OscConfig+0x624>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e12b      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	4b98      	ldr	r3, [pc, #608]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x3aa>
 8001cbc:	e013      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cbe:	f7ff fba9 	bl	8001414 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	e009      	b.n	8001cdc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fba4 	bl	8001414 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	4a91      	ldr	r2, [pc, #580]	; (8001f18 <HAL_RCC_OscConfig+0x624>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e116      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	4b8d      	ldr	r3, [pc, #564]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ce6:	231f      	movs	r3, #31
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b88      	ldr	r3, [pc, #544]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001cf2:	69da      	ldr	r2, [r3, #28]
 8001cf4:	4b87      	ldr	r3, [pc, #540]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001cf6:	4989      	ldr	r1, [pc, #548]	; (8001f1c <HAL_RCC_OscConfig+0x628>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	4013      	ands	r3, r2
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d12a      	bne.n	8001d64 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d0e:	4b81      	ldr	r3, [pc, #516]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	4b80      	ldr	r3, [pc, #512]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d14:	2104      	movs	r1, #4
 8001d16:	430a      	orrs	r2, r1
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001d1a:	4b7e      	ldr	r3, [pc, #504]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d1e:	4b7d      	ldr	r3, [pc, #500]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d20:	2101      	movs	r1, #1
 8001d22:	430a      	orrs	r2, r1
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb75 	bl	8001414 <HAL_GetTick>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001d30:	f7ff fb70 	bl	8001414 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e0e3      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001d42:	4b74      	ldr	r3, [pc, #464]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	2202      	movs	r2, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d0f1      	beq.n	8001d30 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d4c:	4b71      	ldr	r3, [pc, #452]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d50:	22f8      	movs	r2, #248	; 0xf8
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	00da      	lsls	r2, r3, #3
 8001d5c:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	635a      	str	r2, [r3, #52]	; 0x34
 8001d62:	e034      	b.n	8001dce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	3305      	adds	r3, #5
 8001d6a:	d111      	bne.n	8001d90 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001d6c:	4b69      	ldr	r3, [pc, #420]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d70:	4b68      	ldr	r3, [pc, #416]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d72:	2104      	movs	r1, #4
 8001d74:	438a      	bics	r2, r1
 8001d76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001d78:	4b66      	ldr	r3, [pc, #408]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7c:	22f8      	movs	r2, #248	; 0xf8
 8001d7e:	4393      	bics	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	00da      	lsls	r2, r3, #3
 8001d88:	4b62      	ldr	r3, [pc, #392]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001d8e:	e01e      	b.n	8001dce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001d90:	4b60      	ldr	r3, [pc, #384]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d94:	4b5f      	ldr	r3, [pc, #380]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d96:	2104      	movs	r1, #4
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001d9c:	4b5d      	ldr	r3, [pc, #372]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001d9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001da0:	4b5c      	ldr	r3, [pc, #368]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001da2:	2101      	movs	r1, #1
 8001da4:	438a      	bics	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da8:	f7ff fb34 	bl	8001414 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001db2:	f7ff fb2f 	bl	8001414 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0a2      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001dc4:	4b53      	ldr	r3, [pc, #332]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d1f1      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d100      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x4e4>
 8001dd6:	e097      	b.n	8001f08 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b4e      	ldr	r3, [pc, #312]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	220c      	movs	r2, #12
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d100      	bne.n	8001de6 <HAL_RCC_OscConfig+0x4f2>
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d14c      	bne.n	8001e88 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b49      	ldr	r3, [pc, #292]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	4b48      	ldr	r3, [pc, #288]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001df4:	494a      	ldr	r1, [pc, #296]	; (8001f20 <HAL_RCC_OscConfig+0x62c>)
 8001df6:	400a      	ands	r2, r1
 8001df8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfa:	f7ff fb0b 	bl	8001414 <HAL_GetTick>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fb06 	bl	8001414 <HAL_GetTick>
 8001e08:	0002      	movs	r2, r0
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e079      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	2380      	movs	r3, #128	; 0x80
 8001e1c:	049b      	lsls	r3, r3, #18
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e26:	220f      	movs	r2, #15
 8001e28:	4393      	bics	r3, r2
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e32:	430a      	orrs	r2, r1
 8001e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_RCC_OscConfig+0x630>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	4b32      	ldr	r3, [pc, #200]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e50:	4b30      	ldr	r3, [pc, #192]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0449      	lsls	r1, r1, #17
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fad9 	bl	8001414 <HAL_GetTick>
 8001e62:	0003      	movs	r3, r0
 8001e64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e68:	f7ff fad4 	bl	8001414 <HAL_GetTick>
 8001e6c:	0002      	movs	r2, r0
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e047      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e7a:	4b26      	ldr	r3, [pc, #152]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	2380      	movs	r3, #128	; 0x80
 8001e80:	049b      	lsls	r3, r3, #18
 8001e82:	4013      	ands	r3, r2
 8001e84:	d0f0      	beq.n	8001e68 <HAL_RCC_OscConfig+0x574>
 8001e86:	e03f      	b.n	8001f08 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b22      	ldr	r3, [pc, #136]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b21      	ldr	r3, [pc, #132]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001e8e:	4924      	ldr	r1, [pc, #144]	; (8001f20 <HAL_RCC_OscConfig+0x62c>)
 8001e90:	400a      	ands	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff fabe 	bl	8001414 <HAL_GetTick>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9c:	e008      	b.n	8001eb0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9e:	f7ff fab9 	bl	8001414 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d901      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001eac:	2303      	movs	r3, #3
 8001eae:	e02c      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	049b      	lsls	r3, r3, #18
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d1f0      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5aa>
 8001ebc:	e024      	b.n	8001f08 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d101      	bne.n	8001eca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e01f      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	401a      	ands	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10e      	bne.n	8001f04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	220f      	movs	r2, #15
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d107      	bne.n	8001f04 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	23f0      	movs	r3, #240	; 0xf0
 8001ef8:	039b      	lsls	r3, r3, #14
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e000      	b.n	8001f0a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b008      	add	sp, #32
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	00001388 	.word	0x00001388
 8001f1c:	efffffff 	.word	0xefffffff
 8001f20:	feffffff 	.word	0xfeffffff
 8001f24:	ffc2ffff 	.word	0xffc2ffff

08001f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d101      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b3      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f3c:	4b5b      	ldr	r3, [pc, #364]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2201      	movs	r2, #1
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d911      	bls.n	8001f6e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4a:	4b58      	ldr	r3, [pc, #352]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4393      	bics	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b53      	ldr	r3, [pc, #332]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2201      	movs	r2, #1
 8001f62:	4013      	ands	r3, r2
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e09a      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2202      	movs	r2, #2
 8001f74:	4013      	ands	r3, r2
 8001f76:	d015      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d006      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f82:	4b4b      	ldr	r3, [pc, #300]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001f88:	21e0      	movs	r1, #224	; 0xe0
 8001f8a:	00c9      	lsls	r1, r1, #3
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f90:	4b47      	ldr	r3, [pc, #284]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	22f0      	movs	r2, #240	; 0xf0
 8001f96:	4393      	bics	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	4b44      	ldr	r3, [pc, #272]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	d040      	beq.n	8002030 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fb6:	4b3e      	ldr	r3, [pc, #248]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d114      	bne.n	8001fec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e06e      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d107      	bne.n	8001fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	4b38      	ldr	r3, [pc, #224]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	049b      	lsls	r3, r3, #18
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d108      	bne.n	8001fec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e062      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e05b      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fec:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4393      	bics	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002000:	f7ff fa08 	bl	8001414 <HAL_GetTick>
 8002004:	0003      	movs	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002008:	e009      	b.n	800201e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200a:	f7ff fa03 	bl	8001414 <HAL_GetTick>
 800200e:	0002      	movs	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	4a27      	ldr	r2, [pc, #156]	; (80020b4 <HAL_RCC_ClockConfig+0x18c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d901      	bls.n	800201e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e042      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	220c      	movs	r2, #12
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	429a      	cmp	r2, r3
 800202e:	d1ec      	bne.n	800200a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2201      	movs	r2, #1
 8002036:	4013      	ands	r3, r2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	429a      	cmp	r2, r3
 800203c:	d211      	bcs.n	8002062 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800203e:	4b1b      	ldr	r3, [pc, #108]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2201      	movs	r2, #1
 8002044:	4393      	bics	r3, r2
 8002046:	0019      	movs	r1, r3
 8002048:	4b18      	ldr	r3, [pc, #96]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002050:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x184>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2201      	movs	r2, #1
 8002056:	4013      	ands	r3, r2
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e020      	b.n	80020a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2204      	movs	r2, #4
 8002068:	4013      	ands	r3, r2
 800206a:	d009      	beq.n	8002080 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800206c:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_RCC_ClockConfig+0x190>)
 8002072:	4013      	ands	r3, r2
 8002074:	0019      	movs	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68da      	ldr	r2, [r3, #12]
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 800207c:	430a      	orrs	r2, r1
 800207e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002080:	f000 f820 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002084:	0001      	movs	r1, r0
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_RCC_ClockConfig+0x188>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	220f      	movs	r2, #15
 800208e:	4013      	ands	r3, r2
 8002090:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <HAL_RCC_ClockConfig+0x194>)
 8002092:	5cd3      	ldrb	r3, [r2, r3]
 8002094:	000a      	movs	r2, r1
 8002096:	40da      	lsrs	r2, r3
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x198>)
 800209a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800209c:	2003      	movs	r0, #3
 800209e:	f7ff f973 	bl	8001388 <HAL_InitTick>
  
  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	0018      	movs	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b004      	add	sp, #16
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40022000 	.word	0x40022000
 80020b0:	40021000 	.word	0x40021000
 80020b4:	00001388 	.word	0x00001388
 80020b8:	fffff8ff 	.word	0xfffff8ff
 80020bc:	08004a84 	.word	0x08004a84
 80020c0:	200000b8 	.word	0x200000b8

080020c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b08f      	sub	sp, #60	; 0x3c
 80020c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80020ca:	2314      	movs	r3, #20
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	4a2b      	ldr	r2, [pc, #172]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020d2:	c313      	stmia	r3!, {r0, r1, r4}
 80020d4:	6812      	ldr	r2, [r2, #0]
 80020d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80020d8:	1d3b      	adds	r3, r7, #4
 80020da:	4a29      	ldr	r2, [pc, #164]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80020de:	c313      	stmia	r3!, {r0, r1, r4}
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020e8:	2300      	movs	r3, #0
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ec:	2300      	movs	r3, #0
 80020ee:	637b      	str	r3, [r7, #52]	; 0x34
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	220c      	movs	r2, #12
 8002102:	4013      	ands	r3, r2
 8002104:	2b04      	cmp	r3, #4
 8002106:	d002      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x4a>
 8002108:	2b08      	cmp	r3, #8
 800210a:	d003      	beq.n	8002114 <HAL_RCC_GetSysClockFreq+0x50>
 800210c:	e02d      	b.n	800216a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002112:	e02d      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002116:	0c9b      	lsrs	r3, r3, #18
 8002118:	220f      	movs	r2, #15
 800211a:	4013      	ands	r3, r2
 800211c:	2214      	movs	r2, #20
 800211e:	18ba      	adds	r2, r7, r2
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002124:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	220f      	movs	r2, #15
 800212a:	4013      	ands	r3, r2
 800212c:	1d3a      	adds	r2, r7, #4
 800212e:	5cd3      	ldrb	r3, [r2, r3]
 8002130:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	025b      	lsls	r3, r3, #9
 8002138:	4013      	ands	r3, r2
 800213a:	d009      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800213c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800213e:	4812      	ldr	r0, [pc, #72]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002140:	f7fd ffec 	bl	800011c <__udivsi3>
 8002144:	0003      	movs	r3, r0
 8002146:	001a      	movs	r2, r3
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	4353      	muls	r3, r2
 800214c:	637b      	str	r3, [r7, #52]	; 0x34
 800214e:	e009      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002152:	000a      	movs	r2, r1
 8002154:	0152      	lsls	r2, r2, #5
 8002156:	1a52      	subs	r2, r2, r1
 8002158:	0193      	lsls	r3, r2, #6
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	185b      	adds	r3, r3, r1
 8002160:	021b      	lsls	r3, r3, #8
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002168:	e002      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_RCC_GetSysClockFreq+0xc4>)
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800216e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b00f      	add	sp, #60	; 0x3c
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	08004a48 	.word	0x08004a48
 8002180:	08004a58 	.word	0x08004a58
 8002184:	40021000 	.word	0x40021000
 8002188:	007a1200 	.word	0x007a1200

0800218c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b02      	ldr	r3, [pc, #8]	; (800219c <HAL_RCC_GetHCLKFreq+0x10>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	0018      	movs	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	200000b8 	.word	0x200000b8

080021a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80021a4:	f7ff fff2 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021a8:	0001      	movs	r1, r0
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	2207      	movs	r2, #7
 80021b2:	4013      	ands	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b6:	5cd3      	ldrb	r3, [r2, r3]
 80021b8:	40d9      	lsrs	r1, r3
 80021ba:	000b      	movs	r3, r1
}    
 80021bc:	0018      	movs	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004a94 	.word	0x08004a94

080021cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e0a8      	b.n	8002330 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d109      	bne.n	80021fa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	2382      	movs	r3, #130	; 0x82
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d009      	beq.n	8002206 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	61da      	str	r2, [r3, #28]
 80021f8:	e005      	b.n	8002206 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	225d      	movs	r2, #93	; 0x5d
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	d107      	bne.n	8002228 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	225c      	movs	r2, #92	; 0x5c
 800221c:	2100      	movs	r1, #0
 800221e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	0018      	movs	r0, r3
 8002224:	f7fe ff00 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	225d      	movs	r2, #93	; 0x5d
 800222c:	2102      	movs	r1, #2
 800222e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	23e0      	movs	r3, #224	; 0xe0
 8002246:	00db      	lsls	r3, r3, #3
 8002248:	429a      	cmp	r2, r3
 800224a:	d902      	bls.n	8002252 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e002      	b.n	8002258 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	23f0      	movs	r3, #240	; 0xf0
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	429a      	cmp	r2, r3
 8002262:	d008      	beq.n	8002276 <HAL_SPI_Init+0xaa>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68da      	ldr	r2, [r3, #12]
 8002268:	23e0      	movs	r3, #224	; 0xe0
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	429a      	cmp	r2, r3
 800226e:	d002      	beq.n	8002276 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	2382      	movs	r3, #130	; 0x82
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	401a      	ands	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	2384      	movs	r3, #132	; 0x84
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	400b      	ands	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2102      	movs	r1, #2
 8002292:	400b      	ands	r3, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	2101      	movs	r1, #1
 800229c:	400b      	ands	r3, r1
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6999      	ldr	r1, [r3, #24]
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	400b      	ands	r3, r1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2138      	movs	r1, #56	; 0x38
 80022b2:	400b      	ands	r3, r1
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a1b      	ldr	r3, [r3, #32]
 80022ba:	2180      	movs	r1, #128	; 0x80
 80022bc:	400b      	ands	r3, r1
 80022be:	431a      	orrs	r2, r3
 80022c0:	0011      	movs	r1, r2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	019b      	lsls	r3, r3, #6
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	2204      	movs	r2, #4
 80022dc:	401a      	ands	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	2110      	movs	r1, #16
 80022e4:	400b      	ands	r3, r1
 80022e6:	431a      	orrs	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	2108      	movs	r1, #8
 80022ee:	400b      	ands	r3, r1
 80022f0:	431a      	orrs	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68d9      	ldr	r1, [r3, #12]
 80022f6:	23f0      	movs	r3, #240	; 0xf0
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	400b      	ands	r3, r1
 80022fc:	431a      	orrs	r2, r3
 80022fe:	0011      	movs	r1, r2
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	015b      	lsls	r3, r3, #5
 8002306:	401a      	ands	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4907      	ldr	r1, [pc, #28]	; (8002338 <HAL_SPI_Init+0x16c>)
 800231c:	400a      	ands	r2, r1
 800231e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	225d      	movs	r2, #93	; 0x5d
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b004      	add	sp, #16
 8002336:	bd80      	pop	{r7, pc}
 8002338:	fffff7ff 	.word	0xfffff7ff

0800233c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	1dbb      	adds	r3, r7, #6
 800234a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800234c:	231f      	movs	r3, #31
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	225c      	movs	r2, #92	; 0x5c
 8002358:	5c9b      	ldrb	r3, [r3, r2]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d101      	bne.n	8002362 <HAL_SPI_Transmit+0x26>
 800235e:	2302      	movs	r3, #2
 8002360:	e140      	b.n	80025e4 <HAL_SPI_Transmit+0x2a8>
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	225c      	movs	r2, #92	; 0x5c
 8002366:	2101      	movs	r1, #1
 8002368:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800236a:	f7ff f853 	bl	8001414 <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002372:	2316      	movs	r3, #22
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	1dba      	adds	r2, r7, #6
 8002378:	8812      	ldrh	r2, [r2, #0]
 800237a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	225d      	movs	r2, #93	; 0x5d
 8002380:	5c9b      	ldrb	r3, [r3, r2]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d004      	beq.n	8002392 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002388:	231f      	movs	r3, #31
 800238a:	18fb      	adds	r3, r7, r3
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002390:	e11d      	b.n	80025ce <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_SPI_Transmit+0x64>
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	881b      	ldrh	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d104      	bne.n	80023aa <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2201      	movs	r2, #1
 80023a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80023a8:	e111      	b.n	80025ce <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	225d      	movs	r2, #93	; 0x5d
 80023ae:	2103      	movs	r1, #3
 80023b0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1dba      	adds	r2, r7, #6
 80023c2:	8812      	ldrh	r2, [r2, #0]
 80023c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	1dba      	adds	r2, r7, #6
 80023ca:	8812      	ldrh	r2, [r2, #0]
 80023cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2244      	movs	r2, #68	; 0x44
 80023d8:	2100      	movs	r1, #0
 80023da:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2246      	movs	r2, #70	; 0x46
 80023e0:	2100      	movs	r1, #0
 80023e2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	021b      	lsls	r3, r3, #8
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d110      	bne.n	800241e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2140      	movs	r1, #64	; 0x40
 8002408:	438a      	bics	r2, r1
 800240a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2180      	movs	r1, #128	; 0x80
 8002418:	01c9      	lsls	r1, r1, #7
 800241a:	430a      	orrs	r2, r1
 800241c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	4013      	ands	r3, r2
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d007      	beq.n	800243c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2140      	movs	r1, #64	; 0x40
 8002438:	430a      	orrs	r2, r1
 800243a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68da      	ldr	r2, [r3, #12]
 8002440:	23e0      	movs	r3, #224	; 0xe0
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	429a      	cmp	r2, r3
 8002446:	d94e      	bls.n	80024e6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_SPI_Transmit+0x11e>
 8002450:	2316      	movs	r3, #22
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d13f      	bne.n	80024da <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800245e:	881a      	ldrh	r2, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246a:	1c9a      	adds	r2, r3, #2
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002474:	b29b      	uxth	r3, r3
 8002476:	3b01      	subs	r3, #1
 8002478:	b29a      	uxth	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800247e:	e02c      	b.n	80024da <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2202      	movs	r2, #2
 8002488:	4013      	ands	r3, r2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d112      	bne.n	80024b4 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	1c9a      	adds	r2, r3, #2
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	3b01      	subs	r3, #1
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024b2:	e012      	b.n	80024da <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024b4:	f7fe ffae 	bl	8001414 <HAL_GetTick>
 80024b8:	0002      	movs	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d802      	bhi.n	80024ca <HAL_SPI_Transmit+0x18e>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	d102      	bne.n	80024d0 <HAL_SPI_Transmit+0x194>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80024d0:	231f      	movs	r3, #31
 80024d2:	18fb      	adds	r3, r7, r3
 80024d4:	2203      	movs	r2, #3
 80024d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80024d8:	e079      	b.n	80025ce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024de:	b29b      	uxth	r3, r3
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1cd      	bne.n	8002480 <HAL_SPI_Transmit+0x144>
 80024e4:	e04f      	b.n	8002586 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d004      	beq.n	80024f8 <HAL_SPI_Transmit+0x1bc>
 80024ee:	2316      	movs	r3, #22
 80024f0:	18fb      	adds	r3, r7, r3
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d141      	bne.n	800257c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	330c      	adds	r3, #12
 8002502:	7812      	ldrb	r2, [r2, #0]
 8002504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	1c5a      	adds	r2, r3, #1
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002514:	b29b      	uxth	r3, r3
 8002516:	3b01      	subs	r3, #1
 8002518:	b29a      	uxth	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800251e:	e02d      	b.n	800257c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2202      	movs	r2, #2
 8002528:	4013      	ands	r3, r2
 800252a:	2b02      	cmp	r3, #2
 800252c:	d113      	bne.n	8002556 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	7812      	ldrb	r2, [r2, #0]
 800253a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	1c5a      	adds	r2, r3, #1
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002554:	e012      	b.n	800257c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002556:	f7fe ff5d 	bl	8001414 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d802      	bhi.n	800256c <HAL_SPI_Transmit+0x230>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	d102      	bne.n	8002572 <HAL_SPI_Transmit+0x236>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002572:	231f      	movs	r3, #31
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	2203      	movs	r2, #3
 8002578:	701a      	strb	r2, [r3, #0]
          goto error;
 800257a:	e028      	b.n	80025ce <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1cc      	bne.n	8002520 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	6839      	ldr	r1, [r7, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 fcd9 	bl	8002f44 <SPI_EndRxTxTransaction>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d002      	beq.n	800259c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d10a      	bne.n	80025ba <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025a4:	2300      	movs	r3, #0
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d004      	beq.n	80025cc <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80025c2:	231f      	movs	r3, #31
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	e000      	b.n	80025ce <HAL_SPI_Transmit+0x292>
  }

error:
 80025cc:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	225d      	movs	r2, #93	; 0x5d
 80025d2:	2101      	movs	r1, #1
 80025d4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	225c      	movs	r2, #92	; 0x5c
 80025da:	2100      	movs	r1, #0
 80025dc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025de:	231f      	movs	r3, #31
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	781b      	ldrb	r3, [r3, #0]
}
 80025e4:	0018      	movs	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	b008      	add	sp, #32
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	603b      	str	r3, [r7, #0]
 80025f8:	1dbb      	adds	r3, r7, #6
 80025fa:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025fc:	2317      	movs	r3, #23
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	2382      	movs	r3, #130	; 0x82
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	429a      	cmp	r2, r3
 800260e:	d113      	bne.n	8002638 <HAL_SPI_Receive+0x4c>
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10f      	bne.n	8002638 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	225d      	movs	r2, #93	; 0x5d
 800261c:	2104      	movs	r1, #4
 800261e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002620:	1dbb      	adds	r3, r7, #6
 8002622:	881c      	ldrh	r4, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	68b9      	ldr	r1, [r7, #8]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	0023      	movs	r3, r4
 8002630:	f000 f928 	bl	8002884 <HAL_SPI_TransmitReceive>
 8002634:	0003      	movs	r3, r0
 8002636:	e11c      	b.n	8002872 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	225c      	movs	r2, #92	; 0x5c
 800263c:	5c9b      	ldrb	r3, [r3, r2]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_SPI_Receive+0x5a>
 8002642:	2302      	movs	r3, #2
 8002644:	e115      	b.n	8002872 <HAL_SPI_Receive+0x286>
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	225c      	movs	r2, #92	; 0x5c
 800264a:	2101      	movs	r1, #1
 800264c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800264e:	f7fe fee1 	bl	8001414 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	225d      	movs	r2, #93	; 0x5d
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d004      	beq.n	800266c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002662:	2317      	movs	r3, #23
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
    goto error;
 800266a:	e0f7      	b.n	800285c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_SPI_Receive+0x8e>
 8002672:	1dbb      	adds	r3, r7, #6
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d104      	bne.n	8002684 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800267a:	2317      	movs	r3, #23
 800267c:	18fb      	adds	r3, r7, r3
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
    goto error;
 8002682:	e0eb      	b.n	800285c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	225d      	movs	r2, #93	; 0x5d
 8002688:	2104      	movs	r1, #4
 800268a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1dba      	adds	r2, r7, #6
 800269c:	2144      	movs	r1, #68	; 0x44
 800269e:	8812      	ldrh	r2, [r2, #0]
 80026a0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1dba      	adds	r2, r7, #6
 80026a6:	2146      	movs	r1, #70	; 0x46
 80026a8:	8812      	ldrh	r2, [r2, #0]
 80026aa:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	2200      	movs	r2, #0
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2200      	movs	r2, #0
 80026b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	23e0      	movs	r3, #224	; 0xe0
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d908      	bls.n	80026e8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4966      	ldr	r1, [pc, #408]	; (800287c <HAL_SPI_Receive+0x290>)
 80026e2:	400a      	ands	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e008      	b.n	80026fa <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	0149      	lsls	r1, r1, #5
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	2380      	movs	r3, #128	; 0x80
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	429a      	cmp	r2, r3
 8002704:	d10f      	bne.n	8002726 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2140      	movs	r1, #64	; 0x40
 8002712:	438a      	bics	r2, r1
 8002714:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4957      	ldr	r1, [pc, #348]	; (8002880 <HAL_SPI_Receive+0x294>)
 8002722:	400a      	ands	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2240      	movs	r2, #64	; 0x40
 800272e:	4013      	ands	r3, r2
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d007      	beq.n	8002744 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2140      	movs	r1, #64	; 0x40
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	23e0      	movs	r3, #224	; 0xe0
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	429a      	cmp	r2, r3
 800274e:	d900      	bls.n	8002752 <HAL_SPI_Receive+0x166>
 8002750:	e069      	b.n	8002826 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002752:	e031      	b.n	80027b8 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2201      	movs	r2, #1
 800275c:	4013      	ands	r3, r2
 800275e:	2b01      	cmp	r3, #1
 8002760:	d117      	bne.n	8002792 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	330c      	adds	r3, #12
 8002768:	001a      	movs	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	7812      	ldrb	r2, [r2, #0]
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2246      	movs	r2, #70	; 0x46
 8002782:	5a9b      	ldrh	r3, [r3, r2]
 8002784:	b29b      	uxth	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b299      	uxth	r1, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2246      	movs	r2, #70	; 0x46
 800278e:	5299      	strh	r1, [r3, r2]
 8002790:	e012      	b.n	80027b8 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002792:	f7fe fe3f 	bl	8001414 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d802      	bhi.n	80027a8 <HAL_SPI_Receive+0x1bc>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	3301      	adds	r3, #1
 80027a6:	d102      	bne.n	80027ae <HAL_SPI_Receive+0x1c2>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d104      	bne.n	80027b8 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80027ae:	2317      	movs	r3, #23
 80027b0:	18fb      	adds	r3, r7, r3
 80027b2:	2203      	movs	r2, #3
 80027b4:	701a      	strb	r2, [r3, #0]
          goto error;
 80027b6:	e051      	b.n	800285c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2246      	movs	r2, #70	; 0x46
 80027bc:	5a9b      	ldrh	r3, [r3, r2]
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1c7      	bne.n	8002754 <HAL_SPI_Receive+0x168>
 80027c4:	e035      	b.n	8002832 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d115      	bne.n	8002800 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68da      	ldr	r2, [r3, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	b292      	uxth	r2, r2
 80027e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e6:	1c9a      	adds	r2, r3, #2
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2246      	movs	r2, #70	; 0x46
 80027f0:	5a9b      	ldrh	r3, [r3, r2]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b299      	uxth	r1, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2246      	movs	r2, #70	; 0x46
 80027fc:	5299      	strh	r1, [r3, r2]
 80027fe:	e012      	b.n	8002826 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002800:	f7fe fe08 	bl	8001414 <HAL_GetTick>
 8002804:	0002      	movs	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	429a      	cmp	r2, r3
 800280e:	d802      	bhi.n	8002816 <HAL_SPI_Receive+0x22a>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	3301      	adds	r3, #1
 8002814:	d102      	bne.n	800281c <HAL_SPI_Receive+0x230>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d104      	bne.n	8002826 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800281c:	2317      	movs	r3, #23
 800281e:	18fb      	adds	r3, r7, r3
 8002820:	2203      	movs	r2, #3
 8002822:	701a      	strb	r2, [r3, #0]
          goto error;
 8002824:	e01a      	b.n	800285c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2246      	movs	r2, #70	; 0x46
 800282a:	5a9b      	ldrh	r3, [r3, r2]
 800282c:	b29b      	uxth	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1c9      	bne.n	80027c6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	6839      	ldr	r1, [r7, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fb25 	bl	8002e88 <SPI_EndRxTransaction>
 800283e:	1e03      	subs	r3, r0, #0
 8002840:	d002      	beq.n	8002848 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002850:	2317      	movs	r3, #23
 8002852:	18fb      	adds	r3, r7, r3
 8002854:	2201      	movs	r2, #1
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e000      	b.n	800285c <HAL_SPI_Receive+0x270>
  }

error :
 800285a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	225d      	movs	r2, #93	; 0x5d
 8002860:	2101      	movs	r1, #1
 8002862:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	225c      	movs	r2, #92	; 0x5c
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800286c:	2317      	movs	r3, #23
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	781b      	ldrb	r3, [r3, #0]
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b007      	add	sp, #28
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	ffffefff 	.word	0xffffefff
 8002880:	ffffbfff 	.word	0xffffbfff

08002884 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08a      	sub	sp, #40	; 0x28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	001a      	movs	r2, r3
 8002892:	1cbb      	adds	r3, r7, #2
 8002894:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800289a:	2323      	movs	r3, #35	; 0x23
 800289c:	18fb      	adds	r3, r7, r3
 800289e:	2200      	movs	r2, #0
 80028a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	225c      	movs	r2, #92	; 0x5c
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_SPI_TransmitReceive+0x2c>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e1b5      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x398>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	225c      	movs	r2, #92	; 0x5c
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028b8:	f7fe fdac 	bl	8001414 <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80028c0:	201b      	movs	r0, #27
 80028c2:	183b      	adds	r3, r7, r0
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	215d      	movs	r1, #93	; 0x5d
 80028c8:	5c52      	ldrb	r2, [r2, r1]
 80028ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80028d2:	2312      	movs	r3, #18
 80028d4:	18fb      	adds	r3, r7, r3
 80028d6:	1cba      	adds	r2, r7, #2
 80028d8:	8812      	ldrh	r2, [r2, #0]
 80028da:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028dc:	183b      	adds	r3, r7, r0
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d011      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x84>
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	2382      	movs	r3, #130	; 0x82
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d107      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_SPI_TransmitReceive+0x7a>
 80028f6:	183b      	adds	r3, r7, r0
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d004      	beq.n	8002908 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80028fe:	2323      	movs	r3, #35	; 0x23
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2202      	movs	r2, #2
 8002904:	701a      	strb	r2, [r3, #0]
    goto error;
 8002906:	e17e      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d006      	beq.n	800291c <HAL_SPI_TransmitReceive+0x98>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <HAL_SPI_TransmitReceive+0x98>
 8002914:	1cbb      	adds	r3, r7, #2
 8002916:	881b      	ldrh	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800291c:	2323      	movs	r3, #35	; 0x23
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
    goto error;
 8002924:	e16f      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	225d      	movs	r2, #93	; 0x5d
 800292a:	5c9b      	ldrb	r3, [r3, r2]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b04      	cmp	r3, #4
 8002930:	d003      	beq.n	800293a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	225d      	movs	r2, #93	; 0x5d
 8002936:	2105      	movs	r1, #5
 8002938:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1cba      	adds	r2, r7, #2
 800294a:	2146      	movs	r1, #70	; 0x46
 800294c:	8812      	ldrh	r2, [r2, #0]
 800294e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	1cba      	adds	r2, r7, #2
 8002954:	2144      	movs	r1, #68	; 0x44
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	1cba      	adds	r2, r7, #2
 8002964:	8812      	ldrh	r2, [r2, #0]
 8002966:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1cba      	adds	r2, r7, #2
 800296c:	8812      	ldrh	r2, [r2, #0]
 800296e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	68da      	ldr	r2, [r3, #12]
 8002980:	23e0      	movs	r3, #224	; 0xe0
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	429a      	cmp	r2, r3
 8002986:	d908      	bls.n	800299a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	49a4      	ldr	r1, [pc, #656]	; (8002c24 <HAL_SPI_TransmitReceive+0x3a0>)
 8002994:	400a      	ands	r2, r1
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	e008      	b.n	80029ac <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2180      	movs	r1, #128	; 0x80
 80029a6:	0149      	lsls	r1, r1, #5
 80029a8:	430a      	orrs	r2, r1
 80029aa:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	4013      	ands	r3, r2
 80029b6:	2b40      	cmp	r3, #64	; 0x40
 80029b8:	d007      	beq.n	80029ca <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	23e0      	movs	r3, #224	; 0xe0
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d800      	bhi.n	80029d8 <HAL_SPI_TransmitReceive+0x154>
 80029d6:	e07f      	b.n	8002ad8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x168>
 80029e0:	2312      	movs	r3, #18
 80029e2:	18fb      	adds	r3, r7, r3
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d000      	beq.n	80029ec <HAL_SPI_TransmitReceive+0x168>
 80029ea:	e069      	b.n	8002ac0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f0:	881a      	ldrh	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	1c9a      	adds	r2, r3, #2
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	e056      	b.n	8002ac0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d11b      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x1d4>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d016      	beq.n	8002a58 <HAL_SPI_TransmitReceive+0x1d4>
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d113      	bne.n	8002a58 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a34:	881a      	ldrh	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	1c9a      	adds	r2, r3, #2
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d11c      	bne.n	8002aa0 <HAL_SPI_TransmitReceive+0x21c>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2246      	movs	r2, #70	; 0x46
 8002a6a:	5a9b      	ldrh	r3, [r3, r2]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	b292      	uxth	r2, r2
 8002a7e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	1c9a      	adds	r2, r3, #2
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2246      	movs	r2, #70	; 0x46
 8002a8e:	5a9b      	ldrh	r3, [r3, r2]
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b299      	uxth	r1, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2246      	movs	r2, #70	; 0x46
 8002a9a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002aa0:	f7fe fcb8 	bl	8001414 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d807      	bhi.n	8002ac0 <HAL_SPI_TransmitReceive+0x23c>
 8002ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	d004      	beq.n	8002ac0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002ab6:	2323      	movs	r3, #35	; 0x23
 8002ab8:	18fb      	adds	r3, r7, r3
 8002aba:	2203      	movs	r2, #3
 8002abc:	701a      	strb	r2, [r3, #0]
        goto error;
 8002abe:	e0a2      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d1a3      	bne.n	8002a12 <HAL_SPI_TransmitReceive+0x18e>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2246      	movs	r2, #70	; 0x46
 8002ace:	5a9b      	ldrh	r3, [r3, r2]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d19d      	bne.n	8002a12 <HAL_SPI_TransmitReceive+0x18e>
 8002ad6:	e085      	b.n	8002be4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d005      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x268>
 8002ae0:	2312      	movs	r3, #18
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d000      	beq.n	8002aec <HAL_SPI_TransmitReceive+0x268>
 8002aea:	e070      	b.n	8002bce <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	330c      	adds	r3, #12
 8002af6:	7812      	ldrb	r2, [r2, #0]
 8002af8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b12:	e05c      	b.n	8002bce <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d11c      	bne.n	8002b5c <HAL_SPI_TransmitReceive+0x2d8>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_SPI_TransmitReceive+0x2d8>
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d114      	bne.n	8002b5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	7812      	ldrb	r2, [r2, #0]
 8002b3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	2201      	movs	r2, #1
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d11e      	bne.n	8002ba8 <HAL_SPI_TransmitReceive+0x324>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2246      	movs	r2, #70	; 0x46
 8002b6e:	5a9b      	ldrh	r3, [r3, r2]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d018      	beq.n	8002ba8 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	330c      	adds	r3, #12
 8002b7c:	001a      	movs	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	7812      	ldrb	r2, [r2, #0]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2246      	movs	r2, #70	; 0x46
 8002b96:	5a9b      	ldrh	r3, [r3, r2]
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b299      	uxth	r1, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2246      	movs	r2, #70	; 0x46
 8002ba2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ba8:	f7fe fc34 	bl	8001414 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <HAL_SPI_TransmitReceive+0x33a>
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	3301      	adds	r3, #1
 8002bbc:	d102      	bne.n	8002bc4 <HAL_SPI_TransmitReceive+0x340>
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d104      	bne.n	8002bce <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002bc4:	2323      	movs	r3, #35	; 0x23
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2203      	movs	r2, #3
 8002bca:	701a      	strb	r2, [r3, #0]
        goto error;
 8002bcc:	e01b      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d19d      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x290>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2246      	movs	r2, #70	; 0x46
 8002bdc:	5a9b      	ldrh	r3, [r3, r2]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d197      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 f9aa 	bl	8002f44 <SPI_EndRxTxTransaction>
 8002bf0:	1e03      	subs	r3, r0, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002bf4:	2323      	movs	r3, #35	; 0x23
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60
 8002c02:	e000      	b.n	8002c06 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002c04:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	225d      	movs	r2, #93	; 0x5d
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	225c      	movs	r2, #92	; 0x5c
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002c16:	2323      	movs	r3, #35	; 0x23
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	781b      	ldrb	r3, [r3, #0]
}
 8002c1c:	0018      	movs	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	b00a      	add	sp, #40	; 0x28
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	ffffefff 	.word	0xffffefff

08002c28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b088      	sub	sp, #32
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	603b      	str	r3, [r7, #0]
 8002c34:	1dfb      	adds	r3, r7, #7
 8002c36:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c38:	f7fe fbec 	bl	8001414 <HAL_GetTick>
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	18d3      	adds	r3, r2, r3
 8002c46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c48:	f7fe fbe4 	bl	8001414 <HAL_GetTick>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c50:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	015b      	lsls	r3, r3, #5
 8002c56:	0d1b      	lsrs	r3, r3, #20
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	4353      	muls	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5e:	e058      	b.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	d055      	beq.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c66:	f7fe fbd5 	bl	8001414 <HAL_GetTick>
 8002c6a:	0002      	movs	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d902      	bls.n	8002c7c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d142      	bne.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	21e0      	movs	r1, #224	; 0xe0
 8002c88:	438a      	bics	r2, r1
 8002c8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	2382      	movs	r3, #130	; 0x82
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d113      	bne.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	2380      	movs	r3, #128	; 0x80
 8002c9e:	021b      	lsls	r3, r3, #8
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d005      	beq.n	8002cb0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	689a      	ldr	r2, [r3, #8]
 8002ca8:	2380      	movs	r3, #128	; 0x80
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d107      	bne.n	8002cc0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	438a      	bics	r2, r1
 8002cbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cc4:	2380      	movs	r3, #128	; 0x80
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d110      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	491a      	ldr	r1, [pc, #104]	; (8002d40 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2180      	movs	r1, #128	; 0x80
 8002ce8:	0189      	lsls	r1, r1, #6
 8002cea:	430a      	orrs	r2, r1
 8002cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	225d      	movs	r2, #93	; 0x5d
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	225c      	movs	r2, #92	; 0x5c
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e017      	b.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	425a      	negs	r2, r3
 8002d22:	4153      	adcs	r3, r2
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	001a      	movs	r2, r3
 8002d28:	1dfb      	adds	r3, r7, #7
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d197      	bne.n	8002c60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	0018      	movs	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b008      	add	sp, #32
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	200000b8 	.word	0x200000b8
 8002d40:	ffffdfff 	.word	0xffffdfff

08002d44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
 8002d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002d52:	2317      	movs	r3, #23
 8002d54:	18fb      	adds	r3, r7, r3
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d5a:	f7fe fb5b 	bl	8001414 <HAL_GetTick>
 8002d5e:	0002      	movs	r2, r0
 8002d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	18d3      	adds	r3, r2, r3
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d6a:	f7fe fb53 	bl	8001414 <HAL_GetTick>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d7a:	4b41      	ldr	r3, [pc, #260]	; (8002e80 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	0013      	movs	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	00da      	lsls	r2, r3, #3
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	0d1b      	lsrs	r3, r3, #20
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	4353      	muls	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d90:	e068      	b.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	23c0      	movs	r3, #192	; 0xc0
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d10a      	bne.n	8002db2 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d107      	bne.n	8002db2 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	2117      	movs	r1, #23
 8002daa:	187b      	adds	r3, r7, r1
 8002dac:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dae:	187b      	adds	r3, r7, r1
 8002db0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	3301      	adds	r3, #1
 8002db6:	d055      	beq.n	8002e64 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002db8:	f7fe fb2c 	bl	8001414 <HAL_GetTick>
 8002dbc:	0002      	movs	r2, r0
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d902      	bls.n	8002dce <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d142      	bne.n	8002e54 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	685a      	ldr	r2, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	21e0      	movs	r1, #224	; 0xe0
 8002dda:	438a      	bics	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685a      	ldr	r2, [r3, #4]
 8002de2:	2382      	movs	r3, #130	; 0x82
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d113      	bne.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	021b      	lsls	r3, r3, #8
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d005      	beq.n	8002e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	2380      	movs	r3, #128	; 0x80
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d107      	bne.n	8002e12 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	438a      	bics	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d110      	bne.n	8002e40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	0189      	lsls	r1, r1, #6
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	225d      	movs	r2, #93	; 0x5d
 8002e44:	2101      	movs	r1, #1
 8002e46:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	225c      	movs	r2, #92	; 0x5c
 8002e4c:	2100      	movs	r1, #0
 8002e4e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e010      	b.n	8002e76 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3b01      	subs	r3, #1
 8002e62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d18e      	bne.n	8002d92 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b00a      	add	sp, #40	; 0x28
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	200000b8 	.word	0x200000b8
 8002e84:	ffffdfff 	.word	0xffffdfff

08002e88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	2382      	movs	r3, #130	; 0x82
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d113      	bne.n	8002ec8 <SPI_EndRxTransaction+0x40>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	021b      	lsls	r3, r3, #8
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d005      	beq.n	8002eb8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d107      	bne.n	8002ec8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2140      	movs	r1, #64	; 0x40
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	0013      	movs	r3, r2
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	f7ff fea7 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002eda:	1e03      	subs	r3, r0, #0
 8002edc:	d007      	beq.n	8002eee <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e026      	b.n	8002f3c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	2382      	movs	r3, #130	; 0x82
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d11f      	bne.n	8002f3a <SPI_EndRxTransaction+0xb2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d005      	beq.n	8002f12 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d113      	bne.n	8002f3a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	23c0      	movs	r3, #192	; 0xc0
 8002f16:	00d9      	lsls	r1, r3, #3
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	0013      	movs	r3, r2
 8002f20:	2200      	movs	r2, #0
 8002f22:	f7ff ff0f 	bl	8002d44 <SPI_WaitFifoStateUntilTimeout>
 8002f26:	1e03      	subs	r3, r0, #0
 8002f28:	d007      	beq.n	8002f3a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f2e:	2220      	movs	r2, #32
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e000      	b.n	8002f3c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b004      	add	sp, #16
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af02      	add	r7, sp, #8
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	23c0      	movs	r3, #192	; 0xc0
 8002f54:	0159      	lsls	r1, r3, #5
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	0013      	movs	r3, r2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f7ff fef0 	bl	8002d44 <SPI_WaitFifoStateUntilTimeout>
 8002f64:	1e03      	subs	r3, r0, #0
 8002f66:	d007      	beq.n	8002f78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e027      	b.n	8002fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	0013      	movs	r3, r2
 8002f82:	2200      	movs	r2, #0
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	f7ff fe4f 	bl	8002c28 <SPI_WaitFlagStateUntilTimeout>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d007      	beq.n	8002f9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f92:	2220      	movs	r2, #32
 8002f94:	431a      	orrs	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e014      	b.n	8002fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	23c0      	movs	r3, #192	; 0xc0
 8002fa2:	00d9      	lsls	r1, r3, #3
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	0013      	movs	r3, r2
 8002fac:	2200      	movs	r2, #0
 8002fae:	f7ff fec9 	bl	8002d44 <SPI_WaitFifoStateUntilTimeout>
 8002fb2:	1e03      	subs	r3, r0, #0
 8002fb4:	d007      	beq.n	8002fc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fba:	2220      	movs	r2, #32
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e000      	b.n	8002fc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	0018      	movs	r0, r3
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b004      	add	sp, #16
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e044      	b.n	800306c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d107      	bne.n	8002ffa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2274      	movs	r2, #116	; 0x74
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7fe f863 	bl	80010c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2224      	movs	r2, #36	; 0x24
 8002ffe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2101      	movs	r1, #1
 800300c:	438a      	bics	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f8da 	bl	80031cc <UART_SetConfig>
 8003018:	0003      	movs	r3, r0
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e024      	b.n	800306c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	0018      	movs	r0, r3
 800302e:	f000 fa0d 	bl	800344c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	490d      	ldr	r1, [pc, #52]	; (8003074 <HAL_UART_Init+0xa4>)
 800303e:	400a      	ands	r2, r1
 8003040:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2108      	movs	r1, #8
 800304e:	438a      	bics	r2, r1
 8003050:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	430a      	orrs	r2, r1
 8003060:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 faa5 	bl	80035b4 <UART_CheckIdleState>
 800306a:	0003      	movs	r3, r0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fffff7ff 	.word	0xfffff7ff

08003078 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	603b      	str	r3, [r7, #0]
 8003084:	1dbb      	adds	r3, r7, #6
 8003086:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800308c:	2b20      	cmp	r3, #32
 800308e:	d000      	beq.n	8003092 <HAL_UART_Transmit+0x1a>
 8003090:	e096      	b.n	80031c0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_UART_Transmit+0x28>
 8003098:	1dbb      	adds	r3, r7, #6
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d101      	bne.n	80030a4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e08e      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	015b      	lsls	r3, r3, #5
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d109      	bne.n	80030c4 <HAL_UART_Transmit+0x4c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d105      	bne.n	80030c4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	d001      	beq.n	80030c4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e07e      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2274      	movs	r2, #116	; 0x74
 80030c8:	5c9b      	ldrb	r3, [r3, r2]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d101      	bne.n	80030d2 <HAL_UART_Transmit+0x5a>
 80030ce:	2302      	movs	r3, #2
 80030d0:	e077      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2274      	movs	r2, #116	; 0x74
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2280      	movs	r2, #128	; 0x80
 80030de:	2100      	movs	r1, #0
 80030e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2221      	movs	r2, #33	; 0x21
 80030e6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e8:	f7fe f994 	bl	8001414 <HAL_GetTick>
 80030ec:	0003      	movs	r3, r0
 80030ee:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	1dba      	adds	r2, r7, #6
 80030f4:	2150      	movs	r1, #80	; 0x50
 80030f6:	8812      	ldrh	r2, [r2, #0]
 80030f8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1dba      	adds	r2, r7, #6
 80030fe:	2152      	movs	r1, #82	; 0x52
 8003100:	8812      	ldrh	r2, [r2, #0]
 8003102:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	015b      	lsls	r3, r3, #5
 800310c:	429a      	cmp	r2, r3
 800310e:	d108      	bne.n	8003122 <HAL_UART_Transmit+0xaa>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d104      	bne.n	8003122 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e003      	b.n	800312a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2274      	movs	r2, #116	; 0x74
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003132:	e02d      	b.n	8003190 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003134:	697a      	ldr	r2, [r7, #20]
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	0013      	movs	r3, r2
 800313e:	2200      	movs	r2, #0
 8003140:	2180      	movs	r1, #128	; 0x80
 8003142:	f000 fa7f 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003146:	1e03      	subs	r3, r0, #0
 8003148:	d001      	beq.n	800314e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e039      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10b      	bne.n	800316c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	05d2      	lsls	r2, r2, #23
 800315e:	0dd2      	lsrs	r2, r2, #23
 8003160:	b292      	uxth	r2, r2
 8003162:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	3302      	adds	r3, #2
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	e008      	b.n	800317e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	781a      	ldrb	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	b292      	uxth	r2, r2
 8003176:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3301      	adds	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2252      	movs	r2, #82	; 0x52
 8003182:	5a9b      	ldrh	r3, [r3, r2]
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b299      	uxth	r1, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2252      	movs	r2, #82	; 0x52
 800318e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2252      	movs	r2, #82	; 0x52
 8003194:	5a9b      	ldrh	r3, [r3, r2]
 8003196:	b29b      	uxth	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	d1cb      	bne.n	8003134 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	0013      	movs	r3, r2
 80031a6:	2200      	movs	r2, #0
 80031a8:	2140      	movs	r1, #64	; 0x40
 80031aa:	f000 fa4b 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 80031ae:	1e03      	subs	r3, r0, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e005      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e000      	b.n	80031c2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
  }
}
 80031c2:	0018      	movs	r0, r3
 80031c4:	46bd      	mov	sp, r7
 80031c6:	b008      	add	sp, #32
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031d4:	231e      	movs	r3, #30
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2200      	movs	r2, #0
 80031da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a8d      	ldr	r2, [pc, #564]	; (8003430 <UART_SetConfig+0x264>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a88      	ldr	r2, [pc, #544]	; (8003434 <UART_SetConfig+0x268>)
 8003212:	4013      	ands	r3, r2
 8003214:	0019      	movs	r1, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	4313      	orrs	r3, r2
 8003230:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a7f      	ldr	r2, [pc, #508]	; (8003438 <UART_SetConfig+0x26c>)
 800323a:	4013      	ands	r3, r2
 800323c:	0019      	movs	r1, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a7b      	ldr	r2, [pc, #492]	; (800343c <UART_SetConfig+0x270>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d127      	bne.n	80032a2 <UART_SetConfig+0xd6>
 8003252:	4b7b      	ldr	r3, [pc, #492]	; (8003440 <UART_SetConfig+0x274>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	2203      	movs	r2, #3
 8003258:	4013      	ands	r3, r2
 800325a:	2b03      	cmp	r3, #3
 800325c:	d00d      	beq.n	800327a <UART_SetConfig+0xae>
 800325e:	d81b      	bhi.n	8003298 <UART_SetConfig+0xcc>
 8003260:	2b02      	cmp	r3, #2
 8003262:	d014      	beq.n	800328e <UART_SetConfig+0xc2>
 8003264:	d818      	bhi.n	8003298 <UART_SetConfig+0xcc>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <UART_SetConfig+0xa4>
 800326a:	2b01      	cmp	r3, #1
 800326c:	d00a      	beq.n	8003284 <UART_SetConfig+0xb8>
 800326e:	e013      	b.n	8003298 <UART_SetConfig+0xcc>
 8003270:	231f      	movs	r3, #31
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e021      	b.n	80032be <UART_SetConfig+0xf2>
 800327a:	231f      	movs	r3, #31
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2202      	movs	r2, #2
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e01c      	b.n	80032be <UART_SetConfig+0xf2>
 8003284:	231f      	movs	r3, #31
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	2204      	movs	r2, #4
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e017      	b.n	80032be <UART_SetConfig+0xf2>
 800328e:	231f      	movs	r3, #31
 8003290:	18fb      	adds	r3, r7, r3
 8003292:	2208      	movs	r2, #8
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e012      	b.n	80032be <UART_SetConfig+0xf2>
 8003298:	231f      	movs	r3, #31
 800329a:	18fb      	adds	r3, r7, r3
 800329c:	2210      	movs	r2, #16
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e00d      	b.n	80032be <UART_SetConfig+0xf2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a67      	ldr	r2, [pc, #412]	; (8003444 <UART_SetConfig+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d104      	bne.n	80032b6 <UART_SetConfig+0xea>
 80032ac:	231f      	movs	r3, #31
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2200      	movs	r2, #0
 80032b2:	701a      	strb	r2, [r3, #0]
 80032b4:	e003      	b.n	80032be <UART_SetConfig+0xf2>
 80032b6:	231f      	movs	r3, #31
 80032b8:	18fb      	adds	r3, r7, r3
 80032ba:	2210      	movs	r2, #16
 80032bc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69da      	ldr	r2, [r3, #28]
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	021b      	lsls	r3, r3, #8
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d15d      	bne.n	8003386 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80032ca:	231f      	movs	r3, #31
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d015      	beq.n	8003300 <UART_SetConfig+0x134>
 80032d4:	dc18      	bgt.n	8003308 <UART_SetConfig+0x13c>
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	d00d      	beq.n	80032f6 <UART_SetConfig+0x12a>
 80032da:	dc15      	bgt.n	8003308 <UART_SetConfig+0x13c>
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <UART_SetConfig+0x11a>
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d005      	beq.n	80032f0 <UART_SetConfig+0x124>
 80032e4:	e010      	b.n	8003308 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032e6:	f7fe ff5b 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80032ea:	0003      	movs	r3, r0
 80032ec:	61bb      	str	r3, [r7, #24]
        break;
 80032ee:	e012      	b.n	8003316 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b55      	ldr	r3, [pc, #340]	; (8003448 <UART_SetConfig+0x27c>)
 80032f2:	61bb      	str	r3, [r7, #24]
        break;
 80032f4:	e00f      	b.n	8003316 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032f6:	f7fe fee5 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80032fa:	0003      	movs	r3, r0
 80032fc:	61bb      	str	r3, [r7, #24]
        break;
 80032fe:	e00a      	b.n	8003316 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	61bb      	str	r3, [r7, #24]
        break;
 8003306:	e006      	b.n	8003316 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800330c:	231e      	movs	r3, #30
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
        break;
 8003314:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d100      	bne.n	800331e <UART_SetConfig+0x152>
 800331c:	e07b      	b.n	8003416 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	005a      	lsls	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	18d2      	adds	r2, r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	0019      	movs	r1, r3
 8003330:	0010      	movs	r0, r2
 8003332:	f7fc fef3 	bl	800011c <__udivsi3>
 8003336:	0003      	movs	r3, r0
 8003338:	b29b      	uxth	r3, r3
 800333a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b0f      	cmp	r3, #15
 8003340:	d91c      	bls.n	800337c <UART_SetConfig+0x1b0>
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	2380      	movs	r3, #128	; 0x80
 8003346:	025b      	lsls	r3, r3, #9
 8003348:	429a      	cmp	r2, r3
 800334a:	d217      	bcs.n	800337c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	b29a      	uxth	r2, r3
 8003350:	200e      	movs	r0, #14
 8003352:	183b      	adds	r3, r7, r0
 8003354:	210f      	movs	r1, #15
 8003356:	438a      	bics	r2, r1
 8003358:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	2207      	movs	r2, #7
 8003362:	4013      	ands	r3, r2
 8003364:	b299      	uxth	r1, r3
 8003366:	183b      	adds	r3, r7, r0
 8003368:	183a      	adds	r2, r7, r0
 800336a:	8812      	ldrh	r2, [r2, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	183a      	adds	r2, r7, r0
 8003376:	8812      	ldrh	r2, [r2, #0]
 8003378:	60da      	str	r2, [r3, #12]
 800337a:	e04c      	b.n	8003416 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800337c:	231e      	movs	r3, #30
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]
 8003384:	e047      	b.n	8003416 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003386:	231f      	movs	r3, #31
 8003388:	18fb      	adds	r3, r7, r3
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b08      	cmp	r3, #8
 800338e:	d015      	beq.n	80033bc <UART_SetConfig+0x1f0>
 8003390:	dc18      	bgt.n	80033c4 <UART_SetConfig+0x1f8>
 8003392:	2b04      	cmp	r3, #4
 8003394:	d00d      	beq.n	80033b2 <UART_SetConfig+0x1e6>
 8003396:	dc15      	bgt.n	80033c4 <UART_SetConfig+0x1f8>
 8003398:	2b00      	cmp	r3, #0
 800339a:	d002      	beq.n	80033a2 <UART_SetConfig+0x1d6>
 800339c:	2b02      	cmp	r3, #2
 800339e:	d005      	beq.n	80033ac <UART_SetConfig+0x1e0>
 80033a0:	e010      	b.n	80033c4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033a2:	f7fe fefd 	bl	80021a0 <HAL_RCC_GetPCLK1Freq>
 80033a6:	0003      	movs	r3, r0
 80033a8:	61bb      	str	r3, [r7, #24]
        break;
 80033aa:	e012      	b.n	80033d2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ac:	4b26      	ldr	r3, [pc, #152]	; (8003448 <UART_SetConfig+0x27c>)
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e00f      	b.n	80033d2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b2:	f7fe fe87 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 80033b6:	0003      	movs	r3, r0
 80033b8:	61bb      	str	r3, [r7, #24]
        break;
 80033ba:	e00a      	b.n	80033d2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	61bb      	str	r3, [r7, #24]
        break;
 80033c2:	e006      	b.n	80033d2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033c8:	231e      	movs	r3, #30
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	2201      	movs	r2, #1
 80033ce:	701a      	strb	r2, [r3, #0]
        break;
 80033d0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01e      	beq.n	8003416 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	085a      	lsrs	r2, r3, #1
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	18d2      	adds	r2, r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0019      	movs	r1, r3
 80033e8:	0010      	movs	r0, r2
 80033ea:	f7fc fe97 	bl	800011c <__udivsi3>
 80033ee:	0003      	movs	r3, r0
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	d909      	bls.n	800340e <UART_SetConfig+0x242>
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	025b      	lsls	r3, r3, #9
 8003400:	429a      	cmp	r2, r3
 8003402:	d204      	bcs.n	800340e <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	60da      	str	r2, [r3, #12]
 800340c:	e003      	b.n	8003416 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800340e:	231e      	movs	r3, #30
 8003410:	18fb      	adds	r3, r7, r3
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003422:	231e      	movs	r3, #30
 8003424:	18fb      	adds	r3, r7, r3
 8003426:	781b      	ldrb	r3, [r3, #0]
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b008      	add	sp, #32
 800342e:	bd80      	pop	{r7, pc}
 8003430:	ffff69f3 	.word	0xffff69f3
 8003434:	ffffcfff 	.word	0xffffcfff
 8003438:	fffff4ff 	.word	0xfffff4ff
 800343c:	40013800 	.word	0x40013800
 8003440:	40021000 	.word	0x40021000
 8003444:	40004400 	.word	0x40004400
 8003448:	007a1200 	.word	0x007a1200

0800344c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	2201      	movs	r2, #1
 800345a:	4013      	ands	r3, r2
 800345c:	d00b      	beq.n	8003476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	4a4a      	ldr	r2, [pc, #296]	; (8003590 <UART_AdvFeatureConfig+0x144>)
 8003466:	4013      	ands	r3, r2
 8003468:	0019      	movs	r1, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2202      	movs	r2, #2
 800347c:	4013      	ands	r3, r2
 800347e:	d00b      	beq.n	8003498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	4a43      	ldr	r2, [pc, #268]	; (8003594 <UART_AdvFeatureConfig+0x148>)
 8003488:	4013      	ands	r3, r2
 800348a:	0019      	movs	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2204      	movs	r2, #4
 800349e:	4013      	ands	r3, r2
 80034a0:	d00b      	beq.n	80034ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	4a3b      	ldr	r2, [pc, #236]	; (8003598 <UART_AdvFeatureConfig+0x14c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034be:	2208      	movs	r2, #8
 80034c0:	4013      	ands	r3, r2
 80034c2:	d00b      	beq.n	80034dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a34      	ldr	r2, [pc, #208]	; (800359c <UART_AdvFeatureConfig+0x150>)
 80034cc:	4013      	ands	r3, r2
 80034ce:	0019      	movs	r1, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2210      	movs	r2, #16
 80034e2:	4013      	ands	r3, r2
 80034e4:	d00b      	beq.n	80034fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a2c      	ldr	r2, [pc, #176]	; (80035a0 <UART_AdvFeatureConfig+0x154>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	0019      	movs	r1, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	2220      	movs	r2, #32
 8003504:	4013      	ands	r3, r2
 8003506:	d00b      	beq.n	8003520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	4a25      	ldr	r2, [pc, #148]	; (80035a4 <UART_AdvFeatureConfig+0x158>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	2240      	movs	r2, #64	; 0x40
 8003526:	4013      	ands	r3, r2
 8003528:	d01d      	beq.n	8003566 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	4a1d      	ldr	r2, [pc, #116]	; (80035a8 <UART_AdvFeatureConfig+0x15c>)
 8003532:	4013      	ands	r3, r2
 8003534:	0019      	movs	r1, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003546:	2380      	movs	r3, #128	; 0x80
 8003548:	035b      	lsls	r3, r3, #13
 800354a:	429a      	cmp	r2, r3
 800354c:	d10b      	bne.n	8003566 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <UART_AdvFeatureConfig+0x160>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	2280      	movs	r2, #128	; 0x80
 800356c:	4013      	ands	r3, r2
 800356e:	d00b      	beq.n	8003588 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	4a0e      	ldr	r2, [pc, #56]	; (80035b0 <UART_AdvFeatureConfig+0x164>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }
}
 8003588:	46c0      	nop			; (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}
 8003590:	fffdffff 	.word	0xfffdffff
 8003594:	fffeffff 	.word	0xfffeffff
 8003598:	fffbffff 	.word	0xfffbffff
 800359c:	ffff7fff 	.word	0xffff7fff
 80035a0:	ffffefff 	.word	0xffffefff
 80035a4:	ffffdfff 	.word	0xffffdfff
 80035a8:	ffefffff 	.word	0xffefffff
 80035ac:	ff9fffff 	.word	0xff9fffff
 80035b0:	fff7ffff 	.word	0xfff7ffff

080035b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af02      	add	r7, sp, #8
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	2100      	movs	r1, #0
 80035c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035c4:	f7fd ff26 	bl	8001414 <HAL_GetTick>
 80035c8:	0003      	movs	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2208      	movs	r2, #8
 80035d4:	4013      	ands	r3, r2
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d10c      	bne.n	80035f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	0391      	lsls	r1, r2, #14
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	4a17      	ldr	r2, [pc, #92]	; (8003640 <UART_CheckIdleState+0x8c>)
 80035e4:	9200      	str	r2, [sp, #0]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f000 f82c 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e021      	b.n	8003638 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b04      	cmp	r3, #4
 8003600:	d10c      	bne.n	800361c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2280      	movs	r2, #128	; 0x80
 8003606:	03d1      	lsls	r1, r2, #15
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <UART_CheckIdleState+0x8c>)
 800360c:	9200      	str	r2, [sp, #0]
 800360e:	2200      	movs	r2, #0
 8003610:	f000 f818 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d001      	beq.n	800361c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e00d      	b.n	8003638 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2220      	movs	r2, #32
 8003626:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2274      	movs	r2, #116	; 0x74
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	0018      	movs	r0, r3
 800363a:	46bd      	mov	sp, r7
 800363c:	b004      	add	sp, #16
 800363e:	bd80      	pop	{r7, pc}
 8003640:	01ffffff 	.word	0x01ffffff

08003644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b094      	sub	sp, #80	; 0x50
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	e0a3      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003658:	3301      	adds	r3, #1
 800365a:	d100      	bne.n	800365e <UART_WaitOnFlagUntilTimeout+0x1a>
 800365c:	e09f      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365e:	f7fd fed9 	bl	8001414 <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800366a:	429a      	cmp	r2, r3
 800366c:	d302      	bcc.n	8003674 <UART_WaitOnFlagUntilTimeout+0x30>
 800366e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003670:	2b00      	cmp	r3, #0
 8003672:	d13d      	bne.n	80036f0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800367a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367c:	647b      	str	r3, [r7, #68]	; 0x44
 800367e:	2301      	movs	r3, #1
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			; (mov r8, r8)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	494c      	ldr	r1, [pc, #304]	; (80037c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003696:	400a      	ands	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	643b      	str	r3, [r7, #64]	; 0x40
 80036b0:	2301      	movs	r3, #1
 80036b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2101      	movs	r1, #1
 80036c8:	438a      	bics	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2220      	movs	r2, #32
 80036dc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2274      	movs	r2, #116	; 0x74
 80036e8:	2100      	movs	r1, #0
 80036ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e067      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2204      	movs	r2, #4
 80036f8:	4013      	ands	r3, r2
 80036fa:	d050      	beq.n	800379e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	2380      	movs	r3, #128	; 0x80
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	401a      	ands	r2, r3
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	429a      	cmp	r2, r3
 800370e:	d146      	bne.n	800379e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800371a:	f3ef 8310 	mrs	r3, PRIMASK
 800371e:	613b      	str	r3, [r7, #16]
  return(result);
 8003720:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003722:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003724:	2301      	movs	r3, #1
 8003726:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	f383 8810 	msr	PRIMASK, r3
}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4923      	ldr	r1, [pc, #140]	; (80037c8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800373c:	400a      	ands	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003742:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f383 8810 	msr	PRIMASK, r3
}
 800374a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800374c:	f3ef 8310 	mrs	r3, PRIMASK
 8003750:	61fb      	str	r3, [r7, #28]
  return(result);
 8003752:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003754:	64bb      	str	r3, [r7, #72]	; 0x48
 8003756:	2301      	movs	r3, #1
 8003758:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	f383 8810 	msr	PRIMASK, r3
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2101      	movs	r1, #1
 800376e:	438a      	bics	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	f383 8810 	msr	PRIMASK, r3
}
 800377c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	2120      	movs	r1, #32
 8003790:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2274      	movs	r2, #116	; 0x74
 8003796:	2100      	movs	r1, #0
 8003798:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e010      	b.n	80037c0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	68ba      	ldr	r2, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	425a      	negs	r2, r3
 80037ae:	4153      	adcs	r3, r2
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	001a      	movs	r2, r3
 80037b4:	1dfb      	adds	r3, r7, #7
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d100      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x17a>
 80037bc:	e74b      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	0018      	movs	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b014      	add	sp, #80	; 0x50
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	fffffe5f 	.word	0xfffffe5f

080037cc <__assert_func>:
 80037cc:	b530      	push	{r4, r5, lr}
 80037ce:	0014      	movs	r4, r2
 80037d0:	001a      	movs	r2, r3
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <__assert_func+0x2c>)
 80037d4:	0005      	movs	r5, r0
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	b085      	sub	sp, #20
 80037da:	68d8      	ldr	r0, [r3, #12]
 80037dc:	4b07      	ldr	r3, [pc, #28]	; (80037fc <__assert_func+0x30>)
 80037de:	2c00      	cmp	r4, #0
 80037e0:	d101      	bne.n	80037e6 <__assert_func+0x1a>
 80037e2:	4b07      	ldr	r3, [pc, #28]	; (8003800 <__assert_func+0x34>)
 80037e4:	001c      	movs	r4, r3
 80037e6:	9301      	str	r3, [sp, #4]
 80037e8:	9100      	str	r1, [sp, #0]
 80037ea:	002b      	movs	r3, r5
 80037ec:	4905      	ldr	r1, [pc, #20]	; (8003804 <__assert_func+0x38>)
 80037ee:	9402      	str	r4, [sp, #8]
 80037f0:	f000 f810 	bl	8003814 <fiprintf>
 80037f4:	f000 fbfc 	bl	8003ff0 <abort>
 80037f8:	200000c4 	.word	0x200000c4
 80037fc:	08004a9c 	.word	0x08004a9c
 8003800:	08004ad7 	.word	0x08004ad7
 8003804:	08004aa9 	.word	0x08004aa9

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	200000c4 	.word	0x200000c4

08003814 <fiprintf>:
 8003814:	b40e      	push	{r1, r2, r3}
 8003816:	b503      	push	{r0, r1, lr}
 8003818:	0001      	movs	r1, r0
 800381a:	ab03      	add	r3, sp, #12
 800381c:	4804      	ldr	r0, [pc, #16]	; (8003830 <fiprintf+0x1c>)
 800381e:	cb04      	ldmia	r3!, {r2}
 8003820:	6800      	ldr	r0, [r0, #0]
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	f000 f85a 	bl	80038dc <_vfiprintf_r>
 8003828:	b002      	add	sp, #8
 800382a:	bc08      	pop	{r3}
 800382c:	b003      	add	sp, #12
 800382e:	4718      	bx	r3
 8003830:	200000c4 	.word	0x200000c4

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	2600      	movs	r6, #0
 8003838:	4d0c      	ldr	r5, [pc, #48]	; (800386c <__libc_init_array+0x38>)
 800383a:	4c0d      	ldr	r4, [pc, #52]	; (8003870 <__libc_init_array+0x3c>)
 800383c:	1b64      	subs	r4, r4, r5
 800383e:	10a4      	asrs	r4, r4, #2
 8003840:	42a6      	cmp	r6, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	2600      	movs	r6, #0
 8003846:	f001 f831 	bl	80048ac <_init>
 800384a:	4d0a      	ldr	r5, [pc, #40]	; (8003874 <__libc_init_array+0x40>)
 800384c:	4c0a      	ldr	r4, [pc, #40]	; (8003878 <__libc_init_array+0x44>)
 800384e:	1b64      	subs	r4, r4, r5
 8003850:	10a4      	asrs	r4, r4, #2
 8003852:	42a6      	cmp	r6, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	00b3      	lsls	r3, r6, #2
 800385a:	58eb      	ldr	r3, [r5, r3]
 800385c:	4798      	blx	r3
 800385e:	3601      	adds	r6, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	00b3      	lsls	r3, r6, #2
 8003864:	58eb      	ldr	r3, [r5, r3]
 8003866:	4798      	blx	r3
 8003868:	3601      	adds	r6, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	08004b78 	.word	0x08004b78
 8003870:	08004b78 	.word	0x08004b78
 8003874:	08004b78 	.word	0x08004b78
 8003878:	08004b7c 	.word	0x08004b7c

0800387c <memset>:
 800387c:	0003      	movs	r3, r0
 800387e:	1882      	adds	r2, r0, r2
 8003880:	4293      	cmp	r3, r2
 8003882:	d100      	bne.n	8003886 <memset+0xa>
 8003884:	4770      	bx	lr
 8003886:	7019      	strb	r1, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	e7f9      	b.n	8003880 <memset+0x4>

0800388c <__sfputc_r>:
 800388c:	6893      	ldr	r3, [r2, #8]
 800388e:	b510      	push	{r4, lr}
 8003890:	3b01      	subs	r3, #1
 8003892:	6093      	str	r3, [r2, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	da04      	bge.n	80038a2 <__sfputc_r+0x16>
 8003898:	6994      	ldr	r4, [r2, #24]
 800389a:	42a3      	cmp	r3, r4
 800389c:	db07      	blt.n	80038ae <__sfputc_r+0x22>
 800389e:	290a      	cmp	r1, #10
 80038a0:	d005      	beq.n	80038ae <__sfputc_r+0x22>
 80038a2:	6813      	ldr	r3, [r2, #0]
 80038a4:	1c58      	adds	r0, r3, #1
 80038a6:	6010      	str	r0, [r2, #0]
 80038a8:	7019      	strb	r1, [r3, #0]
 80038aa:	0008      	movs	r0, r1
 80038ac:	bd10      	pop	{r4, pc}
 80038ae:	f000 fad1 	bl	8003e54 <__swbuf_r>
 80038b2:	0001      	movs	r1, r0
 80038b4:	e7f9      	b.n	80038aa <__sfputc_r+0x1e>

080038b6 <__sfputs_r>:
 80038b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b8:	0006      	movs	r6, r0
 80038ba:	000f      	movs	r7, r1
 80038bc:	0014      	movs	r4, r2
 80038be:	18d5      	adds	r5, r2, r3
 80038c0:	42ac      	cmp	r4, r5
 80038c2:	d101      	bne.n	80038c8 <__sfputs_r+0x12>
 80038c4:	2000      	movs	r0, #0
 80038c6:	e007      	b.n	80038d8 <__sfputs_r+0x22>
 80038c8:	7821      	ldrb	r1, [r4, #0]
 80038ca:	003a      	movs	r2, r7
 80038cc:	0030      	movs	r0, r6
 80038ce:	f7ff ffdd 	bl	800388c <__sfputc_r>
 80038d2:	3401      	adds	r4, #1
 80038d4:	1c43      	adds	r3, r0, #1
 80038d6:	d1f3      	bne.n	80038c0 <__sfputs_r+0xa>
 80038d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038dc <_vfiprintf_r>:
 80038dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038de:	b0a1      	sub	sp, #132	; 0x84
 80038e0:	0006      	movs	r6, r0
 80038e2:	000c      	movs	r4, r1
 80038e4:	001f      	movs	r7, r3
 80038e6:	9203      	str	r2, [sp, #12]
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d004      	beq.n	80038f6 <_vfiprintf_r+0x1a>
 80038ec:	6983      	ldr	r3, [r0, #24]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <_vfiprintf_r+0x1a>
 80038f2:	f000 fcb3 	bl	800425c <__sinit>
 80038f6:	4b8e      	ldr	r3, [pc, #568]	; (8003b30 <_vfiprintf_r+0x254>)
 80038f8:	429c      	cmp	r4, r3
 80038fa:	d11c      	bne.n	8003936 <_vfiprintf_r+0x5a>
 80038fc:	6874      	ldr	r4, [r6, #4]
 80038fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003900:	07db      	lsls	r3, r3, #31
 8003902:	d405      	bmi.n	8003910 <_vfiprintf_r+0x34>
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	059b      	lsls	r3, r3, #22
 8003908:	d402      	bmi.n	8003910 <_vfiprintf_r+0x34>
 800390a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800390c:	f000 fd47 	bl	800439e <__retarget_lock_acquire_recursive>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	071b      	lsls	r3, r3, #28
 8003914:	d502      	bpl.n	800391c <_vfiprintf_r+0x40>
 8003916:	6923      	ldr	r3, [r4, #16]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d11d      	bne.n	8003958 <_vfiprintf_r+0x7c>
 800391c:	0021      	movs	r1, r4
 800391e:	0030      	movs	r0, r6
 8003920:	f000 faee 	bl	8003f00 <__swsetup_r>
 8003924:	2800      	cmp	r0, #0
 8003926:	d017      	beq.n	8003958 <_vfiprintf_r+0x7c>
 8003928:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800392a:	07db      	lsls	r3, r3, #31
 800392c:	d50d      	bpl.n	800394a <_vfiprintf_r+0x6e>
 800392e:	2001      	movs	r0, #1
 8003930:	4240      	negs	r0, r0
 8003932:	b021      	add	sp, #132	; 0x84
 8003934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003936:	4b7f      	ldr	r3, [pc, #508]	; (8003b34 <_vfiprintf_r+0x258>)
 8003938:	429c      	cmp	r4, r3
 800393a:	d101      	bne.n	8003940 <_vfiprintf_r+0x64>
 800393c:	68b4      	ldr	r4, [r6, #8]
 800393e:	e7de      	b.n	80038fe <_vfiprintf_r+0x22>
 8003940:	4b7d      	ldr	r3, [pc, #500]	; (8003b38 <_vfiprintf_r+0x25c>)
 8003942:	429c      	cmp	r4, r3
 8003944:	d1db      	bne.n	80038fe <_vfiprintf_r+0x22>
 8003946:	68f4      	ldr	r4, [r6, #12]
 8003948:	e7d9      	b.n	80038fe <_vfiprintf_r+0x22>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	059b      	lsls	r3, r3, #22
 800394e:	d4ee      	bmi.n	800392e <_vfiprintf_r+0x52>
 8003950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003952:	f000 fd25 	bl	80043a0 <__retarget_lock_release_recursive>
 8003956:	e7ea      	b.n	800392e <_vfiprintf_r+0x52>
 8003958:	2300      	movs	r3, #0
 800395a:	ad08      	add	r5, sp, #32
 800395c:	616b      	str	r3, [r5, #20]
 800395e:	3320      	adds	r3, #32
 8003960:	766b      	strb	r3, [r5, #25]
 8003962:	3310      	adds	r3, #16
 8003964:	76ab      	strb	r3, [r5, #26]
 8003966:	9707      	str	r7, [sp, #28]
 8003968:	9f03      	ldr	r7, [sp, #12]
 800396a:	783b      	ldrb	r3, [r7, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <_vfiprintf_r+0x98>
 8003970:	2b25      	cmp	r3, #37	; 0x25
 8003972:	d14e      	bne.n	8003a12 <_vfiprintf_r+0x136>
 8003974:	9b03      	ldr	r3, [sp, #12]
 8003976:	1afb      	subs	r3, r7, r3
 8003978:	9305      	str	r3, [sp, #20]
 800397a:	9b03      	ldr	r3, [sp, #12]
 800397c:	429f      	cmp	r7, r3
 800397e:	d00d      	beq.n	800399c <_vfiprintf_r+0xc0>
 8003980:	9b05      	ldr	r3, [sp, #20]
 8003982:	0021      	movs	r1, r4
 8003984:	0030      	movs	r0, r6
 8003986:	9a03      	ldr	r2, [sp, #12]
 8003988:	f7ff ff95 	bl	80038b6 <__sfputs_r>
 800398c:	1c43      	adds	r3, r0, #1
 800398e:	d100      	bne.n	8003992 <_vfiprintf_r+0xb6>
 8003990:	e0b5      	b.n	8003afe <_vfiprintf_r+0x222>
 8003992:	696a      	ldr	r2, [r5, #20]
 8003994:	9b05      	ldr	r3, [sp, #20]
 8003996:	4694      	mov	ip, r2
 8003998:	4463      	add	r3, ip
 800399a:	616b      	str	r3, [r5, #20]
 800399c:	783b      	ldrb	r3, [r7, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d100      	bne.n	80039a4 <_vfiprintf_r+0xc8>
 80039a2:	e0ac      	b.n	8003afe <_vfiprintf_r+0x222>
 80039a4:	2201      	movs	r2, #1
 80039a6:	1c7b      	adds	r3, r7, #1
 80039a8:	9303      	str	r3, [sp, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	4252      	negs	r2, r2
 80039ae:	606a      	str	r2, [r5, #4]
 80039b0:	a904      	add	r1, sp, #16
 80039b2:	3254      	adds	r2, #84	; 0x54
 80039b4:	1852      	adds	r2, r2, r1
 80039b6:	602b      	str	r3, [r5, #0]
 80039b8:	60eb      	str	r3, [r5, #12]
 80039ba:	60ab      	str	r3, [r5, #8]
 80039bc:	7013      	strb	r3, [r2, #0]
 80039be:	65ab      	str	r3, [r5, #88]	; 0x58
 80039c0:	9b03      	ldr	r3, [sp, #12]
 80039c2:	2205      	movs	r2, #5
 80039c4:	7819      	ldrb	r1, [r3, #0]
 80039c6:	485d      	ldr	r0, [pc, #372]	; (8003b3c <_vfiprintf_r+0x260>)
 80039c8:	f000 fd58 	bl	800447c <memchr>
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	1c5f      	adds	r7, r3, #1
 80039d0:	2800      	cmp	r0, #0
 80039d2:	d120      	bne.n	8003a16 <_vfiprintf_r+0x13a>
 80039d4:	682a      	ldr	r2, [r5, #0]
 80039d6:	06d3      	lsls	r3, r2, #27
 80039d8:	d504      	bpl.n	80039e4 <_vfiprintf_r+0x108>
 80039da:	2353      	movs	r3, #83	; 0x53
 80039dc:	a904      	add	r1, sp, #16
 80039de:	185b      	adds	r3, r3, r1
 80039e0:	2120      	movs	r1, #32
 80039e2:	7019      	strb	r1, [r3, #0]
 80039e4:	0713      	lsls	r3, r2, #28
 80039e6:	d504      	bpl.n	80039f2 <_vfiprintf_r+0x116>
 80039e8:	2353      	movs	r3, #83	; 0x53
 80039ea:	a904      	add	r1, sp, #16
 80039ec:	185b      	adds	r3, r3, r1
 80039ee:	212b      	movs	r1, #43	; 0x2b
 80039f0:	7019      	strb	r1, [r3, #0]
 80039f2:	9b03      	ldr	r3, [sp, #12]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b2a      	cmp	r3, #42	; 0x2a
 80039f8:	d016      	beq.n	8003a28 <_vfiprintf_r+0x14c>
 80039fa:	2100      	movs	r1, #0
 80039fc:	68eb      	ldr	r3, [r5, #12]
 80039fe:	9f03      	ldr	r7, [sp, #12]
 8003a00:	783a      	ldrb	r2, [r7, #0]
 8003a02:	1c78      	adds	r0, r7, #1
 8003a04:	3a30      	subs	r2, #48	; 0x30
 8003a06:	4684      	mov	ip, r0
 8003a08:	2a09      	cmp	r2, #9
 8003a0a:	d94f      	bls.n	8003aac <_vfiprintf_r+0x1d0>
 8003a0c:	2900      	cmp	r1, #0
 8003a0e:	d111      	bne.n	8003a34 <_vfiprintf_r+0x158>
 8003a10:	e017      	b.n	8003a42 <_vfiprintf_r+0x166>
 8003a12:	3701      	adds	r7, #1
 8003a14:	e7a9      	b.n	800396a <_vfiprintf_r+0x8e>
 8003a16:	4b49      	ldr	r3, [pc, #292]	; (8003b3c <_vfiprintf_r+0x260>)
 8003a18:	682a      	ldr	r2, [r5, #0]
 8003a1a:	1ac0      	subs	r0, r0, r3
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4083      	lsls	r3, r0
 8003a20:	4313      	orrs	r3, r2
 8003a22:	602b      	str	r3, [r5, #0]
 8003a24:	9703      	str	r7, [sp, #12]
 8003a26:	e7cb      	b.n	80039c0 <_vfiprintf_r+0xe4>
 8003a28:	9b07      	ldr	r3, [sp, #28]
 8003a2a:	1d19      	adds	r1, r3, #4
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	9107      	str	r1, [sp, #28]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	db01      	blt.n	8003a38 <_vfiprintf_r+0x15c>
 8003a34:	930b      	str	r3, [sp, #44]	; 0x2c
 8003a36:	e004      	b.n	8003a42 <_vfiprintf_r+0x166>
 8003a38:	425b      	negs	r3, r3
 8003a3a:	60eb      	str	r3, [r5, #12]
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	602b      	str	r3, [r5, #0]
 8003a42:	783b      	ldrb	r3, [r7, #0]
 8003a44:	2b2e      	cmp	r3, #46	; 0x2e
 8003a46:	d10a      	bne.n	8003a5e <_vfiprintf_r+0x182>
 8003a48:	787b      	ldrb	r3, [r7, #1]
 8003a4a:	2b2a      	cmp	r3, #42	; 0x2a
 8003a4c:	d137      	bne.n	8003abe <_vfiprintf_r+0x1e2>
 8003a4e:	9b07      	ldr	r3, [sp, #28]
 8003a50:	3702      	adds	r7, #2
 8003a52:	1d1a      	adds	r2, r3, #4
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9207      	str	r2, [sp, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	db2d      	blt.n	8003ab8 <_vfiprintf_r+0x1dc>
 8003a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5e:	2203      	movs	r2, #3
 8003a60:	7839      	ldrb	r1, [r7, #0]
 8003a62:	4837      	ldr	r0, [pc, #220]	; (8003b40 <_vfiprintf_r+0x264>)
 8003a64:	f000 fd0a 	bl	800447c <memchr>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	d007      	beq.n	8003a7c <_vfiprintf_r+0x1a0>
 8003a6c:	4b34      	ldr	r3, [pc, #208]	; (8003b40 <_vfiprintf_r+0x264>)
 8003a6e:	682a      	ldr	r2, [r5, #0]
 8003a70:	1ac0      	subs	r0, r0, r3
 8003a72:	2340      	movs	r3, #64	; 0x40
 8003a74:	4083      	lsls	r3, r0
 8003a76:	4313      	orrs	r3, r2
 8003a78:	3701      	adds	r7, #1
 8003a7a:	602b      	str	r3, [r5, #0]
 8003a7c:	7839      	ldrb	r1, [r7, #0]
 8003a7e:	1c7b      	adds	r3, r7, #1
 8003a80:	2206      	movs	r2, #6
 8003a82:	4830      	ldr	r0, [pc, #192]	; (8003b44 <_vfiprintf_r+0x268>)
 8003a84:	9303      	str	r3, [sp, #12]
 8003a86:	7629      	strb	r1, [r5, #24]
 8003a88:	f000 fcf8 	bl	800447c <memchr>
 8003a8c:	2800      	cmp	r0, #0
 8003a8e:	d045      	beq.n	8003b1c <_vfiprintf_r+0x240>
 8003a90:	4b2d      	ldr	r3, [pc, #180]	; (8003b48 <_vfiprintf_r+0x26c>)
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d127      	bne.n	8003ae6 <_vfiprintf_r+0x20a>
 8003a96:	2207      	movs	r2, #7
 8003a98:	9b07      	ldr	r3, [sp, #28]
 8003a9a:	3307      	adds	r3, #7
 8003a9c:	4393      	bics	r3, r2
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9307      	str	r3, [sp, #28]
 8003aa2:	696b      	ldr	r3, [r5, #20]
 8003aa4:	9a04      	ldr	r2, [sp, #16]
 8003aa6:	189b      	adds	r3, r3, r2
 8003aa8:	616b      	str	r3, [r5, #20]
 8003aaa:	e75d      	b.n	8003968 <_vfiprintf_r+0x8c>
 8003aac:	210a      	movs	r1, #10
 8003aae:	434b      	muls	r3, r1
 8003ab0:	4667      	mov	r7, ip
 8003ab2:	189b      	adds	r3, r3, r2
 8003ab4:	3909      	subs	r1, #9
 8003ab6:	e7a3      	b.n	8003a00 <_vfiprintf_r+0x124>
 8003ab8:	2301      	movs	r3, #1
 8003aba:	425b      	negs	r3, r3
 8003abc:	e7ce      	b.n	8003a5c <_vfiprintf_r+0x180>
 8003abe:	2300      	movs	r3, #0
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	3701      	adds	r7, #1
 8003ac4:	606b      	str	r3, [r5, #4]
 8003ac6:	7839      	ldrb	r1, [r7, #0]
 8003ac8:	1c78      	adds	r0, r7, #1
 8003aca:	3930      	subs	r1, #48	; 0x30
 8003acc:	4684      	mov	ip, r0
 8003ace:	2909      	cmp	r1, #9
 8003ad0:	d903      	bls.n	8003ada <_vfiprintf_r+0x1fe>
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0c3      	beq.n	8003a5e <_vfiprintf_r+0x182>
 8003ad6:	9209      	str	r2, [sp, #36]	; 0x24
 8003ad8:	e7c1      	b.n	8003a5e <_vfiprintf_r+0x182>
 8003ada:	230a      	movs	r3, #10
 8003adc:	435a      	muls	r2, r3
 8003ade:	4667      	mov	r7, ip
 8003ae0:	1852      	adds	r2, r2, r1
 8003ae2:	3b09      	subs	r3, #9
 8003ae4:	e7ef      	b.n	8003ac6 <_vfiprintf_r+0x1ea>
 8003ae6:	ab07      	add	r3, sp, #28
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	0022      	movs	r2, r4
 8003aec:	0029      	movs	r1, r5
 8003aee:	0030      	movs	r0, r6
 8003af0:	4b16      	ldr	r3, [pc, #88]	; (8003b4c <_vfiprintf_r+0x270>)
 8003af2:	e000      	b.n	8003af6 <_vfiprintf_r+0x21a>
 8003af4:	bf00      	nop
 8003af6:	9004      	str	r0, [sp, #16]
 8003af8:	9b04      	ldr	r3, [sp, #16]
 8003afa:	3301      	adds	r3, #1
 8003afc:	d1d1      	bne.n	8003aa2 <_vfiprintf_r+0x1c6>
 8003afe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b00:	07db      	lsls	r3, r3, #31
 8003b02:	d405      	bmi.n	8003b10 <_vfiprintf_r+0x234>
 8003b04:	89a3      	ldrh	r3, [r4, #12]
 8003b06:	059b      	lsls	r3, r3, #22
 8003b08:	d402      	bmi.n	8003b10 <_vfiprintf_r+0x234>
 8003b0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b0c:	f000 fc48 	bl	80043a0 <__retarget_lock_release_recursive>
 8003b10:	89a3      	ldrh	r3, [r4, #12]
 8003b12:	065b      	lsls	r3, r3, #25
 8003b14:	d500      	bpl.n	8003b18 <_vfiprintf_r+0x23c>
 8003b16:	e70a      	b.n	800392e <_vfiprintf_r+0x52>
 8003b18:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003b1a:	e70a      	b.n	8003932 <_vfiprintf_r+0x56>
 8003b1c:	ab07      	add	r3, sp, #28
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	0022      	movs	r2, r4
 8003b22:	0029      	movs	r1, r5
 8003b24:	0030      	movs	r0, r6
 8003b26:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <_vfiprintf_r+0x270>)
 8003b28:	f000 f882 	bl	8003c30 <_printf_i>
 8003b2c:	e7e3      	b.n	8003af6 <_vfiprintf_r+0x21a>
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	08004b30 	.word	0x08004b30
 8003b34:	08004b50 	.word	0x08004b50
 8003b38:	08004b10 	.word	0x08004b10
 8003b3c:	08004adc 	.word	0x08004adc
 8003b40:	08004ae2 	.word	0x08004ae2
 8003b44:	08004ae6 	.word	0x08004ae6
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	080038b7 	.word	0x080038b7

08003b50 <_printf_common>:
 8003b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b52:	0015      	movs	r5, r2
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	688a      	ldr	r2, [r1, #8]
 8003b58:	690b      	ldr	r3, [r1, #16]
 8003b5a:	000c      	movs	r4, r1
 8003b5c:	9000      	str	r0, [sp, #0]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	da00      	bge.n	8003b64 <_printf_common+0x14>
 8003b62:	0013      	movs	r3, r2
 8003b64:	0022      	movs	r2, r4
 8003b66:	602b      	str	r3, [r5, #0]
 8003b68:	3243      	adds	r2, #67	; 0x43
 8003b6a:	7812      	ldrb	r2, [r2, #0]
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	d001      	beq.n	8003b74 <_printf_common+0x24>
 8003b70:	3301      	adds	r3, #1
 8003b72:	602b      	str	r3, [r5, #0]
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	069b      	lsls	r3, r3, #26
 8003b78:	d502      	bpl.n	8003b80 <_printf_common+0x30>
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	602b      	str	r3, [r5, #0]
 8003b80:	6822      	ldr	r2, [r4, #0]
 8003b82:	2306      	movs	r3, #6
 8003b84:	0017      	movs	r7, r2
 8003b86:	401f      	ands	r7, r3
 8003b88:	421a      	tst	r2, r3
 8003b8a:	d027      	beq.n	8003bdc <_printf_common+0x8c>
 8003b8c:	0023      	movs	r3, r4
 8003b8e:	3343      	adds	r3, #67	; 0x43
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	4193      	sbcs	r3, r2
 8003b96:	6822      	ldr	r2, [r4, #0]
 8003b98:	0692      	lsls	r2, r2, #26
 8003b9a:	d430      	bmi.n	8003bfe <_printf_common+0xae>
 8003b9c:	0022      	movs	r2, r4
 8003b9e:	9901      	ldr	r1, [sp, #4]
 8003ba0:	9800      	ldr	r0, [sp, #0]
 8003ba2:	9e08      	ldr	r6, [sp, #32]
 8003ba4:	3243      	adds	r2, #67	; 0x43
 8003ba6:	47b0      	blx	r6
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d025      	beq.n	8003bf8 <_printf_common+0xa8>
 8003bac:	2306      	movs	r3, #6
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	682a      	ldr	r2, [r5, #0]
 8003bb2:	68e1      	ldr	r1, [r4, #12]
 8003bb4:	2500      	movs	r5, #0
 8003bb6:	4003      	ands	r3, r0
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d103      	bne.n	8003bc4 <_printf_common+0x74>
 8003bbc:	1a8d      	subs	r5, r1, r2
 8003bbe:	43eb      	mvns	r3, r5
 8003bc0:	17db      	asrs	r3, r3, #31
 8003bc2:	401d      	ands	r5, r3
 8003bc4:	68a3      	ldr	r3, [r4, #8]
 8003bc6:	6922      	ldr	r2, [r4, #16]
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	dd01      	ble.n	8003bd0 <_printf_common+0x80>
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	18ed      	adds	r5, r5, r3
 8003bd0:	2700      	movs	r7, #0
 8003bd2:	42bd      	cmp	r5, r7
 8003bd4:	d120      	bne.n	8003c18 <_printf_common+0xc8>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e010      	b.n	8003bfc <_printf_common+0xac>
 8003bda:	3701      	adds	r7, #1
 8003bdc:	68e3      	ldr	r3, [r4, #12]
 8003bde:	682a      	ldr	r2, [r5, #0]
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	42bb      	cmp	r3, r7
 8003be4:	ddd2      	ble.n	8003b8c <_printf_common+0x3c>
 8003be6:	0022      	movs	r2, r4
 8003be8:	2301      	movs	r3, #1
 8003bea:	9901      	ldr	r1, [sp, #4]
 8003bec:	9800      	ldr	r0, [sp, #0]
 8003bee:	9e08      	ldr	r6, [sp, #32]
 8003bf0:	3219      	adds	r2, #25
 8003bf2:	47b0      	blx	r6
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d1f0      	bne.n	8003bda <_printf_common+0x8a>
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	4240      	negs	r0, r0
 8003bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003bfe:	2030      	movs	r0, #48	; 0x30
 8003c00:	18e1      	adds	r1, r4, r3
 8003c02:	3143      	adds	r1, #67	; 0x43
 8003c04:	7008      	strb	r0, [r1, #0]
 8003c06:	0021      	movs	r1, r4
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	3145      	adds	r1, #69	; 0x45
 8003c0c:	7809      	ldrb	r1, [r1, #0]
 8003c0e:	18a2      	adds	r2, r4, r2
 8003c10:	3243      	adds	r2, #67	; 0x43
 8003c12:	3302      	adds	r3, #2
 8003c14:	7011      	strb	r1, [r2, #0]
 8003c16:	e7c1      	b.n	8003b9c <_printf_common+0x4c>
 8003c18:	0022      	movs	r2, r4
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	9901      	ldr	r1, [sp, #4]
 8003c1e:	9800      	ldr	r0, [sp, #0]
 8003c20:	9e08      	ldr	r6, [sp, #32]
 8003c22:	321a      	adds	r2, #26
 8003c24:	47b0      	blx	r6
 8003c26:	1c43      	adds	r3, r0, #1
 8003c28:	d0e6      	beq.n	8003bf8 <_printf_common+0xa8>
 8003c2a:	3701      	adds	r7, #1
 8003c2c:	e7d1      	b.n	8003bd2 <_printf_common+0x82>
	...

08003c30 <_printf_i>:
 8003c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c32:	b08b      	sub	sp, #44	; 0x2c
 8003c34:	9206      	str	r2, [sp, #24]
 8003c36:	000a      	movs	r2, r1
 8003c38:	3243      	adds	r2, #67	; 0x43
 8003c3a:	9307      	str	r3, [sp, #28]
 8003c3c:	9005      	str	r0, [sp, #20]
 8003c3e:	9204      	str	r2, [sp, #16]
 8003c40:	7e0a      	ldrb	r2, [r1, #24]
 8003c42:	000c      	movs	r4, r1
 8003c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c46:	2a78      	cmp	r2, #120	; 0x78
 8003c48:	d807      	bhi.n	8003c5a <_printf_i+0x2a>
 8003c4a:	2a62      	cmp	r2, #98	; 0x62
 8003c4c:	d809      	bhi.n	8003c62 <_printf_i+0x32>
 8003c4e:	2a00      	cmp	r2, #0
 8003c50:	d100      	bne.n	8003c54 <_printf_i+0x24>
 8003c52:	e0c1      	b.n	8003dd8 <_printf_i+0x1a8>
 8003c54:	2a58      	cmp	r2, #88	; 0x58
 8003c56:	d100      	bne.n	8003c5a <_printf_i+0x2a>
 8003c58:	e08c      	b.n	8003d74 <_printf_i+0x144>
 8003c5a:	0026      	movs	r6, r4
 8003c5c:	3642      	adds	r6, #66	; 0x42
 8003c5e:	7032      	strb	r2, [r6, #0]
 8003c60:	e022      	b.n	8003ca8 <_printf_i+0x78>
 8003c62:	0010      	movs	r0, r2
 8003c64:	3863      	subs	r0, #99	; 0x63
 8003c66:	2815      	cmp	r0, #21
 8003c68:	d8f7      	bhi.n	8003c5a <_printf_i+0x2a>
 8003c6a:	f7fc fa4d 	bl	8000108 <__gnu_thumb1_case_shi>
 8003c6e:	0016      	.short	0x0016
 8003c70:	fff6001f 	.word	0xfff6001f
 8003c74:	fff6fff6 	.word	0xfff6fff6
 8003c78:	001ffff6 	.word	0x001ffff6
 8003c7c:	fff6fff6 	.word	0xfff6fff6
 8003c80:	fff6fff6 	.word	0xfff6fff6
 8003c84:	003600a8 	.word	0x003600a8
 8003c88:	fff6009a 	.word	0xfff6009a
 8003c8c:	00b9fff6 	.word	0x00b9fff6
 8003c90:	0036fff6 	.word	0x0036fff6
 8003c94:	fff6fff6 	.word	0xfff6fff6
 8003c98:	009e      	.short	0x009e
 8003c9a:	0026      	movs	r6, r4
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	3642      	adds	r6, #66	; 0x42
 8003ca0:	1d11      	adds	r1, r2, #4
 8003ca2:	6019      	str	r1, [r3, #0]
 8003ca4:	6813      	ldr	r3, [r2, #0]
 8003ca6:	7033      	strb	r3, [r6, #0]
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0a7      	b.n	8003dfc <_printf_i+0x1cc>
 8003cac:	6808      	ldr	r0, [r1, #0]
 8003cae:	6819      	ldr	r1, [r3, #0]
 8003cb0:	1d0a      	adds	r2, r1, #4
 8003cb2:	0605      	lsls	r5, r0, #24
 8003cb4:	d50b      	bpl.n	8003cce <_printf_i+0x9e>
 8003cb6:	680d      	ldr	r5, [r1, #0]
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	2d00      	cmp	r5, #0
 8003cbc:	da03      	bge.n	8003cc6 <_printf_i+0x96>
 8003cbe:	232d      	movs	r3, #45	; 0x2d
 8003cc0:	9a04      	ldr	r2, [sp, #16]
 8003cc2:	426d      	negs	r5, r5
 8003cc4:	7013      	strb	r3, [r2, #0]
 8003cc6:	4b61      	ldr	r3, [pc, #388]	; (8003e4c <_printf_i+0x21c>)
 8003cc8:	270a      	movs	r7, #10
 8003cca:	9303      	str	r3, [sp, #12]
 8003ccc:	e01b      	b.n	8003d06 <_printf_i+0xd6>
 8003cce:	680d      	ldr	r5, [r1, #0]
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	0641      	lsls	r1, r0, #25
 8003cd4:	d5f1      	bpl.n	8003cba <_printf_i+0x8a>
 8003cd6:	b22d      	sxth	r5, r5
 8003cd8:	e7ef      	b.n	8003cba <_printf_i+0x8a>
 8003cda:	680d      	ldr	r5, [r1, #0]
 8003cdc:	6819      	ldr	r1, [r3, #0]
 8003cde:	1d08      	adds	r0, r1, #4
 8003ce0:	6018      	str	r0, [r3, #0]
 8003ce2:	062e      	lsls	r6, r5, #24
 8003ce4:	d501      	bpl.n	8003cea <_printf_i+0xba>
 8003ce6:	680d      	ldr	r5, [r1, #0]
 8003ce8:	e003      	b.n	8003cf2 <_printf_i+0xc2>
 8003cea:	066d      	lsls	r5, r5, #25
 8003cec:	d5fb      	bpl.n	8003ce6 <_printf_i+0xb6>
 8003cee:	680d      	ldr	r5, [r1, #0]
 8003cf0:	b2ad      	uxth	r5, r5
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <_printf_i+0x21c>)
 8003cf4:	2708      	movs	r7, #8
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	2a6f      	cmp	r2, #111	; 0x6f
 8003cfa:	d000      	beq.n	8003cfe <_printf_i+0xce>
 8003cfc:	3702      	adds	r7, #2
 8003cfe:	0023      	movs	r3, r4
 8003d00:	2200      	movs	r2, #0
 8003d02:	3343      	adds	r3, #67	; 0x43
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	60a3      	str	r3, [r4, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	db03      	blt.n	8003d16 <_printf_i+0xe6>
 8003d0e:	2204      	movs	r2, #4
 8003d10:	6821      	ldr	r1, [r4, #0]
 8003d12:	4391      	bics	r1, r2
 8003d14:	6021      	str	r1, [r4, #0]
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	d102      	bne.n	8003d20 <_printf_i+0xf0>
 8003d1a:	9e04      	ldr	r6, [sp, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00c      	beq.n	8003d3a <_printf_i+0x10a>
 8003d20:	9e04      	ldr	r6, [sp, #16]
 8003d22:	0028      	movs	r0, r5
 8003d24:	0039      	movs	r1, r7
 8003d26:	f7fc fa7f 	bl	8000228 <__aeabi_uidivmod>
 8003d2a:	9b03      	ldr	r3, [sp, #12]
 8003d2c:	3e01      	subs	r6, #1
 8003d2e:	5c5b      	ldrb	r3, [r3, r1]
 8003d30:	7033      	strb	r3, [r6, #0]
 8003d32:	002b      	movs	r3, r5
 8003d34:	0005      	movs	r5, r0
 8003d36:	429f      	cmp	r7, r3
 8003d38:	d9f3      	bls.n	8003d22 <_printf_i+0xf2>
 8003d3a:	2f08      	cmp	r7, #8
 8003d3c:	d109      	bne.n	8003d52 <_printf_i+0x122>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	07db      	lsls	r3, r3, #31
 8003d42:	d506      	bpl.n	8003d52 <_printf_i+0x122>
 8003d44:	6863      	ldr	r3, [r4, #4]
 8003d46:	6922      	ldr	r2, [r4, #16]
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	dc02      	bgt.n	8003d52 <_printf_i+0x122>
 8003d4c:	2330      	movs	r3, #48	; 0x30
 8003d4e:	3e01      	subs	r6, #1
 8003d50:	7033      	strb	r3, [r6, #0]
 8003d52:	9b04      	ldr	r3, [sp, #16]
 8003d54:	1b9b      	subs	r3, r3, r6
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	9b07      	ldr	r3, [sp, #28]
 8003d5a:	0021      	movs	r1, r4
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	9805      	ldr	r0, [sp, #20]
 8003d60:	9b06      	ldr	r3, [sp, #24]
 8003d62:	aa09      	add	r2, sp, #36	; 0x24
 8003d64:	f7ff fef4 	bl	8003b50 <_printf_common>
 8003d68:	1c43      	adds	r3, r0, #1
 8003d6a:	d14c      	bne.n	8003e06 <_printf_i+0x1d6>
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	4240      	negs	r0, r0
 8003d70:	b00b      	add	sp, #44	; 0x2c
 8003d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d74:	3145      	adds	r1, #69	; 0x45
 8003d76:	700a      	strb	r2, [r1, #0]
 8003d78:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <_printf_i+0x21c>)
 8003d7a:	9203      	str	r2, [sp, #12]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	6821      	ldr	r1, [r4, #0]
 8003d80:	ca20      	ldmia	r2!, {r5}
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	0608      	lsls	r0, r1, #24
 8003d86:	d516      	bpl.n	8003db6 <_printf_i+0x186>
 8003d88:	07cb      	lsls	r3, r1, #31
 8003d8a:	d502      	bpl.n	8003d92 <_printf_i+0x162>
 8003d8c:	2320      	movs	r3, #32
 8003d8e:	4319      	orrs	r1, r3
 8003d90:	6021      	str	r1, [r4, #0]
 8003d92:	2710      	movs	r7, #16
 8003d94:	2d00      	cmp	r5, #0
 8003d96:	d1b2      	bne.n	8003cfe <_printf_i+0xce>
 8003d98:	2320      	movs	r3, #32
 8003d9a:	6822      	ldr	r2, [r4, #0]
 8003d9c:	439a      	bics	r2, r3
 8003d9e:	6022      	str	r2, [r4, #0]
 8003da0:	e7ad      	b.n	8003cfe <_printf_i+0xce>
 8003da2:	2220      	movs	r2, #32
 8003da4:	6809      	ldr	r1, [r1, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	6022      	str	r2, [r4, #0]
 8003daa:	0022      	movs	r2, r4
 8003dac:	2178      	movs	r1, #120	; 0x78
 8003dae:	3245      	adds	r2, #69	; 0x45
 8003db0:	7011      	strb	r1, [r2, #0]
 8003db2:	4a27      	ldr	r2, [pc, #156]	; (8003e50 <_printf_i+0x220>)
 8003db4:	e7e1      	b.n	8003d7a <_printf_i+0x14a>
 8003db6:	0648      	lsls	r0, r1, #25
 8003db8:	d5e6      	bpl.n	8003d88 <_printf_i+0x158>
 8003dba:	b2ad      	uxth	r5, r5
 8003dbc:	e7e4      	b.n	8003d88 <_printf_i+0x158>
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	680d      	ldr	r5, [r1, #0]
 8003dc2:	1d10      	adds	r0, r2, #4
 8003dc4:	6949      	ldr	r1, [r1, #20]
 8003dc6:	6018      	str	r0, [r3, #0]
 8003dc8:	6813      	ldr	r3, [r2, #0]
 8003dca:	062e      	lsls	r6, r5, #24
 8003dcc:	d501      	bpl.n	8003dd2 <_printf_i+0x1a2>
 8003dce:	6019      	str	r1, [r3, #0]
 8003dd0:	e002      	b.n	8003dd8 <_printf_i+0x1a8>
 8003dd2:	066d      	lsls	r5, r5, #25
 8003dd4:	d5fb      	bpl.n	8003dce <_printf_i+0x19e>
 8003dd6:	8019      	strh	r1, [r3, #0]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	9e04      	ldr	r6, [sp, #16]
 8003ddc:	6123      	str	r3, [r4, #16]
 8003dde:	e7bb      	b.n	8003d58 <_printf_i+0x128>
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	1d11      	adds	r1, r2, #4
 8003de4:	6019      	str	r1, [r3, #0]
 8003de6:	6816      	ldr	r6, [r2, #0]
 8003de8:	2100      	movs	r1, #0
 8003dea:	0030      	movs	r0, r6
 8003dec:	6862      	ldr	r2, [r4, #4]
 8003dee:	f000 fb45 	bl	800447c <memchr>
 8003df2:	2800      	cmp	r0, #0
 8003df4:	d001      	beq.n	8003dfa <_printf_i+0x1ca>
 8003df6:	1b80      	subs	r0, r0, r6
 8003df8:	6060      	str	r0, [r4, #4]
 8003dfa:	6863      	ldr	r3, [r4, #4]
 8003dfc:	6123      	str	r3, [r4, #16]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	9a04      	ldr	r2, [sp, #16]
 8003e02:	7013      	strb	r3, [r2, #0]
 8003e04:	e7a8      	b.n	8003d58 <_printf_i+0x128>
 8003e06:	6923      	ldr	r3, [r4, #16]
 8003e08:	0032      	movs	r2, r6
 8003e0a:	9906      	ldr	r1, [sp, #24]
 8003e0c:	9805      	ldr	r0, [sp, #20]
 8003e0e:	9d07      	ldr	r5, [sp, #28]
 8003e10:	47a8      	blx	r5
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d0aa      	beq.n	8003d6c <_printf_i+0x13c>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	079b      	lsls	r3, r3, #30
 8003e1a:	d415      	bmi.n	8003e48 <_printf_i+0x218>
 8003e1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e1e:	68e0      	ldr	r0, [r4, #12]
 8003e20:	4298      	cmp	r0, r3
 8003e22:	daa5      	bge.n	8003d70 <_printf_i+0x140>
 8003e24:	0018      	movs	r0, r3
 8003e26:	e7a3      	b.n	8003d70 <_printf_i+0x140>
 8003e28:	0022      	movs	r2, r4
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	9906      	ldr	r1, [sp, #24]
 8003e2e:	9805      	ldr	r0, [sp, #20]
 8003e30:	9e07      	ldr	r6, [sp, #28]
 8003e32:	3219      	adds	r2, #25
 8003e34:	47b0      	blx	r6
 8003e36:	1c43      	adds	r3, r0, #1
 8003e38:	d098      	beq.n	8003d6c <_printf_i+0x13c>
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	dcf0      	bgt.n	8003e28 <_printf_i+0x1f8>
 8003e46:	e7e9      	b.n	8003e1c <_printf_i+0x1ec>
 8003e48:	2500      	movs	r5, #0
 8003e4a:	e7f7      	b.n	8003e3c <_printf_i+0x20c>
 8003e4c:	08004aed 	.word	0x08004aed
 8003e50:	08004afe 	.word	0x08004afe

08003e54 <__swbuf_r>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	0005      	movs	r5, r0
 8003e58:	000e      	movs	r6, r1
 8003e5a:	0014      	movs	r4, r2
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d004      	beq.n	8003e6a <__swbuf_r+0x16>
 8003e60:	6983      	ldr	r3, [r0, #24]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <__swbuf_r+0x16>
 8003e66:	f000 f9f9 	bl	800425c <__sinit>
 8003e6a:	4b22      	ldr	r3, [pc, #136]	; (8003ef4 <__swbuf_r+0xa0>)
 8003e6c:	429c      	cmp	r4, r3
 8003e6e:	d12e      	bne.n	8003ece <__swbuf_r+0x7a>
 8003e70:	686c      	ldr	r4, [r5, #4]
 8003e72:	69a3      	ldr	r3, [r4, #24]
 8003e74:	60a3      	str	r3, [r4, #8]
 8003e76:	89a3      	ldrh	r3, [r4, #12]
 8003e78:	071b      	lsls	r3, r3, #28
 8003e7a:	d532      	bpl.n	8003ee2 <__swbuf_r+0x8e>
 8003e7c:	6923      	ldr	r3, [r4, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d02f      	beq.n	8003ee2 <__swbuf_r+0x8e>
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	6922      	ldr	r2, [r4, #16]
 8003e86:	b2f7      	uxtb	r7, r6
 8003e88:	1a98      	subs	r0, r3, r2
 8003e8a:	6963      	ldr	r3, [r4, #20]
 8003e8c:	b2f6      	uxtb	r6, r6
 8003e8e:	4283      	cmp	r3, r0
 8003e90:	dc05      	bgt.n	8003e9e <__swbuf_r+0x4a>
 8003e92:	0021      	movs	r1, r4
 8003e94:	0028      	movs	r0, r5
 8003e96:	f000 f93f 	bl	8004118 <_fflush_r>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d127      	bne.n	8003eee <__swbuf_r+0x9a>
 8003e9e:	68a3      	ldr	r3, [r4, #8]
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	60a3      	str	r3, [r4, #8]
 8003ea6:	6823      	ldr	r3, [r4, #0]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	6022      	str	r2, [r4, #0]
 8003eac:	701f      	strb	r7, [r3, #0]
 8003eae:	6963      	ldr	r3, [r4, #20]
 8003eb0:	4283      	cmp	r3, r0
 8003eb2:	d004      	beq.n	8003ebe <__swbuf_r+0x6a>
 8003eb4:	89a3      	ldrh	r3, [r4, #12]
 8003eb6:	07db      	lsls	r3, r3, #31
 8003eb8:	d507      	bpl.n	8003eca <__swbuf_r+0x76>
 8003eba:	2e0a      	cmp	r6, #10
 8003ebc:	d105      	bne.n	8003eca <__swbuf_r+0x76>
 8003ebe:	0021      	movs	r1, r4
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	f000 f929 	bl	8004118 <_fflush_r>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d111      	bne.n	8003eee <__swbuf_r+0x9a>
 8003eca:	0030      	movs	r0, r6
 8003ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <__swbuf_r+0xa4>)
 8003ed0:	429c      	cmp	r4, r3
 8003ed2:	d101      	bne.n	8003ed8 <__swbuf_r+0x84>
 8003ed4:	68ac      	ldr	r4, [r5, #8]
 8003ed6:	e7cc      	b.n	8003e72 <__swbuf_r+0x1e>
 8003ed8:	4b08      	ldr	r3, [pc, #32]	; (8003efc <__swbuf_r+0xa8>)
 8003eda:	429c      	cmp	r4, r3
 8003edc:	d1c9      	bne.n	8003e72 <__swbuf_r+0x1e>
 8003ede:	68ec      	ldr	r4, [r5, #12]
 8003ee0:	e7c7      	b.n	8003e72 <__swbuf_r+0x1e>
 8003ee2:	0021      	movs	r1, r4
 8003ee4:	0028      	movs	r0, r5
 8003ee6:	f000 f80b 	bl	8003f00 <__swsetup_r>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	d0c9      	beq.n	8003e82 <__swbuf_r+0x2e>
 8003eee:	2601      	movs	r6, #1
 8003ef0:	4276      	negs	r6, r6
 8003ef2:	e7ea      	b.n	8003eca <__swbuf_r+0x76>
 8003ef4:	08004b30 	.word	0x08004b30
 8003ef8:	08004b50 	.word	0x08004b50
 8003efc:	08004b10 	.word	0x08004b10

08003f00 <__swsetup_r>:
 8003f00:	4b37      	ldr	r3, [pc, #220]	; (8003fe0 <__swsetup_r+0xe0>)
 8003f02:	b570      	push	{r4, r5, r6, lr}
 8003f04:	681d      	ldr	r5, [r3, #0]
 8003f06:	0006      	movs	r6, r0
 8003f08:	000c      	movs	r4, r1
 8003f0a:	2d00      	cmp	r5, #0
 8003f0c:	d005      	beq.n	8003f1a <__swsetup_r+0x1a>
 8003f0e:	69ab      	ldr	r3, [r5, #24]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d102      	bne.n	8003f1a <__swsetup_r+0x1a>
 8003f14:	0028      	movs	r0, r5
 8003f16:	f000 f9a1 	bl	800425c <__sinit>
 8003f1a:	4b32      	ldr	r3, [pc, #200]	; (8003fe4 <__swsetup_r+0xe4>)
 8003f1c:	429c      	cmp	r4, r3
 8003f1e:	d10f      	bne.n	8003f40 <__swsetup_r+0x40>
 8003f20:	686c      	ldr	r4, [r5, #4]
 8003f22:	230c      	movs	r3, #12
 8003f24:	5ee2      	ldrsh	r2, [r4, r3]
 8003f26:	b293      	uxth	r3, r2
 8003f28:	0711      	lsls	r1, r2, #28
 8003f2a:	d42d      	bmi.n	8003f88 <__swsetup_r+0x88>
 8003f2c:	06d9      	lsls	r1, r3, #27
 8003f2e:	d411      	bmi.n	8003f54 <__swsetup_r+0x54>
 8003f30:	2309      	movs	r3, #9
 8003f32:	2001      	movs	r0, #1
 8003f34:	6033      	str	r3, [r6, #0]
 8003f36:	3337      	adds	r3, #55	; 0x37
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	81a3      	strh	r3, [r4, #12]
 8003f3c:	4240      	negs	r0, r0
 8003f3e:	bd70      	pop	{r4, r5, r6, pc}
 8003f40:	4b29      	ldr	r3, [pc, #164]	; (8003fe8 <__swsetup_r+0xe8>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	d101      	bne.n	8003f4a <__swsetup_r+0x4a>
 8003f46:	68ac      	ldr	r4, [r5, #8]
 8003f48:	e7eb      	b.n	8003f22 <__swsetup_r+0x22>
 8003f4a:	4b28      	ldr	r3, [pc, #160]	; (8003fec <__swsetup_r+0xec>)
 8003f4c:	429c      	cmp	r4, r3
 8003f4e:	d1e8      	bne.n	8003f22 <__swsetup_r+0x22>
 8003f50:	68ec      	ldr	r4, [r5, #12]
 8003f52:	e7e6      	b.n	8003f22 <__swsetup_r+0x22>
 8003f54:	075b      	lsls	r3, r3, #29
 8003f56:	d513      	bpl.n	8003f80 <__swsetup_r+0x80>
 8003f58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f5a:	2900      	cmp	r1, #0
 8003f5c:	d008      	beq.n	8003f70 <__swsetup_r+0x70>
 8003f5e:	0023      	movs	r3, r4
 8003f60:	3344      	adds	r3, #68	; 0x44
 8003f62:	4299      	cmp	r1, r3
 8003f64:	d002      	beq.n	8003f6c <__swsetup_r+0x6c>
 8003f66:	0030      	movs	r0, r6
 8003f68:	f000 fa94 	bl	8004494 <_free_r>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	6363      	str	r3, [r4, #52]	; 0x34
 8003f70:	2224      	movs	r2, #36	; 0x24
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	4393      	bics	r3, r2
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	6063      	str	r3, [r4, #4]
 8003f7c:	6923      	ldr	r3, [r4, #16]
 8003f7e:	6023      	str	r3, [r4, #0]
 8003f80:	2308      	movs	r3, #8
 8003f82:	89a2      	ldrh	r2, [r4, #12]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	6923      	ldr	r3, [r4, #16]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d10b      	bne.n	8003fa6 <__swsetup_r+0xa6>
 8003f8e:	21a0      	movs	r1, #160	; 0xa0
 8003f90:	2280      	movs	r2, #128	; 0x80
 8003f92:	89a3      	ldrh	r3, [r4, #12]
 8003f94:	0089      	lsls	r1, r1, #2
 8003f96:	0092      	lsls	r2, r2, #2
 8003f98:	400b      	ands	r3, r1
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d003      	beq.n	8003fa6 <__swsetup_r+0xa6>
 8003f9e:	0021      	movs	r1, r4
 8003fa0:	0030      	movs	r0, r6
 8003fa2:	f000 fa27 	bl	80043f4 <__smakebuf_r>
 8003fa6:	220c      	movs	r2, #12
 8003fa8:	5ea3      	ldrsh	r3, [r4, r2]
 8003faa:	2001      	movs	r0, #1
 8003fac:	001a      	movs	r2, r3
 8003fae:	b299      	uxth	r1, r3
 8003fb0:	4002      	ands	r2, r0
 8003fb2:	4203      	tst	r3, r0
 8003fb4:	d00f      	beq.n	8003fd6 <__swsetup_r+0xd6>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60a2      	str	r2, [r4, #8]
 8003fba:	6962      	ldr	r2, [r4, #20]
 8003fbc:	4252      	negs	r2, r2
 8003fbe:	61a2      	str	r2, [r4, #24]
 8003fc0:	2000      	movs	r0, #0
 8003fc2:	6922      	ldr	r2, [r4, #16]
 8003fc4:	4282      	cmp	r2, r0
 8003fc6:	d1ba      	bne.n	8003f3e <__swsetup_r+0x3e>
 8003fc8:	060a      	lsls	r2, r1, #24
 8003fca:	d5b8      	bpl.n	8003f3e <__swsetup_r+0x3e>
 8003fcc:	2240      	movs	r2, #64	; 0x40
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	81a3      	strh	r3, [r4, #12]
 8003fd2:	3801      	subs	r0, #1
 8003fd4:	e7b3      	b.n	8003f3e <__swsetup_r+0x3e>
 8003fd6:	0788      	lsls	r0, r1, #30
 8003fd8:	d400      	bmi.n	8003fdc <__swsetup_r+0xdc>
 8003fda:	6962      	ldr	r2, [r4, #20]
 8003fdc:	60a2      	str	r2, [r4, #8]
 8003fde:	e7ef      	b.n	8003fc0 <__swsetup_r+0xc0>
 8003fe0:	200000c4 	.word	0x200000c4
 8003fe4:	08004b30 	.word	0x08004b30
 8003fe8:	08004b50 	.word	0x08004b50
 8003fec:	08004b10 	.word	0x08004b10

08003ff0 <abort>:
 8003ff0:	2006      	movs	r0, #6
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	f000 fb6c 	bl	80046d0 <raise>
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fd f8da 	bl	80011b2 <_exit>
	...

08004000 <__sflush_r>:
 8004000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004002:	898b      	ldrh	r3, [r1, #12]
 8004004:	0005      	movs	r5, r0
 8004006:	000c      	movs	r4, r1
 8004008:	071a      	lsls	r2, r3, #28
 800400a:	d45f      	bmi.n	80040cc <__sflush_r+0xcc>
 800400c:	684a      	ldr	r2, [r1, #4]
 800400e:	2a00      	cmp	r2, #0
 8004010:	dc04      	bgt.n	800401c <__sflush_r+0x1c>
 8004012:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8004014:	2a00      	cmp	r2, #0
 8004016:	dc01      	bgt.n	800401c <__sflush_r+0x1c>
 8004018:	2000      	movs	r0, #0
 800401a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800401c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800401e:	2f00      	cmp	r7, #0
 8004020:	d0fa      	beq.n	8004018 <__sflush_r+0x18>
 8004022:	2200      	movs	r2, #0
 8004024:	2180      	movs	r1, #128	; 0x80
 8004026:	682e      	ldr	r6, [r5, #0]
 8004028:	602a      	str	r2, [r5, #0]
 800402a:	001a      	movs	r2, r3
 800402c:	0149      	lsls	r1, r1, #5
 800402e:	400a      	ands	r2, r1
 8004030:	420b      	tst	r3, r1
 8004032:	d034      	beq.n	800409e <__sflush_r+0x9e>
 8004034:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	075b      	lsls	r3, r3, #29
 800403a:	d506      	bpl.n	800404a <__sflush_r+0x4a>
 800403c:	6863      	ldr	r3, [r4, #4]
 800403e:	1ac0      	subs	r0, r0, r3
 8004040:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <__sflush_r+0x4a>
 8004046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004048:	1ac0      	subs	r0, r0, r3
 800404a:	0002      	movs	r2, r0
 800404c:	6a21      	ldr	r1, [r4, #32]
 800404e:	2300      	movs	r3, #0
 8004050:	0028      	movs	r0, r5
 8004052:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004054:	47b8      	blx	r7
 8004056:	89a1      	ldrh	r1, [r4, #12]
 8004058:	1c43      	adds	r3, r0, #1
 800405a:	d106      	bne.n	800406a <__sflush_r+0x6a>
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	2b1d      	cmp	r3, #29
 8004060:	d831      	bhi.n	80040c6 <__sflush_r+0xc6>
 8004062:	4a2c      	ldr	r2, [pc, #176]	; (8004114 <__sflush_r+0x114>)
 8004064:	40da      	lsrs	r2, r3
 8004066:	07d3      	lsls	r3, r2, #31
 8004068:	d52d      	bpl.n	80040c6 <__sflush_r+0xc6>
 800406a:	2300      	movs	r3, #0
 800406c:	6063      	str	r3, [r4, #4]
 800406e:	6923      	ldr	r3, [r4, #16]
 8004070:	6023      	str	r3, [r4, #0]
 8004072:	04cb      	lsls	r3, r1, #19
 8004074:	d505      	bpl.n	8004082 <__sflush_r+0x82>
 8004076:	1c43      	adds	r3, r0, #1
 8004078:	d102      	bne.n	8004080 <__sflush_r+0x80>
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d100      	bne.n	8004082 <__sflush_r+0x82>
 8004080:	6560      	str	r0, [r4, #84]	; 0x54
 8004082:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004084:	602e      	str	r6, [r5, #0]
 8004086:	2900      	cmp	r1, #0
 8004088:	d0c6      	beq.n	8004018 <__sflush_r+0x18>
 800408a:	0023      	movs	r3, r4
 800408c:	3344      	adds	r3, #68	; 0x44
 800408e:	4299      	cmp	r1, r3
 8004090:	d002      	beq.n	8004098 <__sflush_r+0x98>
 8004092:	0028      	movs	r0, r5
 8004094:	f000 f9fe 	bl	8004494 <_free_r>
 8004098:	2000      	movs	r0, #0
 800409a:	6360      	str	r0, [r4, #52]	; 0x34
 800409c:	e7bd      	b.n	800401a <__sflush_r+0x1a>
 800409e:	2301      	movs	r3, #1
 80040a0:	0028      	movs	r0, r5
 80040a2:	6a21      	ldr	r1, [r4, #32]
 80040a4:	47b8      	blx	r7
 80040a6:	1c43      	adds	r3, r0, #1
 80040a8:	d1c5      	bne.n	8004036 <__sflush_r+0x36>
 80040aa:	682b      	ldr	r3, [r5, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0c2      	beq.n	8004036 <__sflush_r+0x36>
 80040b0:	2b1d      	cmp	r3, #29
 80040b2:	d001      	beq.n	80040b8 <__sflush_r+0xb8>
 80040b4:	2b16      	cmp	r3, #22
 80040b6:	d101      	bne.n	80040bc <__sflush_r+0xbc>
 80040b8:	602e      	str	r6, [r5, #0]
 80040ba:	e7ad      	b.n	8004018 <__sflush_r+0x18>
 80040bc:	2340      	movs	r3, #64	; 0x40
 80040be:	89a2      	ldrh	r2, [r4, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	e7a9      	b.n	800401a <__sflush_r+0x1a>
 80040c6:	2340      	movs	r3, #64	; 0x40
 80040c8:	430b      	orrs	r3, r1
 80040ca:	e7fa      	b.n	80040c2 <__sflush_r+0xc2>
 80040cc:	690f      	ldr	r7, [r1, #16]
 80040ce:	2f00      	cmp	r7, #0
 80040d0:	d0a2      	beq.n	8004018 <__sflush_r+0x18>
 80040d2:	680a      	ldr	r2, [r1, #0]
 80040d4:	600f      	str	r7, [r1, #0]
 80040d6:	1bd2      	subs	r2, r2, r7
 80040d8:	9201      	str	r2, [sp, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	079b      	lsls	r3, r3, #30
 80040de:	d100      	bne.n	80040e2 <__sflush_r+0xe2>
 80040e0:	694a      	ldr	r2, [r1, #20]
 80040e2:	60a2      	str	r2, [r4, #8]
 80040e4:	9b01      	ldr	r3, [sp, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	dc00      	bgt.n	80040ec <__sflush_r+0xec>
 80040ea:	e795      	b.n	8004018 <__sflush_r+0x18>
 80040ec:	003a      	movs	r2, r7
 80040ee:	0028      	movs	r0, r5
 80040f0:	9b01      	ldr	r3, [sp, #4]
 80040f2:	6a21      	ldr	r1, [r4, #32]
 80040f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80040f6:	47b0      	blx	r6
 80040f8:	2800      	cmp	r0, #0
 80040fa:	dc06      	bgt.n	800410a <__sflush_r+0x10a>
 80040fc:	2340      	movs	r3, #64	; 0x40
 80040fe:	2001      	movs	r0, #1
 8004100:	89a2      	ldrh	r2, [r4, #12]
 8004102:	4240      	negs	r0, r0
 8004104:	4313      	orrs	r3, r2
 8004106:	81a3      	strh	r3, [r4, #12]
 8004108:	e787      	b.n	800401a <__sflush_r+0x1a>
 800410a:	9b01      	ldr	r3, [sp, #4]
 800410c:	183f      	adds	r7, r7, r0
 800410e:	1a1b      	subs	r3, r3, r0
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	e7e7      	b.n	80040e4 <__sflush_r+0xe4>
 8004114:	20400001 	.word	0x20400001

08004118 <_fflush_r>:
 8004118:	690b      	ldr	r3, [r1, #16]
 800411a:	b570      	push	{r4, r5, r6, lr}
 800411c:	0005      	movs	r5, r0
 800411e:	000c      	movs	r4, r1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <_fflush_r+0x12>
 8004124:	2500      	movs	r5, #0
 8004126:	0028      	movs	r0, r5
 8004128:	bd70      	pop	{r4, r5, r6, pc}
 800412a:	2800      	cmp	r0, #0
 800412c:	d004      	beq.n	8004138 <_fflush_r+0x20>
 800412e:	6983      	ldr	r3, [r0, #24]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <_fflush_r+0x20>
 8004134:	f000 f892 	bl	800425c <__sinit>
 8004138:	4b14      	ldr	r3, [pc, #80]	; (800418c <_fflush_r+0x74>)
 800413a:	429c      	cmp	r4, r3
 800413c:	d11b      	bne.n	8004176 <_fflush_r+0x5e>
 800413e:	686c      	ldr	r4, [r5, #4]
 8004140:	220c      	movs	r2, #12
 8004142:	5ea3      	ldrsh	r3, [r4, r2]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0ed      	beq.n	8004124 <_fflush_r+0xc>
 8004148:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800414a:	07d2      	lsls	r2, r2, #31
 800414c:	d404      	bmi.n	8004158 <_fflush_r+0x40>
 800414e:	059b      	lsls	r3, r3, #22
 8004150:	d402      	bmi.n	8004158 <_fflush_r+0x40>
 8004152:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004154:	f000 f923 	bl	800439e <__retarget_lock_acquire_recursive>
 8004158:	0028      	movs	r0, r5
 800415a:	0021      	movs	r1, r4
 800415c:	f7ff ff50 	bl	8004000 <__sflush_r>
 8004160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004162:	0005      	movs	r5, r0
 8004164:	07db      	lsls	r3, r3, #31
 8004166:	d4de      	bmi.n	8004126 <_fflush_r+0xe>
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	059b      	lsls	r3, r3, #22
 800416c:	d4db      	bmi.n	8004126 <_fflush_r+0xe>
 800416e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004170:	f000 f916 	bl	80043a0 <__retarget_lock_release_recursive>
 8004174:	e7d7      	b.n	8004126 <_fflush_r+0xe>
 8004176:	4b06      	ldr	r3, [pc, #24]	; (8004190 <_fflush_r+0x78>)
 8004178:	429c      	cmp	r4, r3
 800417a:	d101      	bne.n	8004180 <_fflush_r+0x68>
 800417c:	68ac      	ldr	r4, [r5, #8]
 800417e:	e7df      	b.n	8004140 <_fflush_r+0x28>
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <_fflush_r+0x7c>)
 8004182:	429c      	cmp	r4, r3
 8004184:	d1dc      	bne.n	8004140 <_fflush_r+0x28>
 8004186:	68ec      	ldr	r4, [r5, #12]
 8004188:	e7da      	b.n	8004140 <_fflush_r+0x28>
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	08004b30 	.word	0x08004b30
 8004190:	08004b50 	.word	0x08004b50
 8004194:	08004b10 	.word	0x08004b10

08004198 <std>:
 8004198:	2300      	movs	r3, #0
 800419a:	b510      	push	{r4, lr}
 800419c:	0004      	movs	r4, r0
 800419e:	6003      	str	r3, [r0, #0]
 80041a0:	6043      	str	r3, [r0, #4]
 80041a2:	6083      	str	r3, [r0, #8]
 80041a4:	8181      	strh	r1, [r0, #12]
 80041a6:	6643      	str	r3, [r0, #100]	; 0x64
 80041a8:	0019      	movs	r1, r3
 80041aa:	81c2      	strh	r2, [r0, #14]
 80041ac:	6103      	str	r3, [r0, #16]
 80041ae:	6143      	str	r3, [r0, #20]
 80041b0:	6183      	str	r3, [r0, #24]
 80041b2:	2208      	movs	r2, #8
 80041b4:	305c      	adds	r0, #92	; 0x5c
 80041b6:	f7ff fb61 	bl	800387c <memset>
 80041ba:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <std+0x38>)
 80041bc:	6224      	str	r4, [r4, #32]
 80041be:	6263      	str	r3, [r4, #36]	; 0x24
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <std+0x3c>)
 80041c2:	62a3      	str	r3, [r4, #40]	; 0x28
 80041c4:	4b04      	ldr	r3, [pc, #16]	; (80041d8 <std+0x40>)
 80041c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041c8:	4b04      	ldr	r3, [pc, #16]	; (80041dc <std+0x44>)
 80041ca:	6323      	str	r3, [r4, #48]	; 0x30
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	08004711 	.word	0x08004711
 80041d4:	08004739 	.word	0x08004739
 80041d8:	08004771 	.word	0x08004771
 80041dc:	0800479d 	.word	0x0800479d

080041e0 <_cleanup_r>:
 80041e0:	b510      	push	{r4, lr}
 80041e2:	4902      	ldr	r1, [pc, #8]	; (80041ec <_cleanup_r+0xc>)
 80041e4:	f000 f8ba 	bl	800435c <_fwalk_reent>
 80041e8:	bd10      	pop	{r4, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	08004119 	.word	0x08004119

080041f0 <__sfmoreglue>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	2568      	movs	r5, #104	; 0x68
 80041f4:	1e4a      	subs	r2, r1, #1
 80041f6:	4355      	muls	r5, r2
 80041f8:	000e      	movs	r6, r1
 80041fa:	0029      	movs	r1, r5
 80041fc:	3174      	adds	r1, #116	; 0x74
 80041fe:	f000 f9b5 	bl	800456c <_malloc_r>
 8004202:	1e04      	subs	r4, r0, #0
 8004204:	d008      	beq.n	8004218 <__sfmoreglue+0x28>
 8004206:	2100      	movs	r1, #0
 8004208:	002a      	movs	r2, r5
 800420a:	6001      	str	r1, [r0, #0]
 800420c:	6046      	str	r6, [r0, #4]
 800420e:	300c      	adds	r0, #12
 8004210:	60a0      	str	r0, [r4, #8]
 8004212:	3268      	adds	r2, #104	; 0x68
 8004214:	f7ff fb32 	bl	800387c <memset>
 8004218:	0020      	movs	r0, r4
 800421a:	bd70      	pop	{r4, r5, r6, pc}

0800421c <__sfp_lock_acquire>:
 800421c:	b510      	push	{r4, lr}
 800421e:	4802      	ldr	r0, [pc, #8]	; (8004228 <__sfp_lock_acquire+0xc>)
 8004220:	f000 f8bd 	bl	800439e <__retarget_lock_acquire_recursive>
 8004224:	bd10      	pop	{r4, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	20000239 	.word	0x20000239

0800422c <__sfp_lock_release>:
 800422c:	b510      	push	{r4, lr}
 800422e:	4802      	ldr	r0, [pc, #8]	; (8004238 <__sfp_lock_release+0xc>)
 8004230:	f000 f8b6 	bl	80043a0 <__retarget_lock_release_recursive>
 8004234:	bd10      	pop	{r4, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	20000239 	.word	0x20000239

0800423c <__sinit_lock_acquire>:
 800423c:	b510      	push	{r4, lr}
 800423e:	4802      	ldr	r0, [pc, #8]	; (8004248 <__sinit_lock_acquire+0xc>)
 8004240:	f000 f8ad 	bl	800439e <__retarget_lock_acquire_recursive>
 8004244:	bd10      	pop	{r4, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	2000023a 	.word	0x2000023a

0800424c <__sinit_lock_release>:
 800424c:	b510      	push	{r4, lr}
 800424e:	4802      	ldr	r0, [pc, #8]	; (8004258 <__sinit_lock_release+0xc>)
 8004250:	f000 f8a6 	bl	80043a0 <__retarget_lock_release_recursive>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	2000023a 	.word	0x2000023a

0800425c <__sinit>:
 800425c:	b513      	push	{r0, r1, r4, lr}
 800425e:	0004      	movs	r4, r0
 8004260:	f7ff ffec 	bl	800423c <__sinit_lock_acquire>
 8004264:	69a3      	ldr	r3, [r4, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <__sinit+0x14>
 800426a:	f7ff ffef 	bl	800424c <__sinit_lock_release>
 800426e:	bd13      	pop	{r0, r1, r4, pc}
 8004270:	64a3      	str	r3, [r4, #72]	; 0x48
 8004272:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004274:	6523      	str	r3, [r4, #80]	; 0x50
 8004276:	4b13      	ldr	r3, [pc, #76]	; (80042c4 <__sinit+0x68>)
 8004278:	4a13      	ldr	r2, [pc, #76]	; (80042c8 <__sinit+0x6c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	62a2      	str	r2, [r4, #40]	; 0x28
 800427e:	9301      	str	r3, [sp, #4]
 8004280:	42a3      	cmp	r3, r4
 8004282:	d101      	bne.n	8004288 <__sinit+0x2c>
 8004284:	2301      	movs	r3, #1
 8004286:	61a3      	str	r3, [r4, #24]
 8004288:	0020      	movs	r0, r4
 800428a:	f000 f81f 	bl	80042cc <__sfp>
 800428e:	6060      	str	r0, [r4, #4]
 8004290:	0020      	movs	r0, r4
 8004292:	f000 f81b 	bl	80042cc <__sfp>
 8004296:	60a0      	str	r0, [r4, #8]
 8004298:	0020      	movs	r0, r4
 800429a:	f000 f817 	bl	80042cc <__sfp>
 800429e:	2200      	movs	r2, #0
 80042a0:	2104      	movs	r1, #4
 80042a2:	60e0      	str	r0, [r4, #12]
 80042a4:	6860      	ldr	r0, [r4, #4]
 80042a6:	f7ff ff77 	bl	8004198 <std>
 80042aa:	2201      	movs	r2, #1
 80042ac:	2109      	movs	r1, #9
 80042ae:	68a0      	ldr	r0, [r4, #8]
 80042b0:	f7ff ff72 	bl	8004198 <std>
 80042b4:	2202      	movs	r2, #2
 80042b6:	2112      	movs	r1, #18
 80042b8:	68e0      	ldr	r0, [r4, #12]
 80042ba:	f7ff ff6d 	bl	8004198 <std>
 80042be:	2301      	movs	r3, #1
 80042c0:	61a3      	str	r3, [r4, #24]
 80042c2:	e7d2      	b.n	800426a <__sinit+0xe>
 80042c4:	08004ad8 	.word	0x08004ad8
 80042c8:	080041e1 	.word	0x080041e1

080042cc <__sfp>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	0007      	movs	r7, r0
 80042d0:	f7ff ffa4 	bl	800421c <__sfp_lock_acquire>
 80042d4:	4b1f      	ldr	r3, [pc, #124]	; (8004354 <__sfp+0x88>)
 80042d6:	681e      	ldr	r6, [r3, #0]
 80042d8:	69b3      	ldr	r3, [r6, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <__sfp+0x18>
 80042de:	0030      	movs	r0, r6
 80042e0:	f7ff ffbc 	bl	800425c <__sinit>
 80042e4:	3648      	adds	r6, #72	; 0x48
 80042e6:	68b4      	ldr	r4, [r6, #8]
 80042e8:	6873      	ldr	r3, [r6, #4]
 80042ea:	3b01      	subs	r3, #1
 80042ec:	d504      	bpl.n	80042f8 <__sfp+0x2c>
 80042ee:	6833      	ldr	r3, [r6, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d022      	beq.n	800433a <__sfp+0x6e>
 80042f4:	6836      	ldr	r6, [r6, #0]
 80042f6:	e7f6      	b.n	80042e6 <__sfp+0x1a>
 80042f8:	220c      	movs	r2, #12
 80042fa:	5ea5      	ldrsh	r5, [r4, r2]
 80042fc:	2d00      	cmp	r5, #0
 80042fe:	d11a      	bne.n	8004336 <__sfp+0x6a>
 8004300:	0020      	movs	r0, r4
 8004302:	4b15      	ldr	r3, [pc, #84]	; (8004358 <__sfp+0x8c>)
 8004304:	3058      	adds	r0, #88	; 0x58
 8004306:	60e3      	str	r3, [r4, #12]
 8004308:	6665      	str	r5, [r4, #100]	; 0x64
 800430a:	f000 f847 	bl	800439c <__retarget_lock_init_recursive>
 800430e:	f7ff ff8d 	bl	800422c <__sfp_lock_release>
 8004312:	0020      	movs	r0, r4
 8004314:	2208      	movs	r2, #8
 8004316:	0029      	movs	r1, r5
 8004318:	6025      	str	r5, [r4, #0]
 800431a:	60a5      	str	r5, [r4, #8]
 800431c:	6065      	str	r5, [r4, #4]
 800431e:	6125      	str	r5, [r4, #16]
 8004320:	6165      	str	r5, [r4, #20]
 8004322:	61a5      	str	r5, [r4, #24]
 8004324:	305c      	adds	r0, #92	; 0x5c
 8004326:	f7ff faa9 	bl	800387c <memset>
 800432a:	6365      	str	r5, [r4, #52]	; 0x34
 800432c:	63a5      	str	r5, [r4, #56]	; 0x38
 800432e:	64a5      	str	r5, [r4, #72]	; 0x48
 8004330:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004332:	0020      	movs	r0, r4
 8004334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004336:	3468      	adds	r4, #104	; 0x68
 8004338:	e7d7      	b.n	80042ea <__sfp+0x1e>
 800433a:	2104      	movs	r1, #4
 800433c:	0038      	movs	r0, r7
 800433e:	f7ff ff57 	bl	80041f0 <__sfmoreglue>
 8004342:	1e04      	subs	r4, r0, #0
 8004344:	6030      	str	r0, [r6, #0]
 8004346:	d1d5      	bne.n	80042f4 <__sfp+0x28>
 8004348:	f7ff ff70 	bl	800422c <__sfp_lock_release>
 800434c:	230c      	movs	r3, #12
 800434e:	603b      	str	r3, [r7, #0]
 8004350:	e7ef      	b.n	8004332 <__sfp+0x66>
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	08004ad8 	.word	0x08004ad8
 8004358:	ffff0001 	.word	0xffff0001

0800435c <_fwalk_reent>:
 800435c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800435e:	0004      	movs	r4, r0
 8004360:	0006      	movs	r6, r0
 8004362:	2700      	movs	r7, #0
 8004364:	9101      	str	r1, [sp, #4]
 8004366:	3448      	adds	r4, #72	; 0x48
 8004368:	6863      	ldr	r3, [r4, #4]
 800436a:	68a5      	ldr	r5, [r4, #8]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	9b00      	ldr	r3, [sp, #0]
 8004370:	3b01      	subs	r3, #1
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	d504      	bpl.n	8004380 <_fwalk_reent+0x24>
 8004376:	6824      	ldr	r4, [r4, #0]
 8004378:	2c00      	cmp	r4, #0
 800437a:	d1f5      	bne.n	8004368 <_fwalk_reent+0xc>
 800437c:	0038      	movs	r0, r7
 800437e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004380:	89ab      	ldrh	r3, [r5, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d908      	bls.n	8004398 <_fwalk_reent+0x3c>
 8004386:	220e      	movs	r2, #14
 8004388:	5eab      	ldrsh	r3, [r5, r2]
 800438a:	3301      	adds	r3, #1
 800438c:	d004      	beq.n	8004398 <_fwalk_reent+0x3c>
 800438e:	0029      	movs	r1, r5
 8004390:	0030      	movs	r0, r6
 8004392:	9b01      	ldr	r3, [sp, #4]
 8004394:	4798      	blx	r3
 8004396:	4307      	orrs	r7, r0
 8004398:	3568      	adds	r5, #104	; 0x68
 800439a:	e7e8      	b.n	800436e <_fwalk_reent+0x12>

0800439c <__retarget_lock_init_recursive>:
 800439c:	4770      	bx	lr

0800439e <__retarget_lock_acquire_recursive>:
 800439e:	4770      	bx	lr

080043a0 <__retarget_lock_release_recursive>:
 80043a0:	4770      	bx	lr
	...

080043a4 <__swhatbuf_r>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	000e      	movs	r6, r1
 80043a8:	001d      	movs	r5, r3
 80043aa:	230e      	movs	r3, #14
 80043ac:	5ec9      	ldrsh	r1, [r1, r3]
 80043ae:	0014      	movs	r4, r2
 80043b0:	b096      	sub	sp, #88	; 0x58
 80043b2:	2900      	cmp	r1, #0
 80043b4:	da08      	bge.n	80043c8 <__swhatbuf_r+0x24>
 80043b6:	220c      	movs	r2, #12
 80043b8:	5eb3      	ldrsh	r3, [r6, r2]
 80043ba:	2200      	movs	r2, #0
 80043bc:	602a      	str	r2, [r5, #0]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	d411      	bmi.n	80043e6 <__swhatbuf_r+0x42>
 80043c2:	2380      	movs	r3, #128	; 0x80
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	e00f      	b.n	80043e8 <__swhatbuf_r+0x44>
 80043c8:	466a      	mov	r2, sp
 80043ca:	f000 fa13 	bl	80047f4 <_fstat_r>
 80043ce:	2800      	cmp	r0, #0
 80043d0:	dbf1      	blt.n	80043b6 <__swhatbuf_r+0x12>
 80043d2:	23f0      	movs	r3, #240	; 0xf0
 80043d4:	9901      	ldr	r1, [sp, #4]
 80043d6:	021b      	lsls	r3, r3, #8
 80043d8:	4019      	ands	r1, r3
 80043da:	4b05      	ldr	r3, [pc, #20]	; (80043f0 <__swhatbuf_r+0x4c>)
 80043dc:	18c9      	adds	r1, r1, r3
 80043de:	424b      	negs	r3, r1
 80043e0:	4159      	adcs	r1, r3
 80043e2:	6029      	str	r1, [r5, #0]
 80043e4:	e7ed      	b.n	80043c2 <__swhatbuf_r+0x1e>
 80043e6:	2340      	movs	r3, #64	; 0x40
 80043e8:	2000      	movs	r0, #0
 80043ea:	6023      	str	r3, [r4, #0]
 80043ec:	b016      	add	sp, #88	; 0x58
 80043ee:	bd70      	pop	{r4, r5, r6, pc}
 80043f0:	ffffe000 	.word	0xffffe000

080043f4 <__smakebuf_r>:
 80043f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043f6:	2602      	movs	r6, #2
 80043f8:	898b      	ldrh	r3, [r1, #12]
 80043fa:	0005      	movs	r5, r0
 80043fc:	000c      	movs	r4, r1
 80043fe:	4233      	tst	r3, r6
 8004400:	d006      	beq.n	8004410 <__smakebuf_r+0x1c>
 8004402:	0023      	movs	r3, r4
 8004404:	3347      	adds	r3, #71	; 0x47
 8004406:	6023      	str	r3, [r4, #0]
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	2301      	movs	r3, #1
 800440c:	6163      	str	r3, [r4, #20]
 800440e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004410:	466a      	mov	r2, sp
 8004412:	ab01      	add	r3, sp, #4
 8004414:	f7ff ffc6 	bl	80043a4 <__swhatbuf_r>
 8004418:	9900      	ldr	r1, [sp, #0]
 800441a:	0007      	movs	r7, r0
 800441c:	0028      	movs	r0, r5
 800441e:	f000 f8a5 	bl	800456c <_malloc_r>
 8004422:	2800      	cmp	r0, #0
 8004424:	d108      	bne.n	8004438 <__smakebuf_r+0x44>
 8004426:	220c      	movs	r2, #12
 8004428:	5ea3      	ldrsh	r3, [r4, r2]
 800442a:	059a      	lsls	r2, r3, #22
 800442c:	d4ef      	bmi.n	800440e <__smakebuf_r+0x1a>
 800442e:	2203      	movs	r2, #3
 8004430:	4393      	bics	r3, r2
 8004432:	431e      	orrs	r6, r3
 8004434:	81a6      	strh	r6, [r4, #12]
 8004436:	e7e4      	b.n	8004402 <__smakebuf_r+0xe>
 8004438:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <__smakebuf_r+0x84>)
 800443a:	62ab      	str	r3, [r5, #40]	; 0x28
 800443c:	2380      	movs	r3, #128	; 0x80
 800443e:	89a2      	ldrh	r2, [r4, #12]
 8004440:	6020      	str	r0, [r4, #0]
 8004442:	4313      	orrs	r3, r2
 8004444:	81a3      	strh	r3, [r4, #12]
 8004446:	9b00      	ldr	r3, [sp, #0]
 8004448:	6120      	str	r0, [r4, #16]
 800444a:	6163      	str	r3, [r4, #20]
 800444c:	9b01      	ldr	r3, [sp, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00d      	beq.n	800446e <__smakebuf_r+0x7a>
 8004452:	0028      	movs	r0, r5
 8004454:	230e      	movs	r3, #14
 8004456:	5ee1      	ldrsh	r1, [r4, r3]
 8004458:	f000 f9de 	bl	8004818 <_isatty_r>
 800445c:	2800      	cmp	r0, #0
 800445e:	d006      	beq.n	800446e <__smakebuf_r+0x7a>
 8004460:	2203      	movs	r2, #3
 8004462:	89a3      	ldrh	r3, [r4, #12]
 8004464:	4393      	bics	r3, r2
 8004466:	001a      	movs	r2, r3
 8004468:	2301      	movs	r3, #1
 800446a:	4313      	orrs	r3, r2
 800446c:	81a3      	strh	r3, [r4, #12]
 800446e:	89a0      	ldrh	r0, [r4, #12]
 8004470:	4307      	orrs	r7, r0
 8004472:	81a7      	strh	r7, [r4, #12]
 8004474:	e7cb      	b.n	800440e <__smakebuf_r+0x1a>
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	080041e1 	.word	0x080041e1

0800447c <memchr>:
 800447c:	b2c9      	uxtb	r1, r1
 800447e:	1882      	adds	r2, r0, r2
 8004480:	4290      	cmp	r0, r2
 8004482:	d101      	bne.n	8004488 <memchr+0xc>
 8004484:	2000      	movs	r0, #0
 8004486:	4770      	bx	lr
 8004488:	7803      	ldrb	r3, [r0, #0]
 800448a:	428b      	cmp	r3, r1
 800448c:	d0fb      	beq.n	8004486 <memchr+0xa>
 800448e:	3001      	adds	r0, #1
 8004490:	e7f6      	b.n	8004480 <memchr+0x4>
	...

08004494 <_free_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	0005      	movs	r5, r0
 8004498:	2900      	cmp	r1, #0
 800449a:	d010      	beq.n	80044be <_free_r+0x2a>
 800449c:	1f0c      	subs	r4, r1, #4
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	da00      	bge.n	80044a6 <_free_r+0x12>
 80044a4:	18e4      	adds	r4, r4, r3
 80044a6:	0028      	movs	r0, r5
 80044a8:	f000 f9dc 	bl	8004864 <__malloc_lock>
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <_free_r+0x90>)
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d105      	bne.n	80044c0 <_free_r+0x2c>
 80044b4:	6063      	str	r3, [r4, #4]
 80044b6:	6014      	str	r4, [r2, #0]
 80044b8:	0028      	movs	r0, r5
 80044ba:	f000 f9db 	bl	8004874 <__malloc_unlock>
 80044be:	bd70      	pop	{r4, r5, r6, pc}
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d908      	bls.n	80044d6 <_free_r+0x42>
 80044c4:	6821      	ldr	r1, [r4, #0]
 80044c6:	1860      	adds	r0, r4, r1
 80044c8:	4283      	cmp	r3, r0
 80044ca:	d1f3      	bne.n	80044b4 <_free_r+0x20>
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	1841      	adds	r1, r0, r1
 80044d2:	6021      	str	r1, [r4, #0]
 80044d4:	e7ee      	b.n	80044b4 <_free_r+0x20>
 80044d6:	001a      	movs	r2, r3
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <_free_r+0x4e>
 80044de:	42a3      	cmp	r3, r4
 80044e0:	d9f9      	bls.n	80044d6 <_free_r+0x42>
 80044e2:	6811      	ldr	r1, [r2, #0]
 80044e4:	1850      	adds	r0, r2, r1
 80044e6:	42a0      	cmp	r0, r4
 80044e8:	d10b      	bne.n	8004502 <_free_r+0x6e>
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1809      	adds	r1, r1, r0
 80044ee:	1850      	adds	r0, r2, r1
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	4283      	cmp	r3, r0
 80044f4:	d1e0      	bne.n	80044b8 <_free_r+0x24>
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	1841      	adds	r1, r0, r1
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	6053      	str	r3, [r2, #4]
 8004500:	e7da      	b.n	80044b8 <_free_r+0x24>
 8004502:	42a0      	cmp	r0, r4
 8004504:	d902      	bls.n	800450c <_free_r+0x78>
 8004506:	230c      	movs	r3, #12
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	e7d5      	b.n	80044b8 <_free_r+0x24>
 800450c:	6821      	ldr	r1, [r4, #0]
 800450e:	1860      	adds	r0, r4, r1
 8004510:	4283      	cmp	r3, r0
 8004512:	d103      	bne.n	800451c <_free_r+0x88>
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	1841      	adds	r1, r0, r1
 800451a:	6021      	str	r1, [r4, #0]
 800451c:	6063      	str	r3, [r4, #4]
 800451e:	6054      	str	r4, [r2, #4]
 8004520:	e7ca      	b.n	80044b8 <_free_r+0x24>
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	2000023c 	.word	0x2000023c

08004528 <sbrk_aligned>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4e0f      	ldr	r6, [pc, #60]	; (8004568 <sbrk_aligned+0x40>)
 800452c:	000d      	movs	r5, r1
 800452e:	6831      	ldr	r1, [r6, #0]
 8004530:	0004      	movs	r4, r0
 8004532:	2900      	cmp	r1, #0
 8004534:	d102      	bne.n	800453c <sbrk_aligned+0x14>
 8004536:	f000 f88f 	bl	8004658 <_sbrk_r>
 800453a:	6030      	str	r0, [r6, #0]
 800453c:	0029      	movs	r1, r5
 800453e:	0020      	movs	r0, r4
 8004540:	f000 f88a 	bl	8004658 <_sbrk_r>
 8004544:	1c43      	adds	r3, r0, #1
 8004546:	d00a      	beq.n	800455e <sbrk_aligned+0x36>
 8004548:	2303      	movs	r3, #3
 800454a:	1cc5      	adds	r5, r0, #3
 800454c:	439d      	bics	r5, r3
 800454e:	42a8      	cmp	r0, r5
 8004550:	d007      	beq.n	8004562 <sbrk_aligned+0x3a>
 8004552:	1a29      	subs	r1, r5, r0
 8004554:	0020      	movs	r0, r4
 8004556:	f000 f87f 	bl	8004658 <_sbrk_r>
 800455a:	1c43      	adds	r3, r0, #1
 800455c:	d101      	bne.n	8004562 <sbrk_aligned+0x3a>
 800455e:	2501      	movs	r5, #1
 8004560:	426d      	negs	r5, r5
 8004562:	0028      	movs	r0, r5
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	20000240 	.word	0x20000240

0800456c <_malloc_r>:
 800456c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800456e:	2203      	movs	r2, #3
 8004570:	1ccb      	adds	r3, r1, #3
 8004572:	4393      	bics	r3, r2
 8004574:	3308      	adds	r3, #8
 8004576:	0006      	movs	r6, r0
 8004578:	001f      	movs	r7, r3
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d232      	bcs.n	80045e4 <_malloc_r+0x78>
 800457e:	270c      	movs	r7, #12
 8004580:	42b9      	cmp	r1, r7
 8004582:	d831      	bhi.n	80045e8 <_malloc_r+0x7c>
 8004584:	0030      	movs	r0, r6
 8004586:	f000 f96d 	bl	8004864 <__malloc_lock>
 800458a:	4d32      	ldr	r5, [pc, #200]	; (8004654 <_malloc_r+0xe8>)
 800458c:	682b      	ldr	r3, [r5, #0]
 800458e:	001c      	movs	r4, r3
 8004590:	2c00      	cmp	r4, #0
 8004592:	d12e      	bne.n	80045f2 <_malloc_r+0x86>
 8004594:	0039      	movs	r1, r7
 8004596:	0030      	movs	r0, r6
 8004598:	f7ff ffc6 	bl	8004528 <sbrk_aligned>
 800459c:	0004      	movs	r4, r0
 800459e:	1c43      	adds	r3, r0, #1
 80045a0:	d11e      	bne.n	80045e0 <_malloc_r+0x74>
 80045a2:	682c      	ldr	r4, [r5, #0]
 80045a4:	0025      	movs	r5, r4
 80045a6:	2d00      	cmp	r5, #0
 80045a8:	d14a      	bne.n	8004640 <_malloc_r+0xd4>
 80045aa:	6823      	ldr	r3, [r4, #0]
 80045ac:	0029      	movs	r1, r5
 80045ae:	18e3      	adds	r3, r4, r3
 80045b0:	0030      	movs	r0, r6
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	f000 f850 	bl	8004658 <_sbrk_r>
 80045b8:	9b01      	ldr	r3, [sp, #4]
 80045ba:	4283      	cmp	r3, r0
 80045bc:	d143      	bne.n	8004646 <_malloc_r+0xda>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	3703      	adds	r7, #3
 80045c2:	1aff      	subs	r7, r7, r3
 80045c4:	2303      	movs	r3, #3
 80045c6:	439f      	bics	r7, r3
 80045c8:	3708      	adds	r7, #8
 80045ca:	2f0c      	cmp	r7, #12
 80045cc:	d200      	bcs.n	80045d0 <_malloc_r+0x64>
 80045ce:	270c      	movs	r7, #12
 80045d0:	0039      	movs	r1, r7
 80045d2:	0030      	movs	r0, r6
 80045d4:	f7ff ffa8 	bl	8004528 <sbrk_aligned>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d034      	beq.n	8004646 <_malloc_r+0xda>
 80045dc:	6823      	ldr	r3, [r4, #0]
 80045de:	19df      	adds	r7, r3, r7
 80045e0:	6027      	str	r7, [r4, #0]
 80045e2:	e013      	b.n	800460c <_malloc_r+0xa0>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	dacb      	bge.n	8004580 <_malloc_r+0x14>
 80045e8:	230c      	movs	r3, #12
 80045ea:	2500      	movs	r5, #0
 80045ec:	6033      	str	r3, [r6, #0]
 80045ee:	0028      	movs	r0, r5
 80045f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045f2:	6822      	ldr	r2, [r4, #0]
 80045f4:	1bd1      	subs	r1, r2, r7
 80045f6:	d420      	bmi.n	800463a <_malloc_r+0xce>
 80045f8:	290b      	cmp	r1, #11
 80045fa:	d917      	bls.n	800462c <_malloc_r+0xc0>
 80045fc:	19e2      	adds	r2, r4, r7
 80045fe:	6027      	str	r7, [r4, #0]
 8004600:	42a3      	cmp	r3, r4
 8004602:	d111      	bne.n	8004628 <_malloc_r+0xbc>
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	6863      	ldr	r3, [r4, #4]
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	6053      	str	r3, [r2, #4]
 800460c:	0030      	movs	r0, r6
 800460e:	0025      	movs	r5, r4
 8004610:	f000 f930 	bl	8004874 <__malloc_unlock>
 8004614:	2207      	movs	r2, #7
 8004616:	350b      	adds	r5, #11
 8004618:	1d23      	adds	r3, r4, #4
 800461a:	4395      	bics	r5, r2
 800461c:	1aea      	subs	r2, r5, r3
 800461e:	429d      	cmp	r5, r3
 8004620:	d0e5      	beq.n	80045ee <_malloc_r+0x82>
 8004622:	1b5b      	subs	r3, r3, r5
 8004624:	50a3      	str	r3, [r4, r2]
 8004626:	e7e2      	b.n	80045ee <_malloc_r+0x82>
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	e7ec      	b.n	8004606 <_malloc_r+0x9a>
 800462c:	6862      	ldr	r2, [r4, #4]
 800462e:	42a3      	cmp	r3, r4
 8004630:	d101      	bne.n	8004636 <_malloc_r+0xca>
 8004632:	602a      	str	r2, [r5, #0]
 8004634:	e7ea      	b.n	800460c <_malloc_r+0xa0>
 8004636:	605a      	str	r2, [r3, #4]
 8004638:	e7e8      	b.n	800460c <_malloc_r+0xa0>
 800463a:	0023      	movs	r3, r4
 800463c:	6864      	ldr	r4, [r4, #4]
 800463e:	e7a7      	b.n	8004590 <_malloc_r+0x24>
 8004640:	002c      	movs	r4, r5
 8004642:	686d      	ldr	r5, [r5, #4]
 8004644:	e7af      	b.n	80045a6 <_malloc_r+0x3a>
 8004646:	230c      	movs	r3, #12
 8004648:	0030      	movs	r0, r6
 800464a:	6033      	str	r3, [r6, #0]
 800464c:	f000 f912 	bl	8004874 <__malloc_unlock>
 8004650:	e7cd      	b.n	80045ee <_malloc_r+0x82>
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	2000023c 	.word	0x2000023c

08004658 <_sbrk_r>:
 8004658:	2300      	movs	r3, #0
 800465a:	b570      	push	{r4, r5, r6, lr}
 800465c:	4d06      	ldr	r5, [pc, #24]	; (8004678 <_sbrk_r+0x20>)
 800465e:	0004      	movs	r4, r0
 8004660:	0008      	movs	r0, r1
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fc fe16 	bl	8001294 <_sbrk>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d103      	bne.n	8004674 <_sbrk_r+0x1c>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d000      	beq.n	8004674 <_sbrk_r+0x1c>
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	20000244 	.word	0x20000244

0800467c <_raise_r>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	0004      	movs	r4, r0
 8004680:	000d      	movs	r5, r1
 8004682:	291f      	cmp	r1, #31
 8004684:	d904      	bls.n	8004690 <_raise_r+0x14>
 8004686:	2316      	movs	r3, #22
 8004688:	6003      	str	r3, [r0, #0]
 800468a:	2001      	movs	r0, #1
 800468c:	4240      	negs	r0, r0
 800468e:	bd70      	pop	{r4, r5, r6, pc}
 8004690:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <_raise_r+0x24>
 8004696:	008a      	lsls	r2, r1, #2
 8004698:	189b      	adds	r3, r3, r2
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	2a00      	cmp	r2, #0
 800469e:	d108      	bne.n	80046b2 <_raise_r+0x36>
 80046a0:	0020      	movs	r0, r4
 80046a2:	f000 f831 	bl	8004708 <_getpid_r>
 80046a6:	002a      	movs	r2, r5
 80046a8:	0001      	movs	r1, r0
 80046aa:	0020      	movs	r0, r4
 80046ac:	f000 f81a 	bl	80046e4 <_kill_r>
 80046b0:	e7ed      	b.n	800468e <_raise_r+0x12>
 80046b2:	2000      	movs	r0, #0
 80046b4:	2a01      	cmp	r2, #1
 80046b6:	d0ea      	beq.n	800468e <_raise_r+0x12>
 80046b8:	1c51      	adds	r1, r2, #1
 80046ba:	d103      	bne.n	80046c4 <_raise_r+0x48>
 80046bc:	2316      	movs	r3, #22
 80046be:	3001      	adds	r0, #1
 80046c0:	6023      	str	r3, [r4, #0]
 80046c2:	e7e4      	b.n	800468e <_raise_r+0x12>
 80046c4:	2400      	movs	r4, #0
 80046c6:	0028      	movs	r0, r5
 80046c8:	601c      	str	r4, [r3, #0]
 80046ca:	4790      	blx	r2
 80046cc:	0020      	movs	r0, r4
 80046ce:	e7de      	b.n	800468e <_raise_r+0x12>

080046d0 <raise>:
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4b03      	ldr	r3, [pc, #12]	; (80046e0 <raise+0x10>)
 80046d4:	0001      	movs	r1, r0
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	f7ff ffd0 	bl	800467c <_raise_r>
 80046dc:	bd10      	pop	{r4, pc}
 80046de:	46c0      	nop			; (mov r8, r8)
 80046e0:	200000c4 	.word	0x200000c4

080046e4 <_kill_r>:
 80046e4:	2300      	movs	r3, #0
 80046e6:	b570      	push	{r4, r5, r6, lr}
 80046e8:	4d06      	ldr	r5, [pc, #24]	; (8004704 <_kill_r+0x20>)
 80046ea:	0004      	movs	r4, r0
 80046ec:	0008      	movs	r0, r1
 80046ee:	0011      	movs	r1, r2
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	f7fc fd4e 	bl	8001192 <_kill>
 80046f6:	1c43      	adds	r3, r0, #1
 80046f8:	d103      	bne.n	8004702 <_kill_r+0x1e>
 80046fa:	682b      	ldr	r3, [r5, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d000      	beq.n	8004702 <_kill_r+0x1e>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd70      	pop	{r4, r5, r6, pc}
 8004704:	20000244 	.word	0x20000244

08004708 <_getpid_r>:
 8004708:	b510      	push	{r4, lr}
 800470a:	f7fc fd3c 	bl	8001186 <_getpid>
 800470e:	bd10      	pop	{r4, pc}

08004710 <__sread>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	000c      	movs	r4, r1
 8004714:	250e      	movs	r5, #14
 8004716:	5f49      	ldrsh	r1, [r1, r5]
 8004718:	f000 f8b4 	bl	8004884 <_read_r>
 800471c:	2800      	cmp	r0, #0
 800471e:	db03      	blt.n	8004728 <__sread+0x18>
 8004720:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004722:	181b      	adds	r3, r3, r0
 8004724:	6563      	str	r3, [r4, #84]	; 0x54
 8004726:	bd70      	pop	{r4, r5, r6, pc}
 8004728:	89a3      	ldrh	r3, [r4, #12]
 800472a:	4a02      	ldr	r2, [pc, #8]	; (8004734 <__sread+0x24>)
 800472c:	4013      	ands	r3, r2
 800472e:	81a3      	strh	r3, [r4, #12]
 8004730:	e7f9      	b.n	8004726 <__sread+0x16>
 8004732:	46c0      	nop			; (mov r8, r8)
 8004734:	ffffefff 	.word	0xffffefff

08004738 <__swrite>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	001f      	movs	r7, r3
 800473c:	898b      	ldrh	r3, [r1, #12]
 800473e:	0005      	movs	r5, r0
 8004740:	000c      	movs	r4, r1
 8004742:	0016      	movs	r6, r2
 8004744:	05db      	lsls	r3, r3, #23
 8004746:	d505      	bpl.n	8004754 <__swrite+0x1c>
 8004748:	230e      	movs	r3, #14
 800474a:	5ec9      	ldrsh	r1, [r1, r3]
 800474c:	2200      	movs	r2, #0
 800474e:	2302      	movs	r3, #2
 8004750:	f000 f874 	bl	800483c <_lseek_r>
 8004754:	89a3      	ldrh	r3, [r4, #12]
 8004756:	4a05      	ldr	r2, [pc, #20]	; (800476c <__swrite+0x34>)
 8004758:	0028      	movs	r0, r5
 800475a:	4013      	ands	r3, r2
 800475c:	81a3      	strh	r3, [r4, #12]
 800475e:	0032      	movs	r2, r6
 8004760:	230e      	movs	r3, #14
 8004762:	5ee1      	ldrsh	r1, [r4, r3]
 8004764:	003b      	movs	r3, r7
 8004766:	f000 f81f 	bl	80047a8 <_write_r>
 800476a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476c:	ffffefff 	.word	0xffffefff

08004770 <__sseek>:
 8004770:	b570      	push	{r4, r5, r6, lr}
 8004772:	000c      	movs	r4, r1
 8004774:	250e      	movs	r5, #14
 8004776:	5f49      	ldrsh	r1, [r1, r5]
 8004778:	f000 f860 	bl	800483c <_lseek_r>
 800477c:	89a3      	ldrh	r3, [r4, #12]
 800477e:	1c42      	adds	r2, r0, #1
 8004780:	d103      	bne.n	800478a <__sseek+0x1a>
 8004782:	4a05      	ldr	r2, [pc, #20]	; (8004798 <__sseek+0x28>)
 8004784:	4013      	ands	r3, r2
 8004786:	81a3      	strh	r3, [r4, #12]
 8004788:	bd70      	pop	{r4, r5, r6, pc}
 800478a:	2280      	movs	r2, #128	; 0x80
 800478c:	0152      	lsls	r2, r2, #5
 800478e:	4313      	orrs	r3, r2
 8004790:	81a3      	strh	r3, [r4, #12]
 8004792:	6560      	str	r0, [r4, #84]	; 0x54
 8004794:	e7f8      	b.n	8004788 <__sseek+0x18>
 8004796:	46c0      	nop			; (mov r8, r8)
 8004798:	ffffefff 	.word	0xffffefff

0800479c <__sclose>:
 800479c:	b510      	push	{r4, lr}
 800479e:	230e      	movs	r3, #14
 80047a0:	5ec9      	ldrsh	r1, [r1, r3]
 80047a2:	f000 f815 	bl	80047d0 <_close_r>
 80047a6:	bd10      	pop	{r4, pc}

080047a8 <_write_r>:
 80047a8:	b570      	push	{r4, r5, r6, lr}
 80047aa:	0004      	movs	r4, r0
 80047ac:	0008      	movs	r0, r1
 80047ae:	0011      	movs	r1, r2
 80047b0:	001a      	movs	r2, r3
 80047b2:	2300      	movs	r3, #0
 80047b4:	4d05      	ldr	r5, [pc, #20]	; (80047cc <_write_r+0x24>)
 80047b6:	602b      	str	r3, [r5, #0]
 80047b8:	f7fc fd24 	bl	8001204 <_write>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d103      	bne.n	80047c8 <_write_r+0x20>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d000      	beq.n	80047c8 <_write_r+0x20>
 80047c6:	6023      	str	r3, [r4, #0]
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	46c0      	nop			; (mov r8, r8)
 80047cc:	20000244 	.word	0x20000244

080047d0 <_close_r>:
 80047d0:	2300      	movs	r3, #0
 80047d2:	b570      	push	{r4, r5, r6, lr}
 80047d4:	4d06      	ldr	r5, [pc, #24]	; (80047f0 <_close_r+0x20>)
 80047d6:	0004      	movs	r4, r0
 80047d8:	0008      	movs	r0, r1
 80047da:	602b      	str	r3, [r5, #0]
 80047dc:	f7fc fd2e 	bl	800123c <_close>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d103      	bne.n	80047ec <_close_r+0x1c>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d000      	beq.n	80047ec <_close_r+0x1c>
 80047ea:	6023      	str	r3, [r4, #0]
 80047ec:	bd70      	pop	{r4, r5, r6, pc}
 80047ee:	46c0      	nop			; (mov r8, r8)
 80047f0:	20000244 	.word	0x20000244

080047f4 <_fstat_r>:
 80047f4:	2300      	movs	r3, #0
 80047f6:	b570      	push	{r4, r5, r6, lr}
 80047f8:	4d06      	ldr	r5, [pc, #24]	; (8004814 <_fstat_r+0x20>)
 80047fa:	0004      	movs	r4, r0
 80047fc:	0008      	movs	r0, r1
 80047fe:	0011      	movs	r1, r2
 8004800:	602b      	str	r3, [r5, #0]
 8004802:	f7fc fd25 	bl	8001250 <_fstat>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	d103      	bne.n	8004812 <_fstat_r+0x1e>
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d000      	beq.n	8004812 <_fstat_r+0x1e>
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	bd70      	pop	{r4, r5, r6, pc}
 8004814:	20000244 	.word	0x20000244

08004818 <_isatty_r>:
 8004818:	2300      	movs	r3, #0
 800481a:	b570      	push	{r4, r5, r6, lr}
 800481c:	4d06      	ldr	r5, [pc, #24]	; (8004838 <_isatty_r+0x20>)
 800481e:	0004      	movs	r4, r0
 8004820:	0008      	movs	r0, r1
 8004822:	602b      	str	r3, [r5, #0]
 8004824:	f7fc fd22 	bl	800126c <_isatty>
 8004828:	1c43      	adds	r3, r0, #1
 800482a:	d103      	bne.n	8004834 <_isatty_r+0x1c>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d000      	beq.n	8004834 <_isatty_r+0x1c>
 8004832:	6023      	str	r3, [r4, #0]
 8004834:	bd70      	pop	{r4, r5, r6, pc}
 8004836:	46c0      	nop			; (mov r8, r8)
 8004838:	20000244 	.word	0x20000244

0800483c <_lseek_r>:
 800483c:	b570      	push	{r4, r5, r6, lr}
 800483e:	0004      	movs	r4, r0
 8004840:	0008      	movs	r0, r1
 8004842:	0011      	movs	r1, r2
 8004844:	001a      	movs	r2, r3
 8004846:	2300      	movs	r3, #0
 8004848:	4d05      	ldr	r5, [pc, #20]	; (8004860 <_lseek_r+0x24>)
 800484a:	602b      	str	r3, [r5, #0]
 800484c:	f7fc fd17 	bl	800127e <_lseek>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	d103      	bne.n	800485c <_lseek_r+0x20>
 8004854:	682b      	ldr	r3, [r5, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d000      	beq.n	800485c <_lseek_r+0x20>
 800485a:	6023      	str	r3, [r4, #0]
 800485c:	bd70      	pop	{r4, r5, r6, pc}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	20000244 	.word	0x20000244

08004864 <__malloc_lock>:
 8004864:	b510      	push	{r4, lr}
 8004866:	4802      	ldr	r0, [pc, #8]	; (8004870 <__malloc_lock+0xc>)
 8004868:	f7ff fd99 	bl	800439e <__retarget_lock_acquire_recursive>
 800486c:	bd10      	pop	{r4, pc}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	20000238 	.word	0x20000238

08004874 <__malloc_unlock>:
 8004874:	b510      	push	{r4, lr}
 8004876:	4802      	ldr	r0, [pc, #8]	; (8004880 <__malloc_unlock+0xc>)
 8004878:	f7ff fd92 	bl	80043a0 <__retarget_lock_release_recursive>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	20000238 	.word	0x20000238

08004884 <_read_r>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	0004      	movs	r4, r0
 8004888:	0008      	movs	r0, r1
 800488a:	0011      	movs	r1, r2
 800488c:	001a      	movs	r2, r3
 800488e:	2300      	movs	r3, #0
 8004890:	4d05      	ldr	r5, [pc, #20]	; (80048a8 <_read_r+0x24>)
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fc fc99 	bl	80011ca <_read>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d103      	bne.n	80048a4 <_read_r+0x20>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d000      	beq.n	80048a4 <_read_r+0x20>
 80048a2:	6023      	str	r3, [r4, #0]
 80048a4:	bd70      	pop	{r4, r5, r6, pc}
 80048a6:	46c0      	nop			; (mov r8, r8)
 80048a8:	20000244 	.word	0x20000244

080048ac <_init>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr

080048b8 <_fini>:
 80048b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048be:	bc08      	pop	{r3}
 80048c0:	469e      	mov	lr, r3
 80048c2:	4770      	bx	lr
