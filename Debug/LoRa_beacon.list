
LoRa_beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000461c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  080046dc  080046dc  000146dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049ec  080049ec  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  080049ec  080049ec  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049ec  080049ec  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ec  080049ec  000149ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049f0  080049f0  000149f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080049f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000128  08004b1c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08004b1c  00020248  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af31  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001969  00000000  00000000  0002b081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0002c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000100de  00000000  00000000  0002dad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b43a  00000000  00000000  0003dbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00060f60  00000000  00000000  00048ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000a9f50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000a9fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000128 	.word	0x20000128
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046c4 	.word	0x080046c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000012c 	.word	0x2000012c
 8000104:	080046c4 	.word	0x080046c4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8000234:	b590      	push	{r4, r7, lr}
 8000236:	b087      	sub	sp, #28
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	607a      	str	r2, [r7, #4]
 800023e:	603b      	str	r3, [r7, #0]
 8000240:	240b      	movs	r4, #11
 8000242:	193b      	adds	r3, r7, r4
 8000244:	1c0a      	adds	r2, r1, #0
 8000246:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	6858      	ldr	r0, [r3, #4]
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	891b      	ldrh	r3, [r3, #8]
 8000250:	2200      	movs	r2, #0
 8000252:	0019      	movs	r1, r3
 8000254:	f001 fa3c 	bl	80016d0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8000258:	193b      	adds	r3, r7, r4
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	227f      	movs	r2, #127	; 0x7f
 800025e:	4013      	ands	r3, r2
 8000260:	b2da      	uxtb	r2, r3
 8000262:	2117      	movs	r1, #23
 8000264:	187b      	adds	r3, r7, r1
 8000266:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	6818      	ldr	r0, [r3, #0]
 800026c:	1879      	adds	r1, r7, r1
 800026e:	230a      	movs	r3, #10
 8000270:	2201      	movs	r2, #1
 8000272:	f001 ff6f 	bl	8002154 <HAL_SPI_Transmit>
 8000276:	1e03      	subs	r3, r0, #0
 8000278:	d001      	beq.n	800027e <read_register+0x4a>
		return false;
 800027a:	2300      	movs	r3, #0
 800027c:	e014      	b.n	80002a8 <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6818      	ldr	r0, [r3, #0]
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	b29a      	uxth	r2, r3
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	230a      	movs	r3, #10
 800028a:	f002 f8bb 	bl	8002404 <HAL_SPI_Receive>
 800028e:	1e03      	subs	r3, r0, #0
 8000290:	d001      	beq.n	8000296 <read_register+0x62>
		return false;
 8000292:	2300      	movs	r3, #0
 8000294:	e008      	b.n	80002a8 <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	6858      	ldr	r0, [r3, #4]
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	891b      	ldrh	r3, [r3, #8]
 800029e:	2201      	movs	r2, #1
 80002a0:	0019      	movs	r1, r3
 80002a2:	f001 fa15 	bl	80016d0 <HAL_GPIO_WritePin>

	return true;
 80002a6:	2301      	movs	r3, #1
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b007      	add	sp, #28
 80002ae:	bd90      	pop	{r4, r7, pc}

080002b0 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	0008      	movs	r0, r1
 80002ba:	0011      	movs	r1, r2
 80002bc:	1cfb      	adds	r3, r7, #3
 80002be:	1c02      	adds	r2, r0, #0
 80002c0:	701a      	strb	r2, [r3, #0]
 80002c2:	1cbb      	adds	r3, r7, #2
 80002c4:	1c0a      	adds	r2, r1, #0
 80002c6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	6858      	ldr	r0, [r3, #4]
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	891b      	ldrh	r3, [r3, #8]
 80002d0:	2200      	movs	r2, #0
 80002d2:	0019      	movs	r1, r3
 80002d4:	f001 f9fc 	bl	80016d0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80002d8:	1cfb      	adds	r3, r7, #3
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	4252      	negs	r2, r2
 80002e0:	4313      	orrs	r3, r2
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	210c      	movs	r1, #12
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	701a      	strb	r2, [r3, #0]
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	1cba      	adds	r2, r7, #2
 80002ee:	7812      	ldrb	r2, [r2, #0]
 80002f0:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6818      	ldr	r0, [r3, #0]
 80002f6:	1879      	adds	r1, r7, r1
 80002f8:	230a      	movs	r3, #10
 80002fa:	2202      	movs	r2, #2
 80002fc:	f001 ff2a 	bl	8002154 <HAL_SPI_Transmit>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <write_register+0x58>
		return false;
 8000304:	2300      	movs	r3, #0
 8000306:	e008      	b.n	800031a <write_register+0x6a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6858      	ldr	r0, [r3, #4]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	891b      	ldrh	r3, [r3, #8]
 8000310:	2201      	movs	r2, #1
 8000312:	0019      	movs	r1, r3
 8000314:	f001 f9dc 	bl	80016d0 <HAL_GPIO_WritePin>

	return true;
 8000318:	2301      	movs	r3, #1
}
 800031a:	0018      	movs	r0, r3
 800031c:	46bd      	mov	sp, r7
 800031e:	b004      	add	sp, #16
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	607a      	str	r2, [r7, #4]
 800032e:	200b      	movs	r0, #11
 8000330:	183b      	adds	r3, r7, r0
 8000332:	1c0a      	adds	r2, r1, #0
 8000334:	701a      	strb	r2, [r3, #0]
	assert(channel_index < 16);
 8000336:	183b      	adds	r3, r7, r0
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	2b0f      	cmp	r3, #15
 800033c:	d905      	bls.n	800034a <config_set_channel+0x26>
 800033e:	4b11      	ldr	r3, [pc, #68]	; (8000384 <config_set_channel+0x60>)
 8000340:	4a11      	ldr	r2, [pc, #68]	; (8000388 <config_set_channel+0x64>)
 8000342:	4812      	ldr	r0, [pc, #72]	; (800038c <config_set_channel+0x68>)
 8000344:	2170      	movs	r1, #112	; 0x70
 8000346:	f003 f94d 	bl	80035e4 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 800034a:	200b      	movs	r0, #11
 800034c:	183b      	adds	r3, r7, r0
 800034e:	781a      	ldrb	r2, [r3, #0]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	321a      	adds	r2, #26
 8000354:	0092      	lsls	r2, r2, #2
 8000356:	6879      	ldr	r1, [r7, #4]
 8000358:	50d1      	str	r1, [r2, r3]
	handle->config.channel_mask |= (1 << channel_index);
 800035a:	68fb      	ldr	r3, [r7, #12]
 800035c:	22a8      	movs	r2, #168	; 0xa8
 800035e:	5a9b      	ldrh	r3, [r3, r2]
 8000360:	b21a      	sxth	r2, r3
 8000362:	183b      	adds	r3, r7, r0
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2101      	movs	r1, #1
 8000368:	4099      	lsls	r1, r3
 800036a:	000b      	movs	r3, r1
 800036c:	b21b      	sxth	r3, r3
 800036e:	4313      	orrs	r3, r2
 8000370:	b21b      	sxth	r3, r3
 8000372:	b299      	uxth	r1, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	22a8      	movs	r2, #168	; 0xa8
 8000378:	5299      	strh	r1, [r3, r2]
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	b004      	add	sp, #16
 8000380:	bd80      	pop	{r7, pc}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	080046dc 	.word	0x080046dc
 8000388:	080048d0 	.word	0x080048d0
 800038c:	080046f0 	.word	0x080046f0

08000390 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2260      	movs	r2, #96	; 0x60
 800039c:	4916      	ldr	r1, [pc, #88]	; (80003f8 <config_load_default+0x68>)
 800039e:	5299      	strh	r1, [r3, r2]
	handle->config.tx_frame_count = 0;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2264      	movs	r2, #100	; 0x64
 80003a4:	2100      	movs	r1, #0
 80003a6:	5299      	strh	r1, [r3, r2]
	handle->config.rx_frame_count = 0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2262      	movs	r2, #98	; 0x62
 80003ac:	2100      	movs	r1, #0
 80003ae:	5299      	strh	r1, [r3, r2]
	handle->config.rx1_delay = 1;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	2266      	movs	r2, #102	; 0x66
 80003b4:	2101      	movs	r1, #1
 80003b6:	5499      	strb	r1, [r3, r2]
	handle->config.channel_mask = 0;
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	22a8      	movs	r2, #168	; 0xa8
 80003bc:	2100      	movs	r1, #0
 80003be:	5299      	strh	r1, [r3, r2]
	config_set_channel(handle, 0, 868100000);
 80003c0:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <config_load_default+0x6c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	2100      	movs	r1, #0
 80003c6:	0018      	movs	r0, r3
 80003c8:	f7ff ffac 	bl	8000324 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 80003cc:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <config_load_default+0x70>)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	2101      	movs	r1, #1
 80003d2:	0018      	movs	r0, r3
 80003d4:	f7ff ffa6 	bl	8000324 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80003d8:	4a0a      	ldr	r2, [pc, #40]	; (8000404 <config_load_default+0x74>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2102      	movs	r1, #2
 80003de:	0018      	movs	r0, r3
 80003e0:	f7ff ffa0 	bl	8000324 <config_set_channel>
	config_set_channel(handle, 3, 867100000);
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <config_load_default+0x78>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	2103      	movs	r1, #3
 80003ea:	0018      	movs	r0, r3
 80003ec:	f7ff ff9a 	bl	8000324 <config_set_channel>
}
 80003f0:	46c0      	nop			; (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b002      	add	sp, #8
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	ffffab67 	.word	0xffffab67
 80003fc:	33be27a0 	.word	0x33be27a0
 8000400:	33c134e0 	.word	0x33c134e0
 8000404:	33c44220 	.word	0x33c44220
 8000408:	33aee560 	.word	0x33aee560

0800040c <reset>:

static void reset(rfm95_handle_t *handle)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	68d8      	ldr	r0, [r3, #12]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	8a1b      	ldrh	r3, [r3, #16]
 800041c:	2200      	movs	r2, #0
 800041e:	0019      	movs	r1, r3
 8000420:	f001 f956 	bl	80016d0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000424:	2001      	movs	r0, #1
 8000426:	f000 ff0b 	bl	8001240 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	68d8      	ldr	r0, [r3, #12]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	8a1b      	ldrh	r3, [r3, #16]
 8000432:	2201      	movs	r2, #1
 8000434:	0019      	movs	r1, r3
 8000436:	f001 f94b 	bl	80016d0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800043a:	2005      	movs	r0, #5
 800043c:	f000 ff00 	bl	8001240 <HAL_Delay>
}
 8000440:	46c0      	nop			; (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b002      	add	sp, #8
 8000446:	bd80      	pop	{r7, pc}

08000448 <rfm95_set_power>:

	return true;
}

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b085      	sub	sp, #20
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	000a      	movs	r2, r1
 8000452:	1cfb      	adds	r3, r7, #3
 8000454:	701a      	strb	r2, [r3, #0]
	assert((power >= 2 && power <= 17) || power == 20);
 8000456:	1cfb      	adds	r3, r7, #3
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b25b      	sxtb	r3, r3
 800045c:	2b01      	cmp	r3, #1
 800045e:	dd04      	ble.n	800046a <rfm95_set_power+0x22>
 8000460:	1cfb      	adds	r3, r7, #3
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	b25b      	sxtb	r3, r3
 8000466:	2b11      	cmp	r3, #17
 8000468:	dd0a      	ble.n	8000480 <rfm95_set_power+0x38>
 800046a:	1cfb      	adds	r3, r7, #3
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	b25b      	sxtb	r3, r3
 8000470:	2b14      	cmp	r3, #20
 8000472:	d005      	beq.n	8000480 <rfm95_set_power+0x38>
 8000474:	4b3d      	ldr	r3, [pc, #244]	; (800056c <rfm95_set_power+0x124>)
 8000476:	4a3e      	ldr	r2, [pc, #248]	; (8000570 <rfm95_set_power+0x128>)
 8000478:	483e      	ldr	r0, [pc, #248]	; (8000574 <rfm95_set_power+0x12c>)
 800047a:	21ab      	movs	r1, #171	; 0xab
 800047c:	f003 f8b2 	bl	80035e4 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8000480:	200c      	movs	r0, #12
 8000482:	183b      	adds	r3, r7, r0
 8000484:	2200      	movs	r2, #0
 8000486:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 8000488:	240f      	movs	r4, #15
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8000490:	1cfb      	adds	r3, r7, #3
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	b25b      	sxtb	r3, r3
 8000496:	2b01      	cmp	r3, #1
 8000498:	dd26      	ble.n	80004e8 <rfm95_set_power+0xa0>
 800049a:	1cfb      	adds	r3, r7, #3
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	b25b      	sxtb	r3, r3
 80004a0:	2b11      	cmp	r3, #17
 80004a2:	dc21      	bgt.n	80004e8 <rfm95_set_power+0xa0>
		pa_config.max_power = 7;
 80004a4:	183b      	adds	r3, r7, r0
 80004a6:	781a      	ldrb	r2, [r3, #0]
 80004a8:	2170      	movs	r1, #112	; 0x70
 80004aa:	430a      	orrs	r2, r1
 80004ac:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80004ae:	183b      	adds	r3, r7, r0
 80004b0:	781a      	ldrb	r2, [r3, #0]
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	4249      	negs	r1, r1
 80004b6:	430a      	orrs	r2, r1
 80004b8:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 80004ba:	1cfb      	adds	r3, r7, #3
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	3b02      	subs	r3, #2
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	1c1a      	adds	r2, r3, #0
 80004c4:	230f      	movs	r3, #15
 80004c6:	4013      	ands	r3, r2
 80004c8:	b2da      	uxtb	r2, r3
 80004ca:	183b      	adds	r3, r7, r0
 80004cc:	210f      	movs	r1, #15
 80004ce:	400a      	ands	r2, r1
 80004d0:	0010      	movs	r0, r2
 80004d2:	781a      	ldrb	r2, [r3, #0]
 80004d4:	210f      	movs	r1, #15
 80004d6:	438a      	bics	r2, r1
 80004d8:	1c11      	adds	r1, r2, #0
 80004da:	1c02      	adds	r2, r0, #0
 80004dc:	430a      	orrs	r2, r1
 80004de:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2284      	movs	r2, #132	; 0x84
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e019      	b.n	800051c <rfm95_set_power+0xd4>

	} else if (power == 20) {
 80004e8:	1cfb      	adds	r3, r7, #3
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	b25b      	sxtb	r3, r3
 80004ee:	2b14      	cmp	r3, #20
 80004f0:	d114      	bne.n	800051c <rfm95_set_power+0xd4>
		pa_config.max_power = 7;
 80004f2:	200c      	movs	r0, #12
 80004f4:	183b      	adds	r3, r7, r0
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	2170      	movs	r1, #112	; 0x70
 80004fa:	430a      	orrs	r2, r1
 80004fc:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 80004fe:	183b      	adds	r3, r7, r0
 8000500:	781a      	ldrb	r2, [r3, #0]
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	4249      	negs	r1, r1
 8000506:	430a      	orrs	r2, r1
 8000508:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 800050a:	183b      	adds	r3, r7, r0
 800050c:	781a      	ldrb	r2, [r3, #0]
 800050e:	210f      	movs	r1, #15
 8000510:	430a      	orrs	r2, r1
 8000512:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8000514:	230f      	movs	r3, #15
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	2287      	movs	r2, #135	; 0x87
 800051a:	701a      	strb	r2, [r3, #0]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 800051c:	230c      	movs	r3, #12
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	2109      	movs	r1, #9
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff fec2 	bl	80002b0 <write_register>
 800052c:	0003      	movs	r3, r0
 800052e:	001a      	movs	r2, r3
 8000530:	2301      	movs	r3, #1
 8000532:	4053      	eors	r3, r2
 8000534:	b2db      	uxtb	r3, r3
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <rfm95_set_power+0xf6>
 800053a:	2300      	movs	r3, #0
 800053c:	e011      	b.n	8000562 <rfm95_set_power+0x11a>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800053e:	230f      	movs	r3, #15
 8000540:	18fb      	adds	r3, r7, r3
 8000542:	781a      	ldrb	r2, [r3, #0]
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	214d      	movs	r1, #77	; 0x4d
 8000548:	0018      	movs	r0, r3
 800054a:	f7ff feb1 	bl	80002b0 <write_register>
 800054e:	0003      	movs	r3, r0
 8000550:	001a      	movs	r2, r3
 8000552:	2301      	movs	r3, #1
 8000554:	4053      	eors	r3, r2
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <rfm95_set_power+0x118>
 800055c:	2300      	movs	r3, #0
 800055e:	e000      	b.n	8000562 <rfm95_set_power+0x11a>

	return true;
 8000560:	2301      	movs	r3, #1
}
 8000562:	0018      	movs	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	b005      	add	sp, #20
 8000568:	bd90      	pop	{r4, r7, pc}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	08004748 	.word	0x08004748
 8000570:	080048e4 	.word	0x080048e4
 8000574:	080046f0 	.word	0x080046f0

08000578 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle, UART_HandleTypeDef *uart_handle)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	6039      	str	r1, [r7, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	685a      	ldr	r2, [r3, #4]
 8000588:	2382      	movs	r3, #130	; 0x82
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	429a      	cmp	r2, r3
 800058e:	d005      	beq.n	800059c <rfm95_init+0x24>
 8000590:	4b99      	ldr	r3, [pc, #612]	; (80007f8 <rfm95_init+0x280>)
 8000592:	4a9a      	ldr	r2, [pc, #616]	; (80007fc <rfm95_init+0x284>)
 8000594:	489a      	ldr	r0, [pc, #616]	; (8000800 <rfm95_init+0x288>)
 8000596:	21c6      	movs	r1, #198	; 0xc6
 8000598:	f003 f824 	bl	80035e4 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	689b      	ldr	r3, [r3, #8]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d005      	beq.n	80005b2 <rfm95_init+0x3a>
 80005a6:	4b97      	ldr	r3, [pc, #604]	; (8000804 <rfm95_init+0x28c>)
 80005a8:	4a94      	ldr	r2, [pc, #592]	; (80007fc <rfm95_init+0x284>)
 80005aa:	4895      	ldr	r0, [pc, #596]	; (8000800 <rfm95_init+0x288>)
 80005ac:	21c7      	movs	r1, #199	; 0xc7
 80005ae:	f003 f819 	bl	80035e4 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	68da      	ldr	r2, [r3, #12]
 80005b8:	23e0      	movs	r3, #224	; 0xe0
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	429a      	cmp	r2, r3
 80005be:	d005      	beq.n	80005cc <rfm95_init+0x54>
 80005c0:	4b91      	ldr	r3, [pc, #580]	; (8000808 <rfm95_init+0x290>)
 80005c2:	4a8e      	ldr	r2, [pc, #568]	; (80007fc <rfm95_init+0x284>)
 80005c4:	488e      	ldr	r0, [pc, #568]	; (8000800 <rfm95_init+0x288>)
 80005c6:	21c8      	movs	r1, #200	; 0xc8
 80005c8:	f003 f80c 	bl	80035e4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	691b      	ldr	r3, [r3, #16]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d005      	beq.n	80005e2 <rfm95_init+0x6a>
 80005d6:	4b8d      	ldr	r3, [pc, #564]	; (800080c <rfm95_init+0x294>)
 80005d8:	4a88      	ldr	r2, [pc, #544]	; (80007fc <rfm95_init+0x284>)
 80005da:	4889      	ldr	r0, [pc, #548]	; (8000800 <rfm95_init+0x288>)
 80005dc:	21c9      	movs	r1, #201	; 0xc9
 80005de:	f003 f801 	bl	80035e4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	695b      	ldr	r3, [r3, #20]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d005      	beq.n	80005f8 <rfm95_init+0x80>
 80005ec:	4b88      	ldr	r3, [pc, #544]	; (8000810 <rfm95_init+0x298>)
 80005ee:	4a83      	ldr	r2, [pc, #524]	; (80007fc <rfm95_init+0x284>)
 80005f0:	4883      	ldr	r0, [pc, #524]	; (8000800 <rfm95_init+0x288>)
 80005f2:	21ca      	movs	r1, #202	; 0xca
 80005f4:	f002 fff6 	bl	80035e4 <__assert_func>

	reset(handle);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff06 	bl	800040c <reset>



	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000604:	2b00      	cmp	r3, #0
 8000606:	d012      	beq.n	800062e <rfm95_init+0xb6>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800060c:	687a      	ldr	r2, [r7, #4]
 800060e:	3260      	adds	r2, #96	; 0x60
 8000610:	0010      	movs	r0, r2
 8000612:	4798      	blx	r3
 8000614:	0003      	movs	r3, r0
 8000616:	001a      	movs	r2, r3
 8000618:	2301      	movs	r3, #1
 800061a:	4053      	eors	r3, r2
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d105      	bne.n	800062e <rfm95_init+0xb6>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2260      	movs	r2, #96	; 0x60
 8000626:	5a9b      	ldrh	r3, [r3, r2]
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8000628:	4a7a      	ldr	r2, [pc, #488]	; (8000814 <rfm95_init+0x29c>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d003      	beq.n	8000636 <rfm95_init+0xbe>
		config_load_default(handle);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff fead 	bl	8000390 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8000636:	230f      	movs	r3, #15
 8000638:	18fa      	adds	r2, r7, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	2301      	movs	r3, #1
 800063e:	2142      	movs	r1, #66	; 0x42
 8000640:	f7ff fdf8 	bl	8000234 <read_register>
 8000644:	0003      	movs	r3, r0
 8000646:	001a      	movs	r2, r3
 8000648:	2301      	movs	r3, #1
 800064a:	4053      	eors	r3, r2
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <rfm95_init+0xde>
 8000652:	2300      	movs	r3, #0
 8000654:	e0cc      	b.n	80007f0 <rfm95_init+0x278>
	HAL_UART_Transmit(uart_handle, version, sizeof(version), 10);
 8000656:	240f      	movs	r4, #15
 8000658:	193b      	adds	r3, r7, r4
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	0019      	movs	r1, r3
 800065e:	6838      	ldr	r0, [r7, #0]
 8000660:	230a      	movs	r3, #10
 8000662:	2201      	movs	r2, #1
 8000664:	f002 fc14 	bl	8002e90 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f000 fde9 	bl	8001240 <HAL_Delay>
	if (version != RFM9x_VER) return false;
 800066e:	193b      	adds	r3, r7, r4
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b12      	cmp	r3, #18
 8000674:	d001      	beq.n	800067a <rfm95_init+0x102>
 8000676:	2300      	movs	r3, #0
 8000678:	e0ba      	b.n	80007f0 <rfm95_init+0x278>


	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	2200      	movs	r2, #0
 800067e:	2101      	movs	r1, #1
 8000680:	0018      	movs	r0, r3
 8000682:	f7ff fe15 	bl	80002b0 <write_register>
 8000686:	0003      	movs	r3, r0
 8000688:	001a      	movs	r2, r3
 800068a:	2301      	movs	r3, #1
 800068c:	4053      	eors	r3, r2
 800068e:	b2db      	uxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <rfm95_init+0x120>
 8000694:	2300      	movs	r3, #0
 8000696:	e0ab      	b.n	80007f0 <rfm95_init+0x278>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	2280      	movs	r2, #128	; 0x80
 800069c:	2101      	movs	r1, #1
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff fe06 	bl	80002b0 <write_register>
 80006a4:	0003      	movs	r3, r0
 80006a6:	001a      	movs	r2, r3
 80006a8:	2301      	movs	r3, #1
 80006aa:	4053      	eors	r3, r2
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <rfm95_init+0x13e>
 80006b2:	2300      	movs	r3, #0
 80006b4:	e09c      	b.n	80007f0 <rfm95_init+0x278>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	; 0x40
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fdf7 	bl	80002b0 <write_register>
 80006c2:	0003      	movs	r3, r0
 80006c4:	001a      	movs	r2, r3
 80006c6:	2301      	movs	r3, #1
 80006c8:	4053      	eors	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <rfm95_init+0x15c>
 80006d0:	2300      	movs	r3, #0
 80006d2:	e08d      	b.n	80007f0 <rfm95_init+0x278>

	if (handle->on_after_interrupts_configured != NULL) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <rfm95_init+0x16a>
		handle->on_after_interrupts_configured();
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006e0:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2111      	movs	r1, #17
 80006e6:	0018      	movs	r0, r3
 80006e8:	f7ff feae 	bl	8000448 <rfm95_set_power>
 80006ec:	0003      	movs	r3, r0
 80006ee:	001a      	movs	r2, r3
 80006f0:	2301      	movs	r3, #1
 80006f2:	4053      	eors	r3, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <rfm95_init+0x186>
 80006fa:	2300      	movs	r3, #0
 80006fc:	e078      	b.n	80007f0 <rfm95_init+0x278>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2223      	movs	r2, #35	; 0x23
 8000702:	210c      	movs	r1, #12
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff fdd3 	bl	80002b0 <write_register>
 800070a:	0003      	movs	r3, r0
 800070c:	001a      	movs	r2, r3
 800070e:	2301      	movs	r3, #1
 8000710:	4053      	eors	r3, r2
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <rfm95_init+0x1a4>
 8000718:	2300      	movs	r3, #0
 800071a:	e069      	b.n	80007f0 <rfm95_init+0x278>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	0018      	movs	r0, r3
 8000724:	f7ff fdc4 	bl	80002b0 <write_register>
 8000728:	0003      	movs	r3, r0
 800072a:	001a      	movs	r2, r3
 800072c:	2301      	movs	r3, #1
 800072e:	4053      	eors	r3, r2
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <rfm95_init+0x1c2>
 8000736:	2300      	movs	r3, #0
 8000738:	e05a      	b.n	80007f0 <rfm95_init+0x278>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	2208      	movs	r2, #8
 800073e:	2121      	movs	r1, #33	; 0x21
 8000740:	0018      	movs	r0, r3
 8000742:	f7ff fdb5 	bl	80002b0 <write_register>
 8000746:	0003      	movs	r3, r0
 8000748:	001a      	movs	r2, r3
 800074a:	2301      	movs	r3, #1
 800074c:	4053      	eors	r3, r2
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <rfm95_init+0x1e0>
 8000754:	2300      	movs	r3, #0
 8000756:	e04b      	b.n	80007f0 <rfm95_init+0x278>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	2234      	movs	r2, #52	; 0x34
 800075c:	2139      	movs	r1, #57	; 0x39
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff fda6 	bl	80002b0 <write_register>
 8000764:	0003      	movs	r3, r0
 8000766:	001a      	movs	r2, r3
 8000768:	2301      	movs	r3, #1
 800076a:	4053      	eors	r3, r2
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <rfm95_init+0x1fe>
 8000772:	2300      	movs	r3, #0
 8000774:	e03c      	b.n	80007f0 <rfm95_init+0x278>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2280      	movs	r2, #128	; 0x80
 800077a:	210e      	movs	r1, #14
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fd97 	bl	80002b0 <write_register>
 8000782:	0003      	movs	r3, r0
 8000784:	001a      	movs	r2, r3
 8000786:	2301      	movs	r3, #1
 8000788:	4053      	eors	r3, r2
 800078a:	b2db      	uxtb	r3, r3
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <rfm95_init+0x21c>
 8000790:	2300      	movs	r3, #0
 8000792:	e02d      	b.n	80007f0 <rfm95_init+0x278>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	0018      	movs	r0, r3
 800079c:	f7ff fd88 	bl	80002b0 <write_register>
 80007a0:	0003      	movs	r3, r0
 80007a2:	001a      	movs	r2, r3
 80007a4:	2301      	movs	r3, #1
 80007a6:	4053      	eors	r3, r2
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <rfm95_init+0x23a>
 80007ae:	2300      	movs	r3, #0
 80007b0:	e01e      	b.n	80007f0 <rfm95_init+0x278>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2240      	movs	r2, #64	; 0x40
 80007b6:	2123      	movs	r1, #35	; 0x23
 80007b8:	0018      	movs	r0, r3
 80007ba:	f7ff fd79 	bl	80002b0 <write_register>
 80007be:	0003      	movs	r3, r0
 80007c0:	001a      	movs	r2, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	4053      	eors	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <rfm95_init+0x258>
 80007cc:	2300      	movs	r3, #0
 80007ce:	e00f      	b.n	80007f0 <rfm95_init+0x278>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	2101      	movs	r1, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f7ff fd6a 	bl	80002b0 <write_register>
 80007dc:	0003      	movs	r3, r0
 80007de:	001a      	movs	r2, r3
 80007e0:	2301      	movs	r3, #1
 80007e2:	4053      	eors	r3, r2
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <rfm95_init+0x276>
 80007ea:	2300      	movs	r3, #0
 80007ec:	e000      	b.n	80007f0 <rfm95_init+0x278>

	return true;
 80007ee:	2301      	movs	r3, #1
}
 80007f0:	0018      	movs	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b005      	add	sp, #20
 80007f6:	bd90      	pop	{r4, r7, pc}
 80007f8:	08004774 	.word	0x08004774
 80007fc:	080048f4 	.word	0x080048f4
 8000800:	080046f0 	.word	0x080046f0
 8000804:	080047a8 	.word	0x080047a8
 8000808:	080047e4 	.word	0x080047e4
 800080c:	0800481c 	.word	0x0800481c
 8000810:	08004858 	.word	0x08004858
 8000814:	0000ab67 	.word	0x0000ab67

08000818 <receive_package>:
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
}

bool receive_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t *payload_len, int8_t *snr, UART_HandleTypeDef *uart_handle) {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
 8000824:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	//calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);

	//Stand-by mode previous to Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2281      	movs	r2, #129	; 0x81
 8000830:	2101      	movs	r1, #1
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fd3c 	bl	80002b0 <write_register>
 8000838:	0003      	movs	r3, r0
 800083a:	001a      	movs	r2, r3
 800083c:	2301      	movs	r3, #1
 800083e:	4053      	eors	r3, r2
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <receive_package+0x32>
 8000846:	2300      	movs	r3, #0
 8000848:	e117      	b.n	8000a7a <receive_package+0x262>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	2272      	movs	r2, #114	; 0x72
 800084e:	211d      	movs	r1, #29
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fd2d 	bl	80002b0 <write_register>
 8000856:	0003      	movs	r3, r0
 8000858:	001a      	movs	r2, r3
 800085a:	2301      	movs	r3, #1
 800085c:	4053      	eors	r3, r2
 800085e:	b2db      	uxtb	r3, r3
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <receive_package+0x50>
 8000864:	2300      	movs	r3, #0
 8000866:	e108      	b.n	8000a7a <receive_package+0x262>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0xCA)) return false;
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	22ca      	movs	r2, #202	; 0xca
 800086c:	211e      	movs	r1, #30
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fd1e 	bl	80002b0 <write_register>
 8000874:	0003      	movs	r3, r0
 8000876:	001a      	movs	r2, r3
 8000878:	2301      	movs	r3, #1
 800087a:	4053      	eors	r3, r2
 800087c:	b2db      	uxtb	r3, r3
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <receive_package+0x6e>
 8000882:	2300      	movs	r3, #0
 8000884:	e0f9      	b.n	8000a7a <receive_package+0x262>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	2204      	movs	r2, #4
 800088a:	2126      	movs	r1, #38	; 0x26
 800088c:	0018      	movs	r0, r3
 800088e:	f7ff fd0f 	bl	80002b0 <write_register>
 8000892:	0003      	movs	r3, r0
 8000894:	001a      	movs	r2, r3
 8000896:	2301      	movs	r3, #1
 8000898:	4053      	eors	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <receive_package+0x8c>
 80008a0:	2300      	movs	r3, #0
 80008a2:	e0ea      	b.n	8000a7a <receive_package+0x262>


	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	211f      	movs	r1, #31
 80008ac:	0018      	movs	r0, r3
 80008ae:	f7ff fcff 	bl	80002b0 <write_register>
 80008b2:	0003      	movs	r3, r0
 80008b4:	001a      	movs	r2, r3
 80008b6:	2301      	movs	r3, #1
 80008b8:	4053      	eors	r3, r2
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <receive_package+0xac>
 80008c0:	2300      	movs	r3, #0
 80008c2:	e0da      	b.n	8000a7a <receive_package+0x262>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	2227      	movs	r2, #39	; 0x27
 80008c8:	2133      	movs	r1, #51	; 0x33
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fcf0 	bl	80002b0 <write_register>
 80008d0:	0003      	movs	r3, r0
 80008d2:	001a      	movs	r2, r3
 80008d4:	2301      	movs	r3, #1
 80008d6:	4053      	eors	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <receive_package+0xca>
 80008de:	2300      	movs	r3, #0
 80008e0:	e0cb      	b.n	8000a7a <receive_package+0x262>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	221d      	movs	r2, #29
 80008e6:	213b      	movs	r1, #59	; 0x3b
 80008e8:	0018      	movs	r0, r3
 80008ea:	f7ff fce1 	bl	80002b0 <write_register>
 80008ee:	0003      	movs	r3, r0
 80008f0:	001a      	movs	r2, r3
 80008f2:	2301      	movs	r3, #1
 80008f4:	4053      	eors	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <receive_package+0xe8>
 80008fc:	2300      	movs	r3, #0
 80008fe:	e0bc      	b.n	8000a7a <receive_package+0x262>

	// receive_at_scheduled_time(handle, rx1_target);


	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2240      	movs	r2, #64	; 0x40
 8000904:	2140      	movs	r1, #64	; 0x40
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fcd2 	bl	80002b0 <write_register>
 800090c:	0003      	movs	r3, r0
 800090e:	001a      	movs	r2, r3
 8000910:	2301      	movs	r3, #1
 8000912:	4053      	eors	r3, r2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <receive_package+0x106>
 800091a:	2300      	movs	r3, #0
 800091c:	e0ad      	b.n	8000a7a <receive_package+0x262>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	22ff      	movs	r2, #255	; 0xff
 8000922:	2112      	movs	r1, #18
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fcc3 	bl	80002b0 <write_register>
 800092a:	0003      	movs	r3, r0
 800092c:	001a      	movs	r2, r3
 800092e:	2301      	movs	r3, #1
 8000930:	4053      	eors	r3, r2
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <receive_package+0x124>
 8000938:	2300      	movs	r3, #0
 800093a:	e09e      	b.n	8000a7a <receive_package+0x262>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	22ac      	movs	r2, #172	; 0xac
 8000940:	2100      	movs	r1, #0
 8000942:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	22b0      	movs	r2, #176	; 0xb0
 8000948:	2100      	movs	r1, #0
 800094a:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	22b4      	movs	r2, #180	; 0xb4
 8000950:	2100      	movs	r1, #0
 8000952:	5099      	str	r1, [r3, r2]



	// Clear flags
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xFF)) return false;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	22ff      	movs	r2, #255	; 0xff
 8000958:	2112      	movs	r1, #18
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fca8 	bl	80002b0 <write_register>
 8000960:	0003      	movs	r3, r0
 8000962:	001a      	movs	r2, r3
 8000964:	2301      	movs	r3, #1
 8000966:	4053      	eors	r3, r2
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <receive_package+0x15a>
 800096e:	2300      	movs	r3, #0
 8000970:	e083      	b.n	8000a7a <receive_package+0x262>
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 8000972:	4a44      	ldr	r2, [pc, #272]	; (8000a84 <receive_package+0x26c>)
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	2301      	movs	r3, #1
 8000978:	2112      	movs	r1, #18
 800097a:	f7ff fc5b 	bl	8000234 <read_register>

	// Continuous Mode
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_RX_CONTINUOUS)) return false;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	2285      	movs	r2, #133	; 0x85
 8000982:	2101      	movs	r1, #1
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fc93 	bl	80002b0 <write_register>
 800098a:	0003      	movs	r3, r0
 800098c:	001a      	movs	r2, r3
 800098e:	2301      	movs	r3, #1
 8000990:	4053      	eors	r3, r2
 8000992:	b2db      	uxtb	r3, r3
 8000994:	2b00      	cmp	r3, #0
 8000996:	d00c      	beq.n	80009b2 <receive_package+0x19a>
 8000998:	2300      	movs	r3, #0
 800099a:	e06e      	b.n	8000a7a <receive_package+0x262>

	while (irqFlags == 0x00){
		read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irqFlags, 1);
 800099c:	4a39      	ldr	r2, [pc, #228]	; (8000a84 <receive_package+0x26c>)
 800099e:	68f8      	ldr	r0, [r7, #12]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2112      	movs	r1, #18
 80009a4:	f7ff fc46 	bl	8000234 <read_register>
		HAL_Delay(500);
 80009a8:	23fa      	movs	r3, #250	; 0xfa
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	0018      	movs	r0, r3
 80009ae:	f000 fc47 	bl	8001240 <HAL_Delay>
	while (irqFlags == 0x00){
 80009b2:	4b34      	ldr	r3, [pc, #208]	; (8000a84 <receive_package+0x26c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f0      	beq.n	800099c <receive_package+0x184>

	uint8_t payload[4];


	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	2200      	movs	r2, #0
 80009be:	210d      	movs	r1, #13
 80009c0:	0018      	movs	r0, r3
 80009c2:	f7ff fc75 	bl	80002b0 <write_register>
 80009c6:	0003      	movs	r3, r0
 80009c8:	001a      	movs	r2, r3
 80009ca:	2301      	movs	r3, #1
 80009cc:	4053      	eors	r3, r2
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <receive_package+0x1c0>
 80009d4:	2300      	movs	r3, #0
 80009d6:	e050      	b.n	8000a7a <receive_package+0x262>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload, 4)) return false;
 80009d8:	2310      	movs	r3, #16
 80009da:	18fa      	adds	r2, r7, r3
 80009dc:	68f8      	ldr	r0, [r7, #12]
 80009de:	2304      	movs	r3, #4
 80009e0:	2100      	movs	r1, #0
 80009e2:	f7ff fc27 	bl	8000234 <read_register>
 80009e6:	0003      	movs	r3, r0
 80009e8:	001a      	movs	r2, r3
 80009ea:	2301      	movs	r3, #1
 80009ec:	4053      	eors	r3, r2
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <receive_package+0x1e0>
 80009f4:	2300      	movs	r3, #0
 80009f6:	e040      	b.n	8000a7a <receive_package+0x262>

	HAL_UART_Transmit(uart_handle, payload, 4, 10);
 80009f8:	2310      	movs	r3, #16
 80009fa:	18f9      	adds	r1, r7, r3
 80009fc:	6a38      	ldr	r0, [r7, #32]
 80009fe:	230a      	movs	r3, #10
 8000a00:	2204      	movs	r2, #4
 8000a02:	f002 fa45 	bl	8002e90 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	; 0x64
 8000a08:	f000 fc1a 	bl	8001240 <HAL_Delay>


	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 3)) return false;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	2203      	movs	r2, #3
 8000a10:	210d      	movs	r1, #13
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fc4c 	bl	80002b0 <write_register>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	4053      	eors	r3, r2
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <receive_package+0x212>
 8000a26:	2300      	movs	r3, #0
 8000a28:	e027      	b.n	8000a7a <receive_package+0x262>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, 3)) return false;
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	68f8      	ldr	r0, [r7, #12]
 8000a2e:	2303      	movs	r3, #3
 8000a30:	2100      	movs	r1, #0
 8000a32:	f7ff fbff 	bl	8000234 <read_register>
 8000a36:	0003      	movs	r3, r0
 8000a38:	001a      	movs	r2, r3
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	4053      	eors	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <receive_package+0x230>
 8000a44:	2300      	movs	r3, #0
 8000a46:	e018      	b.n	8000a7a <receive_package+0x262>

	HAL_UART_Transmit(uart_handle, payload_buf, sizeof(payload_buf), 10);
 8000a48:	68b9      	ldr	r1, [r7, #8]
 8000a4a:	6a38      	ldr	r0, [r7, #32]
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	2204      	movs	r2, #4
 8000a50:	f002 fa1e 	bl	8002e90 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000a54:	2064      	movs	r0, #100	; 0x64
 8000a56:	f000 fbf3 	bl	8001240 <HAL_Delay>


	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	2280      	movs	r2, #128	; 0x80
 8000a5e:	2101      	movs	r1, #1
 8000a60:	0018      	movs	r0, r3
 8000a62:	f7ff fc25 	bl	80002b0 <write_register>
 8000a66:	0003      	movs	r3, r0
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	4053      	eors	r3, r2
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <receive_package+0x260>
 8000a74:	2300      	movs	r3, #0
 8000a76:	e000      	b.n	8000a7a <receive_package+0x262>


	return true;
 8000a78:	2301      	movs	r3, #1
}
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b006      	add	sp, #24
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	20000144 	.word	0x20000144

08000a88 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000a90:	2301      	movs	r3, #1
 8000a92:	425b      	negs	r3, r3
 8000a94:	1d39      	adds	r1, r7, #4
 8000a96:	4804      	ldr	r0, [pc, #16]	; (8000aa8 <__io_putchar+0x20>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f002 f9f9 	bl	8002e90 <HAL_UART_Transmit>
  return ch;
 8000a9e:	687b      	ldr	r3, [r7, #4]
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	200001ac 	.word	0x200001ac

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b090      	sub	sp, #64	; 0x40
 8000ab0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 fb61 	bl	8001178 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f865 	bl	8000b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 f911 	bl	8000ce0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000abe:	f000 f8df 	bl	8000c80 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ac2:	f000 f89f 	bl	8000c04 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000ac6:	4b29      	ldr	r3, [pc, #164]	; (8000b6c <main+0xc0>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	2101      	movs	r1, #1
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 fdff 	bl	80016d0 <HAL_GPIO_WritePin>
  uint8_t transmit_buffer = 0x42;
 8000ad2:	2137      	movs	r1, #55	; 0x37
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	2242      	movs	r2, #66	; 0x42
 8000ad8:	701a      	strb	r2, [r3, #0]
  char buffer[20];

  HAL_SPI_Transmit(&hspi1, &transmit_buffer, 1, RFM95_SPI_TIMEOUT);
 8000ada:	1879      	adds	r1, r7, r1
 8000adc:	4824      	ldr	r0, [pc, #144]	; (8000b70 <main+0xc4>)
 8000ade:	230a      	movs	r3, #10
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f001 fb37 	bl	8002154 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, 1, RFM95_SPI_TIMEOUT);
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	18f9      	adds	r1, r7, r3
 8000aea:	4821      	ldr	r0, [pc, #132]	; (8000b70 <main+0xc4>)
 8000aec:	230a      	movs	r3, #10
 8000aee:	2201      	movs	r2, #1
 8000af0:	f001 fc88 	bl	8002404 <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000af4:	4b1d      	ldr	r3, [pc, #116]	; (8000b6c <main+0xc0>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fde8 	bl	80016d0 <HAL_GPIO_WritePin>

	  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle, &huart2)) {
 8000b00:	4a1c      	ldr	r2, [pc, #112]	; (8000b74 <main+0xc8>)
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <main+0xcc>)
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fd36 	bl	8000578 <rfm95_init>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	001a      	movs	r2, r3
 8000b10:	2301      	movs	r3, #1
 8000b12:	4053      	eors	r3, r2
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d113      	bne.n	8000b42 <main+0x96>

  } else {
	  uint8_t init_message_success[] = "RFM95 init success\n\r";
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <main+0xd0>)
 8000b20:	ca31      	ldmia	r2!, {r0, r4, r5}
 8000b22:	c331      	stmia	r3!, {r0, r4, r5}
 8000b24:	ca11      	ldmia	r2!, {r0, r4}
 8000b26:	c311      	stmia	r3!, {r0, r4}
 8000b28:	7812      	ldrb	r2, [r2, #0]
 8000b2a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, init_message_success, sizeof(init_message_success), 10);
 8000b2c:	1879      	adds	r1, r7, r1
 8000b2e:	4811      	ldr	r0, [pc, #68]	; (8000b74 <main+0xc8>)
 8000b30:	230a      	movs	r3, #10
 8000b32:	2215      	movs	r2, #21
 8000b34:	f002 f9ac 	bl	8002e90 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000b38:	23fa      	movs	r3, #250	; 0xfa
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 fb7f 	bl	8001240 <HAL_Delay>
  while (1)
  {
	uint8_t payloadBuff;
	size_t payload_len;

	if(receive_package(&rfm95_handle, &payloadBuff, &payload_len, 0, &huart2)) {
 8000b42:	003a      	movs	r2, r7
 8000b44:	1df9      	adds	r1, r7, #7
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <main+0xcc>)
 8000b48:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <main+0xc8>)
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	f7ff fe63 	bl	8000818 <receive_package>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d0f5      	beq.n	8000b42 <main+0x96>
		//HAL_UART_Transmit(&huart2, payloadBuff, sizeof(payloadBuff), 10);

		HAL_UART_Transmit(&huart2, "\nhere2\n", 7, 10);
 8000b56:	490a      	ldr	r1, [pc, #40]	; (8000b80 <main+0xd4>)
 8000b58:	4806      	ldr	r0, [pc, #24]	; (8000b74 <main+0xc8>)
 8000b5a:	230a      	movs	r3, #10
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	f002 f997 	bl	8002e90 <HAL_UART_Transmit>
		HAL_Delay(100);
 8000b62:	2064      	movs	r0, #100	; 0x64
 8000b64:	f000 fb6c 	bl	8001240 <HAL_Delay>
  {
 8000b68:	e7eb      	b.n	8000b42 <main+0x96>
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	48000400 	.word	0x48000400
 8000b70:	20000148 	.word	0x20000148
 8000b74:	200001ac 	.word	0x200001ac
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	08004898 	.word	0x08004898
 8000b80:	08004890 	.word	0x08004890

08000b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b091      	sub	sp, #68	; 0x44
 8000b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8a:	2410      	movs	r4, #16
 8000b8c:	193b      	adds	r3, r7, r4
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2330      	movs	r3, #48	; 0x30
 8000b92:	001a      	movs	r2, r3
 8000b94:	2100      	movs	r1, #0
 8000b96:	f002 fd7d 	bl	8003694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9a:	003b      	movs	r3, r7
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	f002 fd76 	bl	8003694 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba8:	0021      	movs	r1, r4
 8000baa:	187b      	adds	r3, r7, r1
 8000bac:	2202      	movs	r2, #2
 8000bae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb0:	187b      	adds	r3, r7, r1
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2210      	movs	r2, #16
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 fda1 	bl	800170c <HAL_RCC_OscConfig>
 8000bca:	1e03      	subs	r3, r0, #0
 8000bcc:	d001      	beq.n	8000bd2 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000bce:	f000 f90d 	bl	8000dec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd2:	003b      	movs	r3, r7
 8000bd4:	2207      	movs	r2, #7
 8000bd6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bd8:	003b      	movs	r3, r7
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bde:	003b      	movs	r3, r7
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be4:	003b      	movs	r3, r7
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bea:	003b      	movs	r3, r7
 8000bec:	2100      	movs	r1, #0
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 f8a6 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000bf4:	1e03      	subs	r3, r0, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000bf8:	f000 f8f8 	bl	8000dec <Error_Handler>
  }
}
 8000bfc:	46c0      	nop			; (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b011      	add	sp, #68	; 0x44
 8000c02:	bd90      	pop	{r4, r7, pc}

08000c04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c0a:	4a1c      	ldr	r2, [pc, #112]	; (8000c7c <MX_SPI1_Init+0x78>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c10:	2282      	movs	r2, #130	; 0x82
 8000c12:	0052      	lsls	r2, r2, #1
 8000c14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c1e:	22e0      	movs	r2, #224	; 0xe0
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	0092      	lsls	r2, r2, #2
 8000c36:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c3a:	2210      	movs	r2, #16
 8000c3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c52:	2207      	movs	r2, #7
 8000c54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <MX_SPI1_Init+0x74>)
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 f9bd 	bl	8001fe4 <HAL_SPI_Init>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c6e:	f000 f8bd 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000148 	.word	0x20000148
 8000c7c:	40013000 	.word	0x40013000

08000c80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <MX_USART2_UART_Init+0x5c>)
 8000c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c8a:	4b13      	ldr	r3, [pc, #76]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c8c:	2296      	movs	r2, #150	; 0x96
 8000c8e:	0212      	lsls	r2, r2, #8
 8000c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000ca6:	220c      	movs	r2, #12
 8000ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cc2:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <MX_USART2_UART_Init+0x58>)
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f002 f88f 	bl	8002de8 <HAL_UART_Init>
 8000cca:	1e03      	subs	r3, r0, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000cce:	f000 f88d 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	200001ac 	.word	0x200001ac
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	240c      	movs	r4, #12
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2314      	movs	r3, #20
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f002 fccf 	bl	8003694 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	4b39      	ldr	r3, [pc, #228]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	0289      	lsls	r1, r1, #10
 8000d00:	430a      	orrs	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	029b      	lsls	r3, r3, #10
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d12:	4b33      	ldr	r3, [pc, #204]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	4b32      	ldr	r3, [pc, #200]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	02c9      	lsls	r1, r1, #11
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b2f      	ldr	r3, [pc, #188]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	02db      	lsls	r3, r3, #11
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0309      	lsls	r1, r1, #12
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <MX_GPIO_Init+0x100>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	031b      	lsls	r3, r3, #12
 8000d44:	4013      	ands	r3, r2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 8000d4a:	4b26      	ldr	r3, [pc, #152]	; (8000de4 <MX_GPIO_Init+0x104>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 fcbd 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8000d56:	23a0      	movs	r3, #160	; 0xa0
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4823      	ldr	r0, [pc, #140]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	0019      	movs	r1, r3
 8000d60:	f000 fcb6 	bl	80016d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	2201      	movs	r2, #1
 8000d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	193b      	adds	r3, r7, r4
 8000d7e:	4a19      	ldr	r2, [pc, #100]	; (8000de4 <MX_GPIO_Init+0x104>)
 8000d80:	0019      	movs	r1, r3
 8000d82:	0010      	movs	r0, r2
 8000d84:	f000 fb34 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000d88:	0021      	movs	r1, r4
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	22a0      	movs	r2, #160	; 0xa0
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d92:	000c      	movs	r4, r1
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2201      	movs	r2, #1
 8000d98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <MX_GPIO_Init+0x108>)
 8000daa:	0019      	movs	r1, r3
 8000dac:	0010      	movs	r0, r2
 8000dae:	f000 fb1f 	bl	80013f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000db2:	0021      	movs	r1, r4
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	22e0      	movs	r2, #224	; 0xe0
 8000db8:	00d2      	lsls	r2, r2, #3
 8000dba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	187b      	adds	r3, r7, r1
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	187a      	adds	r2, r7, r1
 8000dca:	2390      	movs	r3, #144	; 0x90
 8000dcc:	05db      	lsls	r3, r3, #23
 8000dce:	0011      	movs	r1, r2
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	f000 fb0d 	bl	80013f0 <HAL_GPIO_Init>

}
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b009      	add	sp, #36	; 0x24
 8000ddc:	bd90      	pop	{r4, r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	40021000 	.word	0x40021000
 8000de4:	48000400 	.word	0x48000400
 8000de8:	48000800 	.word	0x48000800

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	2101      	movs	r1, #1
 8000e06:	430a      	orrs	r2, r1
 8000e08:	619a      	str	r2, [r3, #24]
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4013      	ands	r3, r2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	69da      	ldr	r2, [r3, #28]
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	2180      	movs	r1, #128	; 0x80
 8000e1e:	0549      	lsls	r1, r1, #21
 8000e20:	430a      	orrs	r2, r1
 8000e22:	61da      	str	r2, [r3, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_MspInit+0x44>)
 8000e26:	69da      	ldr	r2, [r3, #28]
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	055b      	lsls	r3, r3, #21
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	603b      	str	r3, [r7, #0]
 8000e30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b08b      	sub	sp, #44	; 0x2c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	2414      	movs	r4, #20
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	2314      	movs	r3, #20
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f002 fc1e 	bl	8003694 <memset>
  if(hspi->Instance==SPI1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a1c      	ldr	r2, [pc, #112]	; (8000ed0 <HAL_SPI_MspInit+0x90>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d132      	bne.n	8000ec8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e62:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e64:	699a      	ldr	r2, [r3, #24]
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e68:	2180      	movs	r1, #128	; 0x80
 8000e6a:	0149      	lsls	r1, r1, #5
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	619a      	str	r2, [r3, #24]
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e72:	699a      	ldr	r2, [r3, #24]
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	015b      	lsls	r3, r3, #5
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e80:	695a      	ldr	r2, [r3, #20]
 8000e82:	4b14      	ldr	r3, [pc, #80]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e84:	2180      	movs	r1, #128	; 0x80
 8000e86:	0289      	lsls	r1, r1, #10
 8000e88:	430a      	orrs	r2, r1
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0x94>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	029b      	lsls	r3, r3, #10
 8000e94:	4013      	ands	r3, r2
 8000e96:	60fb      	str	r3, [r7, #12]
 8000e98:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	22e0      	movs	r2, #224	; 0xe0
 8000ea0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eba:	187a      	adds	r2, r7, r1
 8000ebc:	2390      	movs	r3, #144	; 0x90
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fa94 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b00b      	add	sp, #44	; 0x2c
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	40013000 	.word	0x40013000
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b08b      	sub	sp, #44	; 0x2c
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	2414      	movs	r4, #20
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f002 fbd2 	bl	8003694 <memset>
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x90>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d132      	bne.n	8000f60 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000efc:	69da      	ldr	r2, [r3, #28]
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0289      	lsls	r1, r1, #10
 8000f04:	430a      	orrs	r2, r1
 8000f06:	61da      	str	r2, [r3, #28]
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f0a:	69da      	ldr	r2, [r3, #28]
 8000f0c:	2380      	movs	r3, #128	; 0x80
 8000f0e:	029b      	lsls	r3, r3, #10
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f1c:	2180      	movs	r1, #128	; 0x80
 8000f1e:	0289      	lsls	r1, r1, #10
 8000f20:	430a      	orrs	r2, r1
 8000f22:	615a      	str	r2, [r3, #20]
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f26:	695a      	ldr	r2, [r3, #20]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	029b      	lsls	r3, r3, #10
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f32:	0021      	movs	r1, r4
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	220c      	movs	r2, #12
 8000f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	187b      	adds	r3, r7, r1
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f46:	187b      	adds	r3, r7, r1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	2201      	movs	r2, #1
 8000f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	2390      	movs	r3, #144	; 0x90
 8000f56:	05db      	lsls	r3, r3, #23
 8000f58:	0011      	movs	r1, r2
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f000 fa48 	bl	80013f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b00b      	add	sp, #44	; 0x2c
 8000f66:	bd90      	pop	{r4, r7, pc}
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f938 	bl	8001208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	af00      	add	r7, sp, #0
  return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_kill>:

int _kill(int pid, int sig)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000fb4:	f002 fb34 	bl	8003620 <__errno>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	2216      	movs	r2, #22
 8000fbc:	601a      	str	r2, [r3, #0]
  return -1;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	425b      	negs	r3, r3
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b002      	add	sp, #8
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_exit>:

void _exit (int status)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	425a      	negs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	0011      	movs	r1, r2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f7ff ffe5 	bl	8000faa <_kill>
  while (1) {}    /* Make sure we hang here */
 8000fe0:	e7fe      	b.n	8000fe0 <_exit+0x16>

08000fe2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b086      	sub	sp, #24
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	60b9      	str	r1, [r7, #8]
 8000fec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	e00a      	b.n	800100a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ff4:	e000      	b.n	8000ff8 <_read+0x16>
 8000ff6:	bf00      	nop
 8000ff8:	0001      	movs	r1, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	60ba      	str	r2, [r7, #8]
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbf0      	blt.n	8000ff4 <_read+0x12>
  }

  return len;
 8001012:	687b      	ldr	r3, [r7, #4]
}
 8001014:	0018      	movs	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	b006      	add	sp, #24
 800101a:	bd80      	pop	{r7, pc}

0800101c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	e009      	b.n	8001042 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1c5a      	adds	r2, r3, #1
 8001032:	60ba      	str	r2, [r7, #8]
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fd26 	bl	8000a88 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3301      	adds	r3, #1
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	697a      	ldr	r2, [r7, #20]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	429a      	cmp	r2, r3
 8001048:	dbf1      	blt.n	800102e <_write+0x12>
  }
  return len;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	0018      	movs	r0, r3
 800104e:	46bd      	mov	sp, r7
 8001050:	b006      	add	sp, #24
 8001052:	bd80      	pop	{r7, pc}

08001054 <_close>:

int _close(int file)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800105c:	2301      	movs	r3, #1
 800105e:	425b      	negs	r3, r3
}
 8001060:	0018      	movs	r0, r3
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}

08001068 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	2280      	movs	r2, #128	; 0x80
 8001076:	0192      	lsls	r2, r2, #6
 8001078:	605a      	str	r2, [r3, #4]
  return 0;
 800107a:	2300      	movs	r3, #0
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <_isatty>:

int _isatty(int file)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800108c:	2301      	movs	r3, #1
}
 800108e:	0018      	movs	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	b002      	add	sp, #8
 8001094:	bd80      	pop	{r7, pc}

08001096 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b084      	sub	sp, #16
 800109a:	af00      	add	r7, sp, #0
 800109c:	60f8      	str	r0, [r7, #12]
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010a2:	2300      	movs	r3, #0
}
 80010a4:	0018      	movs	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	b004      	add	sp, #16
 80010aa:	bd80      	pop	{r7, pc}

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	; (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	; (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	; (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	18d3      	adds	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f002 faa0 	bl	8003620 <__errno>
 80010e0:	0003      	movs	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	2301      	movs	r3, #1
 80010e8:	425b      	negs	r3, r3
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	18d2      	adds	r2, r2, r3
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <_sbrk+0x64>)
 80010fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b006      	add	sp, #24
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20002000 	.word	0x20002000
 800110c:	00000400 	.word	0x00000400
 8001110:	20000230 	.word	0x20000230
 8001114:	20000248 	.word	0x20000248

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800111c:	46c0      	nop			; (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001126:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001128:	480d      	ldr	r0, [pc, #52]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 800112c:	4a0e      	ldr	r2, [pc, #56]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001130:	e002      	b.n	8001138 <LoopCopyDataInit>

08001132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001136:	3304      	adds	r3, #4

08001138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800113c:	d3f9      	bcc.n	8001132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113e:	4a0b      	ldr	r2, [pc, #44]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001140:	4c0b      	ldr	r4, [pc, #44]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001144:	e001      	b.n	800114a <LoopFillZerobss>

08001146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001148:	3204      	adds	r2, #4

0800114a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800114c:	d3fb      	bcc.n	8001146 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800114e:	f7ff ffe3 	bl	8001118 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001152:	f002 fa7b 	bl	800364c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001156:	f7ff fca9 	bl	8000aac <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   r0, =_estack
 800115c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8001168:	080049f4 	.word	0x080049f4
  ldr r2, =_sbss
 800116c:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8001170:	20000248 	.word	0x20000248

08001174 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_IRQHandler>
	...

08001178 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <HAL_Init+0x24>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_Init+0x24>)
 8001182:	2110      	movs	r1, #16
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f809 	bl	80011a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800118e:	f7ff fe33 	bl	8000df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001192:	2300      	movs	r3, #0
}
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	40022000 	.word	0x40022000

080011a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011a8:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_InitTick+0x5c>)
 80011aa:	681c      	ldr	r4, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x60>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	0019      	movs	r1, r3
 80011b2:	23fa      	movs	r3, #250	; 0xfa
 80011b4:	0098      	lsls	r0, r3, #2
 80011b6:	f7fe ffb1 	bl	800011c <__udivsi3>
 80011ba:	0003      	movs	r3, r0
 80011bc:	0019      	movs	r1, r3
 80011be:	0020      	movs	r0, r4
 80011c0:	f7fe ffac 	bl	800011c <__udivsi3>
 80011c4:	0003      	movs	r3, r0
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f905 	bl	80013d6 <HAL_SYSTICK_Config>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e00f      	b.n	80011f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	d80b      	bhi.n	80011f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	425b      	negs	r3, r3
 80011e0:	2200      	movs	r2, #0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f8e2 	bl	80013ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_InitTick+0x64>)
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	e000      	b.n	80011f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	0018      	movs	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	b003      	add	sp, #12
 80011fa:	bd90      	pop	{r4, r7, pc}
 80011fc:	200000b8 	.word	0x200000b8
 8001200:	200000c0 	.word	0x200000c0
 8001204:	200000bc 	.word	0x200000bc

08001208 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800120c:	4b05      	ldr	r3, [pc, #20]	; (8001224 <HAL_IncTick+0x1c>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	001a      	movs	r2, r3
 8001212:	4b05      	ldr	r3, [pc, #20]	; (8001228 <HAL_IncTick+0x20>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	18d2      	adds	r2, r2, r3
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_IncTick+0x20>)
 800121a:	601a      	str	r2, [r3, #0]
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	200000c0 	.word	0x200000c0
 8001228:	20000234 	.word	0x20000234

0800122c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_GetTick+0x10>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000234 	.word	0x20000234

08001240 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001248:	f7ff fff0 	bl	800122c <HAL_GetTick>
 800124c:	0003      	movs	r3, r0
 800124e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3301      	adds	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125a:	4b0a      	ldr	r3, [pc, #40]	; (8001284 <HAL_Delay+0x44>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	001a      	movs	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	189b      	adds	r3, r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	f7ff ffe0 	bl	800122c <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	429a      	cmp	r2, r3
 8001276:	d8f7      	bhi.n	8001268 <HAL_Delay+0x28>
  {
  }
}
 8001278:	46c0      	nop			; (mov r8, r8)
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	46bd      	mov	sp, r7
 800127e:	b004      	add	sp, #16
 8001280:	bd80      	pop	{r7, pc}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	200000c0 	.word	0x200000c0

08001288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	0002      	movs	r2, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001296:	1dfb      	adds	r3, r7, #7
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	2b7f      	cmp	r3, #127	; 0x7f
 800129c:	d828      	bhi.n	80012f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129e:	4a2f      	ldr	r2, [pc, #188]	; (800135c <__NVIC_SetPriority+0xd4>)
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	089b      	lsrs	r3, r3, #2
 80012a8:	33c0      	adds	r3, #192	; 0xc0
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	589b      	ldr	r3, [r3, r2]
 80012ae:	1dfa      	adds	r2, r7, #7
 80012b0:	7812      	ldrb	r2, [r2, #0]
 80012b2:	0011      	movs	r1, r2
 80012b4:	2203      	movs	r2, #3
 80012b6:	400a      	ands	r2, r1
 80012b8:	00d2      	lsls	r2, r2, #3
 80012ba:	21ff      	movs	r1, #255	; 0xff
 80012bc:	4091      	lsls	r1, r2
 80012be:	000a      	movs	r2, r1
 80012c0:	43d2      	mvns	r2, r2
 80012c2:	401a      	ands	r2, r3
 80012c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	019b      	lsls	r3, r3, #6
 80012ca:	22ff      	movs	r2, #255	; 0xff
 80012cc:	401a      	ands	r2, r3
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0018      	movs	r0, r3
 80012d4:	2303      	movs	r3, #3
 80012d6:	4003      	ands	r3, r0
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012dc:	481f      	ldr	r0, [pc, #124]	; (800135c <__NVIC_SetPriority+0xd4>)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	b25b      	sxtb	r3, r3
 80012e4:	089b      	lsrs	r3, r3, #2
 80012e6:	430a      	orrs	r2, r1
 80012e8:	33c0      	adds	r3, #192	; 0xc0
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ee:	e031      	b.n	8001354 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <__NVIC_SetPriority+0xd8>)
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0019      	movs	r1, r3
 80012f8:	230f      	movs	r3, #15
 80012fa:	400b      	ands	r3, r1
 80012fc:	3b08      	subs	r3, #8
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3306      	adds	r3, #6
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	18d3      	adds	r3, r2, r3
 8001306:	3304      	adds	r3, #4
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1dfa      	adds	r2, r7, #7
 800130c:	7812      	ldrb	r2, [r2, #0]
 800130e:	0011      	movs	r1, r2
 8001310:	2203      	movs	r2, #3
 8001312:	400a      	ands	r2, r1
 8001314:	00d2      	lsls	r2, r2, #3
 8001316:	21ff      	movs	r1, #255	; 0xff
 8001318:	4091      	lsls	r1, r2
 800131a:	000a      	movs	r2, r1
 800131c:	43d2      	mvns	r2, r2
 800131e:	401a      	ands	r2, r3
 8001320:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	019b      	lsls	r3, r3, #6
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	401a      	ands	r2, r3
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	0018      	movs	r0, r3
 8001330:	2303      	movs	r3, #3
 8001332:	4003      	ands	r3, r0
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	4809      	ldr	r0, [pc, #36]	; (8001360 <__NVIC_SetPriority+0xd8>)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	001c      	movs	r4, r3
 8001340:	230f      	movs	r3, #15
 8001342:	4023      	ands	r3, r4
 8001344:	3b08      	subs	r3, #8
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	430a      	orrs	r2, r1
 800134a:	3306      	adds	r3, #6
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	18c3      	adds	r3, r0, r3
 8001350:	3304      	adds	r3, #4
 8001352:	601a      	str	r2, [r3, #0]
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b003      	add	sp, #12
 800135a:	bd90      	pop	{r4, r7, pc}
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	1e5a      	subs	r2, r3, #1
 8001370:	2380      	movs	r3, #128	; 0x80
 8001372:	045b      	lsls	r3, r3, #17
 8001374:	429a      	cmp	r2, r3
 8001376:	d301      	bcc.n	800137c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001378:	2301      	movs	r3, #1
 800137a:	e010      	b.n	800139e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <SysTick_Config+0x44>)
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	3a01      	subs	r2, #1
 8001382:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	2103      	movs	r1, #3
 800138a:	0018      	movs	r0, r3
 800138c:	f7ff ff7c 	bl	8001288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <SysTick_Config+0x44>)
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001396:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <SysTick_Config+0x44>)
 8001398:	2207      	movs	r2, #7
 800139a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800139c:	2300      	movs	r3, #0
}
 800139e:	0018      	movs	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	46c0      	nop			; (mov r8, r8)
 80013a8:	e000e010 	.word	0xe000e010

080013ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	210f      	movs	r1, #15
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	1c02      	adds	r2, r0, #0
 80013bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b25b      	sxtb	r3, r3
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff5d 	bl	8001288 <__NVIC_SetPriority>
}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	46bd      	mov	sp, r7
 80013d2:	b004      	add	sp, #16
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b082      	sub	sp, #8
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7ff ffbf 	bl	8001364 <SysTick_Config>
 80013e6:	0003      	movs	r3, r0
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fe:	e14f      	b.n	80016a0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2101      	movs	r1, #1
 8001406:	697a      	ldr	r2, [r7, #20]
 8001408:	4091      	lsls	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	4013      	ands	r3, r2
 800140e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d100      	bne.n	8001418 <HAL_GPIO_Init+0x28>
 8001416:	e140      	b.n	800169a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2203      	movs	r2, #3
 800141e:	4013      	ands	r3, r2
 8001420:	2b01      	cmp	r3, #1
 8001422:	d005      	beq.n	8001430 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2203      	movs	r2, #3
 800142a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800142c:	2b02      	cmp	r3, #2
 800142e:	d130      	bne.n	8001492 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	2203      	movs	r2, #3
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	409a      	lsls	r2, r3
 8001452:	0013      	movs	r3, r2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001466:	2201      	movs	r2, #1
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	409a      	lsls	r2, r3
 800146c:	0013      	movs	r3, r2
 800146e:	43da      	mvns	r2, r3
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	091b      	lsrs	r3, r3, #4
 800147c:	2201      	movs	r2, #1
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	4013      	ands	r3, r2
 800149a:	2b03      	cmp	r3, #3
 800149c:	d017      	beq.n	80014ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	2203      	movs	r2, #3
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	0013      	movs	r3, r2
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2203      	movs	r2, #3
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d123      	bne.n	8001522 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	08da      	lsrs	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3208      	adds	r2, #8
 80014e2:	0092      	lsls	r2, r2, #2
 80014e4:	58d3      	ldr	r3, [r2, r3]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2207      	movs	r2, #7
 80014ec:	4013      	ands	r3, r2
 80014ee:	009b      	lsls	r3, r3, #2
 80014f0:	220f      	movs	r2, #15
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	2107      	movs	r1, #7
 8001506:	400b      	ands	r3, r1
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3208      	adds	r2, #8
 800151c:	0092      	lsls	r2, r2, #2
 800151e:	6939      	ldr	r1, [r7, #16]
 8001520:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2203      	movs	r2, #3
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	43da      	mvns	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	4013      	ands	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	2203      	movs	r2, #3
 8001540:	401a      	ands	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	409a      	lsls	r2, r3
 8001548:	0013      	movs	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	23c0      	movs	r3, #192	; 0xc0
 800155c:	029b      	lsls	r3, r3, #10
 800155e:	4013      	ands	r3, r2
 8001560:	d100      	bne.n	8001564 <HAL_GPIO_Init+0x174>
 8001562:	e09a      	b.n	800169a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001564:	4b54      	ldr	r3, [pc, #336]	; (80016b8 <HAL_GPIO_Init+0x2c8>)
 8001566:	699a      	ldr	r2, [r3, #24]
 8001568:	4b53      	ldr	r3, [pc, #332]	; (80016b8 <HAL_GPIO_Init+0x2c8>)
 800156a:	2101      	movs	r1, #1
 800156c:	430a      	orrs	r2, r1
 800156e:	619a      	str	r2, [r3, #24]
 8001570:	4b51      	ldr	r3, [pc, #324]	; (80016b8 <HAL_GPIO_Init+0x2c8>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2201      	movs	r2, #1
 8001576:	4013      	ands	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800157c:	4a4f      	ldr	r2, [pc, #316]	; (80016bc <HAL_GPIO_Init+0x2cc>)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	089b      	lsrs	r3, r3, #2
 8001582:	3302      	adds	r3, #2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	589b      	ldr	r3, [r3, r2]
 8001588:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2203      	movs	r2, #3
 800158e:	4013      	ands	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	43da      	mvns	r2, r3
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	4013      	ands	r3, r2
 800159e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	2390      	movs	r3, #144	; 0x90
 80015a4:	05db      	lsls	r3, r3, #23
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0x1e2>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a44      	ldr	r2, [pc, #272]	; (80016c0 <HAL_GPIO_Init+0x2d0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d00d      	beq.n	80015ce <HAL_GPIO_Init+0x1de>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a43      	ldr	r2, [pc, #268]	; (80016c4 <HAL_GPIO_Init+0x2d4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d007      	beq.n	80015ca <HAL_GPIO_Init+0x1da>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a42      	ldr	r2, [pc, #264]	; (80016c8 <HAL_GPIO_Init+0x2d8>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d101      	bne.n	80015c6 <HAL_GPIO_Init+0x1d6>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015c6:	2305      	movs	r3, #5
 80015c8:	e004      	b.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015ce:	2301      	movs	r3, #1
 80015d0:	e000      	b.n	80015d4 <HAL_GPIO_Init+0x1e4>
 80015d2:	2300      	movs	r3, #0
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	2103      	movs	r1, #3
 80015d8:	400a      	ands	r2, r1
 80015da:	0092      	lsls	r2, r2, #2
 80015dc:	4093      	lsls	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e4:	4935      	ldr	r1, [pc, #212]	; (80016bc <HAL_GPIO_Init+0x2cc>)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	089b      	lsrs	r3, r3, #2
 80015ea:	3302      	adds	r3, #2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	2380      	movs	r3, #128	; 0x80
 8001608:	025b      	lsls	r3, r3, #9
 800160a:	4013      	ands	r3, r2
 800160c:	d003      	beq.n	8001616 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800161c:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	43da      	mvns	r2, r3
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4013      	ands	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685a      	ldr	r2, [r3, #4]
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	029b      	lsls	r3, r3, #10
 8001634:	4013      	ands	r3, r2
 8001636:	d003      	beq.n	8001640 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001646:	4b21      	ldr	r3, [pc, #132]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	43da      	mvns	r2, r3
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	035b      	lsls	r3, r3, #13
 800165e:	4013      	ands	r3, r2
 8001660:	d003      	beq.n	800166a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800166a:	4b18      	ldr	r3, [pc, #96]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	43da      	mvns	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	2380      	movs	r3, #128	; 0x80
 8001686:	039b      	lsls	r3, r3, #14
 8001688:	4013      	ands	r3, r2
 800168a:	d003      	beq.n	8001694 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_GPIO_Init+0x2dc>)
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	40da      	lsrs	r2, r3
 80016a8:	1e13      	subs	r3, r2, #0
 80016aa:	d000      	beq.n	80016ae <HAL_GPIO_Init+0x2be>
 80016ac:	e6a8      	b.n	8001400 <HAL_GPIO_Init+0x10>
  } 
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46c0      	nop			; (mov r8, r8)
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b006      	add	sp, #24
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40010000 	.word	0x40010000
 80016c0:	48000400 	.word	0x48000400
 80016c4:	48000800 	.word	0x48000800
 80016c8:	48000c00 	.word	0x48000c00
 80016cc:	40010400 	.word	0x40010400

080016d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	0008      	movs	r0, r1
 80016da:	0011      	movs	r1, r2
 80016dc:	1cbb      	adds	r3, r7, #2
 80016de:	1c02      	adds	r2, r0, #0
 80016e0:	801a      	strh	r2, [r3, #0]
 80016e2:	1c7b      	adds	r3, r7, #1
 80016e4:	1c0a      	adds	r2, r1, #0
 80016e6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016e8:	1c7b      	adds	r3, r7, #1
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f0:	1cbb      	adds	r3, r7, #2
 80016f2:	881a      	ldrh	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fa:	1cbb      	adds	r3, r7, #2
 80016fc:	881a      	ldrh	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
	...

0800170c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e301      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	d100      	bne.n	800172a <HAL_RCC_OscConfig+0x1e>
 8001728:	e08d      	b.n	8001846 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800172a:	4bc3      	ldr	r3, [pc, #780]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	220c      	movs	r2, #12
 8001730:	4013      	ands	r3, r2
 8001732:	2b04      	cmp	r3, #4
 8001734:	d00e      	beq.n	8001754 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001736:	4bc0      	ldr	r3, [pc, #768]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	220c      	movs	r2, #12
 800173c:	4013      	ands	r3, r2
 800173e:	2b08      	cmp	r3, #8
 8001740:	d116      	bne.n	8001770 <HAL_RCC_OscConfig+0x64>
 8001742:	4bbd      	ldr	r3, [pc, #756]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	2380      	movs	r3, #128	; 0x80
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	025b      	lsls	r3, r3, #9
 8001750:	429a      	cmp	r2, r3
 8001752:	d10d      	bne.n	8001770 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	4bb8      	ldr	r3, [pc, #736]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	029b      	lsls	r3, r3, #10
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x56>
 8001760:	e070      	b.n	8001844 <HAL_RCC_OscConfig+0x138>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d000      	beq.n	800176c <HAL_RCC_OscConfig+0x60>
 800176a:	e06b      	b.n	8001844 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2d8      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d107      	bne.n	8001788 <HAL_RCC_OscConfig+0x7c>
 8001778:	4baf      	ldr	r3, [pc, #700]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4bae      	ldr	r3, [pc, #696]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800177e:	2180      	movs	r1, #128	; 0x80
 8001780:	0249      	lsls	r1, r1, #9
 8001782:	430a      	orrs	r2, r1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e02f      	b.n	80017e8 <HAL_RCC_OscConfig+0xdc>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10c      	bne.n	80017aa <HAL_RCC_OscConfig+0x9e>
 8001790:	4ba9      	ldr	r3, [pc, #676]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4ba8      	ldr	r3, [pc, #672]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001796:	49a9      	ldr	r1, [pc, #676]	; (8001a3c <HAL_RCC_OscConfig+0x330>)
 8001798:	400a      	ands	r2, r1
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	4ba6      	ldr	r3, [pc, #664]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4ba5      	ldr	r3, [pc, #660]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	49a7      	ldr	r1, [pc, #668]	; (8001a40 <HAL_RCC_OscConfig+0x334>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e01e      	b.n	80017e8 <HAL_RCC_OscConfig+0xdc>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b05      	cmp	r3, #5
 80017b0:	d10e      	bne.n	80017d0 <HAL_RCC_OscConfig+0xc4>
 80017b2:	4ba1      	ldr	r3, [pc, #644]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4ba0      	ldr	r3, [pc, #640]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	02c9      	lsls	r1, r1, #11
 80017bc:	430a      	orrs	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4b9d      	ldr	r3, [pc, #628]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b9c      	ldr	r3, [pc, #624]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017c6:	2180      	movs	r1, #128	; 0x80
 80017c8:	0249      	lsls	r1, r1, #9
 80017ca:	430a      	orrs	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xdc>
 80017d0:	4b99      	ldr	r3, [pc, #612]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b98      	ldr	r3, [pc, #608]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017d6:	4999      	ldr	r1, [pc, #612]	; (8001a3c <HAL_RCC_OscConfig+0x330>)
 80017d8:	400a      	ands	r2, r1
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	4b96      	ldr	r3, [pc, #600]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80017e2:	4997      	ldr	r1, [pc, #604]	; (8001a40 <HAL_RCC_OscConfig+0x334>)
 80017e4:	400a      	ands	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d014      	beq.n	800181a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fd1c 	bl	800122c <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fa:	f7ff fd17 	bl	800122c <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b64      	cmp	r3, #100	; 0x64
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e28a      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180c:	4b8a      	ldr	r3, [pc, #552]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	029b      	lsls	r3, r3, #10
 8001814:	4013      	ands	r3, r2
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0xee>
 8001818:	e015      	b.n	8001846 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff fd07 	bl	800122c <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001824:	f7ff fd02 	bl	800122c <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e275      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001836:	4b80      	ldr	r3, [pc, #512]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	029b      	lsls	r3, r3, #10
 800183e:	4013      	ands	r3, r2
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x118>
 8001842:	e000      	b.n	8001846 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001844:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2202      	movs	r2, #2
 800184c:	4013      	ands	r3, r2
 800184e:	d100      	bne.n	8001852 <HAL_RCC_OscConfig+0x146>
 8001850:	e069      	b.n	8001926 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001852:	4b79      	ldr	r3, [pc, #484]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	220c      	movs	r2, #12
 8001858:	4013      	ands	r3, r2
 800185a:	d00b      	beq.n	8001874 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800185c:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	220c      	movs	r2, #12
 8001862:	4013      	ands	r3, r2
 8001864:	2b08      	cmp	r3, #8
 8001866:	d11c      	bne.n	80018a2 <HAL_RCC_OscConfig+0x196>
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	4013      	ands	r3, r2
 8001872:	d116      	bne.n	80018a2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001874:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2202      	movs	r2, #2
 800187a:	4013      	ands	r3, r2
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e24b      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b6b      	ldr	r3, [pc, #428]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	22f8      	movs	r2, #248	; 0xf8
 8001890:	4393      	bics	r3, r2
 8001892:	0019      	movs	r1, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	00da      	lsls	r2, r3, #3
 800189a:	4b67      	ldr	r3, [pc, #412]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800189c:	430a      	orrs	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018a0:	e041      	b.n	8001926 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d024      	beq.n	80018f4 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018aa:	4b63      	ldr	r3, [pc, #396]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	4b62      	ldr	r3, [pc, #392]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b6:	f7ff fcb9 	bl	800122c <HAL_GetTick>
 80018ba:	0003      	movs	r3, r0
 80018bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c0:	f7ff fcb4 	bl	800122c <HAL_GetTick>
 80018c4:	0002      	movs	r2, r0
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e227      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d2:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2202      	movs	r2, #2
 80018d8:	4013      	ands	r3, r2
 80018da:	d0f1      	beq.n	80018c0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018dc:	4b56      	ldr	r3, [pc, #344]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	22f8      	movs	r2, #248	; 0xf8
 80018e2:	4393      	bics	r3, r2
 80018e4:	0019      	movs	r1, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00da      	lsls	r2, r3, #3
 80018ec:	4b52      	ldr	r3, [pc, #328]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	e018      	b.n	8001926 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4b4f      	ldr	r3, [pc, #316]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	438a      	bics	r2, r1
 80018fe:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fc94 	bl	800122c <HAL_GetTick>
 8001904:	0003      	movs	r3, r0
 8001906:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	e008      	b.n	800191c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800190a:	f7ff fc8f 	bl	800122c <HAL_GetTick>
 800190e:	0002      	movs	r2, r0
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	1ad3      	subs	r3, r2, r3
 8001914:	2b02      	cmp	r3, #2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e202      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191c:	4b46      	ldr	r3, [pc, #280]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2202      	movs	r2, #2
 8001922:	4013      	ands	r3, r2
 8001924:	d1f1      	bne.n	800190a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2208      	movs	r2, #8
 800192c:	4013      	ands	r3, r2
 800192e:	d036      	beq.n	800199e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	69db      	ldr	r3, [r3, #28]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d019      	beq.n	800196c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001938:	4b3f      	ldr	r3, [pc, #252]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800193a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff fc72 	bl	800122c <HAL_GetTick>
 8001948:	0003      	movs	r3, r0
 800194a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800194e:	f7ff fc6d 	bl	800122c <HAL_GetTick>
 8001952:	0002      	movs	r2, r0
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e1e0      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001960:	4b35      	ldr	r3, [pc, #212]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2202      	movs	r2, #2
 8001966:	4013      	ands	r3, r2
 8001968:	d0f1      	beq.n	800194e <HAL_RCC_OscConfig+0x242>
 800196a:	e018      	b.n	800199e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800196c:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 800196e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001970:	4b31      	ldr	r3, [pc, #196]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fc58 	bl	800122c <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001982:	f7ff fc53 	bl	800122c <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1c6      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001994:	4b28      	ldr	r3, [pc, #160]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f1      	bne.n	8001982 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2204      	movs	r2, #4
 80019a4:	4013      	ands	r3, r2
 80019a6:	d100      	bne.n	80019aa <HAL_RCC_OscConfig+0x29e>
 80019a8:	e0b4      	b.n	8001b14 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019aa:	201f      	movs	r0, #31
 80019ac:	183b      	adds	r3, r7, r0
 80019ae:	2200      	movs	r2, #0
 80019b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80019b4:	69da      	ldr	r2, [r3, #28]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	055b      	lsls	r3, r3, #21
 80019ba:	4013      	ands	r3, r2
 80019bc:	d110      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80019c0:	69da      	ldr	r2, [r3, #28]
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0549      	lsls	r1, r1, #21
 80019c8:	430a      	orrs	r2, r1
 80019ca:	61da      	str	r2, [r3, #28]
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	055b      	lsls	r3, r3, #21
 80019d4:	4013      	ands	r3, r2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019da:	183b      	adds	r3, r7, r0
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_OscConfig+0x338>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	d11a      	bne.n	8001a22 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ec:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_RCC_OscConfig+0x338>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	4b14      	ldr	r3, [pc, #80]	; (8001a44 <HAL_RCC_OscConfig+0x338>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0049      	lsls	r1, r1, #1
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fa:	f7ff fc17 	bl	800122c <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a04:	f7ff fc12 	bl	800122c <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b64      	cmp	r3, #100	; 0x64
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e185      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b0b      	ldr	r3, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x338>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d10e      	bne.n	8001a48 <HAL_RCC_OscConfig+0x33c>
 8001a2a:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001a2c:	6a1a      	ldr	r2, [r3, #32]
 8001a2e:	4b02      	ldr	r3, [pc, #8]	; (8001a38 <HAL_RCC_OscConfig+0x32c>)
 8001a30:	2101      	movs	r1, #1
 8001a32:	430a      	orrs	r2, r1
 8001a34:	621a      	str	r2, [r3, #32]
 8001a36:	e035      	b.n	8001aa4 <HAL_RCC_OscConfig+0x398>
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	fffeffff 	.word	0xfffeffff
 8001a40:	fffbffff 	.word	0xfffbffff
 8001a44:	40007000 	.word	0x40007000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d10c      	bne.n	8001a6a <HAL_RCC_OscConfig+0x35e>
 8001a50:	4bb6      	ldr	r3, [pc, #728]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a52:	6a1a      	ldr	r2, [r3, #32]
 8001a54:	4bb5      	ldr	r3, [pc, #724]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	438a      	bics	r2, r1
 8001a5a:	621a      	str	r2, [r3, #32]
 8001a5c:	4bb3      	ldr	r3, [pc, #716]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a5e:	6a1a      	ldr	r2, [r3, #32]
 8001a60:	4bb2      	ldr	r3, [pc, #712]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a62:	2104      	movs	r1, #4
 8001a64:	438a      	bics	r2, r1
 8001a66:	621a      	str	r2, [r3, #32]
 8001a68:	e01c      	b.n	8001aa4 <HAL_RCC_OscConfig+0x398>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2b05      	cmp	r3, #5
 8001a70:	d10c      	bne.n	8001a8c <HAL_RCC_OscConfig+0x380>
 8001a72:	4bae      	ldr	r3, [pc, #696]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	4bad      	ldr	r3, [pc, #692]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a78:	2104      	movs	r1, #4
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	621a      	str	r2, [r3, #32]
 8001a7e:	4bab      	ldr	r3, [pc, #684]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a80:	6a1a      	ldr	r2, [r3, #32]
 8001a82:	4baa      	ldr	r3, [pc, #680]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	430a      	orrs	r2, r1
 8001a88:	621a      	str	r2, [r3, #32]
 8001a8a:	e00b      	b.n	8001aa4 <HAL_RCC_OscConfig+0x398>
 8001a8c:	4ba7      	ldr	r3, [pc, #668]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a8e:	6a1a      	ldr	r2, [r3, #32]
 8001a90:	4ba6      	ldr	r3, [pc, #664]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a92:	2101      	movs	r1, #1
 8001a94:	438a      	bics	r2, r1
 8001a96:	621a      	str	r2, [r3, #32]
 8001a98:	4ba4      	ldr	r3, [pc, #656]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	438a      	bics	r2, r1
 8001aa2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d014      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fbbe 	bl	800122c <HAL_GetTick>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fbb9 	bl	800122c <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <HAL_RCC_OscConfig+0x624>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e12b      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	4b98      	ldr	r3, [pc, #608]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x3aa>
 8001ad4:	e013      	b.n	8001afe <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad6:	f7ff fba9 	bl	800122c <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ade:	e009      	b.n	8001af4 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fba4 	bl	800122c <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	4a91      	ldr	r2, [pc, #580]	; (8001d30 <HAL_RCC_OscConfig+0x624>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e116      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af4:	4b8d      	ldr	r3, [pc, #564]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	d1f0      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001afe:	231f      	movs	r3, #31
 8001b00:	18fb      	adds	r3, r7, r3
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d105      	bne.n	8001b14 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b0a:	69da      	ldr	r2, [r3, #28]
 8001b0c:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b0e:	4989      	ldr	r1, [pc, #548]	; (8001d34 <HAL_RCC_OscConfig+0x628>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2210      	movs	r2, #16
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d063      	beq.n	8001be6 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d12a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b26:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b2a:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b2c:	2104      	movs	r1, #4
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b32:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b36:	4b7d      	ldr	r3, [pc, #500]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b38:	2101      	movs	r1, #1
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b3e:	f7ff fb75 	bl	800122c <HAL_GetTick>
 8001b42:	0003      	movs	r3, r0
 8001b44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b48:	f7ff fb70 	bl	800122c <HAL_GetTick>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0e3      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b5a:	4b74      	ldr	r3, [pc, #464]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d0f1      	beq.n	8001b48 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b64:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b68:	22f8      	movs	r2, #248	; 0xf8
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	00da      	lsls	r2, r3, #3
 8001b74:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	635a      	str	r2, [r3, #52]	; 0x34
 8001b7a:	e034      	b.n	8001be6 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	3305      	adds	r3, #5
 8001b82:	d111      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001b84:	4b69      	ldr	r3, [pc, #420]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b8a:	2104      	movs	r1, #4
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b90:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b94:	22f8      	movs	r2, #248	; 0xf8
 8001b96:	4393      	bics	r3, r2
 8001b98:	0019      	movs	r1, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	00da      	lsls	r2, r3, #3
 8001ba0:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ba6:	e01e      	b.n	8001be6 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001ba8:	4b60      	ldr	r3, [pc, #384]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001bae:	2104      	movs	r1, #4
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bb4:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb8:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001bba:	2101      	movs	r1, #1
 8001bbc:	438a      	bics	r2, r1
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7ff fb34 	bl	800122c <HAL_GetTick>
 8001bc4:	0003      	movs	r3, r0
 8001bc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bca:	f7ff fb2f 	bl	800122c <HAL_GetTick>
 8001bce:	0002      	movs	r2, r0
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0a2      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bdc:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be0:	2202      	movs	r2, #2
 8001be2:	4013      	ands	r3, r2
 8001be4:	d1f1      	bne.n	8001bca <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d100      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4e4>
 8001bee:	e097      	b.n	8001d20 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf0:	4b4e      	ldr	r3, [pc, #312]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4f2>
 8001bfc:	e06b      	b.n	8001cd6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d14c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b48      	ldr	r3, [pc, #288]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c0c:	494a      	ldr	r1, [pc, #296]	; (8001d38 <HAL_RCC_OscConfig+0x62c>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb0b 	bl	800122c <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fb06 	bl	800122c <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e079      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	049b      	lsls	r3, r3, #18
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	220f      	movs	r2, #15
 8001c40:	4393      	bics	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c48:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCC_OscConfig+0x630>)
 8001c54:	4013      	ands	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	431a      	orrs	r2, r3
 8001c62:	4b32      	ldr	r3, [pc, #200]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b30      	ldr	r3, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c6e:	2180      	movs	r1, #128	; 0x80
 8001c70:	0449      	lsls	r1, r1, #17
 8001c72:	430a      	orrs	r2, r1
 8001c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c76:	f7ff fad9 	bl	800122c <HAL_GetTick>
 8001c7a:	0003      	movs	r3, r0
 8001c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff fad4 	bl	800122c <HAL_GetTick>
 8001c84:	0002      	movs	r2, r0
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e047      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	049b      	lsls	r3, r3, #18
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x574>
 8001c9e:	e03f      	b.n	8001d20 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca0:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4b21      	ldr	r3, [pc, #132]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001ca6:	4924      	ldr	r1, [pc, #144]	; (8001d38 <HAL_RCC_OscConfig+0x62c>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fabe 	bl	800122c <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7ff fab9 	bl	800122c <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e02c      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc8:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	049b      	lsls	r3, r3, #18
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x5aa>
 8001cd4:	e024      	b.n	8001d20 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01f      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ce8:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_RCC_OscConfig+0x620>)
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	025b      	lsls	r3, r3, #9
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d10e      	bne.n	8001d1c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	220f      	movs	r2, #15
 8001d02:	401a      	ands	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	23f0      	movs	r3, #240	; 0xf0
 8001d10:	039b      	lsls	r3, r3, #14
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e000      	b.n	8001d22 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	0018      	movs	r0, r3
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b008      	add	sp, #32
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	00001388 	.word	0x00001388
 8001d34:	efffffff 	.word	0xefffffff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	ffc2ffff 	.word	0xffc2ffff

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0b3      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d911      	bls.n	8001d86 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d74:	4b53      	ldr	r3, [pc, #332]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e09a      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d015      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2204      	movs	r2, #4
 8001d96:	4013      	ands	r3, r2
 8001d98:	d006      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d9a:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4b4a      	ldr	r3, [pc, #296]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001da0:	21e0      	movs	r1, #224	; 0xe0
 8001da2:	00c9      	lsls	r1, r1, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da8:	4b47      	ldr	r3, [pc, #284]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	22f0      	movs	r2, #240	; 0xf0
 8001dae:	4393      	bics	r3, r2
 8001db0:	0019      	movs	r1, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	4b44      	ldr	r3, [pc, #272]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001db8:	430a      	orrs	r2, r1
 8001dba:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d040      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d107      	bne.n	8001dde <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	2380      	movs	r3, #128	; 0x80
 8001dd4:	029b      	lsls	r3, r3, #10
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d114      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e06e      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	2380      	movs	r3, #128	; 0x80
 8001dec:	049b      	lsls	r3, r3, #18
 8001dee:	4013      	ands	r3, r2
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e062      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df6:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e05b      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e04:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e18:	f7ff fa08 	bl	800122c <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e20:	e009      	b.n	8001e36 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e22:	f7ff fa03 	bl	800122c <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <HAL_RCC_ClockConfig+0x18c>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e042      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d1ec      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e48:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4013      	ands	r3, r2
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d211      	bcs.n	8001e7a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4393      	bics	r3, r2
 8001e5e:	0019      	movs	r1, r3
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_RCC_ClockConfig+0x184>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e020      	b.n	8001ebc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4013      	ands	r3, r2
 8001e82:	d009      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a11      	ldr	r2, [pc, #68]	; (8001ed0 <HAL_RCC_ClockConfig+0x190>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001e94:	430a      	orrs	r2, r1
 8001e96:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001e98:	f000 f820 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <HAL_RCC_ClockConfig+0x188>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a0a      	ldr	r2, [pc, #40]	; (8001ed4 <HAL_RCC_ClockConfig+0x194>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <HAL_RCC_ClockConfig+0x198>)
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f7ff f973 	bl	80011a0 <HAL_InitTick>
  
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	b004      	add	sp, #16
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40022000 	.word	0x40022000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	fffff8ff 	.word	0xfffff8ff
 8001ed4:	08004900 	.word	0x08004900
 8001ed8:	200000b8 	.word	0x200000b8

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b08f      	sub	sp, #60	; 0x3c
 8001ee0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ee2:	2314      	movs	r3, #20
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ee8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001eea:	c313      	stmia	r3!, {r0, r1, r4}
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ef4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ef6:	c313      	stmia	r3!, {r0, r1, r4}
 8001ef8:	6812      	ldr	r2, [r2, #0]
 8001efa:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	; 0x34
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f18:	220c      	movs	r2, #12
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b04      	cmp	r3, #4
 8001f1e:	d002      	beq.n	8001f26 <HAL_RCC_GetSysClockFreq+0x4a>
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d003      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0x50>
 8001f24:	e02d      	b.n	8001f82 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f2a:	e02d      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	220f      	movs	r2, #15
 8001f32:	4013      	ands	r3, r2
 8001f34:	2214      	movs	r2, #20
 8001f36:	18ba      	adds	r2, r7, r2
 8001f38:	5cd3      	ldrb	r3, [r2, r3]
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f40:	220f      	movs	r2, #15
 8001f42:	4013      	ands	r3, r2
 8001f44:	1d3a      	adds	r2, r7, #4
 8001f46:	5cd3      	ldrb	r3, [r2, r3]
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	025b      	lsls	r3, r3, #9
 8001f50:	4013      	ands	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f56:	4812      	ldr	r0, [pc, #72]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f58:	f7fe f8e0 	bl	800011c <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	001a      	movs	r2, r3
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	4353      	muls	r3, r2
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	e009      	b.n	8001f7c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	0152      	lsls	r2, r2, #5
 8001f6e:	1a52      	subs	r2, r2, r1
 8001f70:	0193      	lsls	r3, r2, #6
 8001f72:	1a9b      	subs	r3, r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	185b      	adds	r3, r3, r1
 8001f78:	021b      	lsls	r3, r3, #8
 8001f7a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f7e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f80:	e002      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f82:	4b07      	ldr	r3, [pc, #28]	; (8001fa0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f84:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b00f      	add	sp, #60	; 0x3c
 8001f90:	bd90      	pop	{r4, r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	080048b0 	.word	0x080048b0
 8001f98:	080048c0 	.word	0x080048c0
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	007a1200 	.word	0x007a1200

08001fa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	200000b8 	.word	0x200000b8

08001fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001fbc:	f7ff fff2 	bl	8001fa4 <HAL_RCC_GetHCLKFreq>
 8001fc0:	0001      	movs	r1, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	2207      	movs	r2, #7
 8001fca:	4013      	ands	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	40d9      	lsrs	r1, r3
 8001fd2:	000b      	movs	r3, r1
}    
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08004910 	.word	0x08004910

08001fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0a8      	b.n	8002148 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d109      	bne.n	8002012 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	2382      	movs	r3, #130	; 0x82
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	429a      	cmp	r2, r3
 8002008:	d009      	beq.n	800201e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	61da      	str	r2, [r3, #28]
 8002010:	e005      	b.n	800201e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	225d      	movs	r2, #93	; 0x5d
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	225c      	movs	r2, #92	; 0x5c
 8002034:	2100      	movs	r1, #0
 8002036:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	0018      	movs	r0, r3
 800203c:	f7fe ff00 	bl	8000e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	225d      	movs	r2, #93	; 0x5d
 8002044:	2102      	movs	r1, #2
 8002046:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	438a      	bics	r2, r1
 8002056:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	23e0      	movs	r3, #224	; 0xe0
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	429a      	cmp	r2, r3
 8002062:	d902      	bls.n	800206a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	e002      	b.n	8002070 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	015b      	lsls	r3, r3, #5
 800206e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	23f0      	movs	r3, #240	; 0xf0
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	429a      	cmp	r2, r3
 800207a:	d008      	beq.n	800208e <HAL_SPI_Init+0xaa>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	23e0      	movs	r3, #224	; 0xe0
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	429a      	cmp	r2, r3
 8002086:	d002      	beq.n	800208e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	2382      	movs	r3, #130	; 0x82
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	401a      	ands	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6899      	ldr	r1, [r3, #8]
 800209c:	2384      	movs	r3, #132	; 0x84
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	400b      	ands	r3, r1
 80020a2:	431a      	orrs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2102      	movs	r1, #2
 80020aa:	400b      	ands	r3, r1
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2101      	movs	r1, #1
 80020b4:	400b      	ands	r3, r1
 80020b6:	431a      	orrs	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6999      	ldr	r1, [r3, #24]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	400b      	ands	r3, r1
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	2138      	movs	r1, #56	; 0x38
 80020ca:	400b      	ands	r3, r1
 80020cc:	431a      	orrs	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a1b      	ldr	r3, [r3, #32]
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	400b      	ands	r3, r1
 80020d6:	431a      	orrs	r2, r3
 80020d8:	0011      	movs	r1, r2
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020de:	2380      	movs	r3, #128	; 0x80
 80020e0:	019b      	lsls	r3, r3, #6
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	0c1b      	lsrs	r3, r3, #16
 80020f2:	2204      	movs	r2, #4
 80020f4:	401a      	ands	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2110      	movs	r1, #16
 80020fc:	400b      	ands	r3, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	2108      	movs	r1, #8
 8002106:	400b      	ands	r3, r1
 8002108:	431a      	orrs	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68d9      	ldr	r1, [r3, #12]
 800210e:	23f0      	movs	r3, #240	; 0xf0
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	400b      	ands	r3, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	0011      	movs	r1, r2
 8002118:	68fa      	ldr	r2, [r7, #12]
 800211a:	2380      	movs	r3, #128	; 0x80
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	401a      	ands	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	430a      	orrs	r2, r1
 8002126:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4907      	ldr	r1, [pc, #28]	; (8002150 <HAL_SPI_Init+0x16c>)
 8002134:	400a      	ands	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2200      	movs	r2, #0
 800213c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	225d      	movs	r2, #93	; 0x5d
 8002142:	2101      	movs	r1, #1
 8002144:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b004      	add	sp, #16
 800214e:	bd80      	pop	{r7, pc}
 8002150:	fffff7ff 	.word	0xfffff7ff

08002154 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002164:	231f      	movs	r3, #31
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	225c      	movs	r2, #92	; 0x5c
 8002170:	5c9b      	ldrb	r3, [r3, r2]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d101      	bne.n	800217a <HAL_SPI_Transmit+0x26>
 8002176:	2302      	movs	r3, #2
 8002178:	e140      	b.n	80023fc <HAL_SPI_Transmit+0x2a8>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	225c      	movs	r2, #92	; 0x5c
 800217e:	2101      	movs	r1, #1
 8002180:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002182:	f7ff f853 	bl	800122c <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800218a:	2316      	movs	r3, #22
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	1dba      	adds	r2, r7, #6
 8002190:	8812      	ldrh	r2, [r2, #0]
 8002192:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	225d      	movs	r2, #93	; 0x5d
 8002198:	5c9b      	ldrb	r3, [r3, r2]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b01      	cmp	r3, #1
 800219e:	d004      	beq.n	80021aa <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80021a0:	231f      	movs	r3, #31
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2202      	movs	r2, #2
 80021a6:	701a      	strb	r2, [r3, #0]
    goto error;
 80021a8:	e11d      	b.n	80023e6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_SPI_Transmit+0x64>
 80021b0:	1dbb      	adds	r3, r7, #6
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d104      	bne.n	80021c2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80021b8:	231f      	movs	r3, #31
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
    goto error;
 80021c0:	e111      	b.n	80023e6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	225d      	movs	r2, #93	; 0x5d
 80021c6:	2103      	movs	r1, #3
 80021c8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1dba      	adds	r2, r7, #6
 80021da:	8812      	ldrh	r2, [r2, #0]
 80021dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	1dba      	adds	r2, r7, #6
 80021e2:	8812      	ldrh	r2, [r2, #0]
 80021e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2244      	movs	r2, #68	; 0x44
 80021f0:	2100      	movs	r1, #0
 80021f2:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2246      	movs	r2, #70	; 0x46
 80021f8:	2100      	movs	r1, #0
 80021fa:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2200      	movs	r2, #0
 8002200:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	021b      	lsls	r3, r3, #8
 8002210:	429a      	cmp	r2, r3
 8002212:	d110      	bne.n	8002236 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2140      	movs	r1, #64	; 0x40
 8002220:	438a      	bics	r2, r1
 8002222:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2180      	movs	r1, #128	; 0x80
 8002230:	01c9      	lsls	r1, r1, #7
 8002232:	430a      	orrs	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2240      	movs	r2, #64	; 0x40
 800223e:	4013      	ands	r3, r2
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d007      	beq.n	8002254 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2140      	movs	r1, #64	; 0x40
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	23e0      	movs	r3, #224	; 0xe0
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	429a      	cmp	r2, r3
 800225e:	d94e      	bls.n	80022fe <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_SPI_Transmit+0x11e>
 8002268:	2316      	movs	r3, #22
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d13f      	bne.n	80022f2 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002276:	881a      	ldrh	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002282:	1c9a      	adds	r2, r3, #2
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800228c:	b29b      	uxth	r3, r3
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002296:	e02c      	b.n	80022f2 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d112      	bne.n	80022cc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022aa:	881a      	ldrh	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	1c9a      	adds	r2, r3, #2
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80022ca:	e012      	b.n	80022f2 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022cc:	f7fe ffae 	bl	800122c <HAL_GetTick>
 80022d0:	0002      	movs	r2, r0
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d802      	bhi.n	80022e2 <HAL_SPI_Transmit+0x18e>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_SPI_Transmit+0x194>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d104      	bne.n	80022f2 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80022e8:	231f      	movs	r3, #31
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2203      	movs	r2, #3
 80022ee:	701a      	strb	r2, [r3, #0]
          goto error;
 80022f0:	e079      	b.n	80023e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1cd      	bne.n	8002298 <HAL_SPI_Transmit+0x144>
 80022fc:	e04f      	b.n	800239e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d004      	beq.n	8002310 <HAL_SPI_Transmit+0x1bc>
 8002306:	2316      	movs	r3, #22
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d141      	bne.n	8002394 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002336:	e02d      	b.n	8002394 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d113      	bne.n	800236e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800236c:	e012      	b.n	8002394 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800236e:	f7fe ff5d 	bl	800122c <HAL_GetTick>
 8002372:	0002      	movs	r2, r0
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d802      	bhi.n	8002384 <HAL_SPI_Transmit+0x230>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	3301      	adds	r3, #1
 8002382:	d102      	bne.n	800238a <HAL_SPI_Transmit+0x236>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d104      	bne.n	8002394 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800238a:	231f      	movs	r3, #31
 800238c:	18fb      	adds	r3, r7, r3
 800238e:	2203      	movs	r2, #3
 8002390:	701a      	strb	r2, [r3, #0]
          goto error;
 8002392:	e028      	b.n	80023e6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1cc      	bne.n	8002338 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	6839      	ldr	r1, [r7, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	0018      	movs	r0, r3
 80023a6:	f000 fcd9 	bl	8002d5c <SPI_EndRxTxTransaction>
 80023aa:	1e03      	subs	r3, r0, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2220      	movs	r2, #32
 80023b2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10a      	bne.n	80023d2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023bc:	2300      	movs	r3, #0
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80023da:	231f      	movs	r3, #31
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	e000      	b.n	80023e6 <HAL_SPI_Transmit+0x292>
  }

error:
 80023e4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	225d      	movs	r2, #93	; 0x5d
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	225c      	movs	r2, #92	; 0x5c
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	781b      	ldrb	r3, [r3, #0]
}
 80023fc:	0018      	movs	r0, r3
 80023fe:	46bd      	mov	sp, r7
 8002400:	b008      	add	sp, #32
 8002402:	bd80      	pop	{r7, pc}

08002404 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	1dbb      	adds	r3, r7, #6
 8002412:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002414:	2317      	movs	r3, #23
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	2200      	movs	r2, #0
 800241a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	2382      	movs	r3, #130	; 0x82
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	429a      	cmp	r2, r3
 8002426:	d113      	bne.n	8002450 <HAL_SPI_Receive+0x4c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	225d      	movs	r2, #93	; 0x5d
 8002434:	2104      	movs	r1, #4
 8002436:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002438:	1dbb      	adds	r3, r7, #6
 800243a:	881c      	ldrh	r4, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	68b9      	ldr	r1, [r7, #8]
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	0023      	movs	r3, r4
 8002448:	f000 f928 	bl	800269c <HAL_SPI_TransmitReceive>
 800244c:	0003      	movs	r3, r0
 800244e:	e11c      	b.n	800268a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	225c      	movs	r2, #92	; 0x5c
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_SPI_Receive+0x5a>
 800245a:	2302      	movs	r3, #2
 800245c:	e115      	b.n	800268a <HAL_SPI_Receive+0x286>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	225c      	movs	r2, #92	; 0x5c
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002466:	f7fe fee1 	bl	800122c <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	225d      	movs	r2, #93	; 0x5d
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d004      	beq.n	8002484 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800247a:	2317      	movs	r3, #23
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
    goto error;
 8002482:	e0f7      	b.n	8002674 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_SPI_Receive+0x8e>
 800248a:	1dbb      	adds	r3, r7, #6
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d104      	bne.n	800249c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002492:	2317      	movs	r3, #23
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	2201      	movs	r2, #1
 8002498:	701a      	strb	r2, [r3, #0]
    goto error;
 800249a:	e0eb      	b.n	8002674 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	225d      	movs	r2, #93	; 0x5d
 80024a0:	2104      	movs	r1, #4
 80024a2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1dba      	adds	r2, r7, #6
 80024b4:	2144      	movs	r1, #68	; 0x44
 80024b6:	8812      	ldrh	r2, [r2, #0]
 80024b8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1dba      	adds	r2, r7, #6
 80024be:	2146      	movs	r1, #70	; 0x46
 80024c0:	8812      	ldrh	r2, [r2, #0]
 80024c2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2200      	movs	r2, #0
 80024c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2200      	movs	r2, #0
 80024ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	68da      	ldr	r2, [r3, #12]
 80024e6:	23e0      	movs	r3, #224	; 0xe0
 80024e8:	00db      	lsls	r3, r3, #3
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d908      	bls.n	8002500 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4966      	ldr	r1, [pc, #408]	; (8002694 <HAL_SPI_Receive+0x290>)
 80024fa:	400a      	ands	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	e008      	b.n	8002512 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2180      	movs	r1, #128	; 0x80
 800250c:	0149      	lsls	r1, r1, #5
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	429a      	cmp	r2, r3
 800251c:	d10f      	bne.n	800253e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2140      	movs	r1, #64	; 0x40
 800252a:	438a      	bics	r2, r1
 800252c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4957      	ldr	r1, [pc, #348]	; (8002698 <HAL_SPI_Receive+0x294>)
 800253a:	400a      	ands	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2240      	movs	r2, #64	; 0x40
 8002546:	4013      	ands	r3, r2
 8002548:	2b40      	cmp	r3, #64	; 0x40
 800254a:	d007      	beq.n	800255c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2140      	movs	r1, #64	; 0x40
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	23e0      	movs	r3, #224	; 0xe0
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	429a      	cmp	r2, r3
 8002566:	d900      	bls.n	800256a <HAL_SPI_Receive+0x166>
 8002568:	e069      	b.n	800263e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800256a:	e031      	b.n	80025d0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2201      	movs	r2, #1
 8002574:	4013      	ands	r3, r2
 8002576:	2b01      	cmp	r3, #1
 8002578:	d117      	bne.n	80025aa <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	001a      	movs	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2246      	movs	r2, #70	; 0x46
 800259a:	5a9b      	ldrh	r3, [r3, r2]
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b299      	uxth	r1, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2246      	movs	r2, #70	; 0x46
 80025a6:	5299      	strh	r1, [r3, r2]
 80025a8:	e012      	b.n	80025d0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025aa:	f7fe fe3f 	bl	800122c <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d802      	bhi.n	80025c0 <HAL_SPI_Receive+0x1bc>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	3301      	adds	r3, #1
 80025be:	d102      	bne.n	80025c6 <HAL_SPI_Receive+0x1c2>
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d104      	bne.n	80025d0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80025c6:	2317      	movs	r3, #23
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	2203      	movs	r2, #3
 80025cc:	701a      	strb	r2, [r3, #0]
          goto error;
 80025ce:	e051      	b.n	8002674 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2246      	movs	r2, #70	; 0x46
 80025d4:	5a9b      	ldrh	r3, [r3, r2]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1c7      	bne.n	800256c <HAL_SPI_Receive+0x168>
 80025dc:	e035      	b.n	800264a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2201      	movs	r2, #1
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d115      	bne.n	8002618 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	b292      	uxth	r2, r2
 80025f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2246      	movs	r2, #70	; 0x46
 8002608:	5a9b      	ldrh	r3, [r3, r2]
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b299      	uxth	r1, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2246      	movs	r2, #70	; 0x46
 8002614:	5299      	strh	r1, [r3, r2]
 8002616:	e012      	b.n	800263e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002618:	f7fe fe08 	bl	800122c <HAL_GetTick>
 800261c:	0002      	movs	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d802      	bhi.n	800262e <HAL_SPI_Receive+0x22a>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	d102      	bne.n	8002634 <HAL_SPI_Receive+0x230>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d104      	bne.n	800263e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002634:	2317      	movs	r3, #23
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
          goto error;
 800263c:	e01a      	b.n	8002674 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2246      	movs	r2, #70	; 0x46
 8002642:	5a9b      	ldrh	r3, [r3, r2]
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1c9      	bne.n	80025de <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	6839      	ldr	r1, [r7, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	0018      	movs	r0, r3
 8002652:	f000 fb25 	bl	8002ca0 <SPI_EndRxTransaction>
 8002656:	1e03      	subs	r3, r0, #0
 8002658:	d002      	beq.n	8002660 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2220      	movs	r2, #32
 800265e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002664:	2b00      	cmp	r3, #0
 8002666:	d004      	beq.n	8002672 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002668:	2317      	movs	r3, #23
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2201      	movs	r2, #1
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e000      	b.n	8002674 <HAL_SPI_Receive+0x270>
  }

error :
 8002672:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	225d      	movs	r2, #93	; 0x5d
 8002678:	2101      	movs	r1, #1
 800267a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	225c      	movs	r2, #92	; 0x5c
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002684:	2317      	movs	r3, #23
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b007      	add	sp, #28
 8002690:	bd90      	pop	{r4, r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	ffffefff 	.word	0xffffefff
 8002698:	ffffbfff 	.word	0xffffbfff

0800269c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	001a      	movs	r2, r3
 80026aa:	1cbb      	adds	r3, r7, #2
 80026ac:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80026ae:	2301      	movs	r3, #1
 80026b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80026b2:	2323      	movs	r3, #35	; 0x23
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	225c      	movs	r2, #92	; 0x5c
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d101      	bne.n	80026c8 <HAL_SPI_TransmitReceive+0x2c>
 80026c4:	2302      	movs	r3, #2
 80026c6:	e1b5      	b.n	8002a34 <HAL_SPI_TransmitReceive+0x398>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	225c      	movs	r2, #92	; 0x5c
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80026d0:	f7fe fdac 	bl	800122c <HAL_GetTick>
 80026d4:	0003      	movs	r3, r0
 80026d6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80026d8:	201b      	movs	r0, #27
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	215d      	movs	r1, #93	; 0x5d
 80026e0:	5c52      	ldrb	r2, [r2, r1]
 80026e2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80026ea:	2312      	movs	r3, #18
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	1cba      	adds	r2, r7, #2
 80026f0:	8812      	ldrh	r2, [r2, #0]
 80026f2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80026f4:	183b      	adds	r3, r7, r0
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d011      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x84>
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	2382      	movs	r3, #130	; 0x82
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	429a      	cmp	r2, r3
 8002704:	d107      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_SPI_TransmitReceive+0x7a>
 800270e:	183b      	adds	r3, r7, r0
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b04      	cmp	r3, #4
 8002714:	d004      	beq.n	8002720 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002716:	2323      	movs	r3, #35	; 0x23
 8002718:	18fb      	adds	r3, r7, r3
 800271a:	2202      	movs	r2, #2
 800271c:	701a      	strb	r2, [r3, #0]
    goto error;
 800271e:	e17e      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x98>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_SPI_TransmitReceive+0x98>
 800272c:	1cbb      	adds	r3, r7, #2
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002734:	2323      	movs	r3, #35	; 0x23
 8002736:	18fb      	adds	r3, r7, r3
 8002738:	2201      	movs	r2, #1
 800273a:	701a      	strb	r2, [r3, #0]
    goto error;
 800273c:	e16f      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	225d      	movs	r2, #93	; 0x5d
 8002742:	5c9b      	ldrb	r3, [r3, r2]
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b04      	cmp	r3, #4
 8002748:	d003      	beq.n	8002752 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	225d      	movs	r2, #93	; 0x5d
 800274e:	2105      	movs	r1, #5
 8002750:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1cba      	adds	r2, r7, #2
 8002762:	2146      	movs	r1, #70	; 0x46
 8002764:	8812      	ldrh	r2, [r2, #0]
 8002766:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1cba      	adds	r2, r7, #2
 800276c:	2144      	movs	r1, #68	; 0x44
 800276e:	8812      	ldrh	r2, [r2, #0]
 8002770:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	68ba      	ldr	r2, [r7, #8]
 8002776:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	1cba      	adds	r2, r7, #2
 800277c:	8812      	ldrh	r2, [r2, #0]
 800277e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1cba      	adds	r2, r7, #2
 8002784:	8812      	ldrh	r2, [r2, #0]
 8002786:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	23e0      	movs	r3, #224	; 0xe0
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	429a      	cmp	r2, r3
 800279e:	d908      	bls.n	80027b2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	49a4      	ldr	r1, [pc, #656]	; (8002a3c <HAL_SPI_TransmitReceive+0x3a0>)
 80027ac:	400a      	ands	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	e008      	b.n	80027c4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2180      	movs	r1, #128	; 0x80
 80027be:	0149      	lsls	r1, r1, #5
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d007      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2140      	movs	r1, #64	; 0x40
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68da      	ldr	r2, [r3, #12]
 80027e6:	23e0      	movs	r3, #224	; 0xe0
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d800      	bhi.n	80027f0 <HAL_SPI_TransmitReceive+0x154>
 80027ee:	e07f      	b.n	80028f0 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x168>
 80027f8:	2312      	movs	r3, #18
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d000      	beq.n	8002804 <HAL_SPI_TransmitReceive+0x168>
 8002802:	e069      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	881a      	ldrh	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	1c9a      	adds	r2, r3, #2
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800281e:	b29b      	uxth	r3, r3
 8002820:	3b01      	subs	r3, #1
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002828:	e056      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2202      	movs	r2, #2
 8002832:	4013      	ands	r3, r2
 8002834:	2b02      	cmp	r3, #2
 8002836:	d11b      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x1d4>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d016      	beq.n	8002870 <HAL_SPI_TransmitReceive+0x1d4>
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	2b01      	cmp	r3, #1
 8002846:	d113      	bne.n	8002870 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	881a      	ldrh	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002858:	1c9a      	adds	r2, r3, #2
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2201      	movs	r2, #1
 8002878:	4013      	ands	r3, r2
 800287a:	2b01      	cmp	r3, #1
 800287c:	d11c      	bne.n	80028b8 <HAL_SPI_TransmitReceive+0x21c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2246      	movs	r2, #70	; 0x46
 8002882:	5a9b      	ldrh	r3, [r3, r2]
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d016      	beq.n	80028b8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	b292      	uxth	r2, r2
 8002896:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289c:	1c9a      	adds	r2, r3, #2
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2246      	movs	r2, #70	; 0x46
 80028a6:	5a9b      	ldrh	r3, [r3, r2]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b299      	uxth	r1, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2246      	movs	r2, #70	; 0x46
 80028b2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028b4:	2301      	movs	r3, #1
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80028b8:	f7fe fcb8 	bl	800122c <HAL_GetTick>
 80028bc:	0002      	movs	r2, r0
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d807      	bhi.n	80028d8 <HAL_SPI_TransmitReceive+0x23c>
 80028c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ca:	3301      	adds	r3, #1
 80028cc:	d004      	beq.n	80028d8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80028ce:	2323      	movs	r3, #35	; 0x23
 80028d0:	18fb      	adds	r3, r7, r3
 80028d2:	2203      	movs	r2, #3
 80028d4:	701a      	strb	r2, [r3, #0]
        goto error;
 80028d6:	e0a2      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d1a3      	bne.n	800282a <HAL_SPI_TransmitReceive+0x18e>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2246      	movs	r2, #70	; 0x46
 80028e6:	5a9b      	ldrh	r3, [r3, r2]
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d19d      	bne.n	800282a <HAL_SPI_TransmitReceive+0x18e>
 80028ee:	e085      	b.n	80029fc <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x268>
 80028f8:	2312      	movs	r3, #18
 80028fa:	18fb      	adds	r3, r7, r3
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d000      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x268>
 8002902:	e070      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	330c      	adds	r3, #12
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002920:	b29b      	uxth	r3, r3
 8002922:	3b01      	subs	r3, #1
 8002924:	b29a      	uxth	r2, r3
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800292a:	e05c      	b.n	80029e6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d11c      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x2d8>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	d017      	beq.n	8002974 <HAL_SPI_TransmitReceive+0x2d8>
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	2b01      	cmp	r3, #1
 8002948:	d114      	bne.n	8002974 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	330c      	adds	r3, #12
 8002954:	7812      	ldrb	r2, [r2, #0]
 8002956:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002966:	b29b      	uxth	r3, r3
 8002968:	3b01      	subs	r3, #1
 800296a:	b29a      	uxth	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2201      	movs	r2, #1
 800297c:	4013      	ands	r3, r2
 800297e:	2b01      	cmp	r3, #1
 8002980:	d11e      	bne.n	80029c0 <HAL_SPI_TransmitReceive+0x324>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2246      	movs	r2, #70	; 0x46
 8002986:	5a9b      	ldrh	r3, [r3, r2]
 8002988:	b29b      	uxth	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d018      	beq.n	80029c0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	330c      	adds	r3, #12
 8002994:	001a      	movs	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2246      	movs	r2, #70	; 0x46
 80029ae:	5a9b      	ldrh	r3, [r3, r2]
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b299      	uxth	r1, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2246      	movs	r2, #70	; 0x46
 80029ba:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029bc:	2301      	movs	r3, #1
 80029be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80029c0:	f7fe fc34 	bl	800122c <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d802      	bhi.n	80029d6 <HAL_SPI_TransmitReceive+0x33a>
 80029d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d2:	3301      	adds	r3, #1
 80029d4:	d102      	bne.n	80029dc <HAL_SPI_TransmitReceive+0x340>
 80029d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d104      	bne.n	80029e6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80029dc:	2323      	movs	r3, #35	; 0x23
 80029de:	18fb      	adds	r3, r7, r3
 80029e0:	2203      	movs	r2, #3
 80029e2:	701a      	strb	r2, [r3, #0]
        goto error;
 80029e4:	e01b      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d19d      	bne.n	800292c <HAL_SPI_TransmitReceive+0x290>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2246      	movs	r2, #70	; 0x46
 80029f4:	5a9b      	ldrh	r3, [r3, r2]
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d197      	bne.n	800292c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029fc:	69fa      	ldr	r2, [r7, #28]
 80029fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 f9aa 	bl	8002d5c <SPI_EndRxTxTransaction>
 8002a08:	1e03      	subs	r3, r0, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002a0c:	2323      	movs	r3, #35	; 0x23
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2201      	movs	r2, #1
 8002a12:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	661a      	str	r2, [r3, #96]	; 0x60
 8002a1a:	e000      	b.n	8002a1e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002a1c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	225d      	movs	r2, #93	; 0x5d
 8002a22:	2101      	movs	r1, #1
 8002a24:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	225c      	movs	r2, #92	; 0x5c
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a2e:	2323      	movs	r3, #35	; 0x23
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	781b      	ldrb	r3, [r3, #0]
}
 8002a34:	0018      	movs	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b00a      	add	sp, #40	; 0x28
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	ffffefff 	.word	0xffffefff

08002a40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002a50:	f7fe fbec 	bl	800122c <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	18d3      	adds	r3, r2, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a60:	f7fe fbe4 	bl	800122c <HAL_GetTick>
 8002a64:	0003      	movs	r3, r0
 8002a66:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a68:	4b3a      	ldr	r3, [pc, #232]	; (8002b54 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	015b      	lsls	r3, r3, #5
 8002a6e:	0d1b      	lsrs	r3, r3, #20
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	4353      	muls	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a76:	e058      	b.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	d055      	beq.n	8002b2a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a7e:	f7fe fbd5 	bl	800122c <HAL_GetTick>
 8002a82:	0002      	movs	r2, r0
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	69fa      	ldr	r2, [r7, #28]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d902      	bls.n	8002a94 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d142      	bne.n	8002b1a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	21e0      	movs	r1, #224	; 0xe0
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	2382      	movs	r3, #130	; 0x82
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d113      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	021b      	lsls	r3, r3, #8
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d005      	beq.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	689a      	ldr	r2, [r3, #8]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	00db      	lsls	r3, r3, #3
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d107      	bne.n	8002ad8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2140      	movs	r1, #64	; 0x40
 8002ad4:	438a      	bics	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002adc:	2380      	movs	r3, #128	; 0x80
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d110      	bne.n	8002b06 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	491a      	ldr	r1, [pc, #104]	; (8002b58 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2180      	movs	r1, #128	; 0x80
 8002b00:	0189      	lsls	r1, r1, #6
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	225d      	movs	r2, #93	; 0x5d
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	225c      	movs	r2, #92	; 0x5c
 8002b12:	2100      	movs	r1, #0
 8002b14:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e017      	b.n	8002b4a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	4013      	ands	r3, r2
 8002b34:	68ba      	ldr	r2, [r7, #8]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	425a      	negs	r2, r3
 8002b3a:	4153      	adcs	r3, r2
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	001a      	movs	r2, r3
 8002b40:	1dfb      	adds	r3, r7, #7
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d197      	bne.n	8002a78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	b008      	add	sp, #32
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	200000b8 	.word	0x200000b8
 8002b58:	ffffdfff 	.word	0xffffdfff

08002b5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b08a      	sub	sp, #40	; 0x28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002b6a:	2317      	movs	r3, #23
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002b72:	f7fe fb5b 	bl	800122c <HAL_GetTick>
 8002b76:	0002      	movs	r2, r0
 8002b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7a:	1a9b      	subs	r3, r3, r2
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	18d3      	adds	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002b82:	f7fe fb53 	bl	800122c <HAL_GetTick>
 8002b86:	0003      	movs	r3, r0
 8002b88:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	330c      	adds	r3, #12
 8002b90:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	0013      	movs	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	00da      	lsls	r2, r3, #3
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	0d1b      	lsrs	r3, r3, #20
 8002ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba4:	4353      	muls	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ba8:	e068      	b.n	8002c7c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002baa:	68ba      	ldr	r2, [r7, #8]
 8002bac:	23c0      	movs	r3, #192	; 0xc0
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d10a      	bne.n	8002bca <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d107      	bne.n	8002bca <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	2117      	movs	r1, #23
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002bc6:	187b      	adds	r3, r7, r1
 8002bc8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	d055      	beq.n	8002c7c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd0:	f7fe fb2c 	bl	800122c <HAL_GetTick>
 8002bd4:	0002      	movs	r2, r0
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d902      	bls.n	8002be6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d142      	bne.n	8002c6c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	21e0      	movs	r1, #224	; 0xe0
 8002bf2:	438a      	bics	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	2382      	movs	r3, #130	; 0x82
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d113      	bne.n	8002c2a <SPI_WaitFifoStateUntilTimeout+0xce>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	689a      	ldr	r2, [r3, #8]
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d005      	beq.n	8002c1a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d107      	bne.n	8002c2a <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2140      	movs	r1, #64	; 0x40
 8002c26:	438a      	bics	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	019b      	lsls	r3, r3, #6
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d110      	bne.n	8002c58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002c42:	400a      	ands	r2, r1
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0189      	lsls	r1, r1, #6
 8002c54:	430a      	orrs	r2, r1
 8002c56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	225d      	movs	r2, #93	; 0x5d
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	225c      	movs	r2, #92	; 0x5c
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e010      	b.n	8002c8e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002c72:	2300      	movs	r3, #0
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d18e      	bne.n	8002baa <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b00a      	add	sp, #40	; 0x28
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	200000b8 	.word	0x200000b8
 8002c9c:	ffffdfff 	.word	0xffffdfff

08002ca0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	2382      	movs	r3, #130	; 0x82
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d113      	bne.n	8002ce0 <SPI_EndRxTransaction+0x40>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d005      	beq.n	8002cd0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d107      	bne.n	8002ce0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	438a      	bics	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	0013      	movs	r3, r2
 8002cea:	2200      	movs	r2, #0
 8002cec:	2180      	movs	r1, #128	; 0x80
 8002cee:	f7ff fea7 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002cf2:	1e03      	subs	r3, r0, #0
 8002cf4:	d007      	beq.n	8002d06 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	431a      	orrs	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e026      	b.n	8002d54 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	2382      	movs	r3, #130	; 0x82
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d11f      	bne.n	8002d52 <SPI_EndRxTransaction+0xb2>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	2380      	movs	r3, #128	; 0x80
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d005      	beq.n	8002d2a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d113      	bne.n	8002d52 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	00d9      	lsls	r1, r3, #3
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	0013      	movs	r3, r2
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f7ff ff0f 	bl	8002b5c <SPI_WaitFifoStateUntilTimeout>
 8002d3e:	1e03      	subs	r3, r0, #0
 8002d40:	d007      	beq.n	8002d52 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d46:	2220      	movs	r2, #32
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e000      	b.n	8002d54 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	0018      	movs	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	b004      	add	sp, #16
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	0159      	lsls	r1, r3, #5
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	0013      	movs	r3, r2
 8002d76:	2200      	movs	r2, #0
 8002d78:	f7ff fef0 	bl	8002b5c <SPI_WaitFifoStateUntilTimeout>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d007      	beq.n	8002d90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d84:	2220      	movs	r2, #32
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e027      	b.n	8002de0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	0013      	movs	r3, r2
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	2180      	movs	r1, #128	; 0x80
 8002d9e:	f7ff fe4f 	bl	8002a40 <SPI_WaitFlagStateUntilTimeout>
 8002da2:	1e03      	subs	r3, r0, #0
 8002da4:	d007      	beq.n	8002db6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002daa:	2220      	movs	r2, #32
 8002dac:	431a      	orrs	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e014      	b.n	8002de0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	23c0      	movs	r3, #192	; 0xc0
 8002dba:	00d9      	lsls	r1, r3, #3
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f7ff fec9 	bl	8002b5c <SPI_WaitFifoStateUntilTimeout>
 8002dca:	1e03      	subs	r3, r0, #0
 8002dcc:	d007      	beq.n	8002dde <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	431a      	orrs	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e000      	b.n	8002de0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e044      	b.n	8002e84 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2274      	movs	r2, #116	; 0x74
 8002e06:	2100      	movs	r1, #0
 8002e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f7fe f863 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2224      	movs	r2, #36	; 0x24
 8002e16:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2101      	movs	r1, #1
 8002e24:	438a      	bics	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f8da 	bl	8002fe4 <UART_SetConfig>
 8002e30:	0003      	movs	r3, r0
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e024      	b.n	8002e84 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fa0d 	bl	8003264 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	490d      	ldr	r1, [pc, #52]	; (8002e8c <HAL_UART_Init+0xa4>)
 8002e56:	400a      	ands	r2, r1
 8002e58:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2108      	movs	r1, #8
 8002e66:	438a      	bics	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2101      	movs	r1, #1
 8002e76:	430a      	orrs	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f000 faa5 	bl	80033cc <UART_CheckIdleState>
 8002e82:	0003      	movs	r3, r0
}
 8002e84:	0018      	movs	r0, r3
 8002e86:	46bd      	mov	sp, r7
 8002e88:	b002      	add	sp, #8
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	fffff7ff 	.word	0xfffff7ff

08002e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b08a      	sub	sp, #40	; 0x28
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	603b      	str	r3, [r7, #0]
 8002e9c:	1dbb      	adds	r3, r7, #6
 8002e9e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ea4:	2b20      	cmp	r3, #32
 8002ea6:	d000      	beq.n	8002eaa <HAL_UART_Transmit+0x1a>
 8002ea8:	e096      	b.n	8002fd8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_UART_Transmit+0x28>
 8002eb0:	1dbb      	adds	r3, r7, #6
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e08e      	b.n	8002fda <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	015b      	lsls	r3, r3, #5
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d109      	bne.n	8002edc <HAL_UART_Transmit+0x4c>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d001      	beq.n	8002edc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e07e      	b.n	8002fda <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2274      	movs	r2, #116	; 0x74
 8002ee0:	5c9b      	ldrb	r3, [r3, r2]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_UART_Transmit+0x5a>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e077      	b.n	8002fda <HAL_UART_Transmit+0x14a>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2274      	movs	r2, #116	; 0x74
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2221      	movs	r2, #33	; 0x21
 8002efe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f00:	f7fe f994 	bl	800122c <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1dba      	adds	r2, r7, #6
 8002f0c:	2150      	movs	r1, #80	; 0x50
 8002f0e:	8812      	ldrh	r2, [r2, #0]
 8002f10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1dba      	adds	r2, r7, #6
 8002f16:	2152      	movs	r1, #82	; 0x52
 8002f18:	8812      	ldrh	r2, [r2, #0]
 8002f1a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	2380      	movs	r3, #128	; 0x80
 8002f22:	015b      	lsls	r3, r3, #5
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d108      	bne.n	8002f3a <HAL_UART_Transmit+0xaa>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d104      	bne.n	8002f3a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002f30:	2300      	movs	r3, #0
 8002f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e003      	b.n	8002f42 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2274      	movs	r2, #116	; 0x74
 8002f46:	2100      	movs	r1, #0
 8002f48:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002f4a:	e02d      	b.n	8002fa8 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	0013      	movs	r3, r2
 8002f56:	2200      	movs	r2, #0
 8002f58:	2180      	movs	r1, #128	; 0x80
 8002f5a:	f000 fa7f 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8002f5e:	1e03      	subs	r3, r0, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e039      	b.n	8002fda <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d10b      	bne.n	8002f84 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	881a      	ldrh	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	05d2      	lsls	r2, r2, #23
 8002f76:	0dd2      	lsrs	r2, r2, #23
 8002f78:	b292      	uxth	r2, r2
 8002f7a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	3302      	adds	r3, #2
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	e008      	b.n	8002f96 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	781a      	ldrb	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b292      	uxth	r2, r2
 8002f8e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	3301      	adds	r3, #1
 8002f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2252      	movs	r2, #82	; 0x52
 8002f9a:	5a9b      	ldrh	r3, [r3, r2]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b299      	uxth	r1, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2252      	movs	r2, #82	; 0x52
 8002fa6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2252      	movs	r2, #82	; 0x52
 8002fac:	5a9b      	ldrh	r3, [r3, r2]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1cb      	bne.n	8002f4c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	0013      	movs	r3, r2
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2140      	movs	r1, #64	; 0x40
 8002fc2:	f000 fa4b 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8002fc6:	1e03      	subs	r3, r0, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e005      	b.n	8002fda <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002fd8:	2302      	movs	r3, #2
  }
}
 8002fda:	0018      	movs	r0, r3
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b008      	add	sp, #32
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fec:	231e      	movs	r3, #30
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a8d      	ldr	r2, [pc, #564]	; (8003248 <UART_SetConfig+0x264>)
 8003014:	4013      	ands	r3, r2
 8003016:	0019      	movs	r1, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	430a      	orrs	r2, r1
 8003020:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a88      	ldr	r2, [pc, #544]	; (800324c <UART_SetConfig+0x268>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a7f      	ldr	r2, [pc, #508]	; (8003250 <UART_SetConfig+0x26c>)
 8003052:	4013      	ands	r3, r2
 8003054:	0019      	movs	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	430a      	orrs	r2, r1
 800305e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a7b      	ldr	r2, [pc, #492]	; (8003254 <UART_SetConfig+0x270>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d127      	bne.n	80030ba <UART_SetConfig+0xd6>
 800306a:	4b7b      	ldr	r3, [pc, #492]	; (8003258 <UART_SetConfig+0x274>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	2203      	movs	r2, #3
 8003070:	4013      	ands	r3, r2
 8003072:	2b03      	cmp	r3, #3
 8003074:	d00d      	beq.n	8003092 <UART_SetConfig+0xae>
 8003076:	d81b      	bhi.n	80030b0 <UART_SetConfig+0xcc>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d014      	beq.n	80030a6 <UART_SetConfig+0xc2>
 800307c:	d818      	bhi.n	80030b0 <UART_SetConfig+0xcc>
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <UART_SetConfig+0xa4>
 8003082:	2b01      	cmp	r3, #1
 8003084:	d00a      	beq.n	800309c <UART_SetConfig+0xb8>
 8003086:	e013      	b.n	80030b0 <UART_SetConfig+0xcc>
 8003088:	231f      	movs	r3, #31
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e021      	b.n	80030d6 <UART_SetConfig+0xf2>
 8003092:	231f      	movs	r3, #31
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	2202      	movs	r2, #2
 8003098:	701a      	strb	r2, [r3, #0]
 800309a:	e01c      	b.n	80030d6 <UART_SetConfig+0xf2>
 800309c:	231f      	movs	r3, #31
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	2204      	movs	r2, #4
 80030a2:	701a      	strb	r2, [r3, #0]
 80030a4:	e017      	b.n	80030d6 <UART_SetConfig+0xf2>
 80030a6:	231f      	movs	r3, #31
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2208      	movs	r2, #8
 80030ac:	701a      	strb	r2, [r3, #0]
 80030ae:	e012      	b.n	80030d6 <UART_SetConfig+0xf2>
 80030b0:	231f      	movs	r3, #31
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	2210      	movs	r2, #16
 80030b6:	701a      	strb	r2, [r3, #0]
 80030b8:	e00d      	b.n	80030d6 <UART_SetConfig+0xf2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a67      	ldr	r2, [pc, #412]	; (800325c <UART_SetConfig+0x278>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d104      	bne.n	80030ce <UART_SetConfig+0xea>
 80030c4:	231f      	movs	r3, #31
 80030c6:	18fb      	adds	r3, r7, r3
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
 80030cc:	e003      	b.n	80030d6 <UART_SetConfig+0xf2>
 80030ce:	231f      	movs	r3, #31
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	2210      	movs	r2, #16
 80030d4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	69da      	ldr	r2, [r3, #28]
 80030da:	2380      	movs	r3, #128	; 0x80
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	429a      	cmp	r2, r3
 80030e0:	d15d      	bne.n	800319e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80030e2:	231f      	movs	r3, #31
 80030e4:	18fb      	adds	r3, r7, r3
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d015      	beq.n	8003118 <UART_SetConfig+0x134>
 80030ec:	dc18      	bgt.n	8003120 <UART_SetConfig+0x13c>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d00d      	beq.n	800310e <UART_SetConfig+0x12a>
 80030f2:	dc15      	bgt.n	8003120 <UART_SetConfig+0x13c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <UART_SetConfig+0x11a>
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d005      	beq.n	8003108 <UART_SetConfig+0x124>
 80030fc:	e010      	b.n	8003120 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030fe:	f7fe ff5b 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8003102:	0003      	movs	r3, r0
 8003104:	61bb      	str	r3, [r7, #24]
        break;
 8003106:	e012      	b.n	800312e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003108:	4b55      	ldr	r3, [pc, #340]	; (8003260 <UART_SetConfig+0x27c>)
 800310a:	61bb      	str	r3, [r7, #24]
        break;
 800310c:	e00f      	b.n	800312e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800310e:	f7fe fee5 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8003112:	0003      	movs	r3, r0
 8003114:	61bb      	str	r3, [r7, #24]
        break;
 8003116:	e00a      	b.n	800312e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	61bb      	str	r3, [r7, #24]
        break;
 800311e:	e006      	b.n	800312e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003124:	231e      	movs	r3, #30
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2201      	movs	r2, #1
 800312a:	701a      	strb	r2, [r3, #0]
        break;
 800312c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d100      	bne.n	8003136 <UART_SetConfig+0x152>
 8003134:	e07b      	b.n	800322e <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	005a      	lsls	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	18d2      	adds	r2, r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	0019      	movs	r1, r3
 8003148:	0010      	movs	r0, r2
 800314a:	f7fc ffe7 	bl	800011c <__udivsi3>
 800314e:	0003      	movs	r3, r0
 8003150:	b29b      	uxth	r3, r3
 8003152:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	2b0f      	cmp	r3, #15
 8003158:	d91c      	bls.n	8003194 <UART_SetConfig+0x1b0>
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	2380      	movs	r3, #128	; 0x80
 800315e:	025b      	lsls	r3, r3, #9
 8003160:	429a      	cmp	r2, r3
 8003162:	d217      	bcs.n	8003194 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	b29a      	uxth	r2, r3
 8003168:	200e      	movs	r0, #14
 800316a:	183b      	adds	r3, r7, r0
 800316c:	210f      	movs	r1, #15
 800316e:	438a      	bics	r2, r1
 8003170:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	2207      	movs	r2, #7
 800317a:	4013      	ands	r3, r2
 800317c:	b299      	uxth	r1, r3
 800317e:	183b      	adds	r3, r7, r0
 8003180:	183a      	adds	r2, r7, r0
 8003182:	8812      	ldrh	r2, [r2, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	183a      	adds	r2, r7, r0
 800318e:	8812      	ldrh	r2, [r2, #0]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	e04c      	b.n	800322e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003194:	231e      	movs	r3, #30
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
 800319c:	e047      	b.n	800322e <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800319e:	231f      	movs	r3, #31
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d015      	beq.n	80031d4 <UART_SetConfig+0x1f0>
 80031a8:	dc18      	bgt.n	80031dc <UART_SetConfig+0x1f8>
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d00d      	beq.n	80031ca <UART_SetConfig+0x1e6>
 80031ae:	dc15      	bgt.n	80031dc <UART_SetConfig+0x1f8>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <UART_SetConfig+0x1d6>
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d005      	beq.n	80031c4 <UART_SetConfig+0x1e0>
 80031b8:	e010      	b.n	80031dc <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ba:	f7fe fefd 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80031be:	0003      	movs	r3, r0
 80031c0:	61bb      	str	r3, [r7, #24]
        break;
 80031c2:	e012      	b.n	80031ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <UART_SetConfig+0x27c>)
 80031c6:	61bb      	str	r3, [r7, #24]
        break;
 80031c8:	e00f      	b.n	80031ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ca:	f7fe fe87 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
        break;
 80031d2:	e00a      	b.n	80031ea <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	021b      	lsls	r3, r3, #8
 80031d8:	61bb      	str	r3, [r7, #24]
        break;
 80031da:	e006      	b.n	80031ea <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031e0:	231e      	movs	r3, #30
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	2201      	movs	r2, #1
 80031e6:	701a      	strb	r2, [r3, #0]
        break;
 80031e8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01e      	beq.n	800322e <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	085a      	lsrs	r2, r3, #1
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	18d2      	adds	r2, r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	0019      	movs	r1, r3
 8003200:	0010      	movs	r0, r2
 8003202:	f7fc ff8b 	bl	800011c <__udivsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	b29b      	uxth	r3, r3
 800320a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	2b0f      	cmp	r3, #15
 8003210:	d909      	bls.n	8003226 <UART_SetConfig+0x242>
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	025b      	lsls	r3, r3, #9
 8003218:	429a      	cmp	r2, r3
 800321a:	d204      	bcs.n	8003226 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e003      	b.n	800322e <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	231e      	movs	r3, #30
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800323a:	231e      	movs	r3, #30
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	781b      	ldrb	r3, [r3, #0]
}
 8003240:	0018      	movs	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	b008      	add	sp, #32
 8003246:	bd80      	pop	{r7, pc}
 8003248:	ffff69f3 	.word	0xffff69f3
 800324c:	ffffcfff 	.word	0xffffcfff
 8003250:	fffff4ff 	.word	0xfffff4ff
 8003254:	40013800 	.word	0x40013800
 8003258:	40021000 	.word	0x40021000
 800325c:	40004400 	.word	0x40004400
 8003260:	007a1200 	.word	0x007a1200

08003264 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	2201      	movs	r2, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d00b      	beq.n	800328e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4a4a      	ldr	r2, [pc, #296]	; (80033a8 <UART_AdvFeatureConfig+0x144>)
 800327e:	4013      	ands	r3, r2
 8003280:	0019      	movs	r1, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2202      	movs	r2, #2
 8003294:	4013      	ands	r3, r2
 8003296:	d00b      	beq.n	80032b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a43      	ldr	r2, [pc, #268]	; (80033ac <UART_AdvFeatureConfig+0x148>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	0019      	movs	r1, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2204      	movs	r2, #4
 80032b6:	4013      	ands	r3, r2
 80032b8:	d00b      	beq.n	80032d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <UART_AdvFeatureConfig+0x14c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0019      	movs	r1, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2208      	movs	r2, #8
 80032d8:	4013      	ands	r3, r2
 80032da:	d00b      	beq.n	80032f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <UART_AdvFeatureConfig+0x150>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	2210      	movs	r2, #16
 80032fa:	4013      	ands	r3, r2
 80032fc:	d00b      	beq.n	8003316 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a2c      	ldr	r2, [pc, #176]	; (80033b8 <UART_AdvFeatureConfig+0x154>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	2220      	movs	r2, #32
 800331c:	4013      	ands	r3, r2
 800331e:	d00b      	beq.n	8003338 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	4a25      	ldr	r2, [pc, #148]	; (80033bc <UART_AdvFeatureConfig+0x158>)
 8003328:	4013      	ands	r3, r2
 800332a:	0019      	movs	r1, r3
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	2240      	movs	r2, #64	; 0x40
 800333e:	4013      	ands	r3, r2
 8003340:	d01d      	beq.n	800337e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	4a1d      	ldr	r2, [pc, #116]	; (80033c0 <UART_AdvFeatureConfig+0x15c>)
 800334a:	4013      	ands	r3, r2
 800334c:	0019      	movs	r1, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	430a      	orrs	r2, r1
 8003358:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	035b      	lsls	r3, r3, #13
 8003362:	429a      	cmp	r2, r3
 8003364:	d10b      	bne.n	800337e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a15      	ldr	r2, [pc, #84]	; (80033c4 <UART_AdvFeatureConfig+0x160>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	2280      	movs	r2, #128	; 0x80
 8003384:	4013      	ands	r3, r2
 8003386:	d00b      	beq.n	80033a0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4a0e      	ldr	r2, [pc, #56]	; (80033c8 <UART_AdvFeatureConfig+0x164>)
 8003390:	4013      	ands	r3, r2
 8003392:	0019      	movs	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	605a      	str	r2, [r3, #4]
  }
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	fffdffff 	.word	0xfffdffff
 80033ac:	fffeffff 	.word	0xfffeffff
 80033b0:	fffbffff 	.word	0xfffbffff
 80033b4:	ffff7fff 	.word	0xffff7fff
 80033b8:	ffffefff 	.word	0xffffefff
 80033bc:	ffffdfff 	.word	0xffffdfff
 80033c0:	ffefffff 	.word	0xffefffff
 80033c4:	ff9fffff 	.word	0xff9fffff
 80033c8:	fff7ffff 	.word	0xfff7ffff

080033cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af02      	add	r7, sp, #8
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2280      	movs	r2, #128	; 0x80
 80033d8:	2100      	movs	r1, #0
 80033da:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033dc:	f7fd ff26 	bl	800122c <HAL_GetTick>
 80033e0:	0003      	movs	r3, r0
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2208      	movs	r2, #8
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d10c      	bne.n	800340c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2280      	movs	r2, #128	; 0x80
 80033f6:	0391      	lsls	r1, r2, #14
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <UART_CheckIdleState+0x8c>)
 80033fc:	9200      	str	r2, [sp, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	f000 f82c 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8003404:	1e03      	subs	r3, r0, #0
 8003406:	d001      	beq.n	800340c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003408:	2303      	movs	r3, #3
 800340a:	e021      	b.n	8003450 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2204      	movs	r2, #4
 8003414:	4013      	ands	r3, r2
 8003416:	2b04      	cmp	r3, #4
 8003418:	d10c      	bne.n	8003434 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	03d1      	lsls	r1, r2, #15
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	4a0d      	ldr	r2, [pc, #52]	; (8003458 <UART_CheckIdleState+0x8c>)
 8003424:	9200      	str	r2, [sp, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	f000 f818 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 800342c:	1e03      	subs	r3, r0, #0
 800342e:	d001      	beq.n	8003434 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e00d      	b.n	8003450 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2220      	movs	r2, #32
 8003438:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2220      	movs	r2, #32
 800343e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2274      	movs	r2, #116	; 0x74
 800344a:	2100      	movs	r1, #0
 800344c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bd80      	pop	{r7, pc}
 8003458:	01ffffff 	.word	0x01ffffff

0800345c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b094      	sub	sp, #80	; 0x50
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	1dfb      	adds	r3, r7, #7
 800346a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346c:	e0a3      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	3301      	adds	r3, #1
 8003472:	d100      	bne.n	8003476 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003474:	e09f      	b.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fd fed9 	bl	800122c <HAL_GetTick>
 800347a:	0002      	movs	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <UART_WaitOnFlagUntilTimeout+0x30>
 8003486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003488:	2b00      	cmp	r3, #0
 800348a:	d13d      	bne.n	8003508 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348c:	f3ef 8310 	mrs	r3, PRIMASK
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003494:	647b      	str	r3, [r7, #68]	; 0x44
 8003496:	2301      	movs	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	f383 8810 	msr	PRIMASK, r3
}
 80034a0:	46c0      	nop			; (mov r8, r8)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	494c      	ldr	r1, [pc, #304]	; (80035e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 80034ae:	400a      	ands	r2, r1
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	f383 8810 	msr	PRIMASK, r3
}
 80034bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034be:	f3ef 8310 	mrs	r3, PRIMASK
 80034c2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80034c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034c6:	643b      	str	r3, [r7, #64]	; 0x40
 80034c8:	2301      	movs	r3, #1
 80034ca:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ce:	f383 8810 	msr	PRIMASK, r3
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2101      	movs	r1, #1
 80034e0:	438a      	bics	r2, r1
 80034e2:	609a      	str	r2, [r3, #8]
 80034e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ea:	f383 8810 	msr	PRIMASK, r3
}
 80034ee:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2220      	movs	r2, #32
 80034fa:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2274      	movs	r2, #116	; 0x74
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e067      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2204      	movs	r2, #4
 8003510:	4013      	ands	r3, r2
 8003512:	d050      	beq.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	69da      	ldr	r2, [r3, #28]
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	401a      	ands	r2, r3
 8003520:	2380      	movs	r3, #128	; 0x80
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	429a      	cmp	r2, r3
 8003526:	d146      	bne.n	80035b6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2280      	movs	r2, #128	; 0x80
 800352e:	0112      	lsls	r2, r2, #4
 8003530:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003532:	f3ef 8310 	mrs	r3, PRIMASK
 8003536:	613b      	str	r3, [r7, #16]
  return(result);
 8003538:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800353c:	2301      	movs	r3, #1
 800353e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4923      	ldr	r1, [pc, #140]	; (80035e0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003564:	f3ef 8310 	mrs	r3, PRIMASK
 8003568:	61fb      	str	r3, [r7, #28]
  return(result);
 800356a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800356c:	64bb      	str	r3, [r7, #72]	; 0x48
 800356e:	2301      	movs	r3, #1
 8003570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	6a3b      	ldr	r3, [r7, #32]
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			; (mov r8, r8)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2101      	movs	r1, #1
 8003586:	438a      	bics	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003590:	f383 8810 	msr	PRIMASK, r3
}
 8003594:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2280      	movs	r2, #128	; 0x80
 80035a6:	2120      	movs	r1, #32
 80035a8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2274      	movs	r2, #116	; 0x74
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e010      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	4013      	ands	r3, r2
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	425a      	negs	r2, r3
 80035c6:	4153      	adcs	r3, r2
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	001a      	movs	r2, r3
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d100      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80035d4:	e74b      	b.n	800346e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b014      	add	sp, #80	; 0x50
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	fffffe5f 	.word	0xfffffe5f

080035e4 <__assert_func>:
 80035e4:	b530      	push	{r4, r5, lr}
 80035e6:	0014      	movs	r4, r2
 80035e8:	001a      	movs	r2, r3
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <__assert_func+0x2c>)
 80035ec:	0005      	movs	r5, r0
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	b085      	sub	sp, #20
 80035f2:	68d8      	ldr	r0, [r3, #12]
 80035f4:	4b07      	ldr	r3, [pc, #28]	; (8003614 <__assert_func+0x30>)
 80035f6:	2c00      	cmp	r4, #0
 80035f8:	d101      	bne.n	80035fe <__assert_func+0x1a>
 80035fa:	4b07      	ldr	r3, [pc, #28]	; (8003618 <__assert_func+0x34>)
 80035fc:	001c      	movs	r4, r3
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	9100      	str	r1, [sp, #0]
 8003602:	002b      	movs	r3, r5
 8003604:	4905      	ldr	r1, [pc, #20]	; (800361c <__assert_func+0x38>)
 8003606:	9402      	str	r4, [sp, #8]
 8003608:	f000 f810 	bl	800362c <fiprintf>
 800360c:	f000 fbfc 	bl	8003e08 <abort>
 8003610:	200000c4 	.word	0x200000c4
 8003614:	08004918 	.word	0x08004918
 8003618:	08004953 	.word	0x08004953
 800361c:	08004925 	.word	0x08004925

08003620 <__errno>:
 8003620:	4b01      	ldr	r3, [pc, #4]	; (8003628 <__errno+0x8>)
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	200000c4 	.word	0x200000c4

0800362c <fiprintf>:
 800362c:	b40e      	push	{r1, r2, r3}
 800362e:	b503      	push	{r0, r1, lr}
 8003630:	0001      	movs	r1, r0
 8003632:	ab03      	add	r3, sp, #12
 8003634:	4804      	ldr	r0, [pc, #16]	; (8003648 <fiprintf+0x1c>)
 8003636:	cb04      	ldmia	r3!, {r2}
 8003638:	6800      	ldr	r0, [r0, #0]
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	f000 f85a 	bl	80036f4 <_vfiprintf_r>
 8003640:	b002      	add	sp, #8
 8003642:	bc08      	pop	{r3}
 8003644:	b003      	add	sp, #12
 8003646:	4718      	bx	r3
 8003648:	200000c4 	.word	0x200000c4

0800364c <__libc_init_array>:
 800364c:	b570      	push	{r4, r5, r6, lr}
 800364e:	2600      	movs	r6, #0
 8003650:	4d0c      	ldr	r5, [pc, #48]	; (8003684 <__libc_init_array+0x38>)
 8003652:	4c0d      	ldr	r4, [pc, #52]	; (8003688 <__libc_init_array+0x3c>)
 8003654:	1b64      	subs	r4, r4, r5
 8003656:	10a4      	asrs	r4, r4, #2
 8003658:	42a6      	cmp	r6, r4
 800365a:	d109      	bne.n	8003670 <__libc_init_array+0x24>
 800365c:	2600      	movs	r6, #0
 800365e:	f001 f831 	bl	80046c4 <_init>
 8003662:	4d0a      	ldr	r5, [pc, #40]	; (800368c <__libc_init_array+0x40>)
 8003664:	4c0a      	ldr	r4, [pc, #40]	; (8003690 <__libc_init_array+0x44>)
 8003666:	1b64      	subs	r4, r4, r5
 8003668:	10a4      	asrs	r4, r4, #2
 800366a:	42a6      	cmp	r6, r4
 800366c:	d105      	bne.n	800367a <__libc_init_array+0x2e>
 800366e:	bd70      	pop	{r4, r5, r6, pc}
 8003670:	00b3      	lsls	r3, r6, #2
 8003672:	58eb      	ldr	r3, [r5, r3]
 8003674:	4798      	blx	r3
 8003676:	3601      	adds	r6, #1
 8003678:	e7ee      	b.n	8003658 <__libc_init_array+0xc>
 800367a:	00b3      	lsls	r3, r6, #2
 800367c:	58eb      	ldr	r3, [r5, r3]
 800367e:	4798      	blx	r3
 8003680:	3601      	adds	r6, #1
 8003682:	e7f2      	b.n	800366a <__libc_init_array+0x1e>
 8003684:	080049ec 	.word	0x080049ec
 8003688:	080049ec 	.word	0x080049ec
 800368c:	080049ec 	.word	0x080049ec
 8003690:	080049f0 	.word	0x080049f0

08003694 <memset>:
 8003694:	0003      	movs	r3, r0
 8003696:	1882      	adds	r2, r0, r2
 8003698:	4293      	cmp	r3, r2
 800369a:	d100      	bne.n	800369e <memset+0xa>
 800369c:	4770      	bx	lr
 800369e:	7019      	strb	r1, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	e7f9      	b.n	8003698 <memset+0x4>

080036a4 <__sfputc_r>:
 80036a4:	6893      	ldr	r3, [r2, #8]
 80036a6:	b510      	push	{r4, lr}
 80036a8:	3b01      	subs	r3, #1
 80036aa:	6093      	str	r3, [r2, #8]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	da04      	bge.n	80036ba <__sfputc_r+0x16>
 80036b0:	6994      	ldr	r4, [r2, #24]
 80036b2:	42a3      	cmp	r3, r4
 80036b4:	db07      	blt.n	80036c6 <__sfputc_r+0x22>
 80036b6:	290a      	cmp	r1, #10
 80036b8:	d005      	beq.n	80036c6 <__sfputc_r+0x22>
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	1c58      	adds	r0, r3, #1
 80036be:	6010      	str	r0, [r2, #0]
 80036c0:	7019      	strb	r1, [r3, #0]
 80036c2:	0008      	movs	r0, r1
 80036c4:	bd10      	pop	{r4, pc}
 80036c6:	f000 fad1 	bl	8003c6c <__swbuf_r>
 80036ca:	0001      	movs	r1, r0
 80036cc:	e7f9      	b.n	80036c2 <__sfputc_r+0x1e>

080036ce <__sfputs_r>:
 80036ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d0:	0006      	movs	r6, r0
 80036d2:	000f      	movs	r7, r1
 80036d4:	0014      	movs	r4, r2
 80036d6:	18d5      	adds	r5, r2, r3
 80036d8:	42ac      	cmp	r4, r5
 80036da:	d101      	bne.n	80036e0 <__sfputs_r+0x12>
 80036dc:	2000      	movs	r0, #0
 80036de:	e007      	b.n	80036f0 <__sfputs_r+0x22>
 80036e0:	7821      	ldrb	r1, [r4, #0]
 80036e2:	003a      	movs	r2, r7
 80036e4:	0030      	movs	r0, r6
 80036e6:	f7ff ffdd 	bl	80036a4 <__sfputc_r>
 80036ea:	3401      	adds	r4, #1
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d1f3      	bne.n	80036d8 <__sfputs_r+0xa>
 80036f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080036f4 <_vfiprintf_r>:
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b0a1      	sub	sp, #132	; 0x84
 80036f8:	0006      	movs	r6, r0
 80036fa:	000c      	movs	r4, r1
 80036fc:	001f      	movs	r7, r3
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	2800      	cmp	r0, #0
 8003702:	d004      	beq.n	800370e <_vfiprintf_r+0x1a>
 8003704:	6983      	ldr	r3, [r0, #24]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <_vfiprintf_r+0x1a>
 800370a:	f000 fcb3 	bl	8004074 <__sinit>
 800370e:	4b8e      	ldr	r3, [pc, #568]	; (8003948 <_vfiprintf_r+0x254>)
 8003710:	429c      	cmp	r4, r3
 8003712:	d11c      	bne.n	800374e <_vfiprintf_r+0x5a>
 8003714:	6874      	ldr	r4, [r6, #4]
 8003716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003718:	07db      	lsls	r3, r3, #31
 800371a:	d405      	bmi.n	8003728 <_vfiprintf_r+0x34>
 800371c:	89a3      	ldrh	r3, [r4, #12]
 800371e:	059b      	lsls	r3, r3, #22
 8003720:	d402      	bmi.n	8003728 <_vfiprintf_r+0x34>
 8003722:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003724:	f000 fd47 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8003728:	89a3      	ldrh	r3, [r4, #12]
 800372a:	071b      	lsls	r3, r3, #28
 800372c:	d502      	bpl.n	8003734 <_vfiprintf_r+0x40>
 800372e:	6923      	ldr	r3, [r4, #16]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d11d      	bne.n	8003770 <_vfiprintf_r+0x7c>
 8003734:	0021      	movs	r1, r4
 8003736:	0030      	movs	r0, r6
 8003738:	f000 faee 	bl	8003d18 <__swsetup_r>
 800373c:	2800      	cmp	r0, #0
 800373e:	d017      	beq.n	8003770 <_vfiprintf_r+0x7c>
 8003740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003742:	07db      	lsls	r3, r3, #31
 8003744:	d50d      	bpl.n	8003762 <_vfiprintf_r+0x6e>
 8003746:	2001      	movs	r0, #1
 8003748:	4240      	negs	r0, r0
 800374a:	b021      	add	sp, #132	; 0x84
 800374c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <_vfiprintf_r+0x258>)
 8003750:	429c      	cmp	r4, r3
 8003752:	d101      	bne.n	8003758 <_vfiprintf_r+0x64>
 8003754:	68b4      	ldr	r4, [r6, #8]
 8003756:	e7de      	b.n	8003716 <_vfiprintf_r+0x22>
 8003758:	4b7d      	ldr	r3, [pc, #500]	; (8003950 <_vfiprintf_r+0x25c>)
 800375a:	429c      	cmp	r4, r3
 800375c:	d1db      	bne.n	8003716 <_vfiprintf_r+0x22>
 800375e:	68f4      	ldr	r4, [r6, #12]
 8003760:	e7d9      	b.n	8003716 <_vfiprintf_r+0x22>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	d4ee      	bmi.n	8003746 <_vfiprintf_r+0x52>
 8003768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800376a:	f000 fd25 	bl	80041b8 <__retarget_lock_release_recursive>
 800376e:	e7ea      	b.n	8003746 <_vfiprintf_r+0x52>
 8003770:	2300      	movs	r3, #0
 8003772:	ad08      	add	r5, sp, #32
 8003774:	616b      	str	r3, [r5, #20]
 8003776:	3320      	adds	r3, #32
 8003778:	766b      	strb	r3, [r5, #25]
 800377a:	3310      	adds	r3, #16
 800377c:	76ab      	strb	r3, [r5, #26]
 800377e:	9707      	str	r7, [sp, #28]
 8003780:	9f03      	ldr	r7, [sp, #12]
 8003782:	783b      	ldrb	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d001      	beq.n	800378c <_vfiprintf_r+0x98>
 8003788:	2b25      	cmp	r3, #37	; 0x25
 800378a:	d14e      	bne.n	800382a <_vfiprintf_r+0x136>
 800378c:	9b03      	ldr	r3, [sp, #12]
 800378e:	1afb      	subs	r3, r7, r3
 8003790:	9305      	str	r3, [sp, #20]
 8003792:	9b03      	ldr	r3, [sp, #12]
 8003794:	429f      	cmp	r7, r3
 8003796:	d00d      	beq.n	80037b4 <_vfiprintf_r+0xc0>
 8003798:	9b05      	ldr	r3, [sp, #20]
 800379a:	0021      	movs	r1, r4
 800379c:	0030      	movs	r0, r6
 800379e:	9a03      	ldr	r2, [sp, #12]
 80037a0:	f7ff ff95 	bl	80036ce <__sfputs_r>
 80037a4:	1c43      	adds	r3, r0, #1
 80037a6:	d100      	bne.n	80037aa <_vfiprintf_r+0xb6>
 80037a8:	e0b5      	b.n	8003916 <_vfiprintf_r+0x222>
 80037aa:	696a      	ldr	r2, [r5, #20]
 80037ac:	9b05      	ldr	r3, [sp, #20]
 80037ae:	4694      	mov	ip, r2
 80037b0:	4463      	add	r3, ip
 80037b2:	616b      	str	r3, [r5, #20]
 80037b4:	783b      	ldrb	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <_vfiprintf_r+0xc8>
 80037ba:	e0ac      	b.n	8003916 <_vfiprintf_r+0x222>
 80037bc:	2201      	movs	r2, #1
 80037be:	1c7b      	adds	r3, r7, #1
 80037c0:	9303      	str	r3, [sp, #12]
 80037c2:	2300      	movs	r3, #0
 80037c4:	4252      	negs	r2, r2
 80037c6:	606a      	str	r2, [r5, #4]
 80037c8:	a904      	add	r1, sp, #16
 80037ca:	3254      	adds	r2, #84	; 0x54
 80037cc:	1852      	adds	r2, r2, r1
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	60eb      	str	r3, [r5, #12]
 80037d2:	60ab      	str	r3, [r5, #8]
 80037d4:	7013      	strb	r3, [r2, #0]
 80037d6:	65ab      	str	r3, [r5, #88]	; 0x58
 80037d8:	9b03      	ldr	r3, [sp, #12]
 80037da:	2205      	movs	r2, #5
 80037dc:	7819      	ldrb	r1, [r3, #0]
 80037de:	485d      	ldr	r0, [pc, #372]	; (8003954 <_vfiprintf_r+0x260>)
 80037e0:	f000 fd58 	bl	8004294 <memchr>
 80037e4:	9b03      	ldr	r3, [sp, #12]
 80037e6:	1c5f      	adds	r7, r3, #1
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d120      	bne.n	800382e <_vfiprintf_r+0x13a>
 80037ec:	682a      	ldr	r2, [r5, #0]
 80037ee:	06d3      	lsls	r3, r2, #27
 80037f0:	d504      	bpl.n	80037fc <_vfiprintf_r+0x108>
 80037f2:	2353      	movs	r3, #83	; 0x53
 80037f4:	a904      	add	r1, sp, #16
 80037f6:	185b      	adds	r3, r3, r1
 80037f8:	2120      	movs	r1, #32
 80037fa:	7019      	strb	r1, [r3, #0]
 80037fc:	0713      	lsls	r3, r2, #28
 80037fe:	d504      	bpl.n	800380a <_vfiprintf_r+0x116>
 8003800:	2353      	movs	r3, #83	; 0x53
 8003802:	a904      	add	r1, sp, #16
 8003804:	185b      	adds	r3, r3, r1
 8003806:	212b      	movs	r1, #43	; 0x2b
 8003808:	7019      	strb	r1, [r3, #0]
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b2a      	cmp	r3, #42	; 0x2a
 8003810:	d016      	beq.n	8003840 <_vfiprintf_r+0x14c>
 8003812:	2100      	movs	r1, #0
 8003814:	68eb      	ldr	r3, [r5, #12]
 8003816:	9f03      	ldr	r7, [sp, #12]
 8003818:	783a      	ldrb	r2, [r7, #0]
 800381a:	1c78      	adds	r0, r7, #1
 800381c:	3a30      	subs	r2, #48	; 0x30
 800381e:	4684      	mov	ip, r0
 8003820:	2a09      	cmp	r2, #9
 8003822:	d94f      	bls.n	80038c4 <_vfiprintf_r+0x1d0>
 8003824:	2900      	cmp	r1, #0
 8003826:	d111      	bne.n	800384c <_vfiprintf_r+0x158>
 8003828:	e017      	b.n	800385a <_vfiprintf_r+0x166>
 800382a:	3701      	adds	r7, #1
 800382c:	e7a9      	b.n	8003782 <_vfiprintf_r+0x8e>
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <_vfiprintf_r+0x260>)
 8003830:	682a      	ldr	r2, [r5, #0]
 8003832:	1ac0      	subs	r0, r0, r3
 8003834:	2301      	movs	r3, #1
 8003836:	4083      	lsls	r3, r0
 8003838:	4313      	orrs	r3, r2
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	9703      	str	r7, [sp, #12]
 800383e:	e7cb      	b.n	80037d8 <_vfiprintf_r+0xe4>
 8003840:	9b07      	ldr	r3, [sp, #28]
 8003842:	1d19      	adds	r1, r3, #4
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	9107      	str	r1, [sp, #28]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db01      	blt.n	8003850 <_vfiprintf_r+0x15c>
 800384c:	930b      	str	r3, [sp, #44]	; 0x2c
 800384e:	e004      	b.n	800385a <_vfiprintf_r+0x166>
 8003850:	425b      	negs	r3, r3
 8003852:	60eb      	str	r3, [r5, #12]
 8003854:	2302      	movs	r3, #2
 8003856:	4313      	orrs	r3, r2
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	783b      	ldrb	r3, [r7, #0]
 800385c:	2b2e      	cmp	r3, #46	; 0x2e
 800385e:	d10a      	bne.n	8003876 <_vfiprintf_r+0x182>
 8003860:	787b      	ldrb	r3, [r7, #1]
 8003862:	2b2a      	cmp	r3, #42	; 0x2a
 8003864:	d137      	bne.n	80038d6 <_vfiprintf_r+0x1e2>
 8003866:	9b07      	ldr	r3, [sp, #28]
 8003868:	3702      	adds	r7, #2
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	9207      	str	r2, [sp, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	db2d      	blt.n	80038d0 <_vfiprintf_r+0x1dc>
 8003874:	9309      	str	r3, [sp, #36]	; 0x24
 8003876:	2203      	movs	r2, #3
 8003878:	7839      	ldrb	r1, [r7, #0]
 800387a:	4837      	ldr	r0, [pc, #220]	; (8003958 <_vfiprintf_r+0x264>)
 800387c:	f000 fd0a 	bl	8004294 <memchr>
 8003880:	2800      	cmp	r0, #0
 8003882:	d007      	beq.n	8003894 <_vfiprintf_r+0x1a0>
 8003884:	4b34      	ldr	r3, [pc, #208]	; (8003958 <_vfiprintf_r+0x264>)
 8003886:	682a      	ldr	r2, [r5, #0]
 8003888:	1ac0      	subs	r0, r0, r3
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	4083      	lsls	r3, r0
 800388e:	4313      	orrs	r3, r2
 8003890:	3701      	adds	r7, #1
 8003892:	602b      	str	r3, [r5, #0]
 8003894:	7839      	ldrb	r1, [r7, #0]
 8003896:	1c7b      	adds	r3, r7, #1
 8003898:	2206      	movs	r2, #6
 800389a:	4830      	ldr	r0, [pc, #192]	; (800395c <_vfiprintf_r+0x268>)
 800389c:	9303      	str	r3, [sp, #12]
 800389e:	7629      	strb	r1, [r5, #24]
 80038a0:	f000 fcf8 	bl	8004294 <memchr>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	d045      	beq.n	8003934 <_vfiprintf_r+0x240>
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <_vfiprintf_r+0x26c>)
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d127      	bne.n	80038fe <_vfiprintf_r+0x20a>
 80038ae:	2207      	movs	r2, #7
 80038b0:	9b07      	ldr	r3, [sp, #28]
 80038b2:	3307      	adds	r3, #7
 80038b4:	4393      	bics	r3, r2
 80038b6:	3308      	adds	r3, #8
 80038b8:	9307      	str	r3, [sp, #28]
 80038ba:	696b      	ldr	r3, [r5, #20]
 80038bc:	9a04      	ldr	r2, [sp, #16]
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	616b      	str	r3, [r5, #20]
 80038c2:	e75d      	b.n	8003780 <_vfiprintf_r+0x8c>
 80038c4:	210a      	movs	r1, #10
 80038c6:	434b      	muls	r3, r1
 80038c8:	4667      	mov	r7, ip
 80038ca:	189b      	adds	r3, r3, r2
 80038cc:	3909      	subs	r1, #9
 80038ce:	e7a3      	b.n	8003818 <_vfiprintf_r+0x124>
 80038d0:	2301      	movs	r3, #1
 80038d2:	425b      	negs	r3, r3
 80038d4:	e7ce      	b.n	8003874 <_vfiprintf_r+0x180>
 80038d6:	2300      	movs	r3, #0
 80038d8:	001a      	movs	r2, r3
 80038da:	3701      	adds	r7, #1
 80038dc:	606b      	str	r3, [r5, #4]
 80038de:	7839      	ldrb	r1, [r7, #0]
 80038e0:	1c78      	adds	r0, r7, #1
 80038e2:	3930      	subs	r1, #48	; 0x30
 80038e4:	4684      	mov	ip, r0
 80038e6:	2909      	cmp	r1, #9
 80038e8:	d903      	bls.n	80038f2 <_vfiprintf_r+0x1fe>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0c3      	beq.n	8003876 <_vfiprintf_r+0x182>
 80038ee:	9209      	str	r2, [sp, #36]	; 0x24
 80038f0:	e7c1      	b.n	8003876 <_vfiprintf_r+0x182>
 80038f2:	230a      	movs	r3, #10
 80038f4:	435a      	muls	r2, r3
 80038f6:	4667      	mov	r7, ip
 80038f8:	1852      	adds	r2, r2, r1
 80038fa:	3b09      	subs	r3, #9
 80038fc:	e7ef      	b.n	80038de <_vfiprintf_r+0x1ea>
 80038fe:	ab07      	add	r3, sp, #28
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	0022      	movs	r2, r4
 8003904:	0029      	movs	r1, r5
 8003906:	0030      	movs	r0, r6
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <_vfiprintf_r+0x270>)
 800390a:	e000      	b.n	800390e <_vfiprintf_r+0x21a>
 800390c:	bf00      	nop
 800390e:	9004      	str	r0, [sp, #16]
 8003910:	9b04      	ldr	r3, [sp, #16]
 8003912:	3301      	adds	r3, #1
 8003914:	d1d1      	bne.n	80038ba <_vfiprintf_r+0x1c6>
 8003916:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003918:	07db      	lsls	r3, r3, #31
 800391a:	d405      	bmi.n	8003928 <_vfiprintf_r+0x234>
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	059b      	lsls	r3, r3, #22
 8003920:	d402      	bmi.n	8003928 <_vfiprintf_r+0x234>
 8003922:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003924:	f000 fc48 	bl	80041b8 <__retarget_lock_release_recursive>
 8003928:	89a3      	ldrh	r3, [r4, #12]
 800392a:	065b      	lsls	r3, r3, #25
 800392c:	d500      	bpl.n	8003930 <_vfiprintf_r+0x23c>
 800392e:	e70a      	b.n	8003746 <_vfiprintf_r+0x52>
 8003930:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003932:	e70a      	b.n	800374a <_vfiprintf_r+0x56>
 8003934:	ab07      	add	r3, sp, #28
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	0022      	movs	r2, r4
 800393a:	0029      	movs	r1, r5
 800393c:	0030      	movs	r0, r6
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <_vfiprintf_r+0x270>)
 8003940:	f000 f882 	bl	8003a48 <_printf_i>
 8003944:	e7e3      	b.n	800390e <_vfiprintf_r+0x21a>
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	080049ac 	.word	0x080049ac
 800394c:	080049cc 	.word	0x080049cc
 8003950:	0800498c 	.word	0x0800498c
 8003954:	08004958 	.word	0x08004958
 8003958:	0800495e 	.word	0x0800495e
 800395c:	08004962 	.word	0x08004962
 8003960:	00000000 	.word	0x00000000
 8003964:	080036cf 	.word	0x080036cf

08003968 <_printf_common>:
 8003968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800396a:	0015      	movs	r5, r2
 800396c:	9301      	str	r3, [sp, #4]
 800396e:	688a      	ldr	r2, [r1, #8]
 8003970:	690b      	ldr	r3, [r1, #16]
 8003972:	000c      	movs	r4, r1
 8003974:	9000      	str	r0, [sp, #0]
 8003976:	4293      	cmp	r3, r2
 8003978:	da00      	bge.n	800397c <_printf_common+0x14>
 800397a:	0013      	movs	r3, r2
 800397c:	0022      	movs	r2, r4
 800397e:	602b      	str	r3, [r5, #0]
 8003980:	3243      	adds	r2, #67	; 0x43
 8003982:	7812      	ldrb	r2, [r2, #0]
 8003984:	2a00      	cmp	r2, #0
 8003986:	d001      	beq.n	800398c <_printf_common+0x24>
 8003988:	3301      	adds	r3, #1
 800398a:	602b      	str	r3, [r5, #0]
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	069b      	lsls	r3, r3, #26
 8003990:	d502      	bpl.n	8003998 <_printf_common+0x30>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	3302      	adds	r3, #2
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	6822      	ldr	r2, [r4, #0]
 800399a:	2306      	movs	r3, #6
 800399c:	0017      	movs	r7, r2
 800399e:	401f      	ands	r7, r3
 80039a0:	421a      	tst	r2, r3
 80039a2:	d027      	beq.n	80039f4 <_printf_common+0x8c>
 80039a4:	0023      	movs	r3, r4
 80039a6:	3343      	adds	r3, #67	; 0x43
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	1e5a      	subs	r2, r3, #1
 80039ac:	4193      	sbcs	r3, r2
 80039ae:	6822      	ldr	r2, [r4, #0]
 80039b0:	0692      	lsls	r2, r2, #26
 80039b2:	d430      	bmi.n	8003a16 <_printf_common+0xae>
 80039b4:	0022      	movs	r2, r4
 80039b6:	9901      	ldr	r1, [sp, #4]
 80039b8:	9800      	ldr	r0, [sp, #0]
 80039ba:	9e08      	ldr	r6, [sp, #32]
 80039bc:	3243      	adds	r2, #67	; 0x43
 80039be:	47b0      	blx	r6
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d025      	beq.n	8003a10 <_printf_common+0xa8>
 80039c4:	2306      	movs	r3, #6
 80039c6:	6820      	ldr	r0, [r4, #0]
 80039c8:	682a      	ldr	r2, [r5, #0]
 80039ca:	68e1      	ldr	r1, [r4, #12]
 80039cc:	2500      	movs	r5, #0
 80039ce:	4003      	ands	r3, r0
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d103      	bne.n	80039dc <_printf_common+0x74>
 80039d4:	1a8d      	subs	r5, r1, r2
 80039d6:	43eb      	mvns	r3, r5
 80039d8:	17db      	asrs	r3, r3, #31
 80039da:	401d      	ands	r5, r3
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	6922      	ldr	r2, [r4, #16]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	dd01      	ble.n	80039e8 <_printf_common+0x80>
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	18ed      	adds	r5, r5, r3
 80039e8:	2700      	movs	r7, #0
 80039ea:	42bd      	cmp	r5, r7
 80039ec:	d120      	bne.n	8003a30 <_printf_common+0xc8>
 80039ee:	2000      	movs	r0, #0
 80039f0:	e010      	b.n	8003a14 <_printf_common+0xac>
 80039f2:	3701      	adds	r7, #1
 80039f4:	68e3      	ldr	r3, [r4, #12]
 80039f6:	682a      	ldr	r2, [r5, #0]
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	42bb      	cmp	r3, r7
 80039fc:	ddd2      	ble.n	80039a4 <_printf_common+0x3c>
 80039fe:	0022      	movs	r2, r4
 8003a00:	2301      	movs	r3, #1
 8003a02:	9901      	ldr	r1, [sp, #4]
 8003a04:	9800      	ldr	r0, [sp, #0]
 8003a06:	9e08      	ldr	r6, [sp, #32]
 8003a08:	3219      	adds	r2, #25
 8003a0a:	47b0      	blx	r6
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	d1f0      	bne.n	80039f2 <_printf_common+0x8a>
 8003a10:	2001      	movs	r0, #1
 8003a12:	4240      	negs	r0, r0
 8003a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a16:	2030      	movs	r0, #48	; 0x30
 8003a18:	18e1      	adds	r1, r4, r3
 8003a1a:	3143      	adds	r1, #67	; 0x43
 8003a1c:	7008      	strb	r0, [r1, #0]
 8003a1e:	0021      	movs	r1, r4
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	3145      	adds	r1, #69	; 0x45
 8003a24:	7809      	ldrb	r1, [r1, #0]
 8003a26:	18a2      	adds	r2, r4, r2
 8003a28:	3243      	adds	r2, #67	; 0x43
 8003a2a:	3302      	adds	r3, #2
 8003a2c:	7011      	strb	r1, [r2, #0]
 8003a2e:	e7c1      	b.n	80039b4 <_printf_common+0x4c>
 8003a30:	0022      	movs	r2, r4
 8003a32:	2301      	movs	r3, #1
 8003a34:	9901      	ldr	r1, [sp, #4]
 8003a36:	9800      	ldr	r0, [sp, #0]
 8003a38:	9e08      	ldr	r6, [sp, #32]
 8003a3a:	321a      	adds	r2, #26
 8003a3c:	47b0      	blx	r6
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	d0e6      	beq.n	8003a10 <_printf_common+0xa8>
 8003a42:	3701      	adds	r7, #1
 8003a44:	e7d1      	b.n	80039ea <_printf_common+0x82>
	...

08003a48 <_printf_i>:
 8003a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a4a:	b08b      	sub	sp, #44	; 0x2c
 8003a4c:	9206      	str	r2, [sp, #24]
 8003a4e:	000a      	movs	r2, r1
 8003a50:	3243      	adds	r2, #67	; 0x43
 8003a52:	9307      	str	r3, [sp, #28]
 8003a54:	9005      	str	r0, [sp, #20]
 8003a56:	9204      	str	r2, [sp, #16]
 8003a58:	7e0a      	ldrb	r2, [r1, #24]
 8003a5a:	000c      	movs	r4, r1
 8003a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a5e:	2a78      	cmp	r2, #120	; 0x78
 8003a60:	d807      	bhi.n	8003a72 <_printf_i+0x2a>
 8003a62:	2a62      	cmp	r2, #98	; 0x62
 8003a64:	d809      	bhi.n	8003a7a <_printf_i+0x32>
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	d100      	bne.n	8003a6c <_printf_i+0x24>
 8003a6a:	e0c1      	b.n	8003bf0 <_printf_i+0x1a8>
 8003a6c:	2a58      	cmp	r2, #88	; 0x58
 8003a6e:	d100      	bne.n	8003a72 <_printf_i+0x2a>
 8003a70:	e08c      	b.n	8003b8c <_printf_i+0x144>
 8003a72:	0026      	movs	r6, r4
 8003a74:	3642      	adds	r6, #66	; 0x42
 8003a76:	7032      	strb	r2, [r6, #0]
 8003a78:	e022      	b.n	8003ac0 <_printf_i+0x78>
 8003a7a:	0010      	movs	r0, r2
 8003a7c:	3863      	subs	r0, #99	; 0x63
 8003a7e:	2815      	cmp	r0, #21
 8003a80:	d8f7      	bhi.n	8003a72 <_printf_i+0x2a>
 8003a82:	f7fc fb41 	bl	8000108 <__gnu_thumb1_case_shi>
 8003a86:	0016      	.short	0x0016
 8003a88:	fff6001f 	.word	0xfff6001f
 8003a8c:	fff6fff6 	.word	0xfff6fff6
 8003a90:	001ffff6 	.word	0x001ffff6
 8003a94:	fff6fff6 	.word	0xfff6fff6
 8003a98:	fff6fff6 	.word	0xfff6fff6
 8003a9c:	003600a8 	.word	0x003600a8
 8003aa0:	fff6009a 	.word	0xfff6009a
 8003aa4:	00b9fff6 	.word	0x00b9fff6
 8003aa8:	0036fff6 	.word	0x0036fff6
 8003aac:	fff6fff6 	.word	0xfff6fff6
 8003ab0:	009e      	.short	0x009e
 8003ab2:	0026      	movs	r6, r4
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	3642      	adds	r6, #66	; 0x42
 8003ab8:	1d11      	adds	r1, r2, #4
 8003aba:	6019      	str	r1, [r3, #0]
 8003abc:	6813      	ldr	r3, [r2, #0]
 8003abe:	7033      	strb	r3, [r6, #0]
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0a7      	b.n	8003c14 <_printf_i+0x1cc>
 8003ac4:	6808      	ldr	r0, [r1, #0]
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	1d0a      	adds	r2, r1, #4
 8003aca:	0605      	lsls	r5, r0, #24
 8003acc:	d50b      	bpl.n	8003ae6 <_printf_i+0x9e>
 8003ace:	680d      	ldr	r5, [r1, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	da03      	bge.n	8003ade <_printf_i+0x96>
 8003ad6:	232d      	movs	r3, #45	; 0x2d
 8003ad8:	9a04      	ldr	r2, [sp, #16]
 8003ada:	426d      	negs	r5, r5
 8003adc:	7013      	strb	r3, [r2, #0]
 8003ade:	4b61      	ldr	r3, [pc, #388]	; (8003c64 <_printf_i+0x21c>)
 8003ae0:	270a      	movs	r7, #10
 8003ae2:	9303      	str	r3, [sp, #12]
 8003ae4:	e01b      	b.n	8003b1e <_printf_i+0xd6>
 8003ae6:	680d      	ldr	r5, [r1, #0]
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	0641      	lsls	r1, r0, #25
 8003aec:	d5f1      	bpl.n	8003ad2 <_printf_i+0x8a>
 8003aee:	b22d      	sxth	r5, r5
 8003af0:	e7ef      	b.n	8003ad2 <_printf_i+0x8a>
 8003af2:	680d      	ldr	r5, [r1, #0]
 8003af4:	6819      	ldr	r1, [r3, #0]
 8003af6:	1d08      	adds	r0, r1, #4
 8003af8:	6018      	str	r0, [r3, #0]
 8003afa:	062e      	lsls	r6, r5, #24
 8003afc:	d501      	bpl.n	8003b02 <_printf_i+0xba>
 8003afe:	680d      	ldr	r5, [r1, #0]
 8003b00:	e003      	b.n	8003b0a <_printf_i+0xc2>
 8003b02:	066d      	lsls	r5, r5, #25
 8003b04:	d5fb      	bpl.n	8003afe <_printf_i+0xb6>
 8003b06:	680d      	ldr	r5, [r1, #0]
 8003b08:	b2ad      	uxth	r5, r5
 8003b0a:	4b56      	ldr	r3, [pc, #344]	; (8003c64 <_printf_i+0x21c>)
 8003b0c:	2708      	movs	r7, #8
 8003b0e:	9303      	str	r3, [sp, #12]
 8003b10:	2a6f      	cmp	r2, #111	; 0x6f
 8003b12:	d000      	beq.n	8003b16 <_printf_i+0xce>
 8003b14:	3702      	adds	r7, #2
 8003b16:	0023      	movs	r3, r4
 8003b18:	2200      	movs	r2, #0
 8003b1a:	3343      	adds	r3, #67	; 0x43
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	6863      	ldr	r3, [r4, #4]
 8003b20:	60a3      	str	r3, [r4, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	db03      	blt.n	8003b2e <_printf_i+0xe6>
 8003b26:	2204      	movs	r2, #4
 8003b28:	6821      	ldr	r1, [r4, #0]
 8003b2a:	4391      	bics	r1, r2
 8003b2c:	6021      	str	r1, [r4, #0]
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	d102      	bne.n	8003b38 <_printf_i+0xf0>
 8003b32:	9e04      	ldr	r6, [sp, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <_printf_i+0x10a>
 8003b38:	9e04      	ldr	r6, [sp, #16]
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	0039      	movs	r1, r7
 8003b3e:	f7fc fb73 	bl	8000228 <__aeabi_uidivmod>
 8003b42:	9b03      	ldr	r3, [sp, #12]
 8003b44:	3e01      	subs	r6, #1
 8003b46:	5c5b      	ldrb	r3, [r3, r1]
 8003b48:	7033      	strb	r3, [r6, #0]
 8003b4a:	002b      	movs	r3, r5
 8003b4c:	0005      	movs	r5, r0
 8003b4e:	429f      	cmp	r7, r3
 8003b50:	d9f3      	bls.n	8003b3a <_printf_i+0xf2>
 8003b52:	2f08      	cmp	r7, #8
 8003b54:	d109      	bne.n	8003b6a <_printf_i+0x122>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	07db      	lsls	r3, r3, #31
 8003b5a:	d506      	bpl.n	8003b6a <_printf_i+0x122>
 8003b5c:	6863      	ldr	r3, [r4, #4]
 8003b5e:	6922      	ldr	r2, [r4, #16]
 8003b60:	4293      	cmp	r3, r2
 8003b62:	dc02      	bgt.n	8003b6a <_printf_i+0x122>
 8003b64:	2330      	movs	r3, #48	; 0x30
 8003b66:	3e01      	subs	r6, #1
 8003b68:	7033      	strb	r3, [r6, #0]
 8003b6a:	9b04      	ldr	r3, [sp, #16]
 8003b6c:	1b9b      	subs	r3, r3, r6
 8003b6e:	6123      	str	r3, [r4, #16]
 8003b70:	9b07      	ldr	r3, [sp, #28]
 8003b72:	0021      	movs	r1, r4
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	9805      	ldr	r0, [sp, #20]
 8003b78:	9b06      	ldr	r3, [sp, #24]
 8003b7a:	aa09      	add	r2, sp, #36	; 0x24
 8003b7c:	f7ff fef4 	bl	8003968 <_printf_common>
 8003b80:	1c43      	adds	r3, r0, #1
 8003b82:	d14c      	bne.n	8003c1e <_printf_i+0x1d6>
 8003b84:	2001      	movs	r0, #1
 8003b86:	4240      	negs	r0, r0
 8003b88:	b00b      	add	sp, #44	; 0x2c
 8003b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8c:	3145      	adds	r1, #69	; 0x45
 8003b8e:	700a      	strb	r2, [r1, #0]
 8003b90:	4a34      	ldr	r2, [pc, #208]	; (8003c64 <_printf_i+0x21c>)
 8003b92:	9203      	str	r2, [sp, #12]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	ca20      	ldmia	r2!, {r5}
 8003b9a:	601a      	str	r2, [r3, #0]
 8003b9c:	0608      	lsls	r0, r1, #24
 8003b9e:	d516      	bpl.n	8003bce <_printf_i+0x186>
 8003ba0:	07cb      	lsls	r3, r1, #31
 8003ba2:	d502      	bpl.n	8003baa <_printf_i+0x162>
 8003ba4:	2320      	movs	r3, #32
 8003ba6:	4319      	orrs	r1, r3
 8003ba8:	6021      	str	r1, [r4, #0]
 8003baa:	2710      	movs	r7, #16
 8003bac:	2d00      	cmp	r5, #0
 8003bae:	d1b2      	bne.n	8003b16 <_printf_i+0xce>
 8003bb0:	2320      	movs	r3, #32
 8003bb2:	6822      	ldr	r2, [r4, #0]
 8003bb4:	439a      	bics	r2, r3
 8003bb6:	6022      	str	r2, [r4, #0]
 8003bb8:	e7ad      	b.n	8003b16 <_printf_i+0xce>
 8003bba:	2220      	movs	r2, #32
 8003bbc:	6809      	ldr	r1, [r1, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	6022      	str	r2, [r4, #0]
 8003bc2:	0022      	movs	r2, r4
 8003bc4:	2178      	movs	r1, #120	; 0x78
 8003bc6:	3245      	adds	r2, #69	; 0x45
 8003bc8:	7011      	strb	r1, [r2, #0]
 8003bca:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <_printf_i+0x220>)
 8003bcc:	e7e1      	b.n	8003b92 <_printf_i+0x14a>
 8003bce:	0648      	lsls	r0, r1, #25
 8003bd0:	d5e6      	bpl.n	8003ba0 <_printf_i+0x158>
 8003bd2:	b2ad      	uxth	r5, r5
 8003bd4:	e7e4      	b.n	8003ba0 <_printf_i+0x158>
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	680d      	ldr	r5, [r1, #0]
 8003bda:	1d10      	adds	r0, r2, #4
 8003bdc:	6949      	ldr	r1, [r1, #20]
 8003bde:	6018      	str	r0, [r3, #0]
 8003be0:	6813      	ldr	r3, [r2, #0]
 8003be2:	062e      	lsls	r6, r5, #24
 8003be4:	d501      	bpl.n	8003bea <_printf_i+0x1a2>
 8003be6:	6019      	str	r1, [r3, #0]
 8003be8:	e002      	b.n	8003bf0 <_printf_i+0x1a8>
 8003bea:	066d      	lsls	r5, r5, #25
 8003bec:	d5fb      	bpl.n	8003be6 <_printf_i+0x19e>
 8003bee:	8019      	strh	r1, [r3, #0]
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9e04      	ldr	r6, [sp, #16]
 8003bf4:	6123      	str	r3, [r4, #16]
 8003bf6:	e7bb      	b.n	8003b70 <_printf_i+0x128>
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	1d11      	adds	r1, r2, #4
 8003bfc:	6019      	str	r1, [r3, #0]
 8003bfe:	6816      	ldr	r6, [r2, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	0030      	movs	r0, r6
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	f000 fb45 	bl	8004294 <memchr>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	d001      	beq.n	8003c12 <_printf_i+0x1ca>
 8003c0e:	1b80      	subs	r0, r0, r6
 8003c10:	6060      	str	r0, [r4, #4]
 8003c12:	6863      	ldr	r3, [r4, #4]
 8003c14:	6123      	str	r3, [r4, #16]
 8003c16:	2300      	movs	r3, #0
 8003c18:	9a04      	ldr	r2, [sp, #16]
 8003c1a:	7013      	strb	r3, [r2, #0]
 8003c1c:	e7a8      	b.n	8003b70 <_printf_i+0x128>
 8003c1e:	6923      	ldr	r3, [r4, #16]
 8003c20:	0032      	movs	r2, r6
 8003c22:	9906      	ldr	r1, [sp, #24]
 8003c24:	9805      	ldr	r0, [sp, #20]
 8003c26:	9d07      	ldr	r5, [sp, #28]
 8003c28:	47a8      	blx	r5
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	d0aa      	beq.n	8003b84 <_printf_i+0x13c>
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	079b      	lsls	r3, r3, #30
 8003c32:	d415      	bmi.n	8003c60 <_printf_i+0x218>
 8003c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c36:	68e0      	ldr	r0, [r4, #12]
 8003c38:	4298      	cmp	r0, r3
 8003c3a:	daa5      	bge.n	8003b88 <_printf_i+0x140>
 8003c3c:	0018      	movs	r0, r3
 8003c3e:	e7a3      	b.n	8003b88 <_printf_i+0x140>
 8003c40:	0022      	movs	r2, r4
 8003c42:	2301      	movs	r3, #1
 8003c44:	9906      	ldr	r1, [sp, #24]
 8003c46:	9805      	ldr	r0, [sp, #20]
 8003c48:	9e07      	ldr	r6, [sp, #28]
 8003c4a:	3219      	adds	r2, #25
 8003c4c:	47b0      	blx	r6
 8003c4e:	1c43      	adds	r3, r0, #1
 8003c50:	d098      	beq.n	8003b84 <_printf_i+0x13c>
 8003c52:	3501      	adds	r5, #1
 8003c54:	68e3      	ldr	r3, [r4, #12]
 8003c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	42ab      	cmp	r3, r5
 8003c5c:	dcf0      	bgt.n	8003c40 <_printf_i+0x1f8>
 8003c5e:	e7e9      	b.n	8003c34 <_printf_i+0x1ec>
 8003c60:	2500      	movs	r5, #0
 8003c62:	e7f7      	b.n	8003c54 <_printf_i+0x20c>
 8003c64:	08004969 	.word	0x08004969
 8003c68:	0800497a 	.word	0x0800497a

08003c6c <__swbuf_r>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	0005      	movs	r5, r0
 8003c70:	000e      	movs	r6, r1
 8003c72:	0014      	movs	r4, r2
 8003c74:	2800      	cmp	r0, #0
 8003c76:	d004      	beq.n	8003c82 <__swbuf_r+0x16>
 8003c78:	6983      	ldr	r3, [r0, #24]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <__swbuf_r+0x16>
 8003c7e:	f000 f9f9 	bl	8004074 <__sinit>
 8003c82:	4b22      	ldr	r3, [pc, #136]	; (8003d0c <__swbuf_r+0xa0>)
 8003c84:	429c      	cmp	r4, r3
 8003c86:	d12e      	bne.n	8003ce6 <__swbuf_r+0x7a>
 8003c88:	686c      	ldr	r4, [r5, #4]
 8003c8a:	69a3      	ldr	r3, [r4, #24]
 8003c8c:	60a3      	str	r3, [r4, #8]
 8003c8e:	89a3      	ldrh	r3, [r4, #12]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	d532      	bpl.n	8003cfa <__swbuf_r+0x8e>
 8003c94:	6923      	ldr	r3, [r4, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02f      	beq.n	8003cfa <__swbuf_r+0x8e>
 8003c9a:	6823      	ldr	r3, [r4, #0]
 8003c9c:	6922      	ldr	r2, [r4, #16]
 8003c9e:	b2f7      	uxtb	r7, r6
 8003ca0:	1a98      	subs	r0, r3, r2
 8003ca2:	6963      	ldr	r3, [r4, #20]
 8003ca4:	b2f6      	uxtb	r6, r6
 8003ca6:	4283      	cmp	r3, r0
 8003ca8:	dc05      	bgt.n	8003cb6 <__swbuf_r+0x4a>
 8003caa:	0021      	movs	r1, r4
 8003cac:	0028      	movs	r0, r5
 8003cae:	f000 f93f 	bl	8003f30 <_fflush_r>
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d127      	bne.n	8003d06 <__swbuf_r+0x9a>
 8003cb6:	68a3      	ldr	r3, [r4, #8]
 8003cb8:	3001      	adds	r0, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	60a3      	str	r3, [r4, #8]
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	6022      	str	r2, [r4, #0]
 8003cc4:	701f      	strb	r7, [r3, #0]
 8003cc6:	6963      	ldr	r3, [r4, #20]
 8003cc8:	4283      	cmp	r3, r0
 8003cca:	d004      	beq.n	8003cd6 <__swbuf_r+0x6a>
 8003ccc:	89a3      	ldrh	r3, [r4, #12]
 8003cce:	07db      	lsls	r3, r3, #31
 8003cd0:	d507      	bpl.n	8003ce2 <__swbuf_r+0x76>
 8003cd2:	2e0a      	cmp	r6, #10
 8003cd4:	d105      	bne.n	8003ce2 <__swbuf_r+0x76>
 8003cd6:	0021      	movs	r1, r4
 8003cd8:	0028      	movs	r0, r5
 8003cda:	f000 f929 	bl	8003f30 <_fflush_r>
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d111      	bne.n	8003d06 <__swbuf_r+0x9a>
 8003ce2:	0030      	movs	r0, r6
 8003ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ce6:	4b0a      	ldr	r3, [pc, #40]	; (8003d10 <__swbuf_r+0xa4>)
 8003ce8:	429c      	cmp	r4, r3
 8003cea:	d101      	bne.n	8003cf0 <__swbuf_r+0x84>
 8003cec:	68ac      	ldr	r4, [r5, #8]
 8003cee:	e7cc      	b.n	8003c8a <__swbuf_r+0x1e>
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <__swbuf_r+0xa8>)
 8003cf2:	429c      	cmp	r4, r3
 8003cf4:	d1c9      	bne.n	8003c8a <__swbuf_r+0x1e>
 8003cf6:	68ec      	ldr	r4, [r5, #12]
 8003cf8:	e7c7      	b.n	8003c8a <__swbuf_r+0x1e>
 8003cfa:	0021      	movs	r1, r4
 8003cfc:	0028      	movs	r0, r5
 8003cfe:	f000 f80b 	bl	8003d18 <__swsetup_r>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d0c9      	beq.n	8003c9a <__swbuf_r+0x2e>
 8003d06:	2601      	movs	r6, #1
 8003d08:	4276      	negs	r6, r6
 8003d0a:	e7ea      	b.n	8003ce2 <__swbuf_r+0x76>
 8003d0c:	080049ac 	.word	0x080049ac
 8003d10:	080049cc 	.word	0x080049cc
 8003d14:	0800498c 	.word	0x0800498c

08003d18 <__swsetup_r>:
 8003d18:	4b37      	ldr	r3, [pc, #220]	; (8003df8 <__swsetup_r+0xe0>)
 8003d1a:	b570      	push	{r4, r5, r6, lr}
 8003d1c:	681d      	ldr	r5, [r3, #0]
 8003d1e:	0006      	movs	r6, r0
 8003d20:	000c      	movs	r4, r1
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	d005      	beq.n	8003d32 <__swsetup_r+0x1a>
 8003d26:	69ab      	ldr	r3, [r5, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <__swsetup_r+0x1a>
 8003d2c:	0028      	movs	r0, r5
 8003d2e:	f000 f9a1 	bl	8004074 <__sinit>
 8003d32:	4b32      	ldr	r3, [pc, #200]	; (8003dfc <__swsetup_r+0xe4>)
 8003d34:	429c      	cmp	r4, r3
 8003d36:	d10f      	bne.n	8003d58 <__swsetup_r+0x40>
 8003d38:	686c      	ldr	r4, [r5, #4]
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	5ee2      	ldrsh	r2, [r4, r3]
 8003d3e:	b293      	uxth	r3, r2
 8003d40:	0711      	lsls	r1, r2, #28
 8003d42:	d42d      	bmi.n	8003da0 <__swsetup_r+0x88>
 8003d44:	06d9      	lsls	r1, r3, #27
 8003d46:	d411      	bmi.n	8003d6c <__swsetup_r+0x54>
 8003d48:	2309      	movs	r3, #9
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	6033      	str	r3, [r6, #0]
 8003d4e:	3337      	adds	r3, #55	; 0x37
 8003d50:	4313      	orrs	r3, r2
 8003d52:	81a3      	strh	r3, [r4, #12]
 8003d54:	4240      	negs	r0, r0
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <__swsetup_r+0xe8>)
 8003d5a:	429c      	cmp	r4, r3
 8003d5c:	d101      	bne.n	8003d62 <__swsetup_r+0x4a>
 8003d5e:	68ac      	ldr	r4, [r5, #8]
 8003d60:	e7eb      	b.n	8003d3a <__swsetup_r+0x22>
 8003d62:	4b28      	ldr	r3, [pc, #160]	; (8003e04 <__swsetup_r+0xec>)
 8003d64:	429c      	cmp	r4, r3
 8003d66:	d1e8      	bne.n	8003d3a <__swsetup_r+0x22>
 8003d68:	68ec      	ldr	r4, [r5, #12]
 8003d6a:	e7e6      	b.n	8003d3a <__swsetup_r+0x22>
 8003d6c:	075b      	lsls	r3, r3, #29
 8003d6e:	d513      	bpl.n	8003d98 <__swsetup_r+0x80>
 8003d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003d72:	2900      	cmp	r1, #0
 8003d74:	d008      	beq.n	8003d88 <__swsetup_r+0x70>
 8003d76:	0023      	movs	r3, r4
 8003d78:	3344      	adds	r3, #68	; 0x44
 8003d7a:	4299      	cmp	r1, r3
 8003d7c:	d002      	beq.n	8003d84 <__swsetup_r+0x6c>
 8003d7e:	0030      	movs	r0, r6
 8003d80:	f000 fa94 	bl	80042ac <_free_r>
 8003d84:	2300      	movs	r3, #0
 8003d86:	6363      	str	r3, [r4, #52]	; 0x34
 8003d88:	2224      	movs	r2, #36	; 0x24
 8003d8a:	89a3      	ldrh	r3, [r4, #12]
 8003d8c:	4393      	bics	r3, r2
 8003d8e:	81a3      	strh	r3, [r4, #12]
 8003d90:	2300      	movs	r3, #0
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6923      	ldr	r3, [r4, #16]
 8003d96:	6023      	str	r3, [r4, #0]
 8003d98:	2308      	movs	r3, #8
 8003d9a:	89a2      	ldrh	r2, [r4, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10b      	bne.n	8003dbe <__swsetup_r+0xa6>
 8003da6:	21a0      	movs	r1, #160	; 0xa0
 8003da8:	2280      	movs	r2, #128	; 0x80
 8003daa:	89a3      	ldrh	r3, [r4, #12]
 8003dac:	0089      	lsls	r1, r1, #2
 8003dae:	0092      	lsls	r2, r2, #2
 8003db0:	400b      	ands	r3, r1
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d003      	beq.n	8003dbe <__swsetup_r+0xa6>
 8003db6:	0021      	movs	r1, r4
 8003db8:	0030      	movs	r0, r6
 8003dba:	f000 fa27 	bl	800420c <__smakebuf_r>
 8003dbe:	220c      	movs	r2, #12
 8003dc0:	5ea3      	ldrsh	r3, [r4, r2]
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	001a      	movs	r2, r3
 8003dc6:	b299      	uxth	r1, r3
 8003dc8:	4002      	ands	r2, r0
 8003dca:	4203      	tst	r3, r0
 8003dcc:	d00f      	beq.n	8003dee <__swsetup_r+0xd6>
 8003dce:	2200      	movs	r2, #0
 8003dd0:	60a2      	str	r2, [r4, #8]
 8003dd2:	6962      	ldr	r2, [r4, #20]
 8003dd4:	4252      	negs	r2, r2
 8003dd6:	61a2      	str	r2, [r4, #24]
 8003dd8:	2000      	movs	r0, #0
 8003dda:	6922      	ldr	r2, [r4, #16]
 8003ddc:	4282      	cmp	r2, r0
 8003dde:	d1ba      	bne.n	8003d56 <__swsetup_r+0x3e>
 8003de0:	060a      	lsls	r2, r1, #24
 8003de2:	d5b8      	bpl.n	8003d56 <__swsetup_r+0x3e>
 8003de4:	2240      	movs	r2, #64	; 0x40
 8003de6:	4313      	orrs	r3, r2
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	3801      	subs	r0, #1
 8003dec:	e7b3      	b.n	8003d56 <__swsetup_r+0x3e>
 8003dee:	0788      	lsls	r0, r1, #30
 8003df0:	d400      	bmi.n	8003df4 <__swsetup_r+0xdc>
 8003df2:	6962      	ldr	r2, [r4, #20]
 8003df4:	60a2      	str	r2, [r4, #8]
 8003df6:	e7ef      	b.n	8003dd8 <__swsetup_r+0xc0>
 8003df8:	200000c4 	.word	0x200000c4
 8003dfc:	080049ac 	.word	0x080049ac
 8003e00:	080049cc 	.word	0x080049cc
 8003e04:	0800498c 	.word	0x0800498c

08003e08 <abort>:
 8003e08:	2006      	movs	r0, #6
 8003e0a:	b510      	push	{r4, lr}
 8003e0c:	f000 fb6c 	bl	80044e8 <raise>
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fd f8da 	bl	8000fca <_exit>
	...

08003e18 <__sflush_r>:
 8003e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e1a:	898b      	ldrh	r3, [r1, #12]
 8003e1c:	0005      	movs	r5, r0
 8003e1e:	000c      	movs	r4, r1
 8003e20:	071a      	lsls	r2, r3, #28
 8003e22:	d45f      	bmi.n	8003ee4 <__sflush_r+0xcc>
 8003e24:	684a      	ldr	r2, [r1, #4]
 8003e26:	2a00      	cmp	r2, #0
 8003e28:	dc04      	bgt.n	8003e34 <__sflush_r+0x1c>
 8003e2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003e2c:	2a00      	cmp	r2, #0
 8003e2e:	dc01      	bgt.n	8003e34 <__sflush_r+0x1c>
 8003e30:	2000      	movs	r0, #0
 8003e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e36:	2f00      	cmp	r7, #0
 8003e38:	d0fa      	beq.n	8003e30 <__sflush_r+0x18>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2180      	movs	r1, #128	; 0x80
 8003e3e:	682e      	ldr	r6, [r5, #0]
 8003e40:	602a      	str	r2, [r5, #0]
 8003e42:	001a      	movs	r2, r3
 8003e44:	0149      	lsls	r1, r1, #5
 8003e46:	400a      	ands	r2, r1
 8003e48:	420b      	tst	r3, r1
 8003e4a:	d034      	beq.n	8003eb6 <__sflush_r+0x9e>
 8003e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003e4e:	89a3      	ldrh	r3, [r4, #12]
 8003e50:	075b      	lsls	r3, r3, #29
 8003e52:	d506      	bpl.n	8003e62 <__sflush_r+0x4a>
 8003e54:	6863      	ldr	r3, [r4, #4]
 8003e56:	1ac0      	subs	r0, r0, r3
 8003e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <__sflush_r+0x4a>
 8003e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003e60:	1ac0      	subs	r0, r0, r3
 8003e62:	0002      	movs	r2, r0
 8003e64:	6a21      	ldr	r1, [r4, #32]
 8003e66:	2300      	movs	r3, #0
 8003e68:	0028      	movs	r0, r5
 8003e6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e6c:	47b8      	blx	r7
 8003e6e:	89a1      	ldrh	r1, [r4, #12]
 8003e70:	1c43      	adds	r3, r0, #1
 8003e72:	d106      	bne.n	8003e82 <__sflush_r+0x6a>
 8003e74:	682b      	ldr	r3, [r5, #0]
 8003e76:	2b1d      	cmp	r3, #29
 8003e78:	d831      	bhi.n	8003ede <__sflush_r+0xc6>
 8003e7a:	4a2c      	ldr	r2, [pc, #176]	; (8003f2c <__sflush_r+0x114>)
 8003e7c:	40da      	lsrs	r2, r3
 8003e7e:	07d3      	lsls	r3, r2, #31
 8003e80:	d52d      	bpl.n	8003ede <__sflush_r+0xc6>
 8003e82:	2300      	movs	r3, #0
 8003e84:	6063      	str	r3, [r4, #4]
 8003e86:	6923      	ldr	r3, [r4, #16]
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	04cb      	lsls	r3, r1, #19
 8003e8c:	d505      	bpl.n	8003e9a <__sflush_r+0x82>
 8003e8e:	1c43      	adds	r3, r0, #1
 8003e90:	d102      	bne.n	8003e98 <__sflush_r+0x80>
 8003e92:	682b      	ldr	r3, [r5, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d100      	bne.n	8003e9a <__sflush_r+0x82>
 8003e98:	6560      	str	r0, [r4, #84]	; 0x54
 8003e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e9c:	602e      	str	r6, [r5, #0]
 8003e9e:	2900      	cmp	r1, #0
 8003ea0:	d0c6      	beq.n	8003e30 <__sflush_r+0x18>
 8003ea2:	0023      	movs	r3, r4
 8003ea4:	3344      	adds	r3, #68	; 0x44
 8003ea6:	4299      	cmp	r1, r3
 8003ea8:	d002      	beq.n	8003eb0 <__sflush_r+0x98>
 8003eaa:	0028      	movs	r0, r5
 8003eac:	f000 f9fe 	bl	80042ac <_free_r>
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	6360      	str	r0, [r4, #52]	; 0x34
 8003eb4:	e7bd      	b.n	8003e32 <__sflush_r+0x1a>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	0028      	movs	r0, r5
 8003eba:	6a21      	ldr	r1, [r4, #32]
 8003ebc:	47b8      	blx	r7
 8003ebe:	1c43      	adds	r3, r0, #1
 8003ec0:	d1c5      	bne.n	8003e4e <__sflush_r+0x36>
 8003ec2:	682b      	ldr	r3, [r5, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d0c2      	beq.n	8003e4e <__sflush_r+0x36>
 8003ec8:	2b1d      	cmp	r3, #29
 8003eca:	d001      	beq.n	8003ed0 <__sflush_r+0xb8>
 8003ecc:	2b16      	cmp	r3, #22
 8003ece:	d101      	bne.n	8003ed4 <__sflush_r+0xbc>
 8003ed0:	602e      	str	r6, [r5, #0]
 8003ed2:	e7ad      	b.n	8003e30 <__sflush_r+0x18>
 8003ed4:	2340      	movs	r3, #64	; 0x40
 8003ed6:	89a2      	ldrh	r2, [r4, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	81a3      	strh	r3, [r4, #12]
 8003edc:	e7a9      	b.n	8003e32 <__sflush_r+0x1a>
 8003ede:	2340      	movs	r3, #64	; 0x40
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	e7fa      	b.n	8003eda <__sflush_r+0xc2>
 8003ee4:	690f      	ldr	r7, [r1, #16]
 8003ee6:	2f00      	cmp	r7, #0
 8003ee8:	d0a2      	beq.n	8003e30 <__sflush_r+0x18>
 8003eea:	680a      	ldr	r2, [r1, #0]
 8003eec:	600f      	str	r7, [r1, #0]
 8003eee:	1bd2      	subs	r2, r2, r7
 8003ef0:	9201      	str	r2, [sp, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	079b      	lsls	r3, r3, #30
 8003ef6:	d100      	bne.n	8003efa <__sflush_r+0xe2>
 8003ef8:	694a      	ldr	r2, [r1, #20]
 8003efa:	60a2      	str	r2, [r4, #8]
 8003efc:	9b01      	ldr	r3, [sp, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	dc00      	bgt.n	8003f04 <__sflush_r+0xec>
 8003f02:	e795      	b.n	8003e30 <__sflush_r+0x18>
 8003f04:	003a      	movs	r2, r7
 8003f06:	0028      	movs	r0, r5
 8003f08:	9b01      	ldr	r3, [sp, #4]
 8003f0a:	6a21      	ldr	r1, [r4, #32]
 8003f0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f0e:	47b0      	blx	r6
 8003f10:	2800      	cmp	r0, #0
 8003f12:	dc06      	bgt.n	8003f22 <__sflush_r+0x10a>
 8003f14:	2340      	movs	r3, #64	; 0x40
 8003f16:	2001      	movs	r0, #1
 8003f18:	89a2      	ldrh	r2, [r4, #12]
 8003f1a:	4240      	negs	r0, r0
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	81a3      	strh	r3, [r4, #12]
 8003f20:	e787      	b.n	8003e32 <__sflush_r+0x1a>
 8003f22:	9b01      	ldr	r3, [sp, #4]
 8003f24:	183f      	adds	r7, r7, r0
 8003f26:	1a1b      	subs	r3, r3, r0
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	e7e7      	b.n	8003efc <__sflush_r+0xe4>
 8003f2c:	20400001 	.word	0x20400001

08003f30 <_fflush_r>:
 8003f30:	690b      	ldr	r3, [r1, #16]
 8003f32:	b570      	push	{r4, r5, r6, lr}
 8003f34:	0005      	movs	r5, r0
 8003f36:	000c      	movs	r4, r1
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d102      	bne.n	8003f42 <_fflush_r+0x12>
 8003f3c:	2500      	movs	r5, #0
 8003f3e:	0028      	movs	r0, r5
 8003f40:	bd70      	pop	{r4, r5, r6, pc}
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d004      	beq.n	8003f50 <_fflush_r+0x20>
 8003f46:	6983      	ldr	r3, [r0, #24]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <_fflush_r+0x20>
 8003f4c:	f000 f892 	bl	8004074 <__sinit>
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <_fflush_r+0x74>)
 8003f52:	429c      	cmp	r4, r3
 8003f54:	d11b      	bne.n	8003f8e <_fflush_r+0x5e>
 8003f56:	686c      	ldr	r4, [r5, #4]
 8003f58:	220c      	movs	r2, #12
 8003f5a:	5ea3      	ldrsh	r3, [r4, r2]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ed      	beq.n	8003f3c <_fflush_r+0xc>
 8003f60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f62:	07d2      	lsls	r2, r2, #31
 8003f64:	d404      	bmi.n	8003f70 <_fflush_r+0x40>
 8003f66:	059b      	lsls	r3, r3, #22
 8003f68:	d402      	bmi.n	8003f70 <_fflush_r+0x40>
 8003f6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f6c:	f000 f923 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8003f70:	0028      	movs	r0, r5
 8003f72:	0021      	movs	r1, r4
 8003f74:	f7ff ff50 	bl	8003e18 <__sflush_r>
 8003f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003f7a:	0005      	movs	r5, r0
 8003f7c:	07db      	lsls	r3, r3, #31
 8003f7e:	d4de      	bmi.n	8003f3e <_fflush_r+0xe>
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	059b      	lsls	r3, r3, #22
 8003f84:	d4db      	bmi.n	8003f3e <_fflush_r+0xe>
 8003f86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003f88:	f000 f916 	bl	80041b8 <__retarget_lock_release_recursive>
 8003f8c:	e7d7      	b.n	8003f3e <_fflush_r+0xe>
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <_fflush_r+0x78>)
 8003f90:	429c      	cmp	r4, r3
 8003f92:	d101      	bne.n	8003f98 <_fflush_r+0x68>
 8003f94:	68ac      	ldr	r4, [r5, #8]
 8003f96:	e7df      	b.n	8003f58 <_fflush_r+0x28>
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <_fflush_r+0x7c>)
 8003f9a:	429c      	cmp	r4, r3
 8003f9c:	d1dc      	bne.n	8003f58 <_fflush_r+0x28>
 8003f9e:	68ec      	ldr	r4, [r5, #12]
 8003fa0:	e7da      	b.n	8003f58 <_fflush_r+0x28>
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	080049ac 	.word	0x080049ac
 8003fa8:	080049cc 	.word	0x080049cc
 8003fac:	0800498c 	.word	0x0800498c

08003fb0 <std>:
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	0004      	movs	r4, r0
 8003fb6:	6003      	str	r3, [r0, #0]
 8003fb8:	6043      	str	r3, [r0, #4]
 8003fba:	6083      	str	r3, [r0, #8]
 8003fbc:	8181      	strh	r1, [r0, #12]
 8003fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	81c2      	strh	r2, [r0, #14]
 8003fc4:	6103      	str	r3, [r0, #16]
 8003fc6:	6143      	str	r3, [r0, #20]
 8003fc8:	6183      	str	r3, [r0, #24]
 8003fca:	2208      	movs	r2, #8
 8003fcc:	305c      	adds	r0, #92	; 0x5c
 8003fce:	f7ff fb61 	bl	8003694 <memset>
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <std+0x38>)
 8003fd4:	6224      	str	r4, [r4, #32]
 8003fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8003fd8:	4b04      	ldr	r3, [pc, #16]	; (8003fec <std+0x3c>)
 8003fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <std+0x40>)
 8003fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <std+0x44>)
 8003fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fe4:	bd10      	pop	{r4, pc}
 8003fe6:	46c0      	nop			; (mov r8, r8)
 8003fe8:	08004529 	.word	0x08004529
 8003fec:	08004551 	.word	0x08004551
 8003ff0:	08004589 	.word	0x08004589
 8003ff4:	080045b5 	.word	0x080045b5

08003ff8 <_cleanup_r>:
 8003ff8:	b510      	push	{r4, lr}
 8003ffa:	4902      	ldr	r1, [pc, #8]	; (8004004 <_cleanup_r+0xc>)
 8003ffc:	f000 f8ba 	bl	8004174 <_fwalk_reent>
 8004000:	bd10      	pop	{r4, pc}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	08003f31 	.word	0x08003f31

08004008 <__sfmoreglue>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	2568      	movs	r5, #104	; 0x68
 800400c:	1e4a      	subs	r2, r1, #1
 800400e:	4355      	muls	r5, r2
 8004010:	000e      	movs	r6, r1
 8004012:	0029      	movs	r1, r5
 8004014:	3174      	adds	r1, #116	; 0x74
 8004016:	f000 f9b5 	bl	8004384 <_malloc_r>
 800401a:	1e04      	subs	r4, r0, #0
 800401c:	d008      	beq.n	8004030 <__sfmoreglue+0x28>
 800401e:	2100      	movs	r1, #0
 8004020:	002a      	movs	r2, r5
 8004022:	6001      	str	r1, [r0, #0]
 8004024:	6046      	str	r6, [r0, #4]
 8004026:	300c      	adds	r0, #12
 8004028:	60a0      	str	r0, [r4, #8]
 800402a:	3268      	adds	r2, #104	; 0x68
 800402c:	f7ff fb32 	bl	8003694 <memset>
 8004030:	0020      	movs	r0, r4
 8004032:	bd70      	pop	{r4, r5, r6, pc}

08004034 <__sfp_lock_acquire>:
 8004034:	b510      	push	{r4, lr}
 8004036:	4802      	ldr	r0, [pc, #8]	; (8004040 <__sfp_lock_acquire+0xc>)
 8004038:	f000 f8bd 	bl	80041b6 <__retarget_lock_acquire_recursive>
 800403c:	bd10      	pop	{r4, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	20000239 	.word	0x20000239

08004044 <__sfp_lock_release>:
 8004044:	b510      	push	{r4, lr}
 8004046:	4802      	ldr	r0, [pc, #8]	; (8004050 <__sfp_lock_release+0xc>)
 8004048:	f000 f8b6 	bl	80041b8 <__retarget_lock_release_recursive>
 800404c:	bd10      	pop	{r4, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	20000239 	.word	0x20000239

08004054 <__sinit_lock_acquire>:
 8004054:	b510      	push	{r4, lr}
 8004056:	4802      	ldr	r0, [pc, #8]	; (8004060 <__sinit_lock_acquire+0xc>)
 8004058:	f000 f8ad 	bl	80041b6 <__retarget_lock_acquire_recursive>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	2000023a 	.word	0x2000023a

08004064 <__sinit_lock_release>:
 8004064:	b510      	push	{r4, lr}
 8004066:	4802      	ldr	r0, [pc, #8]	; (8004070 <__sinit_lock_release+0xc>)
 8004068:	f000 f8a6 	bl	80041b8 <__retarget_lock_release_recursive>
 800406c:	bd10      	pop	{r4, pc}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	2000023a 	.word	0x2000023a

08004074 <__sinit>:
 8004074:	b513      	push	{r0, r1, r4, lr}
 8004076:	0004      	movs	r4, r0
 8004078:	f7ff ffec 	bl	8004054 <__sinit_lock_acquire>
 800407c:	69a3      	ldr	r3, [r4, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d002      	beq.n	8004088 <__sinit+0x14>
 8004082:	f7ff ffef 	bl	8004064 <__sinit_lock_release>
 8004086:	bd13      	pop	{r0, r1, r4, pc}
 8004088:	64a3      	str	r3, [r4, #72]	; 0x48
 800408a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800408c:	6523      	str	r3, [r4, #80]	; 0x50
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <__sinit+0x68>)
 8004090:	4a13      	ldr	r2, [pc, #76]	; (80040e0 <__sinit+0x6c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62a2      	str	r2, [r4, #40]	; 0x28
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	42a3      	cmp	r3, r4
 800409a:	d101      	bne.n	80040a0 <__sinit+0x2c>
 800409c:	2301      	movs	r3, #1
 800409e:	61a3      	str	r3, [r4, #24]
 80040a0:	0020      	movs	r0, r4
 80040a2:	f000 f81f 	bl	80040e4 <__sfp>
 80040a6:	6060      	str	r0, [r4, #4]
 80040a8:	0020      	movs	r0, r4
 80040aa:	f000 f81b 	bl	80040e4 <__sfp>
 80040ae:	60a0      	str	r0, [r4, #8]
 80040b0:	0020      	movs	r0, r4
 80040b2:	f000 f817 	bl	80040e4 <__sfp>
 80040b6:	2200      	movs	r2, #0
 80040b8:	2104      	movs	r1, #4
 80040ba:	60e0      	str	r0, [r4, #12]
 80040bc:	6860      	ldr	r0, [r4, #4]
 80040be:	f7ff ff77 	bl	8003fb0 <std>
 80040c2:	2201      	movs	r2, #1
 80040c4:	2109      	movs	r1, #9
 80040c6:	68a0      	ldr	r0, [r4, #8]
 80040c8:	f7ff ff72 	bl	8003fb0 <std>
 80040cc:	2202      	movs	r2, #2
 80040ce:	2112      	movs	r1, #18
 80040d0:	68e0      	ldr	r0, [r4, #12]
 80040d2:	f7ff ff6d 	bl	8003fb0 <std>
 80040d6:	2301      	movs	r3, #1
 80040d8:	61a3      	str	r3, [r4, #24]
 80040da:	e7d2      	b.n	8004082 <__sinit+0xe>
 80040dc:	08004954 	.word	0x08004954
 80040e0:	08003ff9 	.word	0x08003ff9

080040e4 <__sfp>:
 80040e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040e6:	0007      	movs	r7, r0
 80040e8:	f7ff ffa4 	bl	8004034 <__sfp_lock_acquire>
 80040ec:	4b1f      	ldr	r3, [pc, #124]	; (800416c <__sfp+0x88>)
 80040ee:	681e      	ldr	r6, [r3, #0]
 80040f0:	69b3      	ldr	r3, [r6, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d102      	bne.n	80040fc <__sfp+0x18>
 80040f6:	0030      	movs	r0, r6
 80040f8:	f7ff ffbc 	bl	8004074 <__sinit>
 80040fc:	3648      	adds	r6, #72	; 0x48
 80040fe:	68b4      	ldr	r4, [r6, #8]
 8004100:	6873      	ldr	r3, [r6, #4]
 8004102:	3b01      	subs	r3, #1
 8004104:	d504      	bpl.n	8004110 <__sfp+0x2c>
 8004106:	6833      	ldr	r3, [r6, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d022      	beq.n	8004152 <__sfp+0x6e>
 800410c:	6836      	ldr	r6, [r6, #0]
 800410e:	e7f6      	b.n	80040fe <__sfp+0x1a>
 8004110:	220c      	movs	r2, #12
 8004112:	5ea5      	ldrsh	r5, [r4, r2]
 8004114:	2d00      	cmp	r5, #0
 8004116:	d11a      	bne.n	800414e <__sfp+0x6a>
 8004118:	0020      	movs	r0, r4
 800411a:	4b15      	ldr	r3, [pc, #84]	; (8004170 <__sfp+0x8c>)
 800411c:	3058      	adds	r0, #88	; 0x58
 800411e:	60e3      	str	r3, [r4, #12]
 8004120:	6665      	str	r5, [r4, #100]	; 0x64
 8004122:	f000 f847 	bl	80041b4 <__retarget_lock_init_recursive>
 8004126:	f7ff ff8d 	bl	8004044 <__sfp_lock_release>
 800412a:	0020      	movs	r0, r4
 800412c:	2208      	movs	r2, #8
 800412e:	0029      	movs	r1, r5
 8004130:	6025      	str	r5, [r4, #0]
 8004132:	60a5      	str	r5, [r4, #8]
 8004134:	6065      	str	r5, [r4, #4]
 8004136:	6125      	str	r5, [r4, #16]
 8004138:	6165      	str	r5, [r4, #20]
 800413a:	61a5      	str	r5, [r4, #24]
 800413c:	305c      	adds	r0, #92	; 0x5c
 800413e:	f7ff faa9 	bl	8003694 <memset>
 8004142:	6365      	str	r5, [r4, #52]	; 0x34
 8004144:	63a5      	str	r5, [r4, #56]	; 0x38
 8004146:	64a5      	str	r5, [r4, #72]	; 0x48
 8004148:	64e5      	str	r5, [r4, #76]	; 0x4c
 800414a:	0020      	movs	r0, r4
 800414c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800414e:	3468      	adds	r4, #104	; 0x68
 8004150:	e7d7      	b.n	8004102 <__sfp+0x1e>
 8004152:	2104      	movs	r1, #4
 8004154:	0038      	movs	r0, r7
 8004156:	f7ff ff57 	bl	8004008 <__sfmoreglue>
 800415a:	1e04      	subs	r4, r0, #0
 800415c:	6030      	str	r0, [r6, #0]
 800415e:	d1d5      	bne.n	800410c <__sfp+0x28>
 8004160:	f7ff ff70 	bl	8004044 <__sfp_lock_release>
 8004164:	230c      	movs	r3, #12
 8004166:	603b      	str	r3, [r7, #0]
 8004168:	e7ef      	b.n	800414a <__sfp+0x66>
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	08004954 	.word	0x08004954
 8004170:	ffff0001 	.word	0xffff0001

08004174 <_fwalk_reent>:
 8004174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004176:	0004      	movs	r4, r0
 8004178:	0006      	movs	r6, r0
 800417a:	2700      	movs	r7, #0
 800417c:	9101      	str	r1, [sp, #4]
 800417e:	3448      	adds	r4, #72	; 0x48
 8004180:	6863      	ldr	r3, [r4, #4]
 8004182:	68a5      	ldr	r5, [r4, #8]
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	9b00      	ldr	r3, [sp, #0]
 8004188:	3b01      	subs	r3, #1
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	d504      	bpl.n	8004198 <_fwalk_reent+0x24>
 800418e:	6824      	ldr	r4, [r4, #0]
 8004190:	2c00      	cmp	r4, #0
 8004192:	d1f5      	bne.n	8004180 <_fwalk_reent+0xc>
 8004194:	0038      	movs	r0, r7
 8004196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004198:	89ab      	ldrh	r3, [r5, #12]
 800419a:	2b01      	cmp	r3, #1
 800419c:	d908      	bls.n	80041b0 <_fwalk_reent+0x3c>
 800419e:	220e      	movs	r2, #14
 80041a0:	5eab      	ldrsh	r3, [r5, r2]
 80041a2:	3301      	adds	r3, #1
 80041a4:	d004      	beq.n	80041b0 <_fwalk_reent+0x3c>
 80041a6:	0029      	movs	r1, r5
 80041a8:	0030      	movs	r0, r6
 80041aa:	9b01      	ldr	r3, [sp, #4]
 80041ac:	4798      	blx	r3
 80041ae:	4307      	orrs	r7, r0
 80041b0:	3568      	adds	r5, #104	; 0x68
 80041b2:	e7e8      	b.n	8004186 <_fwalk_reent+0x12>

080041b4 <__retarget_lock_init_recursive>:
 80041b4:	4770      	bx	lr

080041b6 <__retarget_lock_acquire_recursive>:
 80041b6:	4770      	bx	lr

080041b8 <__retarget_lock_release_recursive>:
 80041b8:	4770      	bx	lr
	...

080041bc <__swhatbuf_r>:
 80041bc:	b570      	push	{r4, r5, r6, lr}
 80041be:	000e      	movs	r6, r1
 80041c0:	001d      	movs	r5, r3
 80041c2:	230e      	movs	r3, #14
 80041c4:	5ec9      	ldrsh	r1, [r1, r3]
 80041c6:	0014      	movs	r4, r2
 80041c8:	b096      	sub	sp, #88	; 0x58
 80041ca:	2900      	cmp	r1, #0
 80041cc:	da08      	bge.n	80041e0 <__swhatbuf_r+0x24>
 80041ce:	220c      	movs	r2, #12
 80041d0:	5eb3      	ldrsh	r3, [r6, r2]
 80041d2:	2200      	movs	r2, #0
 80041d4:	602a      	str	r2, [r5, #0]
 80041d6:	061b      	lsls	r3, r3, #24
 80041d8:	d411      	bmi.n	80041fe <__swhatbuf_r+0x42>
 80041da:	2380      	movs	r3, #128	; 0x80
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	e00f      	b.n	8004200 <__swhatbuf_r+0x44>
 80041e0:	466a      	mov	r2, sp
 80041e2:	f000 fa13 	bl	800460c <_fstat_r>
 80041e6:	2800      	cmp	r0, #0
 80041e8:	dbf1      	blt.n	80041ce <__swhatbuf_r+0x12>
 80041ea:	23f0      	movs	r3, #240	; 0xf0
 80041ec:	9901      	ldr	r1, [sp, #4]
 80041ee:	021b      	lsls	r3, r3, #8
 80041f0:	4019      	ands	r1, r3
 80041f2:	4b05      	ldr	r3, [pc, #20]	; (8004208 <__swhatbuf_r+0x4c>)
 80041f4:	18c9      	adds	r1, r1, r3
 80041f6:	424b      	negs	r3, r1
 80041f8:	4159      	adcs	r1, r3
 80041fa:	6029      	str	r1, [r5, #0]
 80041fc:	e7ed      	b.n	80041da <__swhatbuf_r+0x1e>
 80041fe:	2340      	movs	r3, #64	; 0x40
 8004200:	2000      	movs	r0, #0
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	b016      	add	sp, #88	; 0x58
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	ffffe000 	.word	0xffffe000

0800420c <__smakebuf_r>:
 800420c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800420e:	2602      	movs	r6, #2
 8004210:	898b      	ldrh	r3, [r1, #12]
 8004212:	0005      	movs	r5, r0
 8004214:	000c      	movs	r4, r1
 8004216:	4233      	tst	r3, r6
 8004218:	d006      	beq.n	8004228 <__smakebuf_r+0x1c>
 800421a:	0023      	movs	r3, r4
 800421c:	3347      	adds	r3, #71	; 0x47
 800421e:	6023      	str	r3, [r4, #0]
 8004220:	6123      	str	r3, [r4, #16]
 8004222:	2301      	movs	r3, #1
 8004224:	6163      	str	r3, [r4, #20]
 8004226:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004228:	466a      	mov	r2, sp
 800422a:	ab01      	add	r3, sp, #4
 800422c:	f7ff ffc6 	bl	80041bc <__swhatbuf_r>
 8004230:	9900      	ldr	r1, [sp, #0]
 8004232:	0007      	movs	r7, r0
 8004234:	0028      	movs	r0, r5
 8004236:	f000 f8a5 	bl	8004384 <_malloc_r>
 800423a:	2800      	cmp	r0, #0
 800423c:	d108      	bne.n	8004250 <__smakebuf_r+0x44>
 800423e:	220c      	movs	r2, #12
 8004240:	5ea3      	ldrsh	r3, [r4, r2]
 8004242:	059a      	lsls	r2, r3, #22
 8004244:	d4ef      	bmi.n	8004226 <__smakebuf_r+0x1a>
 8004246:	2203      	movs	r2, #3
 8004248:	4393      	bics	r3, r2
 800424a:	431e      	orrs	r6, r3
 800424c:	81a6      	strh	r6, [r4, #12]
 800424e:	e7e4      	b.n	800421a <__smakebuf_r+0xe>
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <__smakebuf_r+0x84>)
 8004252:	62ab      	str	r3, [r5, #40]	; 0x28
 8004254:	2380      	movs	r3, #128	; 0x80
 8004256:	89a2      	ldrh	r2, [r4, #12]
 8004258:	6020      	str	r0, [r4, #0]
 800425a:	4313      	orrs	r3, r2
 800425c:	81a3      	strh	r3, [r4, #12]
 800425e:	9b00      	ldr	r3, [sp, #0]
 8004260:	6120      	str	r0, [r4, #16]
 8004262:	6163      	str	r3, [r4, #20]
 8004264:	9b01      	ldr	r3, [sp, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00d      	beq.n	8004286 <__smakebuf_r+0x7a>
 800426a:	0028      	movs	r0, r5
 800426c:	230e      	movs	r3, #14
 800426e:	5ee1      	ldrsh	r1, [r4, r3]
 8004270:	f000 f9de 	bl	8004630 <_isatty_r>
 8004274:	2800      	cmp	r0, #0
 8004276:	d006      	beq.n	8004286 <__smakebuf_r+0x7a>
 8004278:	2203      	movs	r2, #3
 800427a:	89a3      	ldrh	r3, [r4, #12]
 800427c:	4393      	bics	r3, r2
 800427e:	001a      	movs	r2, r3
 8004280:	2301      	movs	r3, #1
 8004282:	4313      	orrs	r3, r2
 8004284:	81a3      	strh	r3, [r4, #12]
 8004286:	89a0      	ldrh	r0, [r4, #12]
 8004288:	4307      	orrs	r7, r0
 800428a:	81a7      	strh	r7, [r4, #12]
 800428c:	e7cb      	b.n	8004226 <__smakebuf_r+0x1a>
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	08003ff9 	.word	0x08003ff9

08004294 <memchr>:
 8004294:	b2c9      	uxtb	r1, r1
 8004296:	1882      	adds	r2, r0, r2
 8004298:	4290      	cmp	r0, r2
 800429a:	d101      	bne.n	80042a0 <memchr+0xc>
 800429c:	2000      	movs	r0, #0
 800429e:	4770      	bx	lr
 80042a0:	7803      	ldrb	r3, [r0, #0]
 80042a2:	428b      	cmp	r3, r1
 80042a4:	d0fb      	beq.n	800429e <memchr+0xa>
 80042a6:	3001      	adds	r0, #1
 80042a8:	e7f6      	b.n	8004298 <memchr+0x4>
	...

080042ac <_free_r>:
 80042ac:	b570      	push	{r4, r5, r6, lr}
 80042ae:	0005      	movs	r5, r0
 80042b0:	2900      	cmp	r1, #0
 80042b2:	d010      	beq.n	80042d6 <_free_r+0x2a>
 80042b4:	1f0c      	subs	r4, r1, #4
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	da00      	bge.n	80042be <_free_r+0x12>
 80042bc:	18e4      	adds	r4, r4, r3
 80042be:	0028      	movs	r0, r5
 80042c0:	f000 f9dc 	bl	800467c <__malloc_lock>
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <_free_r+0x90>)
 80042c6:	6813      	ldr	r3, [r2, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <_free_r+0x2c>
 80042cc:	6063      	str	r3, [r4, #4]
 80042ce:	6014      	str	r4, [r2, #0]
 80042d0:	0028      	movs	r0, r5
 80042d2:	f000 f9db 	bl	800468c <__malloc_unlock>
 80042d6:	bd70      	pop	{r4, r5, r6, pc}
 80042d8:	42a3      	cmp	r3, r4
 80042da:	d908      	bls.n	80042ee <_free_r+0x42>
 80042dc:	6821      	ldr	r1, [r4, #0]
 80042de:	1860      	adds	r0, r4, r1
 80042e0:	4283      	cmp	r3, r0
 80042e2:	d1f3      	bne.n	80042cc <_free_r+0x20>
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	1841      	adds	r1, r0, r1
 80042ea:	6021      	str	r1, [r4, #0]
 80042ec:	e7ee      	b.n	80042cc <_free_r+0x20>
 80042ee:	001a      	movs	r2, r3
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <_free_r+0x4e>
 80042f6:	42a3      	cmp	r3, r4
 80042f8:	d9f9      	bls.n	80042ee <_free_r+0x42>
 80042fa:	6811      	ldr	r1, [r2, #0]
 80042fc:	1850      	adds	r0, r2, r1
 80042fe:	42a0      	cmp	r0, r4
 8004300:	d10b      	bne.n	800431a <_free_r+0x6e>
 8004302:	6820      	ldr	r0, [r4, #0]
 8004304:	1809      	adds	r1, r1, r0
 8004306:	1850      	adds	r0, r2, r1
 8004308:	6011      	str	r1, [r2, #0]
 800430a:	4283      	cmp	r3, r0
 800430c:	d1e0      	bne.n	80042d0 <_free_r+0x24>
 800430e:	6818      	ldr	r0, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	1841      	adds	r1, r0, r1
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	6053      	str	r3, [r2, #4]
 8004318:	e7da      	b.n	80042d0 <_free_r+0x24>
 800431a:	42a0      	cmp	r0, r4
 800431c:	d902      	bls.n	8004324 <_free_r+0x78>
 800431e:	230c      	movs	r3, #12
 8004320:	602b      	str	r3, [r5, #0]
 8004322:	e7d5      	b.n	80042d0 <_free_r+0x24>
 8004324:	6821      	ldr	r1, [r4, #0]
 8004326:	1860      	adds	r0, r4, r1
 8004328:	4283      	cmp	r3, r0
 800432a:	d103      	bne.n	8004334 <_free_r+0x88>
 800432c:	6818      	ldr	r0, [r3, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	1841      	adds	r1, r0, r1
 8004332:	6021      	str	r1, [r4, #0]
 8004334:	6063      	str	r3, [r4, #4]
 8004336:	6054      	str	r4, [r2, #4]
 8004338:	e7ca      	b.n	80042d0 <_free_r+0x24>
 800433a:	46c0      	nop			; (mov r8, r8)
 800433c:	2000023c 	.word	0x2000023c

08004340 <sbrk_aligned>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4e0f      	ldr	r6, [pc, #60]	; (8004380 <sbrk_aligned+0x40>)
 8004344:	000d      	movs	r5, r1
 8004346:	6831      	ldr	r1, [r6, #0]
 8004348:	0004      	movs	r4, r0
 800434a:	2900      	cmp	r1, #0
 800434c:	d102      	bne.n	8004354 <sbrk_aligned+0x14>
 800434e:	f000 f88f 	bl	8004470 <_sbrk_r>
 8004352:	6030      	str	r0, [r6, #0]
 8004354:	0029      	movs	r1, r5
 8004356:	0020      	movs	r0, r4
 8004358:	f000 f88a 	bl	8004470 <_sbrk_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d00a      	beq.n	8004376 <sbrk_aligned+0x36>
 8004360:	2303      	movs	r3, #3
 8004362:	1cc5      	adds	r5, r0, #3
 8004364:	439d      	bics	r5, r3
 8004366:	42a8      	cmp	r0, r5
 8004368:	d007      	beq.n	800437a <sbrk_aligned+0x3a>
 800436a:	1a29      	subs	r1, r5, r0
 800436c:	0020      	movs	r0, r4
 800436e:	f000 f87f 	bl	8004470 <_sbrk_r>
 8004372:	1c43      	adds	r3, r0, #1
 8004374:	d101      	bne.n	800437a <sbrk_aligned+0x3a>
 8004376:	2501      	movs	r5, #1
 8004378:	426d      	negs	r5, r5
 800437a:	0028      	movs	r0, r5
 800437c:	bd70      	pop	{r4, r5, r6, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	20000240 	.word	0x20000240

08004384 <_malloc_r>:
 8004384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004386:	2203      	movs	r2, #3
 8004388:	1ccb      	adds	r3, r1, #3
 800438a:	4393      	bics	r3, r2
 800438c:	3308      	adds	r3, #8
 800438e:	0006      	movs	r6, r0
 8004390:	001f      	movs	r7, r3
 8004392:	2b0c      	cmp	r3, #12
 8004394:	d232      	bcs.n	80043fc <_malloc_r+0x78>
 8004396:	270c      	movs	r7, #12
 8004398:	42b9      	cmp	r1, r7
 800439a:	d831      	bhi.n	8004400 <_malloc_r+0x7c>
 800439c:	0030      	movs	r0, r6
 800439e:	f000 f96d 	bl	800467c <__malloc_lock>
 80043a2:	4d32      	ldr	r5, [pc, #200]	; (800446c <_malloc_r+0xe8>)
 80043a4:	682b      	ldr	r3, [r5, #0]
 80043a6:	001c      	movs	r4, r3
 80043a8:	2c00      	cmp	r4, #0
 80043aa:	d12e      	bne.n	800440a <_malloc_r+0x86>
 80043ac:	0039      	movs	r1, r7
 80043ae:	0030      	movs	r0, r6
 80043b0:	f7ff ffc6 	bl	8004340 <sbrk_aligned>
 80043b4:	0004      	movs	r4, r0
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d11e      	bne.n	80043f8 <_malloc_r+0x74>
 80043ba:	682c      	ldr	r4, [r5, #0]
 80043bc:	0025      	movs	r5, r4
 80043be:	2d00      	cmp	r5, #0
 80043c0:	d14a      	bne.n	8004458 <_malloc_r+0xd4>
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	0029      	movs	r1, r5
 80043c6:	18e3      	adds	r3, r4, r3
 80043c8:	0030      	movs	r0, r6
 80043ca:	9301      	str	r3, [sp, #4]
 80043cc:	f000 f850 	bl	8004470 <_sbrk_r>
 80043d0:	9b01      	ldr	r3, [sp, #4]
 80043d2:	4283      	cmp	r3, r0
 80043d4:	d143      	bne.n	800445e <_malloc_r+0xda>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	3703      	adds	r7, #3
 80043da:	1aff      	subs	r7, r7, r3
 80043dc:	2303      	movs	r3, #3
 80043de:	439f      	bics	r7, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	2f0c      	cmp	r7, #12
 80043e4:	d200      	bcs.n	80043e8 <_malloc_r+0x64>
 80043e6:	270c      	movs	r7, #12
 80043e8:	0039      	movs	r1, r7
 80043ea:	0030      	movs	r0, r6
 80043ec:	f7ff ffa8 	bl	8004340 <sbrk_aligned>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d034      	beq.n	800445e <_malloc_r+0xda>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	19df      	adds	r7, r3, r7
 80043f8:	6027      	str	r7, [r4, #0]
 80043fa:	e013      	b.n	8004424 <_malloc_r+0xa0>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	dacb      	bge.n	8004398 <_malloc_r+0x14>
 8004400:	230c      	movs	r3, #12
 8004402:	2500      	movs	r5, #0
 8004404:	6033      	str	r3, [r6, #0]
 8004406:	0028      	movs	r0, r5
 8004408:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800440a:	6822      	ldr	r2, [r4, #0]
 800440c:	1bd1      	subs	r1, r2, r7
 800440e:	d420      	bmi.n	8004452 <_malloc_r+0xce>
 8004410:	290b      	cmp	r1, #11
 8004412:	d917      	bls.n	8004444 <_malloc_r+0xc0>
 8004414:	19e2      	adds	r2, r4, r7
 8004416:	6027      	str	r7, [r4, #0]
 8004418:	42a3      	cmp	r3, r4
 800441a:	d111      	bne.n	8004440 <_malloc_r+0xbc>
 800441c:	602a      	str	r2, [r5, #0]
 800441e:	6863      	ldr	r3, [r4, #4]
 8004420:	6011      	str	r1, [r2, #0]
 8004422:	6053      	str	r3, [r2, #4]
 8004424:	0030      	movs	r0, r6
 8004426:	0025      	movs	r5, r4
 8004428:	f000 f930 	bl	800468c <__malloc_unlock>
 800442c:	2207      	movs	r2, #7
 800442e:	350b      	adds	r5, #11
 8004430:	1d23      	adds	r3, r4, #4
 8004432:	4395      	bics	r5, r2
 8004434:	1aea      	subs	r2, r5, r3
 8004436:	429d      	cmp	r5, r3
 8004438:	d0e5      	beq.n	8004406 <_malloc_r+0x82>
 800443a:	1b5b      	subs	r3, r3, r5
 800443c:	50a3      	str	r3, [r4, r2]
 800443e:	e7e2      	b.n	8004406 <_malloc_r+0x82>
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e7ec      	b.n	800441e <_malloc_r+0x9a>
 8004444:	6862      	ldr	r2, [r4, #4]
 8004446:	42a3      	cmp	r3, r4
 8004448:	d101      	bne.n	800444e <_malloc_r+0xca>
 800444a:	602a      	str	r2, [r5, #0]
 800444c:	e7ea      	b.n	8004424 <_malloc_r+0xa0>
 800444e:	605a      	str	r2, [r3, #4]
 8004450:	e7e8      	b.n	8004424 <_malloc_r+0xa0>
 8004452:	0023      	movs	r3, r4
 8004454:	6864      	ldr	r4, [r4, #4]
 8004456:	e7a7      	b.n	80043a8 <_malloc_r+0x24>
 8004458:	002c      	movs	r4, r5
 800445a:	686d      	ldr	r5, [r5, #4]
 800445c:	e7af      	b.n	80043be <_malloc_r+0x3a>
 800445e:	230c      	movs	r3, #12
 8004460:	0030      	movs	r0, r6
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	f000 f912 	bl	800468c <__malloc_unlock>
 8004468:	e7cd      	b.n	8004406 <_malloc_r+0x82>
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	2000023c 	.word	0x2000023c

08004470 <_sbrk_r>:
 8004470:	2300      	movs	r3, #0
 8004472:	b570      	push	{r4, r5, r6, lr}
 8004474:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_sbrk_r+0x20>)
 8004476:	0004      	movs	r4, r0
 8004478:	0008      	movs	r0, r1
 800447a:	602b      	str	r3, [r5, #0]
 800447c:	f7fc fe16 	bl	80010ac <_sbrk>
 8004480:	1c43      	adds	r3, r0, #1
 8004482:	d103      	bne.n	800448c <_sbrk_r+0x1c>
 8004484:	682b      	ldr	r3, [r5, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d000      	beq.n	800448c <_sbrk_r+0x1c>
 800448a:	6023      	str	r3, [r4, #0]
 800448c:	bd70      	pop	{r4, r5, r6, pc}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	20000244 	.word	0x20000244

08004494 <_raise_r>:
 8004494:	b570      	push	{r4, r5, r6, lr}
 8004496:	0004      	movs	r4, r0
 8004498:	000d      	movs	r5, r1
 800449a:	291f      	cmp	r1, #31
 800449c:	d904      	bls.n	80044a8 <_raise_r+0x14>
 800449e:	2316      	movs	r3, #22
 80044a0:	6003      	str	r3, [r0, #0]
 80044a2:	2001      	movs	r0, #1
 80044a4:	4240      	negs	r0, r0
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d004      	beq.n	80044b8 <_raise_r+0x24>
 80044ae:	008a      	lsls	r2, r1, #2
 80044b0:	189b      	adds	r3, r3, r2
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2a00      	cmp	r2, #0
 80044b6:	d108      	bne.n	80044ca <_raise_r+0x36>
 80044b8:	0020      	movs	r0, r4
 80044ba:	f000 f831 	bl	8004520 <_getpid_r>
 80044be:	002a      	movs	r2, r5
 80044c0:	0001      	movs	r1, r0
 80044c2:	0020      	movs	r0, r4
 80044c4:	f000 f81a 	bl	80044fc <_kill_r>
 80044c8:	e7ed      	b.n	80044a6 <_raise_r+0x12>
 80044ca:	2000      	movs	r0, #0
 80044cc:	2a01      	cmp	r2, #1
 80044ce:	d0ea      	beq.n	80044a6 <_raise_r+0x12>
 80044d0:	1c51      	adds	r1, r2, #1
 80044d2:	d103      	bne.n	80044dc <_raise_r+0x48>
 80044d4:	2316      	movs	r3, #22
 80044d6:	3001      	adds	r0, #1
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	e7e4      	b.n	80044a6 <_raise_r+0x12>
 80044dc:	2400      	movs	r4, #0
 80044de:	0028      	movs	r0, r5
 80044e0:	601c      	str	r4, [r3, #0]
 80044e2:	4790      	blx	r2
 80044e4:	0020      	movs	r0, r4
 80044e6:	e7de      	b.n	80044a6 <_raise_r+0x12>

080044e8 <raise>:
 80044e8:	b510      	push	{r4, lr}
 80044ea:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <raise+0x10>)
 80044ec:	0001      	movs	r1, r0
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	f7ff ffd0 	bl	8004494 <_raise_r>
 80044f4:	bd10      	pop	{r4, pc}
 80044f6:	46c0      	nop			; (mov r8, r8)
 80044f8:	200000c4 	.word	0x200000c4

080044fc <_kill_r>:
 80044fc:	2300      	movs	r3, #0
 80044fe:	b570      	push	{r4, r5, r6, lr}
 8004500:	4d06      	ldr	r5, [pc, #24]	; (800451c <_kill_r+0x20>)
 8004502:	0004      	movs	r4, r0
 8004504:	0008      	movs	r0, r1
 8004506:	0011      	movs	r1, r2
 8004508:	602b      	str	r3, [r5, #0]
 800450a:	f7fc fd4e 	bl	8000faa <_kill>
 800450e:	1c43      	adds	r3, r0, #1
 8004510:	d103      	bne.n	800451a <_kill_r+0x1e>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d000      	beq.n	800451a <_kill_r+0x1e>
 8004518:	6023      	str	r3, [r4, #0]
 800451a:	bd70      	pop	{r4, r5, r6, pc}
 800451c:	20000244 	.word	0x20000244

08004520 <_getpid_r>:
 8004520:	b510      	push	{r4, lr}
 8004522:	f7fc fd3c 	bl	8000f9e <_getpid>
 8004526:	bd10      	pop	{r4, pc}

08004528 <__sread>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	000c      	movs	r4, r1
 800452c:	250e      	movs	r5, #14
 800452e:	5f49      	ldrsh	r1, [r1, r5]
 8004530:	f000 f8b4 	bl	800469c <_read_r>
 8004534:	2800      	cmp	r0, #0
 8004536:	db03      	blt.n	8004540 <__sread+0x18>
 8004538:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800453a:	181b      	adds	r3, r3, r0
 800453c:	6563      	str	r3, [r4, #84]	; 0x54
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	89a3      	ldrh	r3, [r4, #12]
 8004542:	4a02      	ldr	r2, [pc, #8]	; (800454c <__sread+0x24>)
 8004544:	4013      	ands	r3, r2
 8004546:	81a3      	strh	r3, [r4, #12]
 8004548:	e7f9      	b.n	800453e <__sread+0x16>
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	ffffefff 	.word	0xffffefff

08004550 <__swrite>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	001f      	movs	r7, r3
 8004554:	898b      	ldrh	r3, [r1, #12]
 8004556:	0005      	movs	r5, r0
 8004558:	000c      	movs	r4, r1
 800455a:	0016      	movs	r6, r2
 800455c:	05db      	lsls	r3, r3, #23
 800455e:	d505      	bpl.n	800456c <__swrite+0x1c>
 8004560:	230e      	movs	r3, #14
 8004562:	5ec9      	ldrsh	r1, [r1, r3]
 8004564:	2200      	movs	r2, #0
 8004566:	2302      	movs	r3, #2
 8004568:	f000 f874 	bl	8004654 <_lseek_r>
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	4a05      	ldr	r2, [pc, #20]	; (8004584 <__swrite+0x34>)
 8004570:	0028      	movs	r0, r5
 8004572:	4013      	ands	r3, r2
 8004574:	81a3      	strh	r3, [r4, #12]
 8004576:	0032      	movs	r2, r6
 8004578:	230e      	movs	r3, #14
 800457a:	5ee1      	ldrsh	r1, [r4, r3]
 800457c:	003b      	movs	r3, r7
 800457e:	f000 f81f 	bl	80045c0 <_write_r>
 8004582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004584:	ffffefff 	.word	0xffffefff

08004588 <__sseek>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	000c      	movs	r4, r1
 800458c:	250e      	movs	r5, #14
 800458e:	5f49      	ldrsh	r1, [r1, r5]
 8004590:	f000 f860 	bl	8004654 <_lseek_r>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	1c42      	adds	r2, r0, #1
 8004598:	d103      	bne.n	80045a2 <__sseek+0x1a>
 800459a:	4a05      	ldr	r2, [pc, #20]	; (80045b0 <__sseek+0x28>)
 800459c:	4013      	ands	r3, r2
 800459e:	81a3      	strh	r3, [r4, #12]
 80045a0:	bd70      	pop	{r4, r5, r6, pc}
 80045a2:	2280      	movs	r2, #128	; 0x80
 80045a4:	0152      	lsls	r2, r2, #5
 80045a6:	4313      	orrs	r3, r2
 80045a8:	81a3      	strh	r3, [r4, #12]
 80045aa:	6560      	str	r0, [r4, #84]	; 0x54
 80045ac:	e7f8      	b.n	80045a0 <__sseek+0x18>
 80045ae:	46c0      	nop			; (mov r8, r8)
 80045b0:	ffffefff 	.word	0xffffefff

080045b4 <__sclose>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	230e      	movs	r3, #14
 80045b8:	5ec9      	ldrsh	r1, [r1, r3]
 80045ba:	f000 f815 	bl	80045e8 <_close_r>
 80045be:	bd10      	pop	{r4, pc}

080045c0 <_write_r>:
 80045c0:	b570      	push	{r4, r5, r6, lr}
 80045c2:	0004      	movs	r4, r0
 80045c4:	0008      	movs	r0, r1
 80045c6:	0011      	movs	r1, r2
 80045c8:	001a      	movs	r2, r3
 80045ca:	2300      	movs	r3, #0
 80045cc:	4d05      	ldr	r5, [pc, #20]	; (80045e4 <_write_r+0x24>)
 80045ce:	602b      	str	r3, [r5, #0]
 80045d0:	f7fc fd24 	bl	800101c <_write>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d103      	bne.n	80045e0 <_write_r+0x20>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d000      	beq.n	80045e0 <_write_r+0x20>
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	bd70      	pop	{r4, r5, r6, pc}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	20000244 	.word	0x20000244

080045e8 <_close_r>:
 80045e8:	2300      	movs	r3, #0
 80045ea:	b570      	push	{r4, r5, r6, lr}
 80045ec:	4d06      	ldr	r5, [pc, #24]	; (8004608 <_close_r+0x20>)
 80045ee:	0004      	movs	r4, r0
 80045f0:	0008      	movs	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fc fd2e 	bl	8001054 <_close>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d103      	bne.n	8004604 <_close_r+0x1c>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d000      	beq.n	8004604 <_close_r+0x1c>
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	bd70      	pop	{r4, r5, r6, pc}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	20000244 	.word	0x20000244

0800460c <_fstat_r>:
 800460c:	2300      	movs	r3, #0
 800460e:	b570      	push	{r4, r5, r6, lr}
 8004610:	4d06      	ldr	r5, [pc, #24]	; (800462c <_fstat_r+0x20>)
 8004612:	0004      	movs	r4, r0
 8004614:	0008      	movs	r0, r1
 8004616:	0011      	movs	r1, r2
 8004618:	602b      	str	r3, [r5, #0]
 800461a:	f7fc fd25 	bl	8001068 <_fstat>
 800461e:	1c43      	adds	r3, r0, #1
 8004620:	d103      	bne.n	800462a <_fstat_r+0x1e>
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d000      	beq.n	800462a <_fstat_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	20000244 	.word	0x20000244

08004630 <_isatty_r>:
 8004630:	2300      	movs	r3, #0
 8004632:	b570      	push	{r4, r5, r6, lr}
 8004634:	4d06      	ldr	r5, [pc, #24]	; (8004650 <_isatty_r+0x20>)
 8004636:	0004      	movs	r4, r0
 8004638:	0008      	movs	r0, r1
 800463a:	602b      	str	r3, [r5, #0]
 800463c:	f7fc fd22 	bl	8001084 <_isatty>
 8004640:	1c43      	adds	r3, r0, #1
 8004642:	d103      	bne.n	800464c <_isatty_r+0x1c>
 8004644:	682b      	ldr	r3, [r5, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d000      	beq.n	800464c <_isatty_r+0x1c>
 800464a:	6023      	str	r3, [r4, #0]
 800464c:	bd70      	pop	{r4, r5, r6, pc}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	20000244 	.word	0x20000244

08004654 <_lseek_r>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	0004      	movs	r4, r0
 8004658:	0008      	movs	r0, r1
 800465a:	0011      	movs	r1, r2
 800465c:	001a      	movs	r2, r3
 800465e:	2300      	movs	r3, #0
 8004660:	4d05      	ldr	r5, [pc, #20]	; (8004678 <_lseek_r+0x24>)
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	f7fc fd17 	bl	8001096 <_lseek>
 8004668:	1c43      	adds	r3, r0, #1
 800466a:	d103      	bne.n	8004674 <_lseek_r+0x20>
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d000      	beq.n	8004674 <_lseek_r+0x20>
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	bd70      	pop	{r4, r5, r6, pc}
 8004676:	46c0      	nop			; (mov r8, r8)
 8004678:	20000244 	.word	0x20000244

0800467c <__malloc_lock>:
 800467c:	b510      	push	{r4, lr}
 800467e:	4802      	ldr	r0, [pc, #8]	; (8004688 <__malloc_lock+0xc>)
 8004680:	f7ff fd99 	bl	80041b6 <__retarget_lock_acquire_recursive>
 8004684:	bd10      	pop	{r4, pc}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	20000238 	.word	0x20000238

0800468c <__malloc_unlock>:
 800468c:	b510      	push	{r4, lr}
 800468e:	4802      	ldr	r0, [pc, #8]	; (8004698 <__malloc_unlock+0xc>)
 8004690:	f7ff fd92 	bl	80041b8 <__retarget_lock_release_recursive>
 8004694:	bd10      	pop	{r4, pc}
 8004696:	46c0      	nop			; (mov r8, r8)
 8004698:	20000238 	.word	0x20000238

0800469c <_read_r>:
 800469c:	b570      	push	{r4, r5, r6, lr}
 800469e:	0004      	movs	r4, r0
 80046a0:	0008      	movs	r0, r1
 80046a2:	0011      	movs	r1, r2
 80046a4:	001a      	movs	r2, r3
 80046a6:	2300      	movs	r3, #0
 80046a8:	4d05      	ldr	r5, [pc, #20]	; (80046c0 <_read_r+0x24>)
 80046aa:	602b      	str	r3, [r5, #0]
 80046ac:	f7fc fc99 	bl	8000fe2 <_read>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d103      	bne.n	80046bc <_read_r+0x20>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d000      	beq.n	80046bc <_read_r+0x20>
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	20000244 	.word	0x20000244

080046c4 <_init>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr

080046d0 <_fini>:
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	46c0      	nop			; (mov r8, r8)
 80046d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046d6:	bc08      	pop	{r3}
 80046d8:	469e      	mov	lr, r3
 80046da:	4770      	bx	lr
