
LoRa_beacon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08007068  08007068  00017068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007464  08007464  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  08007464  08007464  00017464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800746c  0800746c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08007474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000228  0800769c  00020228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800769c  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc7c  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c64  00000000  00000000  0002becc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002db30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010b66  00000000  00000000  0002ed78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c592  00000000  00000000  0003f8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000613d6  00000000  00000000  0004be70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ad246  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  000ad298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007050 	.word	0x08007050

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08007050 	.word	0x08007050

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_ldivmod>:
 8000408:	2b00      	cmp	r3, #0
 800040a:	d115      	bne.n	8000438 <__aeabi_ldivmod+0x30>
 800040c:	2a00      	cmp	r2, #0
 800040e:	d113      	bne.n	8000438 <__aeabi_ldivmod+0x30>
 8000410:	2900      	cmp	r1, #0
 8000412:	db06      	blt.n	8000422 <__aeabi_ldivmod+0x1a>
 8000414:	dc01      	bgt.n	800041a <__aeabi_ldivmod+0x12>
 8000416:	2800      	cmp	r0, #0
 8000418:	d006      	beq.n	8000428 <__aeabi_ldivmod+0x20>
 800041a:	2000      	movs	r0, #0
 800041c:	43c0      	mvns	r0, r0
 800041e:	0841      	lsrs	r1, r0, #1
 8000420:	e002      	b.n	8000428 <__aeabi_ldivmod+0x20>
 8000422:	2180      	movs	r1, #128	; 0x80
 8000424:	0609      	lsls	r1, r1, #24
 8000426:	2000      	movs	r0, #0
 8000428:	b407      	push	{r0, r1, r2}
 800042a:	4802      	ldr	r0, [pc, #8]	; (8000434 <__aeabi_ldivmod+0x2c>)
 800042c:	a101      	add	r1, pc, #4	; (adr r1, 8000434 <__aeabi_ldivmod+0x2c>)
 800042e:	1840      	adds	r0, r0, r1
 8000430:	9002      	str	r0, [sp, #8]
 8000432:	bd03      	pop	{r0, r1, pc}
 8000434:	ffffffd1 	.word	0xffffffd1
 8000438:	b403      	push	{r0, r1}
 800043a:	4668      	mov	r0, sp
 800043c:	b501      	push	{r0, lr}
 800043e:	9802      	ldr	r0, [sp, #8]
 8000440:	f000 f920 	bl	8000684 <__gnu_ldivmod_helper>
 8000444:	9b01      	ldr	r3, [sp, #4]
 8000446:	469e      	mov	lr, r3
 8000448:	b002      	add	sp, #8
 800044a:	bc0c      	pop	{r2, r3}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_uldivmod>:
 8000450:	2b00      	cmp	r3, #0
 8000452:	d111      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000454:	2a00      	cmp	r2, #0
 8000456:	d10f      	bne.n	8000478 <__aeabi_uldivmod+0x28>
 8000458:	2900      	cmp	r1, #0
 800045a:	d100      	bne.n	800045e <__aeabi_uldivmod+0xe>
 800045c:	2800      	cmp	r0, #0
 800045e:	d002      	beq.n	8000466 <__aeabi_uldivmod+0x16>
 8000460:	2100      	movs	r1, #0
 8000462:	43c9      	mvns	r1, r1
 8000464:	0008      	movs	r0, r1
 8000466:	b407      	push	{r0, r1, r2}
 8000468:	4802      	ldr	r0, [pc, #8]	; (8000474 <__aeabi_uldivmod+0x24>)
 800046a:	a102      	add	r1, pc, #8	; (adr r1, 8000474 <__aeabi_uldivmod+0x24>)
 800046c:	1840      	adds	r0, r0, r1
 800046e:	9002      	str	r0, [sp, #8]
 8000470:	bd03      	pop	{r0, r1, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	ffffff91 	.word	0xffffff91
 8000478:	b403      	push	{r0, r1}
 800047a:	4668      	mov	r0, sp
 800047c:	b501      	push	{r0, lr}
 800047e:	9802      	ldr	r0, [sp, #8]
 8000480:	f000 f834 	bl	80004ec <__udivmoddi4>
 8000484:	9b01      	ldr	r3, [sp, #4]
 8000486:	469e      	mov	lr, r3
 8000488:	b002      	add	sp, #8
 800048a:	bc0c      	pop	{r2, r3}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_lmul>:
 8000490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000492:	46ce      	mov	lr, r9
 8000494:	4647      	mov	r7, r8
 8000496:	b580      	push	{r7, lr}
 8000498:	0007      	movs	r7, r0
 800049a:	4699      	mov	r9, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	469c      	mov	ip, r3
 80004a0:	0413      	lsls	r3, r2, #16
 80004a2:	0c1b      	lsrs	r3, r3, #16
 80004a4:	001d      	movs	r5, r3
 80004a6:	000e      	movs	r6, r1
 80004a8:	4661      	mov	r1, ip
 80004aa:	0400      	lsls	r0, r0, #16
 80004ac:	0c14      	lsrs	r4, r2, #16
 80004ae:	0c00      	lsrs	r0, r0, #16
 80004b0:	4345      	muls	r5, r0
 80004b2:	434b      	muls	r3, r1
 80004b4:	4360      	muls	r0, r4
 80004b6:	4361      	muls	r1, r4
 80004b8:	18c0      	adds	r0, r0, r3
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	1820      	adds	r0, r4, r0
 80004be:	468c      	mov	ip, r1
 80004c0:	4283      	cmp	r3, r0
 80004c2:	d903      	bls.n	80004cc <__aeabi_lmul+0x3c>
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	025b      	lsls	r3, r3, #9
 80004c8:	4698      	mov	r8, r3
 80004ca:	44c4      	add	ip, r8
 80004cc:	4649      	mov	r1, r9
 80004ce:	4379      	muls	r1, r7
 80004d0:	4372      	muls	r2, r6
 80004d2:	0c03      	lsrs	r3, r0, #16
 80004d4:	4463      	add	r3, ip
 80004d6:	042d      	lsls	r5, r5, #16
 80004d8:	0c2d      	lsrs	r5, r5, #16
 80004da:	18c9      	adds	r1, r1, r3
 80004dc:	0400      	lsls	r0, r0, #16
 80004de:	1940      	adds	r0, r0, r5
 80004e0:	1889      	adds	r1, r1, r2
 80004e2:	bcc0      	pop	{r6, r7}
 80004e4:	46b9      	mov	r9, r7
 80004e6:	46b0      	mov	r8, r6
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__udivmoddi4>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	4657      	mov	r7, sl
 80004f0:	464e      	mov	r6, r9
 80004f2:	4645      	mov	r5, r8
 80004f4:	46de      	mov	lr, fp
 80004f6:	b5e0      	push	{r5, r6, r7, lr}
 80004f8:	0004      	movs	r4, r0
 80004fa:	000d      	movs	r5, r1
 80004fc:	4692      	mov	sl, r2
 80004fe:	4699      	mov	r9, r3
 8000500:	b083      	sub	sp, #12
 8000502:	428b      	cmp	r3, r1
 8000504:	d830      	bhi.n	8000568 <__udivmoddi4+0x7c>
 8000506:	d02d      	beq.n	8000564 <__udivmoddi4+0x78>
 8000508:	4649      	mov	r1, r9
 800050a:	4650      	mov	r0, sl
 800050c:	f000 f8d8 	bl	80006c0 <__clzdi2>
 8000510:	0029      	movs	r1, r5
 8000512:	0006      	movs	r6, r0
 8000514:	0020      	movs	r0, r4
 8000516:	f000 f8d3 	bl	80006c0 <__clzdi2>
 800051a:	1a33      	subs	r3, r6, r0
 800051c:	4698      	mov	r8, r3
 800051e:	3b20      	subs	r3, #32
 8000520:	469b      	mov	fp, r3
 8000522:	d433      	bmi.n	800058c <__udivmoddi4+0xa0>
 8000524:	465a      	mov	r2, fp
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	4642      	mov	r2, r8
 800052c:	001f      	movs	r7, r3
 800052e:	4653      	mov	r3, sl
 8000530:	4093      	lsls	r3, r2
 8000532:	001e      	movs	r6, r3
 8000534:	42af      	cmp	r7, r5
 8000536:	d83a      	bhi.n	80005ae <__udivmoddi4+0xc2>
 8000538:	42af      	cmp	r7, r5
 800053a:	d100      	bne.n	800053e <__udivmoddi4+0x52>
 800053c:	e078      	b.n	8000630 <__udivmoddi4+0x144>
 800053e:	465b      	mov	r3, fp
 8000540:	1ba4      	subs	r4, r4, r6
 8000542:	41bd      	sbcs	r5, r7
 8000544:	2b00      	cmp	r3, #0
 8000546:	da00      	bge.n	800054a <__udivmoddi4+0x5e>
 8000548:	e075      	b.n	8000636 <__udivmoddi4+0x14a>
 800054a:	2200      	movs	r2, #0
 800054c:	2300      	movs	r3, #0
 800054e:	9200      	str	r2, [sp, #0]
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	465a      	mov	r2, fp
 8000556:	4093      	lsls	r3, r2
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2301      	movs	r3, #1
 800055c:	4642      	mov	r2, r8
 800055e:	4093      	lsls	r3, r2
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	e028      	b.n	80005b6 <__udivmoddi4+0xca>
 8000564:	4282      	cmp	r2, r0
 8000566:	d9cf      	bls.n	8000508 <__udivmoddi4+0x1c>
 8000568:	2200      	movs	r2, #0
 800056a:	2300      	movs	r3, #0
 800056c:	9200      	str	r2, [sp, #0]
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <__udivmoddi4+0x8e>
 8000576:	601c      	str	r4, [r3, #0]
 8000578:	605d      	str	r5, [r3, #4]
 800057a:	9800      	ldr	r0, [sp, #0]
 800057c:	9901      	ldr	r1, [sp, #4]
 800057e:	b003      	add	sp, #12
 8000580:	bcf0      	pop	{r4, r5, r6, r7}
 8000582:	46bb      	mov	fp, r7
 8000584:	46b2      	mov	sl, r6
 8000586:	46a9      	mov	r9, r5
 8000588:	46a0      	mov	r8, r4
 800058a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058c:	4642      	mov	r2, r8
 800058e:	2320      	movs	r3, #32
 8000590:	1a9b      	subs	r3, r3, r2
 8000592:	4652      	mov	r2, sl
 8000594:	40da      	lsrs	r2, r3
 8000596:	4641      	mov	r1, r8
 8000598:	0013      	movs	r3, r2
 800059a:	464a      	mov	r2, r9
 800059c:	408a      	lsls	r2, r1
 800059e:	0017      	movs	r7, r2
 80005a0:	4642      	mov	r2, r8
 80005a2:	431f      	orrs	r7, r3
 80005a4:	4653      	mov	r3, sl
 80005a6:	4093      	lsls	r3, r2
 80005a8:	001e      	movs	r6, r3
 80005aa:	42af      	cmp	r7, r5
 80005ac:	d9c4      	bls.n	8000538 <__udivmoddi4+0x4c>
 80005ae:	2200      	movs	r2, #0
 80005b0:	2300      	movs	r3, #0
 80005b2:	9200      	str	r2, [sp, #0]
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	4643      	mov	r3, r8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0d9      	beq.n	8000570 <__udivmoddi4+0x84>
 80005bc:	07fb      	lsls	r3, r7, #31
 80005be:	0872      	lsrs	r2, r6, #1
 80005c0:	431a      	orrs	r2, r3
 80005c2:	4646      	mov	r6, r8
 80005c4:	087b      	lsrs	r3, r7, #1
 80005c6:	e00e      	b.n	80005e6 <__udivmoddi4+0xfa>
 80005c8:	42ab      	cmp	r3, r5
 80005ca:	d101      	bne.n	80005d0 <__udivmoddi4+0xe4>
 80005cc:	42a2      	cmp	r2, r4
 80005ce:	d80c      	bhi.n	80005ea <__udivmoddi4+0xfe>
 80005d0:	1aa4      	subs	r4, r4, r2
 80005d2:	419d      	sbcs	r5, r3
 80005d4:	2001      	movs	r0, #1
 80005d6:	1924      	adds	r4, r4, r4
 80005d8:	416d      	adcs	r5, r5
 80005da:	2100      	movs	r1, #0
 80005dc:	3e01      	subs	r6, #1
 80005de:	1824      	adds	r4, r4, r0
 80005e0:	414d      	adcs	r5, r1
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d006      	beq.n	80005f4 <__udivmoddi4+0x108>
 80005e6:	42ab      	cmp	r3, r5
 80005e8:	d9ee      	bls.n	80005c8 <__udivmoddi4+0xdc>
 80005ea:	3e01      	subs	r6, #1
 80005ec:	1924      	adds	r4, r4, r4
 80005ee:	416d      	adcs	r5, r5
 80005f0:	2e00      	cmp	r6, #0
 80005f2:	d1f8      	bne.n	80005e6 <__udivmoddi4+0xfa>
 80005f4:	9800      	ldr	r0, [sp, #0]
 80005f6:	9901      	ldr	r1, [sp, #4]
 80005f8:	465b      	mov	r3, fp
 80005fa:	1900      	adds	r0, r0, r4
 80005fc:	4169      	adcs	r1, r5
 80005fe:	2b00      	cmp	r3, #0
 8000600:	db24      	blt.n	800064c <__udivmoddi4+0x160>
 8000602:	002b      	movs	r3, r5
 8000604:	465a      	mov	r2, fp
 8000606:	4644      	mov	r4, r8
 8000608:	40d3      	lsrs	r3, r2
 800060a:	002a      	movs	r2, r5
 800060c:	40e2      	lsrs	r2, r4
 800060e:	001c      	movs	r4, r3
 8000610:	465b      	mov	r3, fp
 8000612:	0015      	movs	r5, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	db2a      	blt.n	800066e <__udivmoddi4+0x182>
 8000618:	0026      	movs	r6, r4
 800061a:	409e      	lsls	r6, r3
 800061c:	0033      	movs	r3, r6
 800061e:	0026      	movs	r6, r4
 8000620:	4647      	mov	r7, r8
 8000622:	40be      	lsls	r6, r7
 8000624:	0032      	movs	r2, r6
 8000626:	1a80      	subs	r0, r0, r2
 8000628:	4199      	sbcs	r1, r3
 800062a:	9000      	str	r0, [sp, #0]
 800062c:	9101      	str	r1, [sp, #4]
 800062e:	e79f      	b.n	8000570 <__udivmoddi4+0x84>
 8000630:	42a3      	cmp	r3, r4
 8000632:	d8bc      	bhi.n	80005ae <__udivmoddi4+0xc2>
 8000634:	e783      	b.n	800053e <__udivmoddi4+0x52>
 8000636:	4642      	mov	r2, r8
 8000638:	2320      	movs	r3, #32
 800063a:	2100      	movs	r1, #0
 800063c:	1a9b      	subs	r3, r3, r2
 800063e:	2200      	movs	r2, #0
 8000640:	9100      	str	r1, [sp, #0]
 8000642:	9201      	str	r2, [sp, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	40da      	lsrs	r2, r3
 8000648:	9201      	str	r2, [sp, #4]
 800064a:	e786      	b.n	800055a <__udivmoddi4+0x6e>
 800064c:	4642      	mov	r2, r8
 800064e:	2320      	movs	r3, #32
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	002a      	movs	r2, r5
 8000654:	4646      	mov	r6, r8
 8000656:	409a      	lsls	r2, r3
 8000658:	0023      	movs	r3, r4
 800065a:	40f3      	lsrs	r3, r6
 800065c:	4644      	mov	r4, r8
 800065e:	4313      	orrs	r3, r2
 8000660:	002a      	movs	r2, r5
 8000662:	40e2      	lsrs	r2, r4
 8000664:	001c      	movs	r4, r3
 8000666:	465b      	mov	r3, fp
 8000668:	0015      	movs	r5, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	dad4      	bge.n	8000618 <__udivmoddi4+0x12c>
 800066e:	4642      	mov	r2, r8
 8000670:	002f      	movs	r7, r5
 8000672:	2320      	movs	r3, #32
 8000674:	0026      	movs	r6, r4
 8000676:	4097      	lsls	r7, r2
 8000678:	1a9b      	subs	r3, r3, r2
 800067a:	40de      	lsrs	r6, r3
 800067c:	003b      	movs	r3, r7
 800067e:	4333      	orrs	r3, r6
 8000680:	e7cd      	b.n	800061e <__udivmoddi4+0x132>
 8000682:	46c0      	nop			; (mov r8, r8)

08000684 <__gnu_ldivmod_helper>:
 8000684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000686:	46ce      	mov	lr, r9
 8000688:	4647      	mov	r7, r8
 800068a:	b580      	push	{r7, lr}
 800068c:	4691      	mov	r9, r2
 800068e:	4698      	mov	r8, r3
 8000690:	0004      	movs	r4, r0
 8000692:	000d      	movs	r5, r1
 8000694:	f000 f820 	bl	80006d8 <__divdi3>
 8000698:	0007      	movs	r7, r0
 800069a:	000e      	movs	r6, r1
 800069c:	0002      	movs	r2, r0
 800069e:	000b      	movs	r3, r1
 80006a0:	4648      	mov	r0, r9
 80006a2:	4641      	mov	r1, r8
 80006a4:	f7ff fef4 	bl	8000490 <__aeabi_lmul>
 80006a8:	1a24      	subs	r4, r4, r0
 80006aa:	418d      	sbcs	r5, r1
 80006ac:	9b08      	ldr	r3, [sp, #32]
 80006ae:	0038      	movs	r0, r7
 80006b0:	0031      	movs	r1, r6
 80006b2:	601c      	str	r4, [r3, #0]
 80006b4:	605d      	str	r5, [r3, #4]
 80006b6:	bcc0      	pop	{r6, r7}
 80006b8:	46b9      	mov	r9, r7
 80006ba:	46b0      	mov	r8, r6
 80006bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)

080006c0 <__clzdi2>:
 80006c0:	b510      	push	{r4, lr}
 80006c2:	2900      	cmp	r1, #0
 80006c4:	d103      	bne.n	80006ce <__clzdi2+0xe>
 80006c6:	f000 f8ed 	bl	80008a4 <__clzsi2>
 80006ca:	3020      	adds	r0, #32
 80006cc:	e002      	b.n	80006d4 <__clzdi2+0x14>
 80006ce:	0008      	movs	r0, r1
 80006d0:	f000 f8e8 	bl	80008a4 <__clzsi2>
 80006d4:	bd10      	pop	{r4, pc}
 80006d6:	46c0      	nop			; (mov r8, r8)

080006d8 <__divdi3>:
 80006d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006da:	4657      	mov	r7, sl
 80006dc:	464e      	mov	r6, r9
 80006de:	4645      	mov	r5, r8
 80006e0:	46de      	mov	lr, fp
 80006e2:	b5e0      	push	{r5, r6, r7, lr}
 80006e4:	000f      	movs	r7, r1
 80006e6:	0019      	movs	r1, r3
 80006e8:	2300      	movs	r3, #0
 80006ea:	0006      	movs	r6, r0
 80006ec:	4698      	mov	r8, r3
 80006ee:	0010      	movs	r0, r2
 80006f0:	b083      	sub	sp, #12
 80006f2:	2f00      	cmp	r7, #0
 80006f4:	da07      	bge.n	8000706 <__divdi3+0x2e>
 80006f6:	0033      	movs	r3, r6
 80006f8:	003c      	movs	r4, r7
 80006fa:	2700      	movs	r7, #0
 80006fc:	425e      	negs	r6, r3
 80006fe:	41a7      	sbcs	r7, r4
 8000700:	2301      	movs	r3, #1
 8000702:	425b      	negs	r3, r3
 8000704:	4698      	mov	r8, r3
 8000706:	2900      	cmp	r1, #0
 8000708:	da07      	bge.n	800071a <__divdi3+0x42>
 800070a:	4643      	mov	r3, r8
 800070c:	43db      	mvns	r3, r3
 800070e:	000c      	movs	r4, r1
 8000710:	4698      	mov	r8, r3
 8000712:	0003      	movs	r3, r0
 8000714:	2100      	movs	r1, #0
 8000716:	4258      	negs	r0, r3
 8000718:	41a1      	sbcs	r1, r4
 800071a:	0034      	movs	r4, r6
 800071c:	003d      	movs	r5, r7
 800071e:	4682      	mov	sl, r0
 8000720:	4689      	mov	r9, r1
 8000722:	42b9      	cmp	r1, r7
 8000724:	d86a      	bhi.n	80007fc <__divdi3+0x124>
 8000726:	d067      	beq.n	80007f8 <__divdi3+0x120>
 8000728:	4649      	mov	r1, r9
 800072a:	4650      	mov	r0, sl
 800072c:	f7ff ffc8 	bl	80006c0 <__clzdi2>
 8000730:	4683      	mov	fp, r0
 8000732:	0039      	movs	r1, r7
 8000734:	0030      	movs	r0, r6
 8000736:	f7ff ffc3 	bl	80006c0 <__clzdi2>
 800073a:	465b      	mov	r3, fp
 800073c:	1a1b      	subs	r3, r3, r0
 800073e:	469c      	mov	ip, r3
 8000740:	3b20      	subs	r3, #32
 8000742:	469b      	mov	fp, r3
 8000744:	d46b      	bmi.n	800081e <__divdi3+0x146>
 8000746:	4658      	mov	r0, fp
 8000748:	4651      	mov	r1, sl
 800074a:	4081      	lsls	r1, r0
 800074c:	4660      	mov	r0, ip
 800074e:	000b      	movs	r3, r1
 8000750:	4651      	mov	r1, sl
 8000752:	4081      	lsls	r1, r0
 8000754:	000a      	movs	r2, r1
 8000756:	42bb      	cmp	r3, r7
 8000758:	d900      	bls.n	800075c <__divdi3+0x84>
 800075a:	e072      	b.n	8000842 <__divdi3+0x16a>
 800075c:	42bb      	cmp	r3, r7
 800075e:	d100      	bne.n	8000762 <__divdi3+0x8a>
 8000760:	e079      	b.n	8000856 <__divdi3+0x17e>
 8000762:	0034      	movs	r4, r6
 8000764:	003d      	movs	r5, r7
 8000766:	4659      	mov	r1, fp
 8000768:	1aa4      	subs	r4, r4, r2
 800076a:	419d      	sbcs	r5, r3
 800076c:	2900      	cmp	r1, #0
 800076e:	da00      	bge.n	8000772 <__divdi3+0x9a>
 8000770:	e074      	b.n	800085c <__divdi3+0x184>
 8000772:	2100      	movs	r1, #0
 8000774:	2000      	movs	r0, #0
 8000776:	2601      	movs	r6, #1
 8000778:	9000      	str	r0, [sp, #0]
 800077a:	9101      	str	r1, [sp, #4]
 800077c:	4659      	mov	r1, fp
 800077e:	408e      	lsls	r6, r1
 8000780:	9601      	str	r6, [sp, #4]
 8000782:	4661      	mov	r1, ip
 8000784:	2601      	movs	r6, #1
 8000786:	408e      	lsls	r6, r1
 8000788:	4661      	mov	r1, ip
 800078a:	9600      	str	r6, [sp, #0]
 800078c:	2900      	cmp	r1, #0
 800078e:	d05f      	beq.n	8000850 <__divdi3+0x178>
 8000790:	07d9      	lsls	r1, r3, #31
 8000792:	0856      	lsrs	r6, r2, #1
 8000794:	430e      	orrs	r6, r1
 8000796:	085f      	lsrs	r7, r3, #1
 8000798:	4661      	mov	r1, ip
 800079a:	2201      	movs	r2, #1
 800079c:	2300      	movs	r3, #0
 800079e:	e00c      	b.n	80007ba <__divdi3+0xe2>
 80007a0:	42af      	cmp	r7, r5
 80007a2:	d101      	bne.n	80007a8 <__divdi3+0xd0>
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d80a      	bhi.n	80007be <__divdi3+0xe6>
 80007a8:	1ba4      	subs	r4, r4, r6
 80007aa:	41bd      	sbcs	r5, r7
 80007ac:	1924      	adds	r4, r4, r4
 80007ae:	416d      	adcs	r5, r5
 80007b0:	3901      	subs	r1, #1
 80007b2:	18a4      	adds	r4, r4, r2
 80007b4:	415d      	adcs	r5, r3
 80007b6:	2900      	cmp	r1, #0
 80007b8:	d006      	beq.n	80007c8 <__divdi3+0xf0>
 80007ba:	42af      	cmp	r7, r5
 80007bc:	d9f0      	bls.n	80007a0 <__divdi3+0xc8>
 80007be:	3901      	subs	r1, #1
 80007c0:	1924      	adds	r4, r4, r4
 80007c2:	416d      	adcs	r5, r5
 80007c4:	2900      	cmp	r1, #0
 80007c6:	d1f8      	bne.n	80007ba <__divdi3+0xe2>
 80007c8:	9800      	ldr	r0, [sp, #0]
 80007ca:	9901      	ldr	r1, [sp, #4]
 80007cc:	465b      	mov	r3, fp
 80007ce:	1900      	adds	r0, r0, r4
 80007d0:	4169      	adcs	r1, r5
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db4d      	blt.n	8000872 <__divdi3+0x19a>
 80007d6:	002e      	movs	r6, r5
 80007d8:	002c      	movs	r4, r5
 80007da:	40de      	lsrs	r6, r3
 80007dc:	4663      	mov	r3, ip
 80007de:	40dc      	lsrs	r4, r3
 80007e0:	465b      	mov	r3, fp
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	db55      	blt.n	8000892 <__divdi3+0x1ba>
 80007e6:	0034      	movs	r4, r6
 80007e8:	409c      	lsls	r4, r3
 80007ea:	0023      	movs	r3, r4
 80007ec:	4664      	mov	r4, ip
 80007ee:	40a6      	lsls	r6, r4
 80007f0:	0032      	movs	r2, r6
 80007f2:	1a80      	subs	r0, r0, r2
 80007f4:	4199      	sbcs	r1, r3
 80007f6:	e003      	b.n	8000800 <__divdi3+0x128>
 80007f8:	42b0      	cmp	r0, r6
 80007fa:	d995      	bls.n	8000728 <__divdi3+0x50>
 80007fc:	2000      	movs	r0, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	4643      	mov	r3, r8
 8000802:	2b00      	cmp	r3, #0
 8000804:	d004      	beq.n	8000810 <__divdi3+0x138>
 8000806:	0003      	movs	r3, r0
 8000808:	000c      	movs	r4, r1
 800080a:	2100      	movs	r1, #0
 800080c:	4258      	negs	r0, r3
 800080e:	41a1      	sbcs	r1, r4
 8000810:	b003      	add	sp, #12
 8000812:	bcf0      	pop	{r4, r5, r6, r7}
 8000814:	46bb      	mov	fp, r7
 8000816:	46b2      	mov	sl, r6
 8000818:	46a9      	mov	r9, r5
 800081a:	46a0      	mov	r8, r4
 800081c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800081e:	4662      	mov	r2, ip
 8000820:	4648      	mov	r0, r9
 8000822:	2320      	movs	r3, #32
 8000824:	4651      	mov	r1, sl
 8000826:	4090      	lsls	r0, r2
 8000828:	1a9b      	subs	r3, r3, r2
 800082a:	40d9      	lsrs	r1, r3
 800082c:	0003      	movs	r3, r0
 800082e:	9100      	str	r1, [sp, #0]
 8000830:	9900      	ldr	r1, [sp, #0]
 8000832:	4660      	mov	r0, ip
 8000834:	430b      	orrs	r3, r1
 8000836:	4651      	mov	r1, sl
 8000838:	4081      	lsls	r1, r0
 800083a:	000a      	movs	r2, r1
 800083c:	42bb      	cmp	r3, r7
 800083e:	d800      	bhi.n	8000842 <__divdi3+0x16a>
 8000840:	e78c      	b.n	800075c <__divdi3+0x84>
 8000842:	2100      	movs	r1, #0
 8000844:	2000      	movs	r0, #0
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	9101      	str	r1, [sp, #4]
 800084a:	4661      	mov	r1, ip
 800084c:	2900      	cmp	r1, #0
 800084e:	d19f      	bne.n	8000790 <__divdi3+0xb8>
 8000850:	9800      	ldr	r0, [sp, #0]
 8000852:	9901      	ldr	r1, [sp, #4]
 8000854:	e7d4      	b.n	8000800 <__divdi3+0x128>
 8000856:	42b1      	cmp	r1, r6
 8000858:	d8f3      	bhi.n	8000842 <__divdi3+0x16a>
 800085a:	e782      	b.n	8000762 <__divdi3+0x8a>
 800085c:	4661      	mov	r1, ip
 800085e:	2620      	movs	r6, #32
 8000860:	2701      	movs	r7, #1
 8000862:	1a76      	subs	r6, r6, r1
 8000864:	2000      	movs	r0, #0
 8000866:	2100      	movs	r1, #0
 8000868:	40f7      	lsrs	r7, r6
 800086a:	9000      	str	r0, [sp, #0]
 800086c:	9101      	str	r1, [sp, #4]
 800086e:	9701      	str	r7, [sp, #4]
 8000870:	e787      	b.n	8000782 <__divdi3+0xaa>
 8000872:	4662      	mov	r2, ip
 8000874:	2320      	movs	r3, #32
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	002a      	movs	r2, r5
 800087a:	409a      	lsls	r2, r3
 800087c:	0026      	movs	r6, r4
 800087e:	0013      	movs	r3, r2
 8000880:	4662      	mov	r2, ip
 8000882:	40d6      	lsrs	r6, r2
 8000884:	002c      	movs	r4, r5
 8000886:	431e      	orrs	r6, r3
 8000888:	4663      	mov	r3, ip
 800088a:	40dc      	lsrs	r4, r3
 800088c:	465b      	mov	r3, fp
 800088e:	2b00      	cmp	r3, #0
 8000890:	daa9      	bge.n	80007e6 <__divdi3+0x10e>
 8000892:	4662      	mov	r2, ip
 8000894:	2320      	movs	r3, #32
 8000896:	0035      	movs	r5, r6
 8000898:	4094      	lsls	r4, r2
 800089a:	1a9b      	subs	r3, r3, r2
 800089c:	40dd      	lsrs	r5, r3
 800089e:	0023      	movs	r3, r4
 80008a0:	432b      	orrs	r3, r5
 80008a2:	e7a3      	b.n	80007ec <__divdi3+0x114>

080008a4 <__clzsi2>:
 80008a4:	211c      	movs	r1, #28
 80008a6:	2301      	movs	r3, #1
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	4298      	cmp	r0, r3
 80008ac:	d301      	bcc.n	80008b2 <__clzsi2+0xe>
 80008ae:	0c00      	lsrs	r0, r0, #16
 80008b0:	3910      	subs	r1, #16
 80008b2:	0a1b      	lsrs	r3, r3, #8
 80008b4:	4298      	cmp	r0, r3
 80008b6:	d301      	bcc.n	80008bc <__clzsi2+0x18>
 80008b8:	0a00      	lsrs	r0, r0, #8
 80008ba:	3908      	subs	r1, #8
 80008bc:	091b      	lsrs	r3, r3, #4
 80008be:	4298      	cmp	r0, r3
 80008c0:	d301      	bcc.n	80008c6 <__clzsi2+0x22>
 80008c2:	0900      	lsrs	r0, r0, #4
 80008c4:	3904      	subs	r1, #4
 80008c6:	a202      	add	r2, pc, #8	; (adr r2, 80008d0 <__clzsi2+0x2c>)
 80008c8:	5c10      	ldrb	r0, [r2, r0]
 80008ca:	1840      	adds	r0, r0, r1
 80008cc:	4770      	bx	lr
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	02020304 	.word	0x02020304
 80008d4:	01010101 	.word	0x01010101
	...

080008e0 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	b089      	sub	sp, #36	; 0x24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 80008ea:	231c      	movs	r3, #28
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 80008f2:	231d      	movs	r3, #29
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e029      	b.n	8000950 <AES_Encrypt+0x70>
	{
		for(Row = 0; Row < 4; Row++)
 80008fc:	231e      	movs	r3, #30
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	2200      	movs	r2, #0
 8000902:	701a      	strb	r2, [r3, #0]
 8000904:	e019      	b.n	800093a <AES_Encrypt+0x5a>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000906:	241e      	movs	r4, #30
 8000908:	193b      	adds	r3, r7, r4
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	201d      	movs	r0, #29
 800090e:	183b      	adds	r3, r7, r0
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	18d3      	adds	r3, r2, r3
 8000916:	001a      	movs	r2, r3
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	1899      	adds	r1, r3, r2
 800091c:	193b      	adds	r3, r7, r4
 800091e:	781a      	ldrb	r2, [r3, #0]
 8000920:	183b      	adds	r3, r7, r0
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	7808      	ldrb	r0, [r1, #0]
 8000926:	4986      	ldr	r1, [pc, #536]	; (8000b40 <AES_Encrypt+0x260>)
 8000928:	0092      	lsls	r2, r2, #2
 800092a:	188a      	adds	r2, r1, r2
 800092c:	1c01      	adds	r1, r0, #0
 800092e:	54d1      	strb	r1, [r2, r3]
		for(Row = 0; Row < 4; Row++)
 8000930:	193b      	adds	r3, r7, r4
 8000932:	781a      	ldrb	r2, [r3, #0]
 8000934:	193b      	adds	r3, r7, r4
 8000936:	3201      	adds	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
 800093a:	231e      	movs	r3, #30
 800093c:	18fb      	adds	r3, r7, r3
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b03      	cmp	r3, #3
 8000942:	d9e0      	bls.n	8000906 <AES_Encrypt+0x26>
	for(Collum = 0; Collum < 4; Collum++)
 8000944:	211d      	movs	r1, #29
 8000946:	187b      	adds	r3, r7, r1
 8000948:	781a      	ldrb	r2, [r3, #0]
 800094a:	187b      	adds	r3, r7, r1
 800094c:	3201      	adds	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
 8000950:	231d      	movs	r3, #29
 8000952:	18fb      	adds	r3, r7, r3
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b03      	cmp	r3, #3
 8000958:	d9d0      	bls.n	80008fc <AES_Encrypt+0x1c>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 800095a:	231f      	movs	r3, #31
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	2200      	movs	r2, #0
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e00f      	b.n	8000984 <AES_Encrypt+0xa4>
	{
		Round_Key[i] = Key[i];
 8000964:	201f      	movs	r0, #31
 8000966:	183b      	adds	r3, r7, r0
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	18d2      	adds	r2, r2, r3
 800096e:	183b      	adds	r3, r7, r0
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	7811      	ldrb	r1, [r2, #0]
 8000974:	220c      	movs	r2, #12
 8000976:	18ba      	adds	r2, r7, r2
 8000978:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 16; i++)
 800097a:	183b      	adds	r3, r7, r0
 800097c:	781a      	ldrb	r2, [r3, #0]
 800097e:	183b      	adds	r3, r7, r0
 8000980:	3201      	adds	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	231f      	movs	r3, #31
 8000986:	18fb      	adds	r3, r7, r3
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	d9ea      	bls.n	8000964 <AES_Encrypt+0x84>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800098e:	230c      	movs	r3, #12
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f8d6 	bl	8000b44 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000998:	231c      	movs	r3, #28
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2201      	movs	r2, #1
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e04c      	b.n	8000a3c <AES_Encrypt+0x15c>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80009a2:	231d      	movs	r3, #29
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e02c      	b.n	8000a06 <AES_Encrypt+0x126>
		{
			for(Row = 0; Row < 4; Row++)
 80009ac:	231e      	movs	r3, #30
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	2200      	movs	r2, #0
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e01c      	b.n	80009f0 <AES_Encrypt+0x110>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 80009b6:	261e      	movs	r6, #30
 80009b8:	19bb      	adds	r3, r7, r6
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	201d      	movs	r0, #29
 80009be:	183b      	adds	r3, r7, r0
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	495f      	ldr	r1, [pc, #380]	; (8000b40 <AES_Encrypt+0x260>)
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	188a      	adds	r2, r1, r2
 80009c8:	5cd2      	ldrb	r2, [r2, r3]
 80009ca:	19bb      	adds	r3, r7, r6
 80009cc:	781d      	ldrb	r5, [r3, #0]
 80009ce:	183b      	adds	r3, r7, r0
 80009d0:	781c      	ldrb	r4, [r3, #0]
 80009d2:	0010      	movs	r0, r2
 80009d4:	f000 f900 	bl	8000bd8 <AES_Sub_Byte>
 80009d8:	0003      	movs	r3, r0
 80009da:	0019      	movs	r1, r3
 80009dc:	4a58      	ldr	r2, [pc, #352]	; (8000b40 <AES_Encrypt+0x260>)
 80009de:	00ab      	lsls	r3, r5, #2
 80009e0:	18d3      	adds	r3, r2, r3
 80009e2:	1c0a      	adds	r2, r1, #0
 80009e4:	551a      	strb	r2, [r3, r4]
			for(Row = 0; Row < 4; Row++)
 80009e6:	19bb      	adds	r3, r7, r6
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	19bb      	adds	r3, r7, r6
 80009ec:	3201      	adds	r2, #1
 80009ee:	701a      	strb	r2, [r3, #0]
 80009f0:	231e      	movs	r3, #30
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d9dd      	bls.n	80009b6 <AES_Encrypt+0xd6>
		for(Collum = 0; Collum < 4; Collum++)
 80009fa:	211d      	movs	r1, #29
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	3201      	adds	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
 8000a06:	231d      	movs	r3, #29
 8000a08:	18fb      	adds	r3, r7, r3
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d9cd      	bls.n	80009ac <AES_Encrypt+0xcc>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000a10:	f000 f908 	bl	8000c24 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000a14:	f000 f950 	bl	8000cb8 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8000a18:	250c      	movs	r5, #12
 8000a1a:	197a      	adds	r2, r7, r5
 8000a1c:	241c      	movs	r4, #28
 8000a1e:	193b      	adds	r3, r7, r4
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	0011      	movs	r1, r2
 8000a24:	0018      	movs	r0, r3
 8000a26:	f000 fa07 	bl	8000e38 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000a2a:	197b      	adds	r3, r7, r5
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f000 f889 	bl	8000b44 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000a32:	193b      	adds	r3, r7, r4
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	3201      	adds	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
 8000a3c:	231c      	movs	r3, #28
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b09      	cmp	r3, #9
 8000a44:	d9ad      	bls.n	80009a2 <AES_Encrypt+0xc2>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000a46:	231d      	movs	r3, #29
 8000a48:	18fb      	adds	r3, r7, r3
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	e02c      	b.n	8000aaa <AES_Encrypt+0x1ca>
	{
		for(Row = 0; Row < 4; Row++)
 8000a50:	231e      	movs	r3, #30
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
 8000a58:	e01c      	b.n	8000a94 <AES_Encrypt+0x1b4>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000a5a:	261e      	movs	r6, #30
 8000a5c:	19bb      	adds	r3, r7, r6
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	201d      	movs	r0, #29
 8000a62:	183b      	adds	r3, r7, r0
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	4936      	ldr	r1, [pc, #216]	; (8000b40 <AES_Encrypt+0x260>)
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	188a      	adds	r2, r1, r2
 8000a6c:	5cd2      	ldrb	r2, [r2, r3]
 8000a6e:	19bb      	adds	r3, r7, r6
 8000a70:	781d      	ldrb	r5, [r3, #0]
 8000a72:	183b      	adds	r3, r7, r0
 8000a74:	781c      	ldrb	r4, [r3, #0]
 8000a76:	0010      	movs	r0, r2
 8000a78:	f000 f8ae 	bl	8000bd8 <AES_Sub_Byte>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0019      	movs	r1, r3
 8000a80:	4a2f      	ldr	r2, [pc, #188]	; (8000b40 <AES_Encrypt+0x260>)
 8000a82:	00ab      	lsls	r3, r5, #2
 8000a84:	18d3      	adds	r3, r2, r3
 8000a86:	1c0a      	adds	r2, r1, #0
 8000a88:	551a      	strb	r2, [r3, r4]
		for(Row = 0; Row < 4; Row++)
 8000a8a:	19bb      	adds	r3, r7, r6
 8000a8c:	781a      	ldrb	r2, [r3, #0]
 8000a8e:	19bb      	adds	r3, r7, r6
 8000a90:	3201      	adds	r2, #1
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	231e      	movs	r3, #30
 8000a96:	18fb      	adds	r3, r7, r3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d9dd      	bls.n	8000a5a <AES_Encrypt+0x17a>
	for(Collum = 0; Collum < 4; Collum++)
 8000a9e:	211d      	movs	r1, #29
 8000aa0:	187b      	adds	r3, r7, r1
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	3201      	adds	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	241d      	movs	r4, #29
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d9cd      	bls.n	8000a50 <AES_Encrypt+0x170>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8000ab4:	f000 f8b6 	bl	8000c24 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000ab8:	250c      	movs	r5, #12
 8000aba:	197a      	adds	r2, r7, r5
 8000abc:	231c      	movs	r3, #28
 8000abe:	18fb      	adds	r3, r7, r3
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 f9b7 	bl	8000e38 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000aca:	197b      	adds	r3, r7, r5
 8000acc:	0018      	movs	r0, r3
 8000ace:	f000 f839 	bl	8000b44 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	701a      	strb	r2, [r3, #0]
 8000ad8:	e028      	b.n	8000b2c <AES_Encrypt+0x24c>
	{
		for(Row = 0; Row < 4; Row++)
 8000ada:	231e      	movs	r3, #30
 8000adc:	18fb      	adds	r3, r7, r3
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	e018      	b.n	8000b16 <AES_Encrypt+0x236>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000ae4:	241e      	movs	r4, #30
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	7819      	ldrb	r1, [r3, #0]
 8000aea:	251d      	movs	r5, #29
 8000aec:	197b      	adds	r3, r7, r5
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	7818      	ldrb	r0, [r3, #0]
 8000af4:	197b      	adds	r3, r7, r5
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18c3      	adds	r3, r0, r3
 8000afc:	0018      	movs	r0, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	181b      	adds	r3, r3, r0
 8000b02:	480f      	ldr	r0, [pc, #60]	; (8000b40 <AES_Encrypt+0x260>)
 8000b04:	0089      	lsls	r1, r1, #2
 8000b06:	1841      	adds	r1, r0, r1
 8000b08:	5c8a      	ldrb	r2, [r1, r2]
 8000b0a:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	781a      	ldrb	r2, [r3, #0]
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	3201      	adds	r2, #1
 8000b14:	701a      	strb	r2, [r3, #0]
 8000b16:	231e      	movs	r3, #30
 8000b18:	18fb      	adds	r3, r7, r3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b03      	cmp	r3, #3
 8000b1e:	d9e1      	bls.n	8000ae4 <AES_Encrypt+0x204>
	for(Collum = 0; Collum < 4; Collum++)
 8000b20:	211d      	movs	r1, #29
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	187b      	adds	r3, r7, r1
 8000b28:	3201      	adds	r2, #1
 8000b2a:	701a      	strb	r2, [r3, #0]
 8000b2c:	231d      	movs	r3, #29
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d9d1      	bls.n	8000ada <AES_Encrypt+0x1fa>
		}
	}

}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b009      	add	sp, #36	; 0x24
 8000b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b40:	20000244 	.word	0x20000244

08000b44 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000b4c:	230e      	movs	r3, #14
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
 8000b54:	e033      	b.n	8000bbe <AES_Add_Round_Key+0x7a>
	{
		for(Row = 0; Row < 4; Row++)
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e023      	b.n	8000ba8 <AES_Add_Round_Key+0x64>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000b60:	240f      	movs	r4, #15
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	781a      	ldrb	r2, [r3, #0]
 8000b66:	250e      	movs	r5, #14
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	4919      	ldr	r1, [pc, #100]	; (8000bd4 <AES_Add_Round_Key+0x90>)
 8000b6e:	0092      	lsls	r2, r2, #2
 8000b70:	188a      	adds	r2, r1, r2
 8000b72:	5cd0      	ldrb	r0, [r2, r3]
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	781a      	ldrb	r2, [r3, #0]
 8000b78:	197b      	adds	r3, r7, r5
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	18d3      	adds	r3, r2, r3
 8000b80:	001a      	movs	r2, r3
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	7819      	ldrb	r1, [r3, #0]
 8000b88:	193b      	adds	r3, r7, r4
 8000b8a:	781a      	ldrb	r2, [r3, #0]
 8000b8c:	197b      	adds	r3, r7, r5
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4041      	eors	r1, r0
 8000b92:	b2c8      	uxtb	r0, r1
 8000b94:	490f      	ldr	r1, [pc, #60]	; (8000bd4 <AES_Add_Round_Key+0x90>)
 8000b96:	0092      	lsls	r2, r2, #2
 8000b98:	188a      	adds	r2, r1, r2
 8000b9a:	1c01      	adds	r1, r0, #0
 8000b9c:	54d1      	strb	r1, [r2, r3]
		for(Row = 0; Row < 4; Row++)
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	3201      	adds	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	230f      	movs	r3, #15
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d9d6      	bls.n	8000b60 <AES_Add_Round_Key+0x1c>
	for(Collum = 0; Collum < 4; Collum++)
 8000bb2:	210e      	movs	r1, #14
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	3201      	adds	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	230e      	movs	r3, #14
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b03      	cmp	r3, #3
 8000bc6:	d9c6      	bls.n	8000b56 <AES_Add_Round_Key+0x12>
		}
	}
}
 8000bc8:	46c0      	nop			; (mov r8, r8)
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b004      	add	sp, #16
 8000bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	20000244 	.word	0x20000244

08000bd8 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8000bd8:	b590      	push	{r4, r7, lr}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	701a      	strb	r2, [r3, #0]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8000be4:	200f      	movs	r0, #15
 8000be6:	183b      	adds	r3, r7, r0
 8000be8:	1dfa      	adds	r2, r7, #7
 8000bea:	7812      	ldrb	r2, [r2, #0]
 8000bec:	0912      	lsrs	r2, r2, #4
 8000bee:	701a      	strb	r2, [r3, #0]
	S_Collum = (Byte & 0x0F);
 8000bf0:	240e      	movs	r4, #14
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	1dfa      	adds	r2, r7, #7
 8000bf6:	7812      	ldrb	r2, [r2, #0]
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	701a      	strb	r2, [r3, #0]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8000bfe:	183b      	adds	r3, r7, r0
 8000c00:	7819      	ldrb	r1, [r3, #0]
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	240d      	movs	r4, #13
 8000c08:	193b      	adds	r3, r7, r4
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <AES_Sub_Byte+0x48>)
 8000c0c:	0109      	lsls	r1, r1, #4
 8000c0e:	1841      	adds	r1, r0, r1
 8000c10:	5c8a      	ldrb	r2, [r1, r2]
 8000c12:	701a      	strb	r2, [r3, #0]

	return S_Byte;
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	781b      	ldrb	r3, [r3, #0]
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b005      	add	sp, #20
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000000 	.word	0x20000000

08000c24 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c2e:	7912      	ldrb	r2, [r2, #4]
 8000c30:	701a      	strb	r2, [r3, #0]
	//Shift all bytes
	State[1][0] = State[1][1];
 8000c32:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c34:	795a      	ldrb	r2, [r3, #5]
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c38:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 8000c3a:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c3c:	799a      	ldrb	r2, [r3, #6]
 8000c3e:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c40:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 8000c42:	4b1c      	ldr	r3, [pc, #112]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c44:	79da      	ldrb	r2, [r3, #7]
 8000c46:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c48:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c4c:	1dfa      	adds	r2, r7, #7
 8000c4e:	7812      	ldrb	r2, [r2, #0]
 8000c50:	71da      	strb	r2, [r3, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	4a17      	ldr	r2, [pc, #92]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c56:	7a12      	ldrb	r2, [r2, #8]
 8000c58:	701a      	strb	r2, [r3, #0]
	State[2][0] = State[2][2];
 8000c5a:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c5c:	7a9a      	ldrb	r2, [r3, #10]
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c60:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8000c62:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c64:	1dfa      	adds	r2, r7, #7
 8000c66:	7812      	ldrb	r2, [r2, #0]
 8000c68:	729a      	strb	r2, [r3, #10]
	Buffer = State[2][1];
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	4a11      	ldr	r2, [pc, #68]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c6e:	7a52      	ldrb	r2, [r2, #9]
 8000c70:	701a      	strb	r2, [r3, #0]
	State[2][1] = State[2][3];
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c74:	7ada      	ldrb	r2, [r3, #11]
 8000c76:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c78:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c7c:	1dfa      	adds	r2, r7, #7
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	72da      	strb	r2, [r3, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c86:	7bd2      	ldrb	r2, [r2, #15]
 8000c88:	701a      	strb	r2, [r3, #0]
	State[3][3] = State[3][2];
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c8c:	7b9a      	ldrb	r2, [r3, #14]
 8000c8e:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c90:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c94:	7b5a      	ldrb	r2, [r3, #13]
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c98:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000c9c:	7b1a      	ldrb	r2, [r3, #12]
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000ca0:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <AES_Shift_Rows+0x90>)
 8000ca4:	1dfa      	adds	r2, r7, #7
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	731a      	strb	r2, [r3, #12]
}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20000244 	.word	0x20000244

08000cb8 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000cbe:	230e      	movs	r3, #14
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e0aa      	b.n	8000e1e <AES_Mix_Collums+0x166>
	{
		for(Row = 0; Row < 4; Row++)
 8000cc8:	230f      	movs	r3, #15
 8000cca:	18fb      	adds	r3, r7, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	e03b      	b.n	8000d4a <AES_Mix_Collums+0x92>
		{
			a[Row] = State[Row][Collum];
 8000cd2:	240f      	movs	r4, #15
 8000cd4:	193b      	adds	r3, r7, r4
 8000cd6:	7819      	ldrb	r1, [r3, #0]
 8000cd8:	250e      	movs	r5, #14
 8000cda:	197b      	adds	r3, r7, r5
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	193b      	adds	r3, r7, r4
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4854      	ldr	r0, [pc, #336]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000ce4:	0089      	lsls	r1, r1, #2
 8000ce6:	1841      	adds	r1, r0, r1
 8000ce8:	5c89      	ldrb	r1, [r1, r2]
 8000cea:	2208      	movs	r2, #8
 8000cec:	18ba      	adds	r2, r7, r2
 8000cee:	54d1      	strb	r1, [r2, r3]
			b[Row] = (State[Row][Collum] << 1);
 8000cf0:	0020      	movs	r0, r4
 8000cf2:	183b      	adds	r3, r7, r0
 8000cf4:	781a      	ldrb	r2, [r3, #0]
 8000cf6:	002c      	movs	r4, r5
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	494d      	ldr	r1, [pc, #308]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000cfe:	0092      	lsls	r2, r2, #2
 8000d00:	188a      	adds	r2, r1, r2
 8000d02:	5cd1      	ldrb	r1, [r2, r3]
 8000d04:	183b      	adds	r3, r7, r0
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	1c0b      	adds	r3, r1, #0
 8000d0a:	18db      	adds	r3, r3, r3
 8000d0c:	b2d9      	uxtb	r1, r3
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	5499      	strb	r1, [r3, r2]

			if((State[Row][Collum] & 0x80) == 0x80)
 8000d12:	183b      	adds	r3, r7, r0
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	4946      	ldr	r1, [pc, #280]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	188a      	adds	r2, r1, r2
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	da0a      	bge.n	8000d3e <AES_Mix_Collums+0x86>
			{
				b[Row] = b[Row] ^ 0x1B;
 8000d28:	183b      	adds	r3, r7, r0
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	1d3a      	adds	r2, r7, #4
 8000d2e:	5cd2      	ldrb	r2, [r2, r3]
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	211b      	movs	r1, #27
 8000d36:	404a      	eors	r2, r1
 8000d38:	b2d1      	uxtb	r1, r2
 8000d3a:	1d3a      	adds	r2, r7, #4
 8000d3c:	54d1      	strb	r1, [r2, r3]
		for(Row = 0; Row < 4; Row++)
 8000d3e:	210f      	movs	r1, #15
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	3201      	adds	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	230f      	movs	r3, #15
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b03      	cmp	r3, #3
 8000d52:	d9be      	bls.n	8000cd2 <AES_Mix_Collums+0x1a>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 8000d54:	1d3b      	adds	r3, r7, #4
 8000d56:	781a      	ldrb	r2, [r3, #0]
 8000d58:	2008      	movs	r0, #8
 8000d5a:	183b      	adds	r3, r7, r0
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	4053      	eors	r3, r2
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	785b      	ldrb	r3, [r3, #1]
 8000d66:	4053      	eors	r3, r2
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	4053      	eors	r3, r2
 8000d70:	b2d9      	uxtb	r1, r3
 8000d72:	183b      	adds	r3, r7, r0
 8000d74:	78da      	ldrb	r2, [r3, #3]
 8000d76:	240e      	movs	r4, #14
 8000d78:	193b      	adds	r3, r7, r4
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	404a      	eors	r2, r1
 8000d7e:	b2d1      	uxtb	r1, r2
 8000d80:	4a2c      	ldr	r2, [pc, #176]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000d82:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 8000d84:	183b      	adds	r3, r7, r0
 8000d86:	781a      	ldrb	r2, [r3, #0]
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	785b      	ldrb	r3, [r3, #1]
 8000d8c:	4053      	eors	r3, r2
 8000d8e:	b2da      	uxtb	r2, r3
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	789b      	ldrb	r3, [r3, #2]
 8000d94:	4053      	eors	r3, r2
 8000d96:	b2da      	uxtb	r2, r3
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	789b      	ldrb	r3, [r3, #2]
 8000d9c:	4053      	eors	r3, r2
 8000d9e:	b2d9      	uxtb	r1, r3
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	78da      	ldrb	r2, [r3, #3]
 8000da4:	193b      	adds	r3, r7, r4
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	404a      	eors	r2, r1
 8000daa:	b2d1      	uxtb	r1, r2
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000dae:	18d3      	adds	r3, r2, r3
 8000db0:	1c0a      	adds	r2, r1, #0
 8000db2:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000db4:	183b      	adds	r3, r7, r0
 8000db6:	781a      	ldrb	r2, [r3, #0]
 8000db8:	183b      	adds	r3, r7, r0
 8000dba:	785b      	ldrb	r3, [r3, #1]
 8000dbc:	4053      	eors	r3, r2
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	4053      	eors	r3, r2
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	183b      	adds	r3, r7, r0
 8000dca:	78db      	ldrb	r3, [r3, #3]
 8000dcc:	4053      	eors	r3, r2
 8000dce:	b2d9      	uxtb	r1, r3
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	78da      	ldrb	r2, [r3, #3]
 8000dd4:	193b      	adds	r3, r7, r4
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	404a      	eors	r2, r1
 8000dda:	b2d1      	uxtb	r1, r2
 8000ddc:	4a15      	ldr	r2, [pc, #84]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	1c0a      	adds	r2, r1, #0
 8000de2:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000de4:	183b      	adds	r3, r7, r0
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	1d3b      	adds	r3, r7, #4
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4053      	eors	r3, r2
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	183b      	adds	r3, r7, r0
 8000df2:	785b      	ldrb	r3, [r3, #1]
 8000df4:	4053      	eors	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	789b      	ldrb	r3, [r3, #2]
 8000dfc:	4053      	eors	r3, r2
 8000dfe:	b2d9      	uxtb	r1, r3
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	78da      	ldrb	r2, [r3, #3]
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	404a      	eors	r2, r1
 8000e0a:	b2d1      	uxtb	r1, r2
 8000e0c:	4a09      	ldr	r2, [pc, #36]	; (8000e34 <AES_Mix_Collums+0x17c>)
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	1c0a      	adds	r2, r1, #0
 8000e12:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	781a      	ldrb	r2, [r3, #0]
 8000e18:	193b      	adds	r3, r7, r4
 8000e1a:	3201      	adds	r2, #1
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	230e      	movs	r3, #14
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d800      	bhi.n	8000e2a <AES_Mix_Collums+0x172>
 8000e28:	e74e      	b.n	8000cc8 <AES_Mix_Collums+0x10>
	}
}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	46c0      	nop			; (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	b004      	add	sp, #16
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}
 8000e34:	20000244 	.word	0x20000244

08000e38 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	1dfb      	adds	r3, r7, #7
 8000e44:	701a      	strb	r2, [r3, #0]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000e46:	2317      	movs	r3, #23
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e010      	b.n	8000e72 <AES_Calculate_Round_Key+0x3a>
	{
		Temp[i] = Round_Key[i+12];
 8000e50:	2017      	movs	r0, #23
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	330c      	adds	r3, #12
 8000e58:	683a      	ldr	r2, [r7, #0]
 8000e5a:	18d2      	adds	r2, r2, r3
 8000e5c:	183b      	adds	r3, r7, r0
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	7811      	ldrb	r1, [r2, #0]
 8000e62:	220c      	movs	r2, #12
 8000e64:	18ba      	adds	r2, r7, r2
 8000e66:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 4; i++)
 8000e68:	183b      	adds	r3, r7, r0
 8000e6a:	781a      	ldrb	r2, [r3, #0]
 8000e6c:	183b      	adds	r3, r7, r0
 8000e6e:	3201      	adds	r2, #1
 8000e70:	701a      	strb	r2, [r3, #0]
 8000e72:	2017      	movs	r0, #23
 8000e74:	183b      	adds	r3, r7, r0
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d9e9      	bls.n	8000e50 <AES_Calculate_Round_Key+0x18>
	}

	//Rotate Temp
	Buffer = Temp[0];
 8000e7c:	2414      	movs	r4, #20
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	210c      	movs	r1, #12
 8000e82:	187a      	adds	r2, r7, r1
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	701a      	strb	r2, [r3, #0]
	Temp[0] = Temp[1];
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	785a      	ldrb	r2, [r3, #1]
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	701a      	strb	r2, [r3, #0]
	Temp[1] = Temp[2];
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	789a      	ldrb	r2, [r3, #2]
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	705a      	strb	r2, [r3, #1]
	Temp[2] = Temp[3];
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	78da      	ldrb	r2, [r3, #3]
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	709a      	strb	r2, [r3, #2]
	Temp[3] = Buffer;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	193a      	adds	r2, r7, r4
 8000ea4:	7812      	ldrb	r2, [r2, #0]
 8000ea6:	70da      	strb	r2, [r3, #3]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 8000ea8:	183b      	adds	r3, r7, r0
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	e013      	b.n	8000ed8 <AES_Calculate_Round_Key+0xa0>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 8000eb0:	2517      	movs	r5, #23
 8000eb2:	197b      	adds	r3, r7, r5
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	260c      	movs	r6, #12
 8000eb8:	19ba      	adds	r2, r7, r6
 8000eba:	5cd2      	ldrb	r2, [r2, r3]
 8000ebc:	197b      	adds	r3, r7, r5
 8000ebe:	781c      	ldrb	r4, [r3, #0]
 8000ec0:	0010      	movs	r0, r2
 8000ec2:	f7ff fe89 	bl	8000bd8 <AES_Sub_Byte>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	001a      	movs	r2, r3
 8000eca:	19bb      	adds	r3, r7, r6
 8000ecc:	551a      	strb	r2, [r3, r4]
	for(i = 0; i < 4; i++)
 8000ece:	197b      	adds	r3, r7, r5
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	197b      	adds	r3, r7, r5
 8000ed4:	3201      	adds	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
 8000ed8:	2317      	movs	r3, #23
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	d9e6      	bls.n	8000eb0 <AES_Calculate_Round_Key+0x78>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000ee2:	2315      	movs	r3, #21
 8000ee4:	18fb      	adds	r3, r7, r3
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	701a      	strb	r2, [r3, #0]
	while(Round != 1)
 8000eea:	e01c      	b.n	8000f26 <AES_Calculate_Round_Key+0xee>
	{
		b = Rcon & 0x80;
 8000eec:	2413      	movs	r4, #19
 8000eee:	193b      	adds	r3, r7, r4
 8000ef0:	2015      	movs	r0, #21
 8000ef2:	183a      	adds	r2, r7, r0
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	217f      	movs	r1, #127	; 0x7f
 8000ef8:	438a      	bics	r2, r1
 8000efa:	701a      	strb	r2, [r3, #0]
		Rcon = Rcon << 1;
 8000efc:	0001      	movs	r1, r0
 8000efe:	187a      	adds	r2, r7, r1
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	18db      	adds	r3, r3, r3
 8000f06:	7013      	strb	r3, [r2, #0]
		if(b == 0x80)
 8000f08:	193b      	adds	r3, r7, r4
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b80      	cmp	r3, #128	; 0x80
 8000f0e:	d105      	bne.n	8000f1c <AES_Calculate_Round_Key+0xe4>
		{
			Rcon = Rcon ^ 0x1b;
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	187a      	adds	r2, r7, r1
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	211b      	movs	r1, #27
 8000f18:	404a      	eors	r2, r1
 8000f1a:	701a      	strb	r2, [r3, #0]
		}
		Round--;
 8000f1c:	1dfb      	adds	r3, r7, #7
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	3a01      	subs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
	while(Round != 1)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d1de      	bne.n	8000eec <AES_Calculate_Round_Key+0xb4>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8000f2e:	210c      	movs	r1, #12
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	781a      	ldrb	r2, [r3, #0]
 8000f34:	2315      	movs	r3, #21
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	4053      	eors	r3, r2
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	701a      	strb	r2, [r3, #0]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000f42:	2317      	movs	r3, #23
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	2200      	movs	r2, #0
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e03f      	b.n	8000fcc <AES_Calculate_Round_Key+0x194>
	{
		for(j = 0; j < 4; j++)
 8000f4c:	2316      	movs	r3, #22
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
 8000f54:	e02f      	b.n	8000fb6 <AES_Calculate_Round_Key+0x17e>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000f56:	2416      	movs	r4, #22
 8000f58:	193b      	adds	r3, r7, r4
 8000f5a:	781a      	ldrb	r2, [r3, #0]
 8000f5c:	2517      	movs	r5, #23
 8000f5e:	197b      	adds	r3, r7, r5
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	18d3      	adds	r3, r2, r3
 8000f66:	001a      	movs	r2, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	189b      	adds	r3, r3, r2
 8000f6c:	7819      	ldrb	r1, [r3, #0]
 8000f6e:	193b      	adds	r3, r7, r4
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	260c      	movs	r6, #12
 8000f74:	19ba      	adds	r2, r7, r6
 8000f76:	5cd2      	ldrb	r2, [r2, r3]
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	7818      	ldrb	r0, [r3, #0]
 8000f7c:	197b      	adds	r3, r7, r5
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	0018      	movs	r0, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	181b      	adds	r3, r3, r0
 8000f8a:	404a      	eors	r2, r1
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	781a      	ldrb	r2, [r3, #0]
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	18d3      	adds	r3, r2, r3
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	189a      	adds	r2, r3, r2
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	7811      	ldrb	r1, [r2, #0]
 8000fa8:	19ba      	adds	r2, r7, r6
 8000faa:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j < 4; j++)
 8000fac:	193b      	adds	r3, r7, r4
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	193b      	adds	r3, r7, r4
 8000fb2:	3201      	adds	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	2316      	movs	r3, #22
 8000fb8:	18fb      	adds	r3, r7, r3
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d9ca      	bls.n	8000f56 <AES_Calculate_Round_Key+0x11e>
	for(i = 0; i < 4; i++)
 8000fc0:	2117      	movs	r1, #23
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	781a      	ldrb	r2, [r3, #0]
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	3201      	adds	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	2317      	movs	r3, #23
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d9ba      	bls.n	8000f4c <AES_Calculate_Round_Key+0x114>
		}
	}
}
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b007      	add	sp, #28
 8000fde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fe0 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8000fe0:	b5b0      	push	{r4, r5, r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	0008      	movs	r0, r1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	0019      	movs	r1, r3
 8000fee:	240b      	movs	r4, #11
 8000ff0:	193b      	adds	r3, r7, r4
 8000ff2:	1c02      	adds	r2, r0, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
 8000ff6:	230a      	movs	r3, #10
 8000ff8:	18fb      	adds	r3, r7, r3
 8000ffa:	1c0a      	adds	r2, r1, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
	unsigned char i = 0x00;
 8000ffe:	2327      	movs	r3, #39	; 0x27
 8001000:	18fb      	adds	r3, r7, r3
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8001006:	2025      	movs	r0, #37	; 0x25
 8001008:	183b      	adds	r3, r7, r0
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
	unsigned char Incomplete_Block_Size = 0x00;
 800100e:	2124      	movs	r1, #36	; 0x24
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	701a      	strb	r2, [r3, #0]

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8001016:	183b      	adds	r3, r7, r0
 8001018:	193a      	adds	r2, r7, r4
 800101a:	7812      	ldrb	r2, [r2, #0]
 800101c:	0912      	lsrs	r2, r2, #4
 800101e:	701a      	strb	r2, [r3, #0]
	Incomplete_Block_Size = Data_Length % 16;
 8001020:	000d      	movs	r5, r1
 8001022:	187b      	adds	r3, r7, r1
 8001024:	193a      	adds	r2, r7, r4
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	210f      	movs	r1, #15
 800102a:	400a      	ands	r2, r1
 800102c:	701a      	strb	r2, [r3, #0]
	if(Incomplete_Block_Size != 0)
 800102e:	197b      	adds	r3, r7, r5
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d004      	beq.n	8001040 <Encrypt_Payload+0x60>
	{
		Number_of_Blocks++;
 8001036:	183b      	adds	r3, r7, r0
 8001038:	781a      	ldrb	r2, [r3, #0]
 800103a:	183b      	adds	r3, r7, r0
 800103c:	3201      	adds	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8001040:	2327      	movs	r3, #39	; 0x27
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	2201      	movs	r2, #1
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e096      	b.n	8001178 <Encrypt_Payload+0x198>
	{
		Block_A[0] = 0x01;
 800104a:	2114      	movs	r1, #20
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2201      	movs	r2, #1
 8001050:	701a      	strb	r2, [r3, #0]
		Block_A[1] = 0x00;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	705a      	strb	r2, [r3, #1]
		Block_A[2] = 0x00;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2200      	movs	r2, #0
 800105c:	709a      	strb	r2, [r3, #2]
		Block_A[3] = 0x00;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2200      	movs	r2, #0
 8001062:	70da      	strb	r2, [r3, #3]
		Block_A[4] = 0x00;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	711a      	strb	r2, [r3, #4]

		Block_A[5] = Direction;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	220a      	movs	r2, #10
 800106e:	18ba      	adds	r2, r7, r2
 8001070:	7812      	ldrb	r2, [r2, #0]
 8001072:	715a      	strb	r2, [r3, #5]

		Block_A[6] = DevAddr[3];
 8001074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001076:	78da      	ldrb	r2, [r3, #3]
 8001078:	187b      	adds	r3, r7, r1
 800107a:	719a      	strb	r2, [r3, #6]
		Block_A[7] = DevAddr[2];
 800107c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800107e:	789a      	ldrb	r2, [r3, #2]
 8001080:	187b      	adds	r3, r7, r1
 8001082:	71da      	strb	r2, [r3, #7]
		Block_A[8] = DevAddr[1];
 8001084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001086:	785a      	ldrb	r2, [r3, #1]
 8001088:	187b      	adds	r3, r7, r1
 800108a:	721a      	strb	r2, [r3, #8]
		Block_A[9] = DevAddr[0];
 800108c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800108e:	781a      	ldrb	r2, [r3, #0]
 8001090:	187b      	adds	r3, r7, r1
 8001092:	725a      	strb	r2, [r3, #9]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	187b      	adds	r3, r7, r1
 800109a:	729a      	strb	r2, [r3, #10]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	0a1b      	lsrs	r3, r3, #8
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	72da      	strb	r2, [r3, #11]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2200      	movs	r2, #0
 80010aa:	731a      	strb	r2, [r3, #12]
		Block_A[13] = 0x00;
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	2200      	movs	r2, #0
 80010b0:	735a      	strb	r2, [r3, #13]

		Block_A[14] = 0x00;
 80010b2:	187b      	adds	r3, r7, r1
 80010b4:	2200      	movs	r2, #0
 80010b6:	739a      	strb	r2, [r3, #14]

		Block_A[15] = i;
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	2427      	movs	r4, #39	; 0x27
 80010bc:	193a      	adds	r2, r7, r4
 80010be:	7812      	ldrb	r2, [r2, #0]
 80010c0:	73da      	strb	r2, [r3, #15]

		//Calculate S
		AES_Encrypt(Block_A, Key);
 80010c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f7ff fc09 	bl	80008e0 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 80010ce:	193a      	adds	r2, r7, r4
 80010d0:	2325      	movs	r3, #37	; 0x25
 80010d2:	18fb      	adds	r3, r7, r3
 80010d4:	7812      	ldrb	r2, [r2, #0]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d01e      	beq.n	800111a <Encrypt_Payload+0x13a>
		{
			for(j = 0; j < 16; j++)
 80010dc:	2326      	movs	r3, #38	; 0x26
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e013      	b.n	800110e <Encrypt_Payload+0x12e>
			{
				*Data = *Data ^ Block_A[j];
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	781a      	ldrb	r2, [r3, #0]
 80010ea:	2026      	movs	r0, #38	; 0x26
 80010ec:	183b      	adds	r3, r7, r0
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2114      	movs	r1, #20
 80010f2:	1879      	adds	r1, r7, r1
 80010f4:	5ccb      	ldrb	r3, [r1, r3]
 80010f6:	4053      	eors	r3, r2
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	701a      	strb	r2, [r3, #0]
				Data++;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8001104:	183b      	adds	r3, r7, r0
 8001106:	781a      	ldrb	r2, [r3, #0]
 8001108:	183b      	adds	r3, r7, r0
 800110a:	3201      	adds	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
 800110e:	2326      	movs	r3, #38	; 0x26
 8001110:	18fb      	adds	r3, r7, r3
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0f      	cmp	r3, #15
 8001116:	d9e6      	bls.n	80010e6 <Encrypt_Payload+0x106>
 8001118:	e028      	b.n	800116c <Encrypt_Payload+0x18c>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 800111a:	2224      	movs	r2, #36	; 0x24
 800111c:	18bb      	adds	r3, r7, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d102      	bne.n	800112a <Encrypt_Payload+0x14a>
			{
				Incomplete_Block_Size = 16;
 8001124:	18bb      	adds	r3, r7, r2
 8001126:	2210      	movs	r2, #16
 8001128:	701a      	strb	r2, [r3, #0]
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 800112a:	2326      	movs	r3, #38	; 0x26
 800112c:	18fb      	adds	r3, r7, r3
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
 8001132:	e013      	b.n	800115c <Encrypt_Payload+0x17c>
			{
				*Data = *Data ^ Block_A[j];
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	781a      	ldrb	r2, [r3, #0]
 8001138:	2026      	movs	r0, #38	; 0x26
 800113a:	183b      	adds	r3, r7, r0
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2114      	movs	r1, #20
 8001140:	1879      	adds	r1, r7, r1
 8001142:	5ccb      	ldrb	r3, [r1, r3]
 8001144:	4053      	eors	r3, r2
 8001146:	b2da      	uxtb	r2, r3
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	701a      	strb	r2, [r3, #0]
				Data++;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 8001152:	183b      	adds	r3, r7, r0
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	183b      	adds	r3, r7, r0
 8001158:	3201      	adds	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
 800115c:	2326      	movs	r3, #38	; 0x26
 800115e:	18fa      	adds	r2, r7, r3
 8001160:	2324      	movs	r3, #36	; 0x24
 8001162:	18fb      	adds	r3, r7, r3
 8001164:	7812      	ldrb	r2, [r2, #0]
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	429a      	cmp	r2, r3
 800116a:	d3e3      	bcc.n	8001134 <Encrypt_Payload+0x154>
	for(i = 1; i <= Number_of_Blocks; i++)
 800116c:	2127      	movs	r1, #39	; 0x27
 800116e:	187b      	adds	r3, r7, r1
 8001170:	781a      	ldrb	r2, [r3, #0]
 8001172:	187b      	adds	r3, r7, r1
 8001174:	3201      	adds	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	2327      	movs	r3, #39	; 0x27
 800117a:	18fa      	adds	r2, r7, r3
 800117c:	2325      	movs	r3, #37	; 0x25
 800117e:	18fb      	adds	r3, r7, r3
 8001180:	7812      	ldrb	r2, [r2, #0]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	429a      	cmp	r2, r3
 8001186:	d800      	bhi.n	800118a <Encrypt_Payload+0x1aa>
 8001188:	e75f      	b.n	800104a <Encrypt_Payload+0x6a>
			}
		}
	}
}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	46c0      	nop			; (mov r8, r8)
 800118e:	46bd      	mov	sp, r7
 8001190:	b00a      	add	sp, #40	; 0x28
 8001192:	bdb0      	pop	{r4, r5, r7, pc}

08001194 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	b09a      	sub	sp, #104	; 0x68
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 80011a4:	2344      	movs	r3, #68	; 0x44
 80011a6:	18fb      	adds	r3, r7, r3
 80011a8:	4aca      	ldr	r2, [pc, #808]	; (80014d4 <Calculate_MIC+0x340>)
 80011aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011ac:	c313      	stmia	r3!, {r0, r1, r4}
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	601a      	str	r2, [r3, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 80011b2:	2334      	movs	r3, #52	; 0x34
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	4ac7      	ldr	r2, [pc, #796]	; (80014d4 <Calculate_MIC+0x340>)
 80011b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011ba:	c313      	stmia	r3!, {r0, r1, r4}
 80011bc:	6812      	ldr	r2, [r2, #0]
 80011be:	601a      	str	r2, [r3, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 80011c0:	2324      	movs	r3, #36	; 0x24
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	4ac3      	ldr	r2, [pc, #780]	; (80014d4 <Calculate_MIC+0x340>)
 80011c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011c8:	c313      	stmia	r3!, {r0, r1, r4}
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	601a      	str	r2, [r3, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 80011ce:	2314      	movs	r3, #20
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	4ac0      	ldr	r2, [pc, #768]	; (80014d4 <Calculate_MIC+0x340>)
 80011d4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80011d6:	c313      	stmia	r3!, {r0, r1, r4}
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	601a      	str	r2, [r3, #0]
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 80011dc:	2066      	movs	r0, #102	; 0x66
 80011de:	183b      	adds	r3, r7, r0
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
	unsigned char Incomplete_Block_Size = 0x00;
 80011e4:	2464      	movs	r4, #100	; 0x64
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
	unsigned char Block_Counter = 0x01;
 80011ec:	2365      	movs	r3, #101	; 0x65
 80011ee:	18fb      	adds	r3, r7, r3
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]

	//Create Block_B
	Block_B[0] = 0x49;
 80011f4:	2154      	movs	r1, #84	; 0x54
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2249      	movs	r2, #73	; 0x49
 80011fa:	701a      	strb	r2, [r3, #0]
	Block_B[1] = 0x00;
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	Block_B[2] = 0x00;
 8001202:	187b      	adds	r3, r7, r1
 8001204:	2200      	movs	r2, #0
 8001206:	709a      	strb	r2, [r3, #2]
	Block_B[3] = 0x00;
 8001208:	187b      	adds	r3, r7, r1
 800120a:	2200      	movs	r2, #0
 800120c:	70da      	strb	r2, [r3, #3]
	Block_B[4] = 0x00;
 800120e:	187b      	adds	r3, r7, r1
 8001210:	2200      	movs	r2, #0
 8001212:	711a      	strb	r2, [r3, #4]

	Block_B[5] = Direction;
 8001214:	187a      	adds	r2, r7, r1
 8001216:	2370      	movs	r3, #112	; 0x70
 8001218:	2508      	movs	r5, #8
 800121a:	195b      	adds	r3, r3, r5
 800121c:	19db      	adds	r3, r3, r7
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	7153      	strb	r3, [r2, #5]

	Block_B[6] = DevAddr[3];
 8001222:	2580      	movs	r5, #128	; 0x80
 8001224:	197b      	adds	r3, r7, r5
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	78da      	ldrb	r2, [r3, #3]
 800122a:	187b      	adds	r3, r7, r1
 800122c:	719a      	strb	r2, [r3, #6]
	Block_B[7] = DevAddr[2];
 800122e:	197b      	adds	r3, r7, r5
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	789a      	ldrb	r2, [r3, #2]
 8001234:	187b      	adds	r3, r7, r1
 8001236:	71da      	strb	r2, [r3, #7]
	Block_B[8] = DevAddr[1];
 8001238:	197b      	adds	r3, r7, r5
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	785a      	ldrb	r2, [r3, #1]
 800123e:	187b      	adds	r3, r7, r1
 8001240:	721a      	strb	r2, [r3, #8]
	Block_B[9] = DevAddr[0];
 8001242:	197b      	adds	r3, r7, r5
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	187b      	adds	r3, r7, r1
 800124a:	725a      	strb	r2, [r3, #9]

	Block_B[10] = (Frame_Counter & 0x00FF);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	187b      	adds	r3, r7, r1
 8001252:	729a      	strb	r2, [r3, #10]
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	0a1b      	lsrs	r3, r3, #8
 8001258:	b2da      	uxtb	r2, r3
 800125a:	187b      	adds	r3, r7, r1
 800125c:	72da      	strb	r2, [r3, #11]

	Block_B[12] = 0x00; //Frame counter upper bytes
 800125e:	187b      	adds	r3, r7, r1
 8001260:	2200      	movs	r2, #0
 8001262:	731a      	strb	r2, [r3, #12]
	Block_B[13] = 0x00;
 8001264:	187b      	adds	r3, r7, r1
 8001266:	2200      	movs	r2, #0
 8001268:	735a      	strb	r2, [r3, #13]

	Block_B[14] = 0x00;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2200      	movs	r2, #0
 800126e:	739a      	strb	r2, [r3, #14]
	Block_B[15] = Data_Length;
 8001270:	187b      	adds	r3, r7, r1
 8001272:	1dfa      	adds	r2, r7, #7
 8001274:	7812      	ldrb	r2, [r2, #0]
 8001276:	73da      	strb	r2, [r3, #15]

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8001278:	183b      	adds	r3, r7, r0
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0912      	lsrs	r2, r2, #4
 8001280:	701a      	strb	r2, [r3, #0]
	Incomplete_Block_Size = Data_Length % 16;
 8001282:	193b      	adds	r3, r7, r4
 8001284:	1dfa      	adds	r2, r7, #7
 8001286:	7812      	ldrb	r2, [r2, #0]
 8001288:	210f      	movs	r1, #15
 800128a:	400a      	ands	r2, r1
 800128c:	701a      	strb	r2, [r3, #0]

	if(Incomplete_Block_Size != 0)
 800128e:	193b      	adds	r3, r7, r4
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <Calculate_MIC+0x10c>
	{
		Number_of_Blocks++;
 8001296:	183b      	adds	r3, r7, r0
 8001298:	781a      	ldrb	r2, [r3, #0]
 800129a:	183b      	adds	r3, r7, r0
 800129c:	3201      	adds	r2, #1
 800129e:	701a      	strb	r2, [r3, #0]
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 80012a0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012a2:	2334      	movs	r3, #52	; 0x34
 80012a4:	18f9      	adds	r1, r7, r3
 80012a6:	2344      	movs	r3, #68	; 0x44
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 f914 	bl	80014d8 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 80012b0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012b2:	2354      	movs	r3, #84	; 0x54
 80012b4:	18fb      	adds	r3, r7, r3
 80012b6:	0011      	movs	r1, r2
 80012b8:	0018      	movs	r0, r3
 80012ba:	f7ff fb11 	bl	80008e0 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 80012be:	2367      	movs	r3, #103	; 0x67
 80012c0:	18fb      	adds	r3, r7, r3
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
 80012c6:	e00f      	b.n	80012e8 <Calculate_MIC+0x154>
	{
		Old_Data[i] = Block_B[i];
 80012c8:	2067      	movs	r0, #103	; 0x67
 80012ca:	183b      	adds	r3, r7, r0
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2154      	movs	r1, #84	; 0x54
 80012d4:	1879      	adds	r1, r7, r1
 80012d6:	5c89      	ldrb	r1, [r1, r2]
 80012d8:	2224      	movs	r2, #36	; 0x24
 80012da:	18ba      	adds	r2, r7, r2
 80012dc:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < 16; i++)
 80012de:	183b      	adds	r3, r7, r0
 80012e0:	781a      	ldrb	r2, [r3, #0]
 80012e2:	183b      	adds	r3, r7, r0
 80012e4:	3201      	adds	r2, #1
 80012e6:	701a      	strb	r2, [r3, #0]
 80012e8:	2367      	movs	r3, #103	; 0x67
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	d9ea      	bls.n	80012c8 <Calculate_MIC+0x134>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 80012f2:	e046      	b.n	8001382 <Calculate_MIC+0x1ee>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 80012f4:	2367      	movs	r3, #103	; 0x67
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e00f      	b.n	800131e <Calculate_MIC+0x18a>
		{
			New_Data[i] = *Data;
 80012fe:	2067      	movs	r0, #103	; 0x67
 8001300:	183b      	adds	r3, r7, r0
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	7811      	ldrb	r1, [r2, #0]
 8001308:	2214      	movs	r2, #20
 800130a:	18ba      	adds	r2, r7, r2
 800130c:	54d1      	strb	r1, [r2, r3]
			Data++;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001314:	183b      	adds	r3, r7, r0
 8001316:	781a      	ldrb	r2, [r3, #0]
 8001318:	183b      	adds	r3, r7, r0
 800131a:	3201      	adds	r2, #1
 800131c:	701a      	strb	r2, [r3, #0]
 800131e:	2467      	movs	r4, #103	; 0x67
 8001320:	193b      	adds	r3, r7, r4
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d9ea      	bls.n	80012fe <Calculate_MIC+0x16a>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001328:	2324      	movs	r3, #36	; 0x24
 800132a:	18fa      	adds	r2, r7, r3
 800132c:	2514      	movs	r5, #20
 800132e:	197b      	adds	r3, r7, r5
 8001330:	0011      	movs	r1, r2
 8001332:	0018      	movs	r0, r3
 8001334:	f000 f986 	bl	8001644 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8001338:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800133a:	197b      	adds	r3, r7, r5
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f7ff face 	bl	80008e0 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8001344:	193b      	adds	r3, r7, r4
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
 800134a:	e00f      	b.n	800136c <Calculate_MIC+0x1d8>
		{
			Old_Data[i] = New_Data[i];
 800134c:	2067      	movs	r0, #103	; 0x67
 800134e:	183b      	adds	r3, r7, r0
 8001350:	781a      	ldrb	r2, [r3, #0]
 8001352:	183b      	adds	r3, r7, r0
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2114      	movs	r1, #20
 8001358:	1879      	adds	r1, r7, r1
 800135a:	5c89      	ldrb	r1, [r1, r2]
 800135c:	2224      	movs	r2, #36	; 0x24
 800135e:	18ba      	adds	r2, r7, r2
 8001360:	54d1      	strb	r1, [r2, r3]
		for(i = 0; i < 16; i++)
 8001362:	183b      	adds	r3, r7, r0
 8001364:	781a      	ldrb	r2, [r3, #0]
 8001366:	183b      	adds	r3, r7, r0
 8001368:	3201      	adds	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
 800136c:	2367      	movs	r3, #103	; 0x67
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	2b0f      	cmp	r3, #15
 8001374:	d9ea      	bls.n	800134c <Calculate_MIC+0x1b8>
		}

		//Raise Block counter
		Block_Counter++;
 8001376:	2165      	movs	r1, #101	; 0x65
 8001378:	187b      	adds	r3, r7, r1
 800137a:	781a      	ldrb	r2, [r3, #0]
 800137c:	187b      	adds	r3, r7, r1
 800137e:	3201      	adds	r2, #1
 8001380:	701a      	strb	r2, [r3, #0]
	while(Block_Counter < Number_of_Blocks)
 8001382:	2365      	movs	r3, #101	; 0x65
 8001384:	18fa      	adds	r2, r7, r3
 8001386:	2366      	movs	r3, #102	; 0x66
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	7812      	ldrb	r2, [r2, #0]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	429a      	cmp	r2, r3
 8001390:	d3b0      	bcc.n	80012f4 <Calculate_MIC+0x160>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8001392:	2364      	movs	r3, #100	; 0x64
 8001394:	18fb      	adds	r3, r7, r3
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d12f      	bne.n	80013fc <Calculate_MIC+0x268>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800139c:	2367      	movs	r3, #103	; 0x67
 800139e:	18fb      	adds	r3, r7, r3
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	e00f      	b.n	80013c6 <Calculate_MIC+0x232>
		{
			New_Data[i] = *Data;
 80013a6:	2067      	movs	r0, #103	; 0x67
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	7811      	ldrb	r1, [r2, #0]
 80013b0:	2214      	movs	r2, #20
 80013b2:	18ba      	adds	r2, r7, r2
 80013b4:	54d1      	strb	r1, [r2, r3]
			Data++;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 80013bc:	183b      	adds	r3, r7, r0
 80013be:	781a      	ldrb	r2, [r3, #0]
 80013c0:	183b      	adds	r3, r7, r0
 80013c2:	3201      	adds	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	2367      	movs	r3, #103	; 0x67
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b0f      	cmp	r3, #15
 80013ce:	d9ea      	bls.n	80013a6 <Calculate_MIC+0x212>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 80013d0:	2344      	movs	r3, #68	; 0x44
 80013d2:	18fa      	adds	r2, r7, r3
 80013d4:	2414      	movs	r4, #20
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0011      	movs	r1, r2
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 f932 	bl	8001644 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 80013e0:	2324      	movs	r3, #36	; 0x24
 80013e2:	18fa      	adds	r2, r7, r3
 80013e4:	193b      	adds	r3, r7, r4
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f000 f92b 	bl	8001644 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 80013ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80013f0:	193b      	adds	r3, r7, r4
 80013f2:	0011      	movs	r1, r2
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7ff fa73 	bl	80008e0 <AES_Encrypt>
 80013fa:	e052      	b.n	80014a2 <Calculate_MIC+0x30e>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 80013fc:	2367      	movs	r3, #103	; 0x67
 80013fe:	18fb      	adds	r3, r7, r3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	e033      	b.n	800146e <Calculate_MIC+0x2da>
		{
			if(i < Incomplete_Block_Size)
 8001406:	2167      	movs	r1, #103	; 0x67
 8001408:	187a      	adds	r2, r7, r1
 800140a:	2364      	movs	r3, #100	; 0x64
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	7812      	ldrb	r2, [r2, #0]
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	429a      	cmp	r2, r3
 8001414:	d209      	bcs.n	800142a <Calculate_MIC+0x296>
			{
				New_Data[i] = *Data;
 8001416:	187b      	adds	r3, r7, r1
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	7811      	ldrb	r1, [r2, #0]
 800141e:	2214      	movs	r2, #20
 8001420:	18ba      	adds	r2, r7, r2
 8001422:	54d1      	strb	r1, [r2, r3]
				Data++;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	3301      	adds	r3, #1
 8001428:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800142a:	2167      	movs	r1, #103	; 0x67
 800142c:	187a      	adds	r2, r7, r1
 800142e:	2364      	movs	r3, #100	; 0x64
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	7812      	ldrb	r2, [r2, #0]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d105      	bne.n	8001446 <Calculate_MIC+0x2b2>
			{
				New_Data[i] = 0x80;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	2214      	movs	r2, #20
 8001440:	18ba      	adds	r2, r7, r2
 8001442:	2180      	movs	r1, #128	; 0x80
 8001444:	54d1      	strb	r1, [r2, r3]
			}
			if(i > Incomplete_Block_Size)
 8001446:	2167      	movs	r1, #103	; 0x67
 8001448:	187a      	adds	r2, r7, r1
 800144a:	2364      	movs	r3, #100	; 0x64
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	7812      	ldrb	r2, [r2, #0]
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	429a      	cmp	r2, r3
 8001454:	d905      	bls.n	8001462 <Calculate_MIC+0x2ce>
			{
				New_Data[i] = 0x00;
 8001456:	187b      	adds	r3, r7, r1
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2214      	movs	r2, #20
 800145c:	18ba      	adds	r2, r7, r2
 800145e:	2100      	movs	r1, #0
 8001460:	54d1      	strb	r1, [r2, r3]
		for(i =  0; i < 16; i++)
 8001462:	2167      	movs	r1, #103	; 0x67
 8001464:	187b      	adds	r3, r7, r1
 8001466:	781a      	ldrb	r2, [r3, #0]
 8001468:	187b      	adds	r3, r7, r1
 800146a:	3201      	adds	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
 800146e:	2367      	movs	r3, #103	; 0x67
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d9c6      	bls.n	8001406 <Calculate_MIC+0x272>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8001478:	2334      	movs	r3, #52	; 0x34
 800147a:	18fa      	adds	r2, r7, r3
 800147c:	2414      	movs	r4, #20
 800147e:	193b      	adds	r3, r7, r4
 8001480:	0011      	movs	r1, r2
 8001482:	0018      	movs	r0, r3
 8001484:	f000 f8de 	bl	8001644 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8001488:	2324      	movs	r3, #36	; 0x24
 800148a:	18fa      	adds	r2, r7, r3
 800148c:	193b      	adds	r3, r7, r4
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f000 f8d7 	bl	8001644 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8001496:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001498:	193b      	adds	r3, r7, r4
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff fa1f 	bl	80008e0 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 80014a2:	2114      	movs	r1, #20
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	781a      	ldrb	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	3301      	adds	r3, #1
 80014b0:	187a      	adds	r2, r7, r1
 80014b2:	7852      	ldrb	r2, [r2, #1]
 80014b4:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	3302      	adds	r3, #2
 80014ba:	187a      	adds	r2, r7, r1
 80014bc:	7892      	ldrb	r2, [r2, #2]
 80014be:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3303      	adds	r3, #3
 80014c4:	187a      	adds	r2, r7, r1
 80014c6:	78d2      	ldrb	r2, [r2, #3]
 80014c8:	701a      	strb	r2, [r3, #0]
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b01a      	add	sp, #104	; 0x68
 80014d0:	bdb0      	pop	{r4, r5, r7, pc}
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	08007068 	.word	0x08007068

080014d8 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 80014e4:	687a      	ldr	r2, [r7, #4]
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	0011      	movs	r1, r2
 80014ea:	0018      	movs	r0, r3
 80014ec:	f7ff f9f8 	bl	80008e0 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da04      	bge.n	8001504 <Generate_Keys+0x2c>
	{
		MSB_Key = 1;
 80014fa:	2316      	movs	r3, #22
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
 8001502:	e003      	b.n	800150c <Generate_Keys+0x34>
	}
	else
	{
		MSB_Key = 0;
 8001504:	2316      	movs	r3, #22
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	0018      	movs	r0, r3
 8001510:	f000 f84e 	bl	80015b0 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8001514:	2316      	movs	r3, #22
 8001516:	18fb      	adds	r3, r7, r3
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d109      	bne.n	8001532 <Generate_Keys+0x5a>
	{
		K1[15] = K1[15] ^ 0x87;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	330f      	adds	r3, #15
 8001522:	781a      	ldrb	r2, [r3, #0]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	330f      	adds	r3, #15
 8001528:	2179      	movs	r1, #121	; 0x79
 800152a:	4249      	negs	r1, r1
 800152c:	404a      	eors	r2, r1
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	701a      	strb	r2, [r3, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001532:	2317      	movs	r3, #23
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2200      	movs	r2, #0
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e00f      	b.n	800155c <Generate_Keys+0x84>
	{
		K2[i] = K1[i];
 800153c:	2017      	movs	r0, #23
 800153e:	183b      	adds	r3, r7, r0
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	18d2      	adds	r2, r2, r3
 8001546:	183b      	adds	r3, r7, r0
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	68b9      	ldr	r1, [r7, #8]
 800154c:	18cb      	adds	r3, r1, r3
 800154e:	7812      	ldrb	r2, [r2, #0]
 8001550:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8001552:	183b      	adds	r3, r7, r0
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	183b      	adds	r3, r7, r0
 8001558:	3201      	adds	r2, #1
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	2317      	movs	r3, #23
 800155e:	18fb      	adds	r3, r7, r3
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	d9ea      	bls.n	800153c <Generate_Keys+0x64>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b25b      	sxtb	r3, r3
 800156c:	2b00      	cmp	r3, #0
 800156e:	da04      	bge.n	800157a <Generate_Keys+0xa2>
	{
		MSB_Key = 1;
 8001570:	2316      	movs	r3, #22
 8001572:	18fb      	adds	r3, r7, r3
 8001574:	2201      	movs	r2, #1
 8001576:	701a      	strb	r2, [r3, #0]
 8001578:	e003      	b.n	8001582 <Generate_Keys+0xaa>
	}
	else
	{
		MSB_Key = 0;
 800157a:	2316      	movs	r3, #22
 800157c:	18fb      	adds	r3, r7, r3
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0018      	movs	r0, r3
 8001586:	f000 f813 	bl	80015b0 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 800158a:	2316      	movs	r3, #22
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d109      	bne.n	80015a8 <Generate_Keys+0xd0>
	{
		K2[15] = K2[15] ^ 0x87;
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	330f      	adds	r3, #15
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	330f      	adds	r3, #15
 800159e:	2179      	movs	r1, #121	; 0x79
 80015a0:	4249      	negs	r1, r1
 80015a2:	404a      	eors	r2, r1
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	701a      	strb	r2, [r3, #0]
	}
}
 80015a8:	46c0      	nop			; (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	b006      	add	sp, #24
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 80015b8:	230e      	movs	r3, #14
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 80015c0:	230f      	movs	r3, #15
 80015c2:	18fb      	adds	r3, r7, r3
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	e032      	b.n	8001630 <Shift_Left+0x80>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 80015ca:	220f      	movs	r2, #15
 80015cc:	18bb      	adds	r3, r7, r2
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b0e      	cmp	r3, #14
 80015d2:	d812      	bhi.n	80015fa <Shift_Left+0x4a>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 80015d4:	18bb      	adds	r3, r7, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	3301      	adds	r3, #1
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	18d3      	adds	r3, r2, r3
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	da04      	bge.n	80015f0 <Shift_Left+0x40>
			{
				Overflow = 1;
 80015e6:	230e      	movs	r3, #14
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	e008      	b.n	8001602 <Shift_Left+0x52>
			}
			else
			{
				Overflow = 0;
 80015f0:	230e      	movs	r3, #14
 80015f2:	18fb      	adds	r3, r7, r3
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
 80015f8:	e003      	b.n	8001602 <Shift_Left+0x52>
			}
		}
		else
		{
			Overflow = 0;
 80015fa:	230e      	movs	r3, #14
 80015fc:	18fb      	adds	r3, r7, r3
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8001602:	200f      	movs	r0, #15
 8001604:	183b      	adds	r3, r7, r0
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	18db      	adds	r3, r3, r3
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	183b      	adds	r3, r7, r0
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	18d3      	adds	r3, r2, r3
 800161a:	220e      	movs	r2, #14
 800161c:	18ba      	adds	r2, r7, r2
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	188a      	adds	r2, r1, r2
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001626:	183b      	adds	r3, r7, r0
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	183b      	adds	r3, r7, r0
 800162c:	3201      	adds	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
 8001630:	230f      	movs	r3, #15
 8001632:	18fb      	adds	r3, r7, r3
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b0f      	cmp	r3, #15
 8001638:	d9c7      	bls.n	80015ca <Shift_Left+0x1a>
	}
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46c0      	nop			; (mov r8, r8)
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}

08001644 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800164e:	230f      	movs	r3, #15
 8001650:	18fb      	adds	r3, r7, r3
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	e016      	b.n	8001686 <XOR+0x42>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8001658:	240f      	movs	r4, #15
 800165a:	193b      	adds	r3, r7, r4
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	18d3      	adds	r3, r2, r3
 8001662:	7819      	ldrb	r1, [r3, #0]
 8001664:	193b      	adds	r3, r7, r4
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	18d3      	adds	r3, r2, r3
 800166c:	781a      	ldrb	r2, [r3, #0]
 800166e:	193b      	adds	r3, r7, r4
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	18c3      	adds	r3, r0, r3
 8001676:	404a      	eors	r2, r1
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800167c:	193b      	adds	r3, r7, r4
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	193b      	adds	r3, r7, r4
 8001682:	3201      	adds	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
 8001686:	230f      	movs	r3, #15
 8001688:	18fb      	adds	r3, r7, r3
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d9e3      	bls.n	8001658 <XOR+0x14>
	}
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46c0      	nop			; (mov r8, r8)
 8001694:	46bd      	mov	sp, r7
 8001696:	b005      	add	sp, #20
 8001698:	bd90      	pop	{r4, r7, pc}

0800169a <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 800169a:	b590      	push	{r4, r7, lr}
 800169c:	b087      	sub	sp, #28
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	240b      	movs	r4, #11
 80016a8:	193b      	adds	r3, r7, r4
 80016aa:	1c0a      	adds	r2, r1, #0
 80016ac:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6858      	ldr	r0, [r3, #4]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	891b      	ldrh	r3, [r3, #8]
 80016b6:	2200      	movs	r2, #0
 80016b8:	0019      	movs	r1, r3
 80016ba:	f002 faed 	bl	8003c98 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80016be:	193b      	adds	r3, r7, r4
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	227f      	movs	r2, #127	; 0x7f
 80016c4:	4013      	ands	r3, r2
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	2117      	movs	r1, #23
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	701a      	strb	r2, [r3, #0]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	1879      	adds	r1, r7, r1
 80016d4:	230a      	movs	r3, #10
 80016d6:	2201      	movs	r2, #1
 80016d8:	f003 f820 	bl	800471c <HAL_SPI_Transmit>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d001      	beq.n	80016e4 <read_register+0x4a>
		return false;
 80016e0:	2300      	movs	r3, #0
 80016e2:	e014      	b.n	800170e <read_register+0x74>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	230a      	movs	r3, #10
 80016f0:	f003 f96c 	bl	80049cc <HAL_SPI_Receive>
 80016f4:	1e03      	subs	r3, r0, #0
 80016f6:	d001      	beq.n	80016fc <read_register+0x62>
		return false;
 80016f8:	2300      	movs	r3, #0
 80016fa:	e008      	b.n	800170e <read_register+0x74>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6858      	ldr	r0, [r3, #4]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	891b      	ldrh	r3, [r3, #8]
 8001704:	2201      	movs	r2, #1
 8001706:	0019      	movs	r1, r3
 8001708:	f002 fac6 	bl	8003c98 <HAL_GPIO_WritePin>

	return true;
 800170c:	2301      	movs	r3, #1
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b007      	add	sp, #28
 8001714:	bd90      	pop	{r4, r7, pc}

08001716 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
 800171e:	0008      	movs	r0, r1
 8001720:	0011      	movs	r1, r2
 8001722:	1cfb      	adds	r3, r7, #3
 8001724:	1c02      	adds	r2, r0, #0
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	1cbb      	adds	r3, r7, #2
 800172a:	1c0a      	adds	r2, r1, #0
 800172c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6858      	ldr	r0, [r3, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	891b      	ldrh	r3, [r3, #8]
 8001736:	2200      	movs	r2, #0
 8001738:	0019      	movs	r1, r3
 800173a:	f002 faad 	bl	8003c98 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 800173e:	1cfb      	adds	r3, r7, #3
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2280      	movs	r2, #128	; 0x80
 8001744:	4252      	negs	r2, r2
 8001746:	4313      	orrs	r3, r2
 8001748:	b2da      	uxtb	r2, r3
 800174a:	210c      	movs	r1, #12
 800174c:	187b      	adds	r3, r7, r1
 800174e:	701a      	strb	r2, [r3, #0]
 8001750:	187b      	adds	r3, r7, r1
 8001752:	1cba      	adds	r2, r7, #2
 8001754:	7812      	ldrb	r2, [r2, #0]
 8001756:	705a      	strb	r2, [r3, #1]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	1879      	adds	r1, r7, r1
 800175e:	230a      	movs	r3, #10
 8001760:	2202      	movs	r2, #2
 8001762:	f002 ffdb 	bl	800471c <HAL_SPI_Transmit>
 8001766:	1e03      	subs	r3, r0, #0
 8001768:	d001      	beq.n	800176e <write_register+0x58>
		return false;
 800176a:	2300      	movs	r3, #0
 800176c:	e008      	b.n	8001780 <write_register+0x6a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6858      	ldr	r0, [r3, #4]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	891b      	ldrh	r3, [r3, #8]
 8001776:	2201      	movs	r2, #1
 8001778:	0019      	movs	r1, r3
 800177a:	f002 fa8d 	bl	8003c98 <HAL_GPIO_WritePin>

	return true;
 800177e:	2301      	movs	r3, #1
}
 8001780:	0018      	movs	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	b004      	add	sp, #16
 8001786:	bd80      	pop	{r7, pc}

08001788 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	607a      	str	r2, [r7, #4]
 8001792:	200b      	movs	r0, #11
 8001794:	183b      	adds	r3, r7, r0
 8001796:	1c0a      	adds	r2, r1, #0
 8001798:	701a      	strb	r2, [r3, #0]
	assert(channel_index < 16);
 800179a:	183b      	adds	r3, r7, r0
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2b0f      	cmp	r3, #15
 80017a0:	d905      	bls.n	80017ae <config_set_channel+0x26>
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <config_set_channel+0x60>)
 80017a4:	4a11      	ldr	r2, [pc, #68]	; (80017ec <config_set_channel+0x64>)
 80017a6:	4812      	ldr	r0, [pc, #72]	; (80017f0 <config_set_channel+0x68>)
 80017a8:	216d      	movs	r1, #109	; 0x6d
 80017aa:	f004 f9ff 	bl	8005bac <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 80017ae:	200b      	movs	r0, #11
 80017b0:	183b      	adds	r3, r7, r0
 80017b2:	781a      	ldrb	r2, [r3, #0]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	321a      	adds	r2, #26
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	50d1      	str	r1, [r2, r3]
	handle->config.channel_mask |= (1 << channel_index);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	22a8      	movs	r2, #168	; 0xa8
 80017c2:	5a9b      	ldrh	r3, [r3, r2]
 80017c4:	b21a      	sxth	r2, r3
 80017c6:	183b      	adds	r3, r7, r0
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2101      	movs	r1, #1
 80017cc:	4099      	lsls	r1, r3
 80017ce:	000b      	movs	r3, r1
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4313      	orrs	r3, r2
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	b299      	uxth	r1, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	22a8      	movs	r2, #168	; 0xa8
 80017dc:	5299      	strh	r1, [r3, r2]
}
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b004      	add	sp, #16
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	08007078 	.word	0x08007078
 80017ec:	08007310 	.word	0x08007310
 80017f0:	0800708c 	.word	0x0800708c

080017f4 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2260      	movs	r2, #96	; 0x60
 8001800:	4913      	ldr	r1, [pc, #76]	; (8001850 <config_load_default+0x5c>)
 8001802:	5299      	strh	r1, [r3, r2]
	handle->config.tx_frame_count = 0;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2264      	movs	r2, #100	; 0x64
 8001808:	2100      	movs	r1, #0
 800180a:	5299      	strh	r1, [r3, r2]
	handle->config.rx_frame_count = 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2262      	movs	r2, #98	; 0x62
 8001810:	2100      	movs	r1, #0
 8001812:	5299      	strh	r1, [r3, r2]
	handle->config.rx1_delay = 1;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2266      	movs	r2, #102	; 0x66
 8001818:	2101      	movs	r1, #1
 800181a:	5499      	strb	r1, [r3, r2]
	handle->config.channel_mask = 0;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	22a8      	movs	r2, #168	; 0xa8
 8001820:	2100      	movs	r1, #0
 8001822:	5299      	strh	r1, [r3, r2]
	config_set_channel(handle, 0, 868100000);
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <config_load_default+0x60>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2100      	movs	r1, #0
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ffac 	bl	8001788 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 8001830:	4a09      	ldr	r2, [pc, #36]	; (8001858 <config_load_default+0x64>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2101      	movs	r1, #1
 8001836:	0018      	movs	r0, r3
 8001838:	f7ff ffa6 	bl	8001788 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 800183c:	4a07      	ldr	r2, [pc, #28]	; (800185c <config_load_default+0x68>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2102      	movs	r1, #2
 8001842:	0018      	movs	r0, r3
 8001844:	f7ff ffa0 	bl	8001788 <config_set_channel>
}
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}
 8001850:	ffffab67 	.word	0xffffab67
 8001854:	33be27a0 	.word	0x33be27a0
 8001858:	33c134e0 	.word	0x33c134e0
 800185c:	33c44220 	.word	0x33c44220

08001860 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68d8      	ldr	r0, [r3, #12]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	8a1b      	ldrh	r3, [r3, #16]
 8001870:	2200      	movs	r2, #0
 8001872:	0019      	movs	r1, r3
 8001874:	f002 fa10 	bl	8003c98 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001878:	2001      	movs	r0, #1
 800187a:	f001 ffc5 	bl	8003808 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68d8      	ldr	r0, [r3, #12]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	8a1b      	ldrh	r3, [r3, #16]
 8001886:	2201      	movs	r2, #1
 8001888:	0019      	movs	r1, r3
 800188a:	f002 fa05 	bl	8003c98 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800188e:	2005      	movs	r0, #5
 8001890:	f001 ffba 	bl	8003808 <HAL_Delay>
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b088      	sub	sp, #32
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6178      	str	r0, [r7, #20]
 80018a4:	6139      	str	r1, [r7, #16]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	000a      	movs	r2, r1
 80018aa:	2100      	movs	r1, #0
 80018ac:	000b      	movs	r3, r1
 80018ae:	0b51      	lsrs	r1, r2, #13
 80018b0:	6079      	str	r1, [r7, #4]
 80018b2:	04d3      	lsls	r3, r2, #19
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4a28      	ldr	r2, [pc, #160]	; (8001958 <configure_frequency+0xbc>)
 80018b8:	2300      	movs	r3, #0
 80018ba:	6838      	ldr	r0, [r7, #0]
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	f7fe fdc7 	bl	8000450 <__aeabi_uldivmod>
 80018c2:	0002      	movs	r2, r0
 80018c4:	000b      	movs	r3, r1
 80018c6:	61ba      	str	r2, [r7, #24]
 80018c8:	61fb      	str	r3, [r7, #28]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	041b      	lsls	r3, r3, #16
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	0c12      	lsrs	r2, r2, #16
 80018d2:	60ba      	str	r2, [r7, #8]
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	60ba      	str	r2, [r7, #8]
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	0c1b      	lsrs	r3, r3, #16
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	7a3a      	ldrb	r2, [r7, #8]
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	2106      	movs	r1, #6
 80018e6:	0018      	movs	r0, r3
 80018e8:	f7ff ff15 	bl	8001716 <write_register>
 80018ec:	0003      	movs	r3, r0
 80018ee:	001a      	movs	r2, r3
 80018f0:	2301      	movs	r3, #1
 80018f2:	4053      	eors	r3, r2
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <configure_frequency+0x62>
 80018fa:	2300      	movs	r3, #0
 80018fc:	e028      	b.n	8001950 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	0a14      	lsrs	r4, r2, #8
 8001906:	431c      	orrs	r4, r3
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	0a1d      	lsrs	r5, r3, #8
 800190c:	b2e2      	uxtb	r2, r4
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2107      	movs	r1, #7
 8001912:	0018      	movs	r0, r3
 8001914:	f7ff feff 	bl	8001716 <write_register>
 8001918:	0003      	movs	r3, r0
 800191a:	001a      	movs	r2, r3
 800191c:	2301      	movs	r3, #1
 800191e:	4053      	eors	r3, r2
 8001920:	b2db      	uxtb	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <configure_frequency+0x8e>
 8001926:	2300      	movs	r3, #0
 8001928:	e012      	b.n	8001950 <configure_frequency+0xb4>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	1c13      	adds	r3, r2, #0
 8001930:	b2da      	uxtb	r2, r3
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	2108      	movs	r1, #8
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff feed 	bl	8001716 <write_register>
 800193c:	0003      	movs	r3, r0
 800193e:	001a      	movs	r2, r3
 8001940:	2301      	movs	r3, #1
 8001942:	4053      	eors	r3, r2
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <configure_frequency+0xb2>
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <configure_frequency+0xb4>

	return true;
 800194e:	2301      	movs	r3, #1
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b008      	add	sp, #32
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	01e84800 	.word	0x01e84800

0800195c <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	22a8      	movs	r2, #168	; 0xa8
 800196a:	5a9b      	ldrh	r3, [r3, r2]
 800196c:	001a      	movs	r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	411a      	asrs	r2, r3
 8001972:	0013      	movs	r3, r2
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	d105      	bne.n	8001986 <configure_channel+0x2a>
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <configure_channel+0x48>)
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <configure_channel+0x4c>)
 800197e:	480b      	ldr	r0, [pc, #44]	; (80019ac <configure_channel+0x50>)
 8001980:	2194      	movs	r1, #148	; 0x94
 8001982:	f004 f913 	bl	8005bac <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	321a      	adds	r2, #26
 800198c:	0092      	lsls	r2, r2, #2
 800198e:	58d2      	ldr	r2, [r2, r3]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0011      	movs	r1, r2
 8001994:	0018      	movs	r0, r3
 8001996:	f7ff ff81 	bl	800189c <configure_frequency>
 800199a:	0003      	movs	r3, r0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b002      	add	sp, #8
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	080070b0 	.word	0x080070b0
 80019a8:	08007324 	.word	0x08007324
 80019ac:	0800708c 	.word	0x0800708c

080019b0 <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	230b      	movs	r3, #11
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c0a      	adds	r2, r1, #0
 80019c0:	701a      	strb	r2, [r3, #0]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4798      	blx	r3
 80019c8:	0004      	movs	r4, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	4353      	muls	r3, r2
 80019d2:	22fa      	movs	r2, #250	; 0xfa
 80019d4:	0091      	lsls	r1, r2, #2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7fe fba0 	bl	800011c <__udivsi3>
 80019dc:	0003      	movs	r3, r0
 80019de:	18e3      	adds	r3, r4, r3
 80019e0:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 80019e2:	e008      	b.n	80019f6 <wait_for_irq+0x46>
		if (handle->get_precision_tick() >= timeout_tick) {
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	4798      	blx	r3
 80019ea:	0002      	movs	r2, r0
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d801      	bhi.n	80019f6 <wait_for_irq+0x46>
			return false;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e00b      	b.n	8001a0e <wait_for_irq+0x5e>
	while (handle->interrupt_times[interrupt] == 0) {
 80019f6:	230b      	movs	r3, #11
 80019f8:	18fb      	adds	r3, r7, r3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	332a      	adds	r3, #42	; 0x2a
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	18d3      	adds	r3, r2, r3
 8001a04:	3304      	adds	r3, #4
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0eb      	beq.n	80019e4 <wait_for_irq+0x34>
		}
	}

	return true;
 8001a0c:	2301      	movs	r3, #1
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b007      	add	sp, #28
 8001a14:	bd90      	pop	{r4, r7, pc}

08001a16 <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8001a16:	b590      	push	{r4, r7, lr}
 8001a18:	b085      	sub	sp, #20
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4798      	blx	r3
 8001a24:	0004      	movs	r4, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	015b      	lsls	r3, r3, #5
 8001a2e:	1a9b      	subs	r3, r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	189b      	adds	r3, r3, r2
 8001a34:	00db      	lsls	r3, r3, #3
 8001a36:	001a      	movs	r2, r3
 8001a38:	23fa      	movs	r3, #250	; 0xfa
 8001a3a:	0099      	lsls	r1, r3, #2
 8001a3c:	0010      	movs	r0, r2
 8001a3e:	f7fe fb6d 	bl	800011c <__udivsi3>
 8001a42:	0003      	movs	r3, r0
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001a44:	18e3      	adds	r3, r4, r3
 8001a46:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001a48:	e008      	b.n	8001a5c <wait_for_rx_irqs+0x46>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4798      	blx	r3
 8001a50:	0002      	movs	r2, r0
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d801      	bhi.n	8001a5c <wait_for_rx_irqs+0x46>
			return false;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00f      	b.n	8001a7c <wait_for_rx_irqs+0x66>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	22ac      	movs	r2, #172	; 0xac
 8001a60:	589b      	ldr	r3, [r3, r2]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d104      	bne.n	8001a70 <wait_for_rx_irqs+0x5a>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	22b0      	movs	r2, #176	; 0xb0
 8001a6a:	589b      	ldr	r3, [r3, r2]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d0ec      	beq.n	8001a4a <wait_for_rx_irqs+0x34>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	22ac      	movs	r2, #172	; 0xac
 8001a74:	589b      	ldr	r3, [r3, r2]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	4193      	sbcs	r3, r2
 8001a7a:	b2db      	uxtb	r3, r3
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b005      	add	sp, #20
 8001a82:	bd90      	pop	{r4, r7, pc}

08001a84 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	000a      	movs	r2, r1
 8001a8e:	1cfb      	adds	r3, r7, #3
 8001a90:	701a      	strb	r2, [r3, #0]
	assert((power >= 2 && power <= 17) || power == 20);
 8001a92:	1cfb      	adds	r3, r7, #3
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	dd04      	ble.n	8001aa6 <rfm95_set_power+0x22>
 8001a9c:	1cfb      	adds	r3, r7, #3
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	b25b      	sxtb	r3, r3
 8001aa2:	2b11      	cmp	r3, #17
 8001aa4:	dd0a      	ble.n	8001abc <rfm95_set_power+0x38>
 8001aa6:	1cfb      	adds	r3, r7, #3
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	b25b      	sxtb	r3, r3
 8001aac:	2b14      	cmp	r3, #20
 8001aae:	d005      	beq.n	8001abc <rfm95_set_power+0x38>
 8001ab0:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <rfm95_set_power+0x124>)
 8001ab2:	4a3e      	ldr	r2, [pc, #248]	; (8001bac <rfm95_set_power+0x128>)
 8001ab4:	483e      	ldr	r0, [pc, #248]	; (8001bb0 <rfm95_set_power+0x12c>)
 8001ab6:	21b5      	movs	r1, #181	; 0xb5
 8001ab8:	f004 f878 	bl	8005bac <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001abc:	200c      	movs	r0, #12
 8001abe:	183b      	adds	r3, r7, r0
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
	uint8_t pa_dac_config = 0;
 8001ac4:	240f      	movs	r4, #15
 8001ac6:	193b      	adds	r3, r7, r4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]

	if (power >= 2 && power <= 17) {
 8001acc:	1cfb      	adds	r3, r7, #3
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b25b      	sxtb	r3, r3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	dd26      	ble.n	8001b24 <rfm95_set_power+0xa0>
 8001ad6:	1cfb      	adds	r3, r7, #3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	dc21      	bgt.n	8001b24 <rfm95_set_power+0xa0>
		pa_config.max_power = 7;
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	2170      	movs	r1, #112	; 0x70
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8001aea:	183b      	adds	r3, r7, r0
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	2180      	movs	r1, #128	; 0x80
 8001af0:	4249      	negs	r1, r1
 8001af2:	430a      	orrs	r2, r1
 8001af4:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = (power - 2);
 8001af6:	1cfb      	adds	r3, r7, #3
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3b02      	subs	r3, #2
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	1c1a      	adds	r2, r3, #0
 8001b00:	230f      	movs	r3, #15
 8001b02:	4013      	ands	r3, r2
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	183b      	adds	r3, r7, r0
 8001b08:	210f      	movs	r1, #15
 8001b0a:	400a      	ands	r2, r1
 8001b0c:	0010      	movs	r0, r2
 8001b0e:	781a      	ldrb	r2, [r3, #0]
 8001b10:	210f      	movs	r1, #15
 8001b12:	438a      	bics	r2, r1
 8001b14:	1c11      	adds	r1, r2, #0
 8001b16:	1c02      	adds	r2, r0, #0
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001b1c:	193b      	adds	r3, r7, r4
 8001b1e:	2284      	movs	r2, #132	; 0x84
 8001b20:	701a      	strb	r2, [r3, #0]
 8001b22:	e019      	b.n	8001b58 <rfm95_set_power+0xd4>

	} else if (power == 20) {
 8001b24:	1cfb      	adds	r3, r7, #3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	b25b      	sxtb	r3, r3
 8001b2a:	2b14      	cmp	r3, #20
 8001b2c:	d114      	bne.n	8001b58 <rfm95_set_power+0xd4>
		pa_config.max_power = 7;
 8001b2e:	200c      	movs	r0, #12
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	781a      	ldrb	r2, [r3, #0]
 8001b34:	2170      	movs	r1, #112	; 0x70
 8001b36:	430a      	orrs	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
		pa_config.pa_select = 1;
 8001b3a:	183b      	adds	r3, r7, r0
 8001b3c:	781a      	ldrb	r2, [r3, #0]
 8001b3e:	2180      	movs	r1, #128	; 0x80
 8001b40:	4249      	negs	r1, r1
 8001b42:	430a      	orrs	r2, r1
 8001b44:	701a      	strb	r2, [r3, #0]
		pa_config.output_power = 15;
 8001b46:	183b      	adds	r3, r7, r0
 8001b48:	781a      	ldrb	r2, [r3, #0]
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	701a      	strb	r2, [r3, #0]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001b50:	230f      	movs	r3, #15
 8001b52:	18fb      	adds	r3, r7, r3
 8001b54:	2287      	movs	r2, #135	; 0x87
 8001b56:	701a      	strb	r2, [r3, #0]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001b58:	230c      	movs	r3, #12
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	781a      	ldrb	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2109      	movs	r1, #9
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fdd7 	bl	8001716 <write_register>
 8001b68:	0003      	movs	r3, r0
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4053      	eors	r3, r2
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <rfm95_set_power+0xf6>
 8001b76:	2300      	movs	r3, #0
 8001b78:	e011      	b.n	8001b9e <rfm95_set_power+0x11a>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001b7a:	230f      	movs	r3, #15
 8001b7c:	18fb      	adds	r3, r7, r3
 8001b7e:	781a      	ldrb	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	214d      	movs	r1, #77	; 0x4d
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fdc6 	bl	8001716 <write_register>
 8001b8a:	0003      	movs	r3, r0
 8001b8c:	001a      	movs	r2, r3
 8001b8e:	2301      	movs	r3, #1
 8001b90:	4053      	eors	r3, r2
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <rfm95_set_power+0x118>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <rfm95_set_power+0x11a>

	return true;
 8001b9c:	2301      	movs	r3, #1
}
 8001b9e:	0018      	movs	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	b005      	add	sp, #20
 8001ba4:	bd90      	pop	{r4, r7, pc}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	080070e4 	.word	0x080070e4
 8001bac:	08007338 	.word	0x08007338
 8001bb0:	0800708c 	.word	0x0800708c

08001bb4 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle, UART_HandleTypeDef *uart_handle)
{
 8001bb4:	b5b0      	push	{r4, r5, r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]

	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	2382      	movs	r3, #130	; 0x82
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d005      	beq.n	8001bd8 <rfm95_init+0x24>
 8001bcc:	4ba1      	ldr	r3, [pc, #644]	; (8001e54 <rfm95_init+0x2a0>)
 8001bce:	4aa2      	ldr	r2, [pc, #648]	; (8001e58 <rfm95_init+0x2a4>)
 8001bd0:	48a2      	ldr	r0, [pc, #648]	; (8001e5c <rfm95_init+0x2a8>)
 8001bd2:	21d0      	movs	r1, #208	; 0xd0
 8001bd4:	f003 ffea 	bl	8005bac <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <rfm95_init+0x3a>
 8001be2:	4b9f      	ldr	r3, [pc, #636]	; (8001e60 <rfm95_init+0x2ac>)
 8001be4:	4a9c      	ldr	r2, [pc, #624]	; (8001e58 <rfm95_init+0x2a4>)
 8001be6:	489d      	ldr	r0, [pc, #628]	; (8001e5c <rfm95_init+0x2a8>)
 8001be8:	21d1      	movs	r1, #209	; 0xd1
 8001bea:	f003 ffdf 	bl	8005bac <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68da      	ldr	r2, [r3, #12]
 8001bf4:	23e0      	movs	r3, #224	; 0xe0
 8001bf6:	00db      	lsls	r3, r3, #3
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d005      	beq.n	8001c08 <rfm95_init+0x54>
 8001bfc:	4b99      	ldr	r3, [pc, #612]	; (8001e64 <rfm95_init+0x2b0>)
 8001bfe:	4a96      	ldr	r2, [pc, #600]	; (8001e58 <rfm95_init+0x2a4>)
 8001c00:	4896      	ldr	r0, [pc, #600]	; (8001e5c <rfm95_init+0x2a8>)
 8001c02:	21d2      	movs	r1, #210	; 0xd2
 8001c04:	f003 ffd2 	bl	8005bac <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <rfm95_init+0x6a>
 8001c12:	4b95      	ldr	r3, [pc, #596]	; (8001e68 <rfm95_init+0x2b4>)
 8001c14:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <rfm95_init+0x2a4>)
 8001c16:	4891      	ldr	r0, [pc, #580]	; (8001e5c <rfm95_init+0x2a8>)
 8001c18:	21d3      	movs	r1, #211	; 0xd3
 8001c1a:	f003 ffc7 	bl	8005bac <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <rfm95_init+0x80>
 8001c28:	4b90      	ldr	r3, [pc, #576]	; (8001e6c <rfm95_init+0x2b8>)
 8001c2a:	4a8b      	ldr	r2, [pc, #556]	; (8001e58 <rfm95_init+0x2a4>)
 8001c2c:	488b      	ldr	r0, [pc, #556]	; (8001e5c <rfm95_init+0x2a8>)
 8001c2e:	21d4      	movs	r1, #212	; 0xd4
 8001c30:	f003 ffbc 	bl	8005bac <__assert_func>

	reset(handle);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff fe12 	bl	8001860 <reset>



	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d012      	beq.n	8001c6a <rfm95_init+0xb6>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	3260      	adds	r2, #96	; 0x60
 8001c4c:	0010      	movs	r0, r2
 8001c4e:	4798      	blx	r3
 8001c50:	0003      	movs	r3, r0
 8001c52:	001a      	movs	r2, r3
 8001c54:	2301      	movs	r3, #1
 8001c56:	4053      	eors	r3, r2
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d105      	bne.n	8001c6a <rfm95_init+0xb6>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2260      	movs	r2, #96	; 0x60
 8001c62:	5a9b      	ldrh	r3, [r3, r2]
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001c64:	4a82      	ldr	r2, [pc, #520]	; (8001e70 <rfm95_init+0x2bc>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d003      	beq.n	8001c72 <rfm95_init+0xbe>
		config_load_default(handle);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	0018      	movs	r0, r3
 8001c6e:	f7ff fdc1 	bl	80017f4 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8001c72:	2317      	movs	r3, #23
 8001c74:	18fa      	adds	r2, r7, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2142      	movs	r1, #66	; 0x42
 8001c7c:	f7ff fd0d 	bl	800169a <read_register>
 8001c80:	0003      	movs	r3, r0
 8001c82:	001a      	movs	r2, r3
 8001c84:	2301      	movs	r3, #1
 8001c86:	4053      	eors	r3, r2
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <rfm95_init+0xde>
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e0dc      	b.n	8001e4c <rfm95_init+0x298>
	char s[15];
	sprintf(s, "%d\n", version);
 8001c92:	2417      	movs	r4, #23
 8001c94:	193b      	adds	r3, r7, r4
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	001a      	movs	r2, r3
 8001c9a:	4976      	ldr	r1, [pc, #472]	; (8001e74 <rfm95_init+0x2c0>)
 8001c9c:	2508      	movs	r5, #8
 8001c9e:	197b      	adds	r3, r7, r5
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f004 fadd 	bl	8006260 <siprintf>
	HAL_UART_Transmit(uart_handle, s, sizeof(s), 10);
 8001ca6:	1979      	adds	r1, r7, r5
 8001ca8:	6838      	ldr	r0, [r7, #0]
 8001caa:	230a      	movs	r3, #10
 8001cac:	220f      	movs	r2, #15
 8001cae:	f003 fbd3 	bl	8005458 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001cb2:	2064      	movs	r0, #100	; 0x64
 8001cb4:	f001 fda8 	bl	8003808 <HAL_Delay>
	if (version != RFM9x_VER) return false;
 8001cb8:	193b      	adds	r3, r7, r4
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b11      	cmp	r3, #17
 8001cbe:	d001      	beq.n	8001cc4 <rfm95_init+0x110>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	e0c3      	b.n	8001e4c <rfm95_init+0x298>
	HAL_UART_Transmit(uart_handle, "here\n", 5, 10);
 8001cc4:	496c      	ldr	r1, [pc, #432]	; (8001e78 <rfm95_init+0x2c4>)
 8001cc6:	6838      	ldr	r0, [r7, #0]
 8001cc8:	230a      	movs	r3, #10
 8001cca:	2205      	movs	r2, #5
 8001ccc:	f003 fbc4 	bl	8005458 <HAL_UART_Transmit>
	HAL_Delay(100);
 8001cd0:	2064      	movs	r0, #100	; 0x64
 8001cd2:	f001 fd99 	bl	8003808 <HAL_Delay>



	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	2101      	movs	r1, #1
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff fd1a 	bl	8001716 <write_register>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	4053      	eors	r3, r2
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <rfm95_init+0x140>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e0ab      	b.n	8001e4c <rfm95_init+0x298>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f7ff fd0b 	bl	8001716 <write_register>
 8001d00:	0003      	movs	r3, r0
 8001d02:	001a      	movs	r2, r3
 8001d04:	2301      	movs	r3, #1
 8001d06:	4053      	eors	r3, r2
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <rfm95_init+0x15e>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e09c      	b.n	8001e4c <rfm95_init+0x298>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	2140      	movs	r1, #64	; 0x40
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f7ff fcfc 	bl	8001716 <write_register>
 8001d1e:	0003      	movs	r3, r0
 8001d20:	001a      	movs	r2, r3
 8001d22:	2301      	movs	r3, #1
 8001d24:	4053      	eors	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <rfm95_init+0x17c>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	e08d      	b.n	8001e4c <rfm95_init+0x298>

	if (handle->on_after_interrupts_configured != NULL) {
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <rfm95_init+0x18a>
		handle->on_after_interrupts_configured();
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2111      	movs	r1, #17
 8001d42:	0018      	movs	r0, r3
 8001d44:	f7ff fe9e 	bl	8001a84 <rfm95_set_power>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	001a      	movs	r2, r3
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	4053      	eors	r3, r2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <rfm95_init+0x1a6>
 8001d56:	2300      	movs	r3, #0
 8001d58:	e078      	b.n	8001e4c <rfm95_init+0x298>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2223      	movs	r2, #35	; 0x23
 8001d5e:	210c      	movs	r1, #12
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff fcd8 	bl	8001716 <write_register>
 8001d66:	0003      	movs	r3, r0
 8001d68:	001a      	movs	r2, r3
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	4053      	eors	r3, r2
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <rfm95_init+0x1c4>
 8001d74:	2300      	movs	r3, #0
 8001d76:	e069      	b.n	8001e4c <rfm95_init+0x298>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	0018      	movs	r0, r3
 8001d80:	f7ff fcc9 	bl	8001716 <write_register>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4053      	eors	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <rfm95_init+0x1e2>
 8001d92:	2300      	movs	r3, #0
 8001d94:	e05a      	b.n	8001e4c <rfm95_init+0x298>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2208      	movs	r2, #8
 8001d9a:	2121      	movs	r1, #33	; 0x21
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f7ff fcba 	bl	8001716 <write_register>
 8001da2:	0003      	movs	r3, r0
 8001da4:	001a      	movs	r2, r3
 8001da6:	2301      	movs	r3, #1
 8001da8:	4053      	eors	r3, r2
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <rfm95_init+0x200>
 8001db0:	2300      	movs	r3, #0
 8001db2:	e04b      	b.n	8001e4c <rfm95_init+0x298>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2234      	movs	r2, #52	; 0x34
 8001db8:	2139      	movs	r1, #57	; 0x39
 8001dba:	0018      	movs	r0, r3
 8001dbc:	f7ff fcab 	bl	8001716 <write_register>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	001a      	movs	r2, r3
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	4053      	eors	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <rfm95_init+0x21e>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e03c      	b.n	8001e4c <rfm95_init+0x298>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	210e      	movs	r1, #14
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f7ff fc9c 	bl	8001716 <write_register>
 8001dde:	0003      	movs	r3, r0
 8001de0:	001a      	movs	r2, r3
 8001de2:	2301      	movs	r3, #1
 8001de4:	4053      	eors	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <rfm95_init+0x23c>
 8001dec:	2300      	movs	r3, #0
 8001dee:	e02d      	b.n	8001e4c <rfm95_init+0x298>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	210f      	movs	r1, #15
 8001df6:	0018      	movs	r0, r3
 8001df8:	f7ff fc8d 	bl	8001716 <write_register>
 8001dfc:	0003      	movs	r3, r0
 8001dfe:	001a      	movs	r2, r3
 8001e00:	2301      	movs	r3, #1
 8001e02:	4053      	eors	r3, r2
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <rfm95_init+0x25a>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e01e      	b.n	8001e4c <rfm95_init+0x298>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	2123      	movs	r1, #35	; 0x23
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7ff fc7e 	bl	8001716 <write_register>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	001a      	movs	r2, r3
 8001e1e:	2301      	movs	r3, #1
 8001e20:	4053      	eors	r3, r2
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <rfm95_init+0x278>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e00f      	b.n	8001e4c <rfm95_init+0x298>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2280      	movs	r2, #128	; 0x80
 8001e30:	2101      	movs	r1, #1
 8001e32:	0018      	movs	r0, r3
 8001e34:	f7ff fc6f 	bl	8001716 <write_register>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	001a      	movs	r2, r3
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	4053      	eors	r3, r2
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <rfm95_init+0x296>
 8001e46:	2300      	movs	r3, #0
 8001e48:	e000      	b.n	8001e4c <rfm95_init+0x298>

	return true;
 8001e4a:	2301      	movs	r3, #1
}
 8001e4c:	0018      	movs	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	b006      	add	sp, #24
 8001e52:	bdb0      	pop	{r4, r5, r7, pc}
 8001e54:	08007110 	.word	0x08007110
 8001e58:	08007348 	.word	0x08007348
 8001e5c:	0800708c 	.word	0x0800708c
 8001e60:	08007144 	.word	0x08007144
 8001e64:	08007180 	.word	0x08007180
 8001e68:	080071b8 	.word	0x080071b8
 8001e6c:	080071f4 	.word	0x080071f4
 8001e70:	0000ab67 	.word	0x0000ab67
 8001e74:	0800722c 	.word	0x0800722c
 8001e78:	08007230 	.word	0x08007230

08001e7c <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7e:	b08d      	sub	sp, #52	; 0x34
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
 8001e88:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001e8a:	232f      	movs	r3, #47	; 0x2f
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
	uint8_t answer_index = 0;
 8001e92:	232e      	movs	r3, #46	; 0x2e
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	2200      	movs	r2, #0
 8001e98:	701a      	strb	r2, [r3, #0]

	while (index < frame_payload_length) {
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	e1fd      	b.n	800229a <process_mac_commands+0x41e>
		switch (frame_payload[index++])
 8001e9e:	222f      	movs	r2, #47	; 0x2f
 8001ea0:	18bb      	adds	r3, r7, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	18ba      	adds	r2, r7, r2
 8001ea6:	1c59      	adds	r1, r3, #1
 8001ea8:	7011      	strb	r1, [r2, #0]
 8001eaa:	001a      	movs	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	212e      	movs	r1, #46	; 0x2e
 8001eb4:	187a      	adds	r2, r7, r1
 8001eb6:	1879      	adds	r1, r7, r1
 8001eb8:	7809      	ldrb	r1, [r1, #0]
 8001eba:	7011      	strb	r1, [r2, #0]
 8001ebc:	2b0d      	cmp	r3, #13
 8001ebe:	d900      	bls.n	8001ec2 <process_mac_commands+0x46>
 8001ec0:	e1eb      	b.n	800229a <process_mac_commands+0x41e>
 8001ec2:	009a      	lsls	r2, r3, #2
 8001ec4:	4be2      	ldr	r3, [pc, #904]	; (8002250 <process_mac_commands+0x3d4>)
 8001ec6:	18d3      	adds	r3, r2, r3
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	469f      	mov	pc, r3
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8001ecc:	232f      	movs	r3, #47	; 0x2f
 8001ece:	18fb      	adds	r3, r7, r3
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d801      	bhi.n	8001edc <process_mac_commands+0x60>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e1eb      	b.n	80022b4 <process_mac_commands+0x438>

				index += 1;
 8001edc:	222f      	movs	r2, #47	; 0x2f
 8001ede:	18bb      	adds	r3, r7, r2
 8001ee0:	18ba      	adds	r2, r7, r2
 8001ee2:	7812      	ldrb	r2, [r2, #0]
 8001ee4:	3201      	adds	r2, #1
 8001ee6:	701a      	strb	r2, [r3, #0]
				break;
 8001ee8:	e1d7      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8001eea:	232f      	movs	r3, #47	; 0x2f
 8001eec:	18fb      	adds	r3, r7, r3
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	001a      	movs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d801      	bhi.n	8001efe <process_mac_commands+0x82>
 8001efa:	2300      	movs	r3, #0
 8001efc:	e1da      	b.n	80022b4 <process_mac_commands+0x438>

				index += 2;
 8001efe:	222f      	movs	r2, #47	; 0x2f
 8001f00:	18bb      	adds	r3, r7, r2
 8001f02:	18ba      	adds	r2, r7, r2
 8001f04:	7812      	ldrb	r2, [r2, #0]
 8001f06:	3202      	adds	r2, #2
 8001f08:	701a      	strb	r2, [r3, #0]
				break;
 8001f0a:	e1c6      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8001f0c:	232f      	movs	r3, #47	; 0x2f
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3303      	adds	r3, #3
 8001f14:	001a      	movs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d801      	bhi.n	8001f20 <process_mac_commands+0xa4>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	e1c9      	b.n	80022b4 <process_mac_commands+0x438>

				index += 4;
 8001f20:	222f      	movs	r2, #47	; 0x2f
 8001f22:	18bb      	adds	r3, r7, r2
 8001f24:	18ba      	adds	r2, r7, r2
 8001f26:	7812      	ldrb	r2, [r2, #0]
 8001f28:	3204      	adds	r2, #4
 8001f2a:	701a      	strb	r2, [r3, #0]
				break;
 8001f2c:	e1b5      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8001f2e:	232f      	movs	r3, #47	; 0x2f
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d801      	bhi.n	8001f3e <process_mac_commands+0xc2>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e1ba      	b.n	80022b4 <process_mac_commands+0x438>

				index += 1;
 8001f3e:	222f      	movs	r2, #47	; 0x2f
 8001f40:	18bb      	adds	r3, r7, r2
 8001f42:	18ba      	adds	r2, r7, r2
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	3201      	adds	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]
				break;
 8001f4a:	e1a6      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001f4c:	232f      	movs	r3, #47	; 0x2f
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	3304      	adds	r3, #4
 8001f54:	001a      	movs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d801      	bhi.n	8001f60 <process_mac_commands+0xe4>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e1a9      	b.n	80022b4 <process_mac_commands+0x438>
				if ((answer_index + 2) >= 51) return false;
 8001f60:	232e      	movs	r3, #46	; 0x2e
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b30      	cmp	r3, #48	; 0x30
 8001f68:	d901      	bls.n	8001f6e <process_mac_commands+0xf2>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e1a2      	b.n	80022b4 <process_mac_commands+0x438>

				uint8_t dl_settings = frame_payload[index++];
 8001f6e:	202f      	movs	r0, #47	; 0x2f
 8001f70:	183b      	adds	r3, r7, r0
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	183a      	adds	r2, r7, r0
 8001f76:	1c59      	adds	r1, r3, #1
 8001f78:	7011      	strb	r1, [r2, #0]
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	189a      	adds	r2, r3, r2
 8001f80:	231e      	movs	r3, #30
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	7812      	ldrb	r2, [r2, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_lsb = frame_payload[index++];
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	183a      	adds	r2, r7, r0
 8001f8e:	1c59      	adds	r1, r3, #1
 8001f90:	7011      	strb	r1, [r2, #0]
 8001f92:	001a      	movs	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	189a      	adds	r2, r3, r2
 8001f98:	241d      	movs	r4, #29
 8001f9a:	193b      	adds	r3, r7, r4
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_msb = frame_payload[index++];
 8001fa0:	183b      	adds	r3, r7, r0
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	183a      	adds	r2, r7, r0
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	7011      	strb	r1, [r2, #0]
 8001faa:	001a      	movs	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	189a      	adds	r2, r3, r2
 8001fb0:	251c      	movs	r5, #28
 8001fb2:	197b      	adds	r3, r7, r5
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_hsb = frame_payload[index++];
 8001fb8:	183b      	adds	r3, r7, r0
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	183a      	adds	r2, r7, r0
 8001fbe:	1c59      	adds	r1, r3, #1
 8001fc0:	7011      	strb	r1, [r2, #0]
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	189a      	adds	r2, r3, r2
 8001fc8:	211b      	movs	r1, #27
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	7812      	ldrb	r2, [r2, #0]
 8001fce:	701a      	strb	r2, [r3, #0]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8001fd0:	193b      	adds	r3, r7, r4
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	197b      	adds	r3, r7, r5
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	041b      	lsls	r3, r3, #16
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	2264      	movs	r2, #100	; 0x64
 8001fe6:	4353      	muls	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 8001fea:	202e      	movs	r0, #46	; 0x2e
 8001fec:	183b      	adds	r3, r7, r0
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	183a      	adds	r2, r7, r0
 8001ff2:	1c59      	adds	r1, r3, #1
 8001ff4:	7011      	strb	r1, [r2, #0]
 8001ff6:	001a      	movs	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	189b      	adds	r3, r3, r2
 8001ffc:	2205      	movs	r2, #5
 8001ffe:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 8002000:	183b      	adds	r3, r7, r0
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	183a      	adds	r2, r7, r0
 8002006:	1c59      	adds	r1, r3, #1
 8002008:	7011      	strb	r1, [r2, #0]
 800200a:	001a      	movs	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	189b      	adds	r3, r3, r2
 8002010:	2207      	movs	r2, #7
 8002012:	701a      	strb	r2, [r3, #0]
				break;
 8002014:	e141      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8002016:	232e      	movs	r3, #46	; 0x2e
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b2f      	cmp	r3, #47	; 0x2f
 800201e:	d901      	bls.n	8002024 <process_mac_commands+0x1a8>
 8002020:	2300      	movs	r3, #0
 8002022:	e147      	b.n	80022b4 <process_mac_commands+0x438>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8002024:	233c      	movs	r3, #60	; 0x3c
 8002026:	2210      	movs	r2, #16
 8002028:	189b      	adds	r3, r3, r2
 800202a:	19db      	adds	r3, r3, r7
 800202c:	781a      	ldrb	r2, [r3, #0]
 800202e:	2320      	movs	r3, #32
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	211f      	movs	r1, #31
 8002034:	400a      	ands	r2, r1
 8002036:	701a      	strb	r2, [r3, #0]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800203c:	2b00      	cmp	r3, #0
 800203e:	d005      	beq.n	800204c <process_mac_commands+0x1d0>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002044:	4798      	blx	r3
 8002046:	0003      	movs	r3, r0
 8002048:	001a      	movs	r2, r3
 800204a:	e000      	b.n	800204e <process_mac_commands+0x1d2>
 800204c:	22ff      	movs	r2, #255	; 0xff
 800204e:	241f      	movs	r4, #31
 8002050:	193b      	adds	r3, r7, r4
 8002052:	701a      	strb	r2, [r3, #0]

				answer_buffer[answer_index++] = 0x06;
 8002054:	202e      	movs	r0, #46	; 0x2e
 8002056:	183b      	adds	r3, r7, r0
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	183a      	adds	r2, r7, r0
 800205c:	1c59      	adds	r1, r3, #1
 800205e:	7011      	strb	r1, [r2, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	189b      	adds	r3, r3, r2
 8002066:	2206      	movs	r2, #6
 8002068:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 800206a:	183b      	adds	r3, r7, r0
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	183a      	adds	r2, r7, r0
 8002070:	1c59      	adds	r1, r3, #1
 8002072:	7011      	strb	r1, [r2, #0]
 8002074:	001a      	movs	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	189b      	adds	r3, r3, r2
 800207a:	193a      	adds	r2, r7, r4
 800207c:	7812      	ldrb	r2, [r2, #0]
 800207e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8002080:	183b      	adds	r3, r7, r0
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	183a      	adds	r2, r7, r0
 8002086:	1c59      	adds	r1, r3, #1
 8002088:	7011      	strb	r1, [r2, #0]
 800208a:	001a      	movs	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	189b      	adds	r3, r3, r2
 8002090:	2220      	movs	r2, #32
 8002092:	18ba      	adds	r2, r7, r2
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	701a      	strb	r2, [r3, #0]
				break;
 8002098:	e0ff      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 800209a:	232f      	movs	r3, #47	; 0x2f
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3304      	adds	r3, #4
 80020a2:	001a      	movs	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d801      	bhi.n	80020ae <process_mac_commands+0x232>
 80020aa:	2300      	movs	r3, #0
 80020ac:	e102      	b.n	80022b4 <process_mac_commands+0x438>
				if ((answer_index + 2) >= 51) return false;
 80020ae:	232e      	movs	r3, #46	; 0x2e
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b30      	cmp	r3, #48	; 0x30
 80020b6:	d901      	bls.n	80020bc <process_mac_commands+0x240>
 80020b8:	2300      	movs	r3, #0
 80020ba:	e0fb      	b.n	80022b4 <process_mac_commands+0x438>

				uint8_t channel_index = frame_payload[index++];
 80020bc:	202f      	movs	r0, #47	; 0x2f
 80020be:	183b      	adds	r3, r7, r0
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	183a      	adds	r2, r7, r0
 80020c4:	1c59      	adds	r1, r3, #1
 80020c6:	7011      	strb	r1, [r2, #0]
 80020c8:	001a      	movs	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	189a      	adds	r2, r3, r2
 80020ce:	242d      	movs	r4, #45	; 0x2d
 80020d0:	193b      	adds	r3, r7, r4
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_lsb = frame_payload[index++];
 80020d6:	183b      	adds	r3, r7, r0
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	183a      	adds	r2, r7, r0
 80020dc:	1c59      	adds	r1, r3, #1
 80020de:	7011      	strb	r1, [r2, #0]
 80020e0:	001a      	movs	r2, r3
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	189a      	adds	r2, r3, r2
 80020e6:	252c      	movs	r5, #44	; 0x2c
 80020e8:	197b      	adds	r3, r7, r5
 80020ea:	7812      	ldrb	r2, [r2, #0]
 80020ec:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_msb = frame_payload[index++];
 80020ee:	183b      	adds	r3, r7, r0
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	183a      	adds	r2, r7, r0
 80020f4:	1c59      	adds	r1, r3, #1
 80020f6:	7011      	strb	r1, [r2, #0]
 80020f8:	001a      	movs	r2, r3
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	189a      	adds	r2, r3, r2
 80020fe:	262b      	movs	r6, #43	; 0x2b
 8002100:	19bb      	adds	r3, r7, r6
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	701a      	strb	r2, [r3, #0]
				uint8_t frequency_hsb = frame_payload[index++];
 8002106:	183b      	adds	r3, r7, r0
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	183a      	adds	r2, r7, r0
 800210c:	1c59      	adds	r1, r3, #1
 800210e:	7011      	strb	r1, [r2, #0]
 8002110:	001a      	movs	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	189a      	adds	r2, r3, r2
 8002116:	232a      	movs	r3, #42	; 0x2a
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	7812      	ldrb	r2, [r2, #0]
 800211c:	701a      	strb	r2, [r3, #0]
				uint8_t min_max_dr = frame_payload[index++];
 800211e:	183b      	adds	r3, r7, r0
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	183a      	adds	r2, r7, r0
 8002124:	1c59      	adds	r1, r3, #1
 8002126:	7011      	strb	r1, [r2, #0]
 8002128:	001a      	movs	r2, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	189a      	adds	r2, r3, r2
 800212e:	2129      	movs	r1, #41	; 0x29
 8002130:	187b      	adds	r3, r7, r1
 8002132:	7812      	ldrb	r2, [r2, #0]
 8002134:	701a      	strb	r2, [r3, #0]

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8002136:	197b      	adds	r3, r7, r5
 8002138:	781a      	ldrb	r2, [r3, #0]
 800213a:	19bb      	adds	r3, r7, r6
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	021b      	lsls	r3, r3, #8
 8002140:	431a      	orrs	r2, r3
 8002142:	232a      	movs	r3, #42	; 0x2a
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	041b      	lsls	r3, r3, #16
 800214a:	4313      	orrs	r3, r2
 800214c:	2264      	movs	r2, #100	; 0x64
 800214e:	4353      	muls	r3, r2
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8002152:	2323      	movs	r3, #35	; 0x23
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	0008      	movs	r0, r1
 8002158:	187a      	adds	r2, r7, r1
 800215a:	7812      	ldrb	r2, [r2, #0]
 800215c:	210f      	movs	r1, #15
 800215e:	400a      	ands	r2, r1
 8002160:	701a      	strb	r2, [r3, #0]
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8002162:	2322      	movs	r3, #34	; 0x22
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	183a      	adds	r2, r7, r0
 8002168:	7812      	ldrb	r2, [r2, #0]
 800216a:	0912      	lsrs	r2, r2, #4
 800216c:	701a      	strb	r2, [r3, #0]

				if (channel_index >= 3) {
 800216e:	193b      	adds	r3, r7, r4
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d906      	bls.n	8002184 <process_mac_commands+0x308>
					config_set_channel(handle, channel_index, frequency);
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	193b      	adds	r3, r7, r4
 800217a:	7819      	ldrb	r1, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff fb02 	bl	8001788 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8002184:	2323      	movs	r3, #35	; 0x23
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d904      	bls.n	8002198 <process_mac_commands+0x31c>
 800218e:	2322      	movs	r3, #34	; 0x22
 8002190:	18fb      	adds	r3, r7, r3
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b04      	cmp	r3, #4
 8002196:	d901      	bls.n	800219c <process_mac_commands+0x320>
 8002198:	2201      	movs	r2, #1
 800219a:	e000      	b.n	800219e <process_mac_commands+0x322>
 800219c:	2200      	movs	r2, #0
 800219e:	2421      	movs	r4, #33	; 0x21
 80021a0:	193b      	adds	r3, r7, r4
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	781a      	ldrb	r2, [r3, #0]
 80021a6:	2101      	movs	r1, #1
 80021a8:	400a      	ands	r2, r1
 80021aa:	701a      	strb	r2, [r3, #0]

				answer_buffer[answer_index++] = 0x07;
 80021ac:	202e      	movs	r0, #46	; 0x2e
 80021ae:	183b      	adds	r3, r7, r0
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	183a      	adds	r2, r7, r0
 80021b4:	1c59      	adds	r1, r3, #1
 80021b6:	7011      	strb	r1, [r2, #0]
 80021b8:	001a      	movs	r2, r3
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	2207      	movs	r2, #7
 80021c0:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 80021c2:	193b      	adds	r3, r7, r4
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	2201      	movs	r2, #1
 80021cc:	4313      	orrs	r3, r2
 80021ce:	b259      	sxtb	r1, r3
 80021d0:	183b      	adds	r3, r7, r0
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	183a      	adds	r2, r7, r0
 80021d6:	1c58      	adds	r0, r3, #1
 80021d8:	7010      	strb	r0, [r2, #0]
 80021da:	001a      	movs	r2, r3
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	189b      	adds	r3, r3, r2
 80021e0:	b2ca      	uxtb	r2, r1
 80021e2:	701a      	strb	r2, [r3, #0]
				break;
 80021e4:	e059      	b.n	800229a <process_mac_commands+0x41e>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 80021e6:	232f      	movs	r3, #47	; 0x2f
 80021e8:	18fb      	adds	r3, r7, r3
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d801      	bhi.n	80021f6 <process_mac_commands+0x37a>
 80021f2:	2300      	movs	r3, #0
 80021f4:	e05e      	b.n	80022b4 <process_mac_commands+0x438>
				if ((answer_index + 2) >= 51) return false;
 80021f6:	232e      	movs	r3, #46	; 0x2e
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b30      	cmp	r3, #48	; 0x30
 80021fe:	d901      	bls.n	8002204 <process_mac_commands+0x388>
 8002200:	2300      	movs	r3, #0
 8002202:	e057      	b.n	80022b4 <process_mac_commands+0x438>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8002204:	222f      	movs	r2, #47	; 0x2f
 8002206:	18bb      	adds	r3, r7, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	18ba      	adds	r2, r7, r2
 800220c:	1c59      	adds	r1, r3, #1
 800220e:	7011      	strb	r1, [r2, #0]
 8002210:	001a      	movs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	189b      	adds	r3, r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	220f      	movs	r2, #15
 800221a:	4013      	ands	r3, r2
 800221c:	b2d9      	uxtb	r1, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2266      	movs	r2, #102	; 0x66
 8002222:	5499      	strb	r1, [r3, r2]
				if (handle->config.rx1_delay == 0) {
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2266      	movs	r2, #102	; 0x66
 8002228:	5c9b      	ldrb	r3, [r3, r2]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <process_mac_commands+0x3ba>
					handle->config.rx1_delay = 1;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2266      	movs	r2, #102	; 0x66
 8002232:	2101      	movs	r1, #1
 8002234:	5499      	strb	r1, [r3, r2]
				}

				answer_buffer[answer_index++] = 0x08;
 8002236:	222e      	movs	r2, #46	; 0x2e
 8002238:	18bb      	adds	r3, r7, r2
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	18ba      	adds	r2, r7, r2
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	7011      	strb	r1, [r2, #0]
 8002242:	001a      	movs	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	189b      	adds	r3, r3, r2
 8002248:	2208      	movs	r2, #8
 800224a:	701a      	strb	r2, [r3, #0]
				break;
 800224c:	e025      	b.n	800229a <process_mac_commands+0x41e>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	080072d8 	.word	0x080072d8
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002254:	232f      	movs	r3, #47	; 0x2f
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	429a      	cmp	r2, r3
 800225e:	d81c      	bhi.n	800229a <process_mac_commands+0x41e>
 8002260:	2300      	movs	r3, #0
 8002262:	e027      	b.n	80022b4 <process_mac_commands+0x438>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002264:	232f      	movs	r3, #47	; 0x2f
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3304      	adds	r3, #4
 800226c:	001a      	movs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4293      	cmp	r3, r2
 8002272:	d812      	bhi.n	800229a <process_mac_commands+0x41e>
 8002274:	2300      	movs	r3, #0
 8002276:	e01d      	b.n	80022b4 <process_mac_commands+0x438>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8002278:	232f      	movs	r3, #47	; 0x2f
 800227a:	18fb      	adds	r3, r7, r3
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	429a      	cmp	r2, r3
 8002282:	d80a      	bhi.n	800229a <process_mac_commands+0x41e>
 8002284:	2300      	movs	r3, #0
 8002286:	e015      	b.n	80022b4 <process_mac_commands+0x438>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002288:	232f      	movs	r3, #47	; 0x2f
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d802      	bhi.n	800229a <process_mac_commands+0x41e>
 8002294:	2300      	movs	r3, #0
 8002296:	e00d      	b.n	80022b4 <process_mac_commands+0x438>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8002298:	46c0      	nop			; (mov r8, r8)
	while (index < frame_payload_length) {
 800229a:	232f      	movs	r3, #47	; 0x2f
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d900      	bls.n	80022a8 <process_mac_commands+0x42c>
 80022a6:	e5fa      	b.n	8001e9e <process_mac_commands+0x22>
			}
		}
	}

	*answer_buffer_length = answer_index;
 80022a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022aa:	222e      	movs	r2, #46	; 0x2e
 80022ac:	18ba      	adds	r2, r7, r2
 80022ae:	7812      	ldrb	r2, [r2, #0]
 80022b0:	701a      	strb	r2, [r3, #0]
	return true;
 80022b2:	2301      	movs	r3, #1
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b00d      	add	sp, #52	; 0x34
 80022ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022bc <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	22fa      	movs	r2, #250	; 0xfa
 80022d0:	0091      	lsls	r1, r2, #2
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7fd ff22 	bl	800011c <__udivsi3>
 80022d8:	0003      	movs	r3, r0
 80022da:	001a      	movs	r2, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	1a9b      	subs	r3, r3, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	47a0      	blx	r4

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2140      	movs	r1, #64	; 0x40
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff fa13 	bl	8001716 <write_register>
 80022f0:	0003      	movs	r3, r0
 80022f2:	001a      	movs	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	4053      	eors	r3, r2
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <receive_at_scheduled_time+0x46>
 80022fe:	2300      	movs	r3, #0
 8002300:	e044      	b.n	800238c <receive_at_scheduled_time+0xd0>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	2112      	movs	r1, #18
 8002308:	0018      	movs	r0, r3
 800230a:	f7ff fa04 	bl	8001716 <write_register>
 800230e:	0003      	movs	r3, r0
 8002310:	001a      	movs	r2, r3
 8002312:	2301      	movs	r3, #1
 8002314:	4053      	eors	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <receive_at_scheduled_time+0x64>
 800231c:	2300      	movs	r3, #0
 800231e:	e035      	b.n	800238c <receive_at_scheduled_time+0xd0>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	22ac      	movs	r2, #172	; 0xac
 8002324:	2100      	movs	r1, #0
 8002326:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	22b0      	movs	r2, #176	; 0xb0
 800232c:	2100      	movs	r1, #0
 800232e:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	22b4      	movs	r2, #180	; 0xb4
 8002334:	2100      	movs	r1, #0
 8002336:	5099      	str	r1, [r3, r2]

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2281      	movs	r2, #129	; 0x81
 800233c:	2101      	movs	r1, #1
 800233e:	0018      	movs	r0, r3
 8002340:	f7ff f9e9 	bl	8001716 <write_register>
 8002344:	0003      	movs	r3, r0
 8002346:	001a      	movs	r2, r3
 8002348:	2301      	movs	r3, #1
 800234a:	4053      	eors	r3, r2
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <receive_at_scheduled_time+0x9a>
 8002352:	2300      	movs	r3, #0
 8002354:	e01a      	b.n	800238c <receive_at_scheduled_time+0xd0>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	220a      	movs	r2, #10
 800235a:	2102      	movs	r1, #2
 800235c:	0018      	movs	r0, r3
 800235e:	f7ff fb27 	bl	80019b0 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	0010      	movs	r0, r2
 800236a:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2286      	movs	r2, #134	; 0x86
 8002370:	2101      	movs	r1, #1
 8002372:	0018      	movs	r0, r3
 8002374:	f7ff f9cf 	bl	8001716 <write_register>
 8002378:	0003      	movs	r3, r0
 800237a:	001a      	movs	r2, r3
 800237c:	2301      	movs	r3, #1
 800237e:	4053      	eors	r3, r2
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <receive_at_scheduled_time+0xce>
 8002386:	2300      	movs	r3, #0
 8002388:	e000      	b.n	800238c <receive_at_scheduled_time+0xd0>

	return true;
 800238a:	2301      	movs	r3, #1
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b003      	add	sp, #12
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8002394:	b5b0      	push	{r4, r5, r7, lr}
 8002396:	b08c      	sub	sp, #48	; 0x30
 8002398:	af00      	add	r7, sp, #0
 800239a:	6178      	str	r0, [r7, #20]
 800239c:	6139      	str	r1, [r7, #16]
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	210f      	movs	r1, #15
 80023a2:	187b      	adds	r3, r7, r1
 80023a4:	701a      	strb	r2, [r3, #0]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	2202      	movs	r2, #2
 80023ae:	409a      	lsls	r2, r3
 80023b0:	0011      	movs	r1, r2
 80023b2:	000a      	movs	r2, r1
 80023b4:	0152      	lsls	r2, r2, #5
 80023b6:	1a52      	subs	r2, r2, r1
 80023b8:	0193      	lsls	r3, r2, #6
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	185b      	adds	r3, r3, r1
 80023c0:	019b      	lsls	r3, r3, #6
 80023c2:	6939      	ldr	r1, [r7, #16]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fd fea9 	bl	800011c <__udivsi3>
 80023ca:	0003      	movs	r3, r0
 80023cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	2166      	movs	r1, #102	; 0x66
 80023d6:	5c52      	ldrb	r2, [r2, r1]
 80023d8:	4353      	muls	r3, r2
 80023da:	62bb      	str	r3, [r7, #40]	; 0x28
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e0:	18d3      	adds	r3, r2, r3
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	627b      	str	r3, [r7, #36]	; 0x24
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	009a      	lsls	r2, r3, #2
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da00      	bge.n	80023f2 <calculate_rx_timings+0x5e>
 80023f0:	3301      	adds	r3, #1
 80023f2:	105b      	asrs	r3, r3, #1
 80023f4:	425b      	negs	r3, r3
 80023f6:	18d3      	adds	r3, r2, r3
 80023f8:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	001c      	movs	r4, r3
 80023fe:	17db      	asrs	r3, r3, #31
 8002400:	001d      	movs	r5, r3
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0020      	movs	r0, r4
 8002412:	0029      	movs	r1, r5
 8002414:	f7fe f83c 	bl	8000490 <__aeabi_lmul>
 8002418:	0002      	movs	r2, r0
 800241a:	000b      	movs	r3, r1
 800241c:	0010      	movs	r0, r2
 800241e:	0019      	movs	r1, r3
 8002420:	4a10      	ldr	r2, [pc, #64]	; (8002464 <calculate_rx_timings+0xd0>)
 8002422:	2300      	movs	r3, #0
 8002424:	f7fd fff0 	bl	8000408 <__aeabi_ldivmod>
 8002428:	0002      	movs	r2, r0
 800242a:	000b      	movs	r3, r1
 800242c:	0013      	movs	r3, r2
 800242e:	61fb      	str	r3, [r7, #28]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	2166      	movs	r1, #102	; 0x66
 8002438:	5c52      	ldrb	r2, [r2, r1]
 800243a:	435a      	muls	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	18d3      	adds	r3, r2, r3
 8002440:	69fa      	ldr	r2, [r7, #28]
 8002442:	189a      	adds	r2, r3, r2
 8002444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002446:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800244c:	0011      	movs	r1, r2
 800244e:	0018      	movs	r0, r3
 8002450:	f7fd feee 	bl	8000230 <__divsi3>
 8002454:	0003      	movs	r3, r0
 8002456:	001a      	movs	r2, r3
 8002458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800245a:	601a      	str	r2, [r3, #0]
}
 800245c:	46c0      	nop			; (mov r8, r8)
 800245e:	46bd      	mov	sp, r7
 8002460:	b00c      	add	sp, #48	; 0x30
 8002462:	bdb0      	pop	{r4, r5, r7, pc}
 8002464:	000f4240 	.word	0x000f4240

08002468 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b08d      	sub	sp, #52	; 0x34
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	49c6      	ldr	r1, [pc, #792]	; (8002798 <receive_package+0x330>)
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	2320      	movs	r3, #32
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2324      	movs	r3, #36	; 0x24
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	0013      	movs	r3, r2
 8002490:	2207      	movs	r2, #7
 8002492:	f7ff ff7f 	bl	8002394 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8002496:	6a3a      	ldr	r2, [r7, #32]
 8002498:	2380      	movs	r3, #128	; 0x80
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	429a      	cmp	r2, r3
 800249e:	d306      	bcc.n	80024ae <receive_package+0x46>
 80024a0:	4bbe      	ldr	r3, [pc, #760]	; (800279c <receive_package+0x334>)
 80024a2:	4abf      	ldr	r2, [pc, #764]	; (80027a0 <receive_package+0x338>)
 80024a4:	21cc      	movs	r1, #204	; 0xcc
 80024a6:	31ff      	adds	r1, #255	; 0xff
 80024a8:	48be      	ldr	r0, [pc, #760]	; (80027a4 <receive_package+0x33c>)
 80024aa:	f003 fb7f 	bl	8005bac <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2272      	movs	r2, #114	; 0x72
 80024b2:	211d      	movs	r1, #29
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff f92e 	bl	8001716 <write_register>
 80024ba:	0003      	movs	r3, r0
 80024bc:	001a      	movs	r2, r3
 80024be:	2301      	movs	r3, #1
 80024c0:	4053      	eors	r3, r2
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <receive_package+0x64>
 80024c8:	2300      	movs	r3, #0
 80024ca:	e160      	b.n	800278e <receive_package+0x326>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2203      	movs	r2, #3
 80024d4:	4013      	ands	r3, r2
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2274      	movs	r2, #116	; 0x74
 80024da:	4313      	orrs	r3, r2
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	211e      	movs	r1, #30
 80024e2:	0018      	movs	r0, r3
 80024e4:	f7ff f917 	bl	8001716 <write_register>
 80024e8:	0003      	movs	r3, r0
 80024ea:	001a      	movs	r2, r3
 80024ec:	2301      	movs	r3, #1
 80024ee:	4053      	eors	r3, r2
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <receive_package+0x92>
 80024f6:	2300      	movs	r3, #0
 80024f8:	e149      	b.n	800278e <receive_package+0x326>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2204      	movs	r2, #4
 80024fe:	2126      	movs	r1, #38	; 0x26
 8002500:	0018      	movs	r0, r3
 8002502:	f7ff f908 	bl	8001716 <write_register>
 8002506:	0003      	movs	r3, r0
 8002508:	001a      	movs	r2, r3
 800250a:	2301      	movs	r3, #1
 800250c:	4053      	eors	r3, r2
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <receive_package+0xb0>
 8002514:	2300      	movs	r3, #0
 8002516:	e13a      	b.n	800278e <receive_package+0x326>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8002518:	6a3b      	ldr	r3, [r7, #32]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	211f      	movs	r1, #31
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff f8f8 	bl	8001716 <write_register>
 8002526:	0003      	movs	r3, r0
 8002528:	001a      	movs	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	4053      	eors	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <receive_package+0xd0>
 8002534:	2300      	movs	r3, #0
 8002536:	e12a      	b.n	800278e <receive_package+0x326>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2267      	movs	r2, #103	; 0x67
 800253c:	2133      	movs	r1, #51	; 0x33
 800253e:	0018      	movs	r0, r3
 8002540:	f7ff f8e9 	bl	8001716 <write_register>
 8002544:	0003      	movs	r3, r0
 8002546:	001a      	movs	r2, r3
 8002548:	2301      	movs	r3, #1
 800254a:	4053      	eors	r3, r2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <receive_package+0xee>
 8002552:	2300      	movs	r3, #0
 8002554:	e11b      	b.n	800278e <receive_package+0x326>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2219      	movs	r2, #25
 800255a:	213b      	movs	r1, #59	; 0x3b
 800255c:	0018      	movs	r0, r3
 800255e:	f7ff f8da 	bl	8001716 <write_register>
 8002562:	0003      	movs	r3, r0
 8002564:	001a      	movs	r2, r3
 8002566:	2301      	movs	r3, #1
 8002568:	4053      	eors	r3, r2
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <receive_package+0x10c>
 8002570:	2300      	movs	r3, #0
 8002572:	e10c      	b.n	800278e <receive_package+0x326>

	receive_at_scheduled_time(handle, rx1_target);
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	0011      	movs	r1, r2
 800257a:	0018      	movs	r0, r3
 800257c:	f7ff fe9e 	bl	80022bc <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	0018      	movs	r0, r3
 8002584:	f7ff fa47 	bl	8001a16 <wait_for_rx_irqs>
 8002588:	0003      	movs	r3, r0
 800258a:	001a      	movs	r2, r3
 800258c:	2301      	movs	r3, #1
 800258e:	4053      	eors	r3, r2
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d100      	bne.n	8002598 <receive_package+0x130>
 8002596:	e08a      	b.n	80026ae <receive_package+0x246>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2280      	movs	r2, #128	; 0x80
 800259c:	2101      	movs	r1, #1
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff f8b9 	bl	8001716 <write_register>
 80025a4:	0003      	movs	r3, r0
 80025a6:	001a      	movs	r2, r3
 80025a8:	2301      	movs	r3, #1
 80025aa:	4053      	eors	r3, r2
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <receive_package+0x14e>
 80025b2:	2300      	movs	r3, #0
 80025b4:	e0eb      	b.n	800278e <receive_package+0x326>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2240      	movs	r2, #64	; 0x40
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d000      	beq.n	80025c2 <receive_package+0x15a>
 80025c0:	e073      	b.n	80026aa <receive_package+0x242>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	4974      	ldr	r1, [pc, #464]	; (8002798 <receive_package+0x330>)
 80025c6:	68f8      	ldr	r0, [r7, #12]
 80025c8:	2314      	movs	r3, #20
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	9301      	str	r3, [sp, #4]
 80025ce:	2318      	movs	r3, #24
 80025d0:	18fb      	adds	r3, r7, r3
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	0013      	movs	r3, r2
 80025d6:	220c      	movs	r2, #12
 80025d8:	f7ff fedc 	bl	8002394 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 80025dc:	4a72      	ldr	r2, [pc, #456]	; (80027a8 <receive_package+0x340>)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff f95a 	bl	800189c <configure_frequency>
 80025e8:	0003      	movs	r3, r0
 80025ea:	001a      	movs	r2, r3
 80025ec:	2301      	movs	r3, #1
 80025ee:	4053      	eors	r3, r2
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <receive_package+0x192>
 80025f6:	2300      	movs	r3, #0
 80025f8:	e0c9      	b.n	800278e <receive_package+0x326>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	22c2      	movs	r2, #194	; 0xc2
 80025fe:	211d      	movs	r1, #29
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff f888 	bl	8001716 <write_register>
 8002606:	0003      	movs	r3, r0
 8002608:	001a      	movs	r2, r3
 800260a:	2301      	movs	r3, #1
 800260c:	4053      	eors	r3, r2
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <receive_package+0x1b0>
 8002614:	2300      	movs	r3, #0
 8002616:	e0ba      	b.n	800278e <receive_package+0x326>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	0a1b      	lsrs	r3, r3, #8
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2203      	movs	r2, #3
 8002620:	4013      	ands	r3, r2
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2274      	movs	r2, #116	; 0x74
 8002626:	4313      	orrs	r3, r2
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	211e      	movs	r1, #30
 800262e:	0018      	movs	r0, r3
 8002630:	f7ff f871 	bl	8001716 <write_register>
 8002634:	0003      	movs	r3, r0
 8002636:	001a      	movs	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	4053      	eors	r3, r2
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <receive_package+0x1de>
 8002642:	2300      	movs	r3, #0
 8002644:	e0a3      	b.n	800278e <receive_package+0x326>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2204      	movs	r2, #4
 800264a:	2126      	movs	r1, #38	; 0x26
 800264c:	0018      	movs	r0, r3
 800264e:	f7ff f862 	bl	8001716 <write_register>
 8002652:	0003      	movs	r3, r0
 8002654:	001a      	movs	r2, r3
 8002656:	2301      	movs	r3, #1
 8002658:	4053      	eors	r3, r2
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <receive_package+0x1fc>
 8002660:	2300      	movs	r3, #0
 8002662:	e094      	b.n	800278e <receive_package+0x326>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	211f      	movs	r1, #31
 800266c:	0018      	movs	r0, r3
 800266e:	f7ff f852 	bl	8001716 <write_register>
 8002672:	0003      	movs	r3, r0
 8002674:	001a      	movs	r2, r3
 8002676:	2301      	movs	r3, #1
 8002678:	4053      	eors	r3, r2
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <receive_package+0x21c>
 8002680:	2300      	movs	r3, #0
 8002682:	e084      	b.n	800278e <receive_package+0x326>

			receive_at_scheduled_time(handle, rx2_target);
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	0011      	movs	r1, r2
 800268a:	0018      	movs	r0, r3
 800268c:	f7ff fe16 	bl	80022bc <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	0018      	movs	r0, r3
 8002694:	f7ff f9bf 	bl	8001a16 <wait_for_rx_irqs>
 8002698:	0003      	movs	r3, r0
 800269a:	001a      	movs	r2, r3
 800269c:	2301      	movs	r3, #1
 800269e:	4053      	eors	r3, r2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <receive_package+0x242>
				// No payload during in RX1 and RX2
				return true;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e071      	b.n	800278e <receive_package+0x326>
			}
		}

		return true;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e06f      	b.n	800278e <receive_package+0x326>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 80026ae:	241f      	movs	r4, #31
 80026b0:	193a      	adds	r2, r7, r4
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	2301      	movs	r3, #1
 80026b6:	2112      	movs	r1, #18
 80026b8:	f7fe ffef 	bl	800169a <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 80026bc:	193b      	adds	r3, r7, r4
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	001a      	movs	r2, r3
 80026c2:	2320      	movs	r3, #32
 80026c4:	4013      	ands	r3, r2
 80026c6:	d001      	beq.n	80026cc <receive_package+0x264>
		return true;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e060      	b.n	800278e <receive_package+0x326>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 80026cc:	231e      	movs	r3, #30
 80026ce:	18fa      	adds	r2, r7, r3
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	2301      	movs	r3, #1
 80026d4:	2119      	movs	r1, #25
 80026d6:	f7fe ffe0 	bl	800169a <read_register>
 80026da:	0003      	movs	r3, r0
 80026dc:	001a      	movs	r2, r3
 80026de:	2301      	movs	r3, #1
 80026e0:	4053      	eors	r3, r2
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <receive_package+0x284>
 80026e8:	2300      	movs	r3, #0
 80026ea:	e050      	b.n	800278e <receive_package+0x326>
	*snr = (int8_t)(packet_snr / 4);
 80026ec:	231e      	movs	r3, #30
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da00      	bge.n	80026fa <receive_package+0x292>
 80026f8:	3303      	adds	r3, #3
 80026fa:	109b      	asrs	r3, r3, #2
 80026fc:	b25a      	sxtb	r2, r3
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8002702:	231d      	movs	r3, #29
 8002704:	18fa      	adds	r2, r7, r3
 8002706:	68f8      	ldr	r0, [r7, #12]
 8002708:	2301      	movs	r3, #1
 800270a:	2113      	movs	r1, #19
 800270c:	f7fe ffc5 	bl	800169a <read_register>
 8002710:	0003      	movs	r3, r0
 8002712:	001a      	movs	r2, r3
 8002714:	2301      	movs	r3, #1
 8002716:	4053      	eors	r3, r2
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <receive_package+0x2ba>
 800271e:	2300      	movs	r3, #0
 8002720:	e035      	b.n	800278e <receive_package+0x326>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	210d      	movs	r1, #13
 8002728:	0018      	movs	r0, r3
 800272a:	f7fe fff4 	bl	8001716 <write_register>
 800272e:	0003      	movs	r3, r0
 8002730:	001a      	movs	r2, r3
 8002732:	2301      	movs	r3, #1
 8002734:	4053      	eors	r3, r2
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <receive_package+0x2d8>
 800273c:	2300      	movs	r3, #0
 800273e:	e026      	b.n	800278e <receive_package+0x326>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 8002740:	231d      	movs	r3, #29
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	2100      	movs	r1, #0
 800274c:	f7fe ffa5 	bl	800169a <read_register>
 8002750:	0003      	movs	r3, r0
 8002752:	001a      	movs	r2, r3
 8002754:	2301      	movs	r3, #1
 8002756:	4053      	eors	r3, r2
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <receive_package+0x2fa>
 800275e:	2300      	movs	r3, #0
 8002760:	e015      	b.n	800278e <receive_package+0x326>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	2101      	movs	r1, #1
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe ffd4 	bl	8001716 <write_register>
 800276e:	0003      	movs	r3, r0
 8002770:	001a      	movs	r2, r3
 8002772:	2301      	movs	r3, #1
 8002774:	4053      	eors	r3, r2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <receive_package+0x318>
 800277c:	2300      	movs	r3, #0
 800277e:	e006      	b.n	800278e <receive_package+0x326>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8002780:	231d      	movs	r3, #29
 8002782:	18fb      	adds	r3, r7, r3
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	001a      	movs	r2, r3
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	601a      	str	r2, [r3, #0]
	return true;
 800278c:	2301      	movs	r3, #1
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b00b      	add	sp, #44	; 0x2c
 8002794:	bd90      	pop	{r4, r7, pc}
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	0001e848 	.word	0x0001e848
 800279c:	08007238 	.word	0x08007238
 80027a0:	08007354 	.word	0x08007354
 80027a4:	0800708c 	.word	0x0800708c
 80027a8:	33d3e608 	.word	0x33d3e608

080027ac <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	001a      	movs	r2, r3
 80027ba:	1cfb      	adds	r3, r7, #3
 80027bc:	701a      	strb	r2, [r3, #0]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80027be:	1cfb      	adds	r3, r7, #3
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	0011      	movs	r1, r2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff f8c8 	bl	800195c <configure_channel>
 80027cc:	0003      	movs	r3, r0
 80027ce:	001a      	movs	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	4053      	eors	r3, r2
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <send_package+0x32>
 80027da:	2300      	movs	r3, #0
 80027dc:	e0f2      	b.n	80029c4 <send_package+0x218>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2272      	movs	r2, #114	; 0x72
 80027e2:	211d      	movs	r1, #29
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fe ff96 	bl	8001716 <write_register>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	4053      	eors	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <send_package+0x50>
 80027f8:	2300      	movs	r3, #0
 80027fa:	e0e3      	b.n	80029c4 <send_package+0x218>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2274      	movs	r2, #116	; 0x74
 8002800:	211e      	movs	r1, #30
 8002802:	0018      	movs	r0, r3
 8002804:	f7fe ff87 	bl	8001716 <write_register>
 8002808:	0003      	movs	r3, r0
 800280a:	001a      	movs	r2, r3
 800280c:	2301      	movs	r3, #1
 800280e:	4053      	eors	r3, r2
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <send_package+0x6e>
 8002816:	2300      	movs	r3, #0
 8002818:	e0d4      	b.n	80029c4 <send_package+0x218>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2204      	movs	r2, #4
 800281e:	2126      	movs	r1, #38	; 0x26
 8002820:	0018      	movs	r0, r3
 8002822:	f7fe ff78 	bl	8001716 <write_register>
 8002826:	0003      	movs	r3, r0
 8002828:	001a      	movs	r2, r3
 800282a:	2301      	movs	r3, #1
 800282c:	4053      	eors	r3, r2
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <send_package+0x8c>
 8002834:	2300      	movs	r3, #0
 8002836:	e0c5      	b.n	80029c4 <send_package+0x218>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2227      	movs	r2, #39	; 0x27
 800283c:	2133      	movs	r1, #51	; 0x33
 800283e:	0018      	movs	r0, r3
 8002840:	f7fe ff69 	bl	8001716 <write_register>
 8002844:	0003      	movs	r3, r0
 8002846:	001a      	movs	r2, r3
 8002848:	2301      	movs	r3, #1
 800284a:	4053      	eors	r3, r2
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <send_package+0xaa>
 8002852:	2300      	movs	r3, #0
 8002854:	e0b6      	b.n	80029c4 <send_package+0x218>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	221d      	movs	r2, #29
 800285a:	213b      	movs	r1, #59	; 0x3b
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe ff5a 	bl	8001716 <write_register>
 8002862:	0003      	movs	r3, r0
 8002864:	001a      	movs	r2, r3
 8002866:	2301      	movs	r3, #1
 8002868:	4053      	eors	r3, r2
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <send_package+0xc8>
 8002870:	2300      	movs	r3, #0
 8002872:	e0a7      	b.n	80029c4 <send_package+0x218>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2122      	movs	r1, #34	; 0x22
 800287c:	0018      	movs	r0, r3
 800287e:	f7fe ff4a 	bl	8001716 <write_register>
 8002882:	0003      	movs	r3, r0
 8002884:	001a      	movs	r2, r3
 8002886:	2301      	movs	r3, #1
 8002888:	4053      	eors	r3, r2
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <send_package+0xe8>
 8002890:	2300      	movs	r3, #0
 8002892:	e097      	b.n	80029c4 <send_package+0x218>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	2140      	movs	r1, #64	; 0x40
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe ff3b 	bl	8001716 <write_register>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	2301      	movs	r3, #1
 80028a6:	4053      	eors	r3, r2
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <send_package+0x106>
 80028ae:	2300      	movs	r3, #0
 80028b0:	e088      	b.n	80029c4 <send_package+0x218>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	2112      	movs	r1, #18
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fe ff2c 	bl	8001716 <write_register>
 80028be:	0003      	movs	r3, r0
 80028c0:	001a      	movs	r2, r3
 80028c2:	2301      	movs	r3, #1
 80028c4:	4053      	eors	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <send_package+0x124>
 80028cc:	2300      	movs	r3, #0
 80028ce:	e079      	b.n	80029c4 <send_package+0x218>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	22ac      	movs	r2, #172	; 0xac
 80028d4:	2100      	movs	r1, #0
 80028d6:	5099      	str	r1, [r3, r2]
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	22b4      	movs	r2, #180	; 0xb4
 80028dc:	2100      	movs	r1, #0
 80028de:	5099      	str	r1, [r3, r2]

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2281      	movs	r2, #129	; 0x81
 80028e4:	2101      	movs	r1, #1
 80028e6:	0018      	movs	r0, r3
 80028e8:	f7fe ff15 	bl	8001716 <write_register>
 80028ec:	0003      	movs	r3, r0
 80028ee:	001a      	movs	r2, r3
 80028f0:	2301      	movs	r3, #1
 80028f2:	4053      	eors	r3, r2
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <send_package+0x152>
 80028fa:	2300      	movs	r3, #0
 80028fc:	e062      	b.n	80029c4 <send_package+0x218>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	220a      	movs	r2, #10
 8002902:	2102      	movs	r1, #2
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff f853 	bl	80019b0 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2280      	movs	r2, #128	; 0x80
 800290e:	210d      	movs	r1, #13
 8002910:	0018      	movs	r0, r3
 8002912:	f7fe ff00 	bl	8001716 <write_register>
 8002916:	0003      	movs	r3, r0
 8002918:	001a      	movs	r2, r3
 800291a:	2301      	movs	r3, #1
 800291c:	4053      	eors	r3, r2
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <send_package+0x17c>
 8002924:	2300      	movs	r3, #0
 8002926:	e04d      	b.n	80029c4 <send_package+0x218>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	e00b      	b.n	8002946 <send_package+0x19a>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	18d3      	adds	r3, r2, r3
 8002934:	781a      	ldrb	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2100      	movs	r1, #0
 800293a:	0018      	movs	r0, r3
 800293c:	f7fe feeb 	bl	8001716 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3301      	adds	r3, #1
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	429a      	cmp	r2, r3
 800294c:	d3ef      	bcc.n	800292e <send_package+0x182>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2283      	movs	r2, #131	; 0x83
 8002952:	2101      	movs	r1, #1
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe fede 	bl	8001716 <write_register>
 800295a:	0003      	movs	r3, r0
 800295c:	001a      	movs	r2, r3
 800295e:	2301      	movs	r3, #1
 8002960:	4053      	eors	r3, r2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d001      	beq.n	800296c <send_package+0x1c0>
 8002968:	2300      	movs	r3, #0
 800296a:	e02b      	b.n	80029c4 <send_package+0x218>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2264      	movs	r2, #100	; 0x64
 8002970:	2100      	movs	r1, #0
 8002972:	0018      	movs	r0, r3
 8002974:	f7ff f81c 	bl	80019b0 <wait_for_irq>
 8002978:	0003      	movs	r3, r0
 800297a:	001a      	movs	r2, r3
 800297c:	2301      	movs	r3, #1
 800297e:	4053      	eors	r3, r2
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <send_package+0x1de>
 8002986:	2300      	movs	r3, #0
 8002988:	e01c      	b.n	80029c4 <send_package+0x218>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	22ac      	movs	r2, #172	; 0xac
 800298e:	589a      	ldr	r2, [r3, r2]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2280      	movs	r2, #128	; 0x80
 8002998:	2101      	movs	r1, #1
 800299a:	0018      	movs	r0, r3
 800299c:	f7fe febb 	bl	8001716 <write_register>
 80029a0:	0003      	movs	r3, r0
 80029a2:	001a      	movs	r2, r3
 80029a4:	2301      	movs	r3, #1
 80029a6:	4053      	eors	r3, r2
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <send_package+0x206>
 80029ae:	2300      	movs	r3, #0
 80029b0:	e008      	b.n	80029c4 <send_package+0x218>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2264      	movs	r2, #100	; 0x64
 80029b6:	5a9b      	ldrh	r3, [r3, r2]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b299      	uxth	r1, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2264      	movs	r2, #100	; 0x64
 80029c0:	5299      	strh	r1, [r3, r2]

	return true;
 80029c2:	2301      	movs	r3, #1
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	b006      	add	sp, #24
 80029ca:	bd80      	pop	{r7, pc}

080029cc <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 80029cc:	b5b0      	push	{r4, r5, r7, lr}
 80029ce:	b08c      	sub	sp, #48	; 0x30
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
 80029d8:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 80029da:	2300      	movs	r3, #0
 80029dc:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	330d      	adds	r3, #13
 80029e2:	2b40      	cmp	r3, #64	; 0x40
 80029e4:	d905      	bls.n	80029f2 <encode_phy_payload+0x26>
 80029e6:	4b55      	ldr	r3, [pc, #340]	; (8002b3c <encode_phy_payload+0x170>)
 80029e8:	4a55      	ldr	r2, [pc, #340]	; (8002b40 <encode_phy_payload+0x174>)
 80029ea:	4956      	ldr	r1, [pc, #344]	; (8002b44 <encode_phy_payload+0x178>)
 80029ec:	4856      	ldr	r0, [pc, #344]	; (8002b48 <encode_phy_payload+0x17c>)
 80029ee:	f003 f8dd 	bl	8005bac <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2240      	movs	r2, #64	; 0x40
 80029f6:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	3301      	adds	r3, #1
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	7d52      	ldrb	r2, [r2, #21]
 8002a00:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3302      	adds	r3, #2
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	7d12      	ldrb	r2, [r2, #20]
 8002a0a:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3303      	adds	r3, #3
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	7cd2      	ldrb	r2, [r2, #19]
 8002a14:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	7c92      	ldrb	r2, [r2, #18]
 8002a1e:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	3305      	adds	r3, #5
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2264      	movs	r2, #100	; 0x64
 8002a2c:	5a9a      	ldrh	r2, [r3, r2]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	3306      	adds	r3, #6
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2264      	movs	r2, #100	; 0x64
 8002a3a:	5a9b      	ldrh	r3, [r3, r2]
 8002a3c:	0a1b      	lsrs	r3, r3, #8
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	3307      	adds	r3, #7
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3308      	adds	r3, #8
 8002a4c:	001a      	movs	r2, r3
 8002a4e:	2430      	movs	r4, #48	; 0x30
 8002a50:	193b      	adds	r3, r7, r4
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	7013      	strb	r3, [r2, #0]
	payload_len += 9;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3309      	adds	r3, #9
 8002a5a:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 8002a5c:	68ba      	ldr	r2, [r7, #8]
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	18d3      	adds	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	6879      	ldr	r1, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f003 f906 	bl	8005c78 <memcpy>
	if (port == 0) {
 8002a6c:	193b      	adds	r3, r7, r4
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d113      	bne.n	8002a9c <encode_phy_payload+0xd0>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	18d0      	adds	r0, r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	b2d9      	uxtb	r1, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2264      	movs	r2, #100	; 0x64
 8002a82:	5a9b      	ldrh	r3, [r3, r2]
 8002a84:	001c      	movs	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3316      	adds	r3, #22
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	2300      	movs	r3, #0
 8002a94:	0022      	movs	r2, r4
 8002a96:	f7fe faa3 	bl	8000fe0 <Encrypt_Payload>
 8002a9a:	e012      	b.n	8002ac2 <encode_phy_payload+0xf6>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	18d0      	adds	r0, r2, r3
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2d9      	uxtb	r1, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2264      	movs	r2, #100	; 0x64
 8002aaa:	5a9b      	ldrh	r3, [r3, r2]
 8002aac:	001c      	movs	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	3326      	adds	r3, #38	; 0x26
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	2300      	movs	r3, #0
 8002abc:	0022      	movs	r2, r4
 8002abe:	f7fe fa8f 	bl	8000fe0 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	18d3      	adds	r3, r2, r3
 8002ac8:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	b2dc      	uxtb	r4, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2264      	movs	r2, #100	; 0x64
 8002ad2:	5a9b      	ldrh	r3, [r3, r2]
 8002ad4:	001d      	movs	r5, r3
	              handle->network_session_key, handle->device_address);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	3316      	adds	r3, #22
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002ade:	2114      	movs	r1, #20
 8002ae0:	1879      	adds	r1, r7, r1
 8002ae2:	68b8      	ldr	r0, [r7, #8]
 8002ae4:	9202      	str	r2, [sp, #8]
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	002b      	movs	r3, r5
 8002aee:	0022      	movs	r2, r4
 8002af0:	f7fe fb50 	bl	8001194 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8002af4:	231f      	movs	r3, #31
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e011      	b.n	8002b22 <encode_phy_payload+0x156>
		payload_buf[payload_len + i] = mic[i];
 8002afe:	201f      	movs	r0, #31
 8002b00:	183b      	adds	r3, r7, r0
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	183b      	adds	r3, r7, r0
 8002b06:	7819      	ldrb	r1, [r3, #0]
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	18cb      	adds	r3, r1, r3
 8002b0c:	68b9      	ldr	r1, [r7, #8]
 8002b0e:	18cb      	adds	r3, r1, r3
 8002b10:	2114      	movs	r1, #20
 8002b12:	1879      	adds	r1, r7, r1
 8002b14:	5c8a      	ldrb	r2, [r1, r2]
 8002b16:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8002b18:	183b      	adds	r3, r7, r0
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	183b      	adds	r3, r7, r0
 8002b1e:	3201      	adds	r2, #1
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	231f      	movs	r3, #31
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d9e8      	bls.n	8002afe <encode_phy_payload+0x132>
	}
	payload_len += 4;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002b32:	69bb      	ldr	r3, [r7, #24]
}
 8002b34:	0018      	movs	r0, r3
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b008      	add	sp, #32
 8002b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3c:	08007254 	.word	0x08007254
 8002b40:	08007364 	.word	0x08007364
 8002b44:	00000256 	.word	0x00000256
 8002b48:	0800708c 	.word	0x0800708c

08002b4c <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8002b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b4e:	b08d      	sub	sp, #52	; 0x34
 8002b50:	af04      	add	r7, sp, #16
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	701a      	strb	r2, [r3, #0]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b60      	cmp	r3, #96	; 0x60
 8002b62:	d001      	beq.n	8002b68 <decode_phy_payload+0x1c>
		return false;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e0d2      	b.n	8002d0e <decode_phy_payload+0x1c2>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	781a      	ldrb	r2, [r3, #0]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	7d5b      	ldrb	r3, [r3, #21]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d114      	bne.n	8002ba0 <decode_phy_payload+0x54>
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3302      	adds	r3, #2
 8002b7a:	781a      	ldrb	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	7d1b      	ldrb	r3, [r3, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d10d      	bne.n	8002ba0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	3303      	adds	r3, #3
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d106      	bne.n	8002ba0 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	3304      	adds	r3, #4
 8002b96:	781a      	ldrb	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	7c9b      	ldrb	r3, [r3, #18]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <decode_phy_payload+0x58>
		return false;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e0b4      	b.n	8002d0e <decode_phy_payload+0x1c2>
	}

	uint8_t frame_control = payload_buf[5];
 8002ba4:	211f      	movs	r1, #31
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	7952      	ldrb	r2, [r2, #5]
 8002bac:	701a      	strb	r2, [r3, #0]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8002bae:	231e      	movs	r3, #30
 8002bb0:	18fb      	adds	r3, r7, r3
 8002bb2:	187a      	adds	r2, r7, r1
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	210f      	movs	r1, #15
 8002bb8:	400a      	ands	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3307      	adds	r3, #7
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	021b      	lsls	r3, r3, #8
 8002bc4:	b21a      	sxth	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	b21b      	sxth	r3, r3
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	b21a      	sxth	r2, r3
 8002bd2:	211c      	movs	r1, #28
 8002bd4:	187b      	adds	r3, r7, r1
 8002bd6:	801a      	strh	r2, [r3, #0]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2262      	movs	r2, #98	; 0x62
 8002bdc:	5a9b      	ldrh	r3, [r3, r2]
 8002bde:	187a      	adds	r2, r7, r1
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d201      	bcs.n	8002bea <decode_phy_payload+0x9e>
		return false;
 8002be6:	2300      	movs	r3, #0
 8002be8:	e091      	b.n	8002d0e <decode_phy_payload+0x1c2>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	201c      	movs	r0, #28
 8002bee:	183a      	adds	r2, r7, r0
 8002bf0:	2162      	movs	r1, #98	; 0x62
 8002bf2:	8812      	ldrh	r2, [r2, #0]
 8002bf4:	525a      	strh	r2, [r3, r1]

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	3b04      	subs	r3, #4
 8002bfc:	b2dc      	uxtb	r4, r3
 8002bfe:	183b      	adds	r3, r7, r0
 8002c00:	881d      	ldrh	r5, [r3, #0]
	              handle->network_session_key, handle->device_address);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	3316      	adds	r3, #22
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002c0a:	2614      	movs	r6, #20
 8002c0c:	19b9      	adds	r1, r7, r6
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	9202      	str	r2, [sp, #8]
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	2301      	movs	r3, #1
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	002b      	movs	r3, r5
 8002c1a:	0022      	movs	r2, r4
 8002c1c:	f7fe faba 	bl	8001194 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8002c20:	1dfb      	adds	r3, r7, #7
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	3b04      	subs	r3, #4
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	18d1      	adds	r1, r2, r3
 8002c2a:	19bb      	adds	r3, r7, r6
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f003 f814 	bl	8005c5c <memcmp>
 8002c34:	1e03      	subs	r3, r0, #0
 8002c36:	d001      	beq.n	8002c3c <decode_phy_payload+0xf0>
		return false;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	e068      	b.n	8002d0e <decode_phy_payload+0x1c2>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3b0c      	subs	r3, #12
 8002c42:	001a      	movs	r2, r3
 8002c44:	211e      	movs	r1, #30
 8002c46:	187b      	adds	r3, r7, r1
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d10c      	bne.n	8002c68 <decode_phy_payload+0x11c>
		*frame_port = 0;
 8002c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3308      	adds	r3, #8
 8002c58:	001a      	movs	r2, r3
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c60:	187a      	adds	r2, r7, r1
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e051      	b.n	8002d0c <decode_phy_payload+0x1c0>

	} else {
		*frame_port = payload_buf[8];
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	7a1a      	ldrb	r2, [r3, #8]
 8002c6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c6e:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002c70:	201b      	movs	r0, #27
 8002c72:	183b      	adds	r3, r7, r0
 8002c74:	221e      	movs	r2, #30
 8002c76:	18ba      	adds	r2, r7, r2
 8002c78:	7812      	ldrb	r2, [r2, #0]
 8002c7a:	3209      	adds	r2, #9
 8002c7c:	701a      	strb	r2, [r3, #0]
		uint8_t frame_payload_end = payload_length - 4;
 8002c7e:	211a      	movs	r1, #26
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	1dfa      	adds	r2, r7, #7
 8002c84:	7812      	ldrb	r2, [r2, #0]
 8002c86:	3a04      	subs	r2, #4
 8002c88:	701a      	strb	r2, [r3, #0]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8002c8a:	2519      	movs	r5, #25
 8002c8c:	197b      	adds	r3, r7, r5
 8002c8e:	1879      	adds	r1, r7, r1
 8002c90:	183a      	adds	r2, r7, r0
 8002c92:	7809      	ldrb	r1, [r1, #0]
 8002c94:	7812      	ldrb	r2, [r2, #0]
 8002c96:	1a8a      	subs	r2, r1, r2
 8002c98:	701a      	strb	r2, [r3, #0]

		if (*frame_port == 0) {
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d113      	bne.n	8002cca <decode_phy_payload+0x17e>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002ca2:	183b      	adds	r3, r7, r0
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	18d0      	adds	r0, r2, r3
 8002caa:	231c      	movs	r3, #28
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	881c      	ldrh	r4, [r3, #0]
			                1, handle->network_session_key, handle->device_address);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3316      	adds	r3, #22
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002cb8:	1979      	adds	r1, r7, r5
 8002cba:	7809      	ldrb	r1, [r1, #0]
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	0022      	movs	r2, r4
 8002cc4:	f7fe f98c 	bl	8000fe0 <Encrypt_Payload>
 8002cc8:	e014      	b.n	8002cf4 <decode_phy_payload+0x1a8>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002cca:	231b      	movs	r3, #27
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	68ba      	ldr	r2, [r7, #8]
 8002cd2:	18d0      	adds	r0, r2, r3
 8002cd4:	231c      	movs	r3, #28
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	881c      	ldrh	r4, [r3, #0]
			                1, handle->application_session_key, handle->device_address);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	3326      	adds	r3, #38	; 0x26
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002ce2:	2119      	movs	r1, #25
 8002ce4:	1879      	adds	r1, r7, r1
 8002ce6:	7809      	ldrb	r1, [r1, #0]
 8002ce8:	9201      	str	r2, [sp, #4]
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	2301      	movs	r3, #1
 8002cee:	0022      	movs	r2, r4
 8002cf0:	f7fe f976 	bl	8000fe0 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8002cf4:	231b      	movs	r3, #27
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	18d2      	adds	r2, r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2219      	movs	r2, #25
 8002d06:	18ba      	adds	r2, r7, r2
 8002d08:	7812      	ldrb	r2, [r2, #0]
 8002d0a:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8002d0c:	2301      	movs	r3, #1
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b009      	add	sp, #36	; 0x24
 8002d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d16 <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002d16:	b590      	push	{r4, r7, lr}
 8002d18:	b085      	sub	sp, #20
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8002d1e:	230f      	movs	r3, #15
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 16; i++) {
 8002d26:	230e      	movs	r3, #14
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	e017      	b.n	8002d60 <select_random_channel+0x4a>
		if (handle->config.channel_mask & (1 << i)) {
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	22a8      	movs	r2, #168	; 0xa8
 8002d34:	5a9b      	ldrh	r3, [r3, r2]
 8002d36:	001a      	movs	r2, r3
 8002d38:	230e      	movs	r3, #14
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	411a      	asrs	r2, r3
 8002d40:	0013      	movs	r3, r2
 8002d42:	2201      	movs	r2, #1
 8002d44:	4013      	ands	r3, r2
 8002d46:	d005      	beq.n	8002d54 <select_random_channel+0x3e>
			channel_count++;
 8002d48:	210f      	movs	r1, #15
 8002d4a:	187b      	adds	r3, r7, r1
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	187b      	adds	r3, r7, r1
 8002d50:	3201      	adds	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++) {
 8002d54:	210e      	movs	r1, #14
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	187b      	adds	r3, r7, r1
 8002d5c:	3201      	adds	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	230e      	movs	r3, #14
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b0f      	cmp	r3, #15
 8002d68:	d9e2      	bls.n	8002d30 <select_random_channel+0x1a>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d6e:	220d      	movs	r2, #13
 8002d70:	18bc      	adds	r4, r7, r2
 8002d72:	220f      	movs	r2, #15
 8002d74:	18ba      	adds	r2, r7, r2
 8002d76:	7812      	ldrb	r2, [r2, #0]
 8002d78:	0010      	movs	r0, r2
 8002d7a:	4798      	blx	r3
 8002d7c:	0003      	movs	r3, r0
 8002d7e:	7023      	strb	r3, [r4, #0]

	for (uint8_t i = 0; i < 16; i++) {
 8002d80:	230c      	movs	r3, #12
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
 8002d88:	e01f      	b.n	8002dca <select_random_channel+0xb4>
		if (handle->config.channel_mask & (1 << i)) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	22a8      	movs	r2, #168	; 0xa8
 8002d8e:	5a9b      	ldrh	r3, [r3, r2]
 8002d90:	001a      	movs	r2, r3
 8002d92:	210c      	movs	r1, #12
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	411a      	asrs	r2, r3
 8002d9a:	0013      	movs	r3, r2
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <select_random_channel+0xa8>
			if (random_channel == 0) {
 8002da2:	230d      	movs	r3, #13
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <select_random_channel+0x9c>
				return i;
 8002dac:	187b      	adds	r3, r7, r1
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	e011      	b.n	8002dd6 <select_random_channel+0xc0>
			} else {
				random_channel--;
 8002db2:	210d      	movs	r1, #13
 8002db4:	187b      	adds	r3, r7, r1
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	187b      	adds	r3, r7, r1
 8002dba:	3a01      	subs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++) {
 8002dbe:	210c      	movs	r1, #12
 8002dc0:	187b      	adds	r3, r7, r1
 8002dc2:	781a      	ldrb	r2, [r3, #0]
 8002dc4:	187b      	adds	r3, r7, r1
 8002dc6:	3201      	adds	r2, #1
 8002dc8:	701a      	strb	r2, [r3, #0]
 8002dca:	230c      	movs	r3, #12
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d9da      	bls.n	8002d8a <select_random_channel+0x74>
			}
		}
	}

	return 0;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b005      	add	sp, #20
 8002ddc:	bd90      	pop	{r4, r7, pc}

08002dde <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002dde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de0:	b0ab      	sub	sp, #172	; 0xac
 8002de2:	af02      	add	r7, sp, #8
 8002de4:	60f8      	str	r0, [r7, #12]
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8002dea:	255c      	movs	r5, #92	; 0x5c
 8002dec:	197b      	adds	r3, r7, r5
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	3304      	adds	r3, #4
 8002df4:	223c      	movs	r2, #60	; 0x3c
 8002df6:	2100      	movs	r1, #0
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f002 ff46 	bl	8005c8a <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68ba      	ldr	r2, [r7, #8]
 8002e02:	1979      	adds	r1, r7, r5
 8002e04:	68f8      	ldr	r0, [r7, #12]
 8002e06:	2401      	movs	r4, #1
 8002e08:	9400      	str	r4, [sp, #0]
 8002e0a:	f7ff fddf 	bl	80029cc <encode_phy_payload>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002e12:	269f      	movs	r6, #159	; 0x9f
 8002e14:	19bc      	adds	r4, r7, r6
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	0018      	movs	r0, r3
 8002e1a:	f7ff ff7c 	bl	8002d16 <select_random_channel>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	7023      	strb	r3, [r4, #0]

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002e22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e24:	19bb      	adds	r3, r7, r6
 8002e26:	781c      	ldrb	r4, [r3, #0]
 8002e28:	1979      	adds	r1, r7, r5
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	2354      	movs	r3, #84	; 0x54
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	0023      	movs	r3, r4
 8002e34:	f7ff fcba 	bl	80027ac <send_package>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	4053      	eors	r3, r2
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d007      	beq.n	8002e56 <rfm95_send_receive_cycle+0x78>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2280      	movs	r2, #128	; 0x80
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f7fe fc62 	bl	8001716 <write_register>
		return false;
 8002e52:	2300      	movs	r3, #0
 8002e54:	e0b5      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1e4>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002e56:	255c      	movs	r5, #92	; 0x5c
 8002e58:	197b      	adds	r3, r7, r5
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f002 ff13 	bl	8005c8a <memset>
	phy_payload_len = 0;
 8002e64:	2300      	movs	r3, #0
 8002e66:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2240      	movs	r2, #64	; 0x40
 8002e6c:	5c9b      	ldrb	r3, [r3, r2]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d100      	bne.n	8002e74 <rfm95_send_receive_cycle+0x96>
 8002e72:	e09b      	b.n	8002fac <rfm95_send_receive_cycle+0x1ce>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8002e74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e76:	2358      	movs	r3, #88	; 0x58
 8002e78:	18fc      	adds	r4, r7, r3
 8002e7a:	197a      	adds	r2, r7, r5
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	2353      	movs	r3, #83	; 0x53
 8002e80:	18fb      	adds	r3, r7, r3
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	0023      	movs	r3, r4
 8002e86:	f7ff faef 	bl	8002468 <receive_package>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	2301      	movs	r3, #1
 8002e90:	4053      	eors	r3, r2
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d011      	beq.n	8002ebc <rfm95_send_receive_cycle+0xde>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2280      	movs	r2, #128	; 0x80
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f7fe fc39 	bl	8001716 <write_register>
			if (handle->save_config) {
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <rfm95_send_receive_cycle+0xda>
				handle->save_config(&(handle->config));
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	68fa      	ldr	r2, [r7, #12]
 8002eb2:	3260      	adds	r2, #96	; 0x60
 8002eb4:	0010      	movs	r0, r2
 8002eb6:	4798      	blx	r3
			}
			return false;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e082      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1e4>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8002ebc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d100      	bne.n	8002ec4 <rfm95_send_receive_cycle+0xe6>
 8002ec2:	e073      	b.n	8002fac <rfm95_send_receive_cycle+0x1ce>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8002ec4:	264b      	movs	r6, #75	; 0x4b
 8002ec6:	19bb      	adds	r3, r7, r6
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002ecc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	234c      	movs	r3, #76	; 0x4c
 8002ed2:	18fc      	adds	r4, r7, r3
 8002ed4:	255c      	movs	r5, #92	; 0x5c
 8002ed6:	1979      	adds	r1, r7, r5
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	234a      	movs	r3, #74	; 0x4a
 8002edc:	001d      	movs	r5, r3
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	19bb      	adds	r3, r7, r6
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	0023      	movs	r3, r4
 8002ee8:	f7ff fe30 	bl	8002b4c <decode_phy_payload>
 8002eec:	1e03      	subs	r3, r0, #0
 8002eee:	d05d      	beq.n	8002fac <rfm95_send_receive_cycle+0x1ce>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002ef0:	002b      	movs	r3, r5
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d158      	bne.n	8002fac <rfm95_send_receive_cycle+0x1ce>

					uint8_t mac_response_data[51] = {0};
 8002efa:	2314      	movs	r3, #20
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]
 8002f02:	3304      	adds	r3, #4
 8002f04:	222f      	movs	r2, #47	; 0x2f
 8002f06:	2100      	movs	r1, #0
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f002 febe 	bl	8005c8a <memset>
					uint8_t mac_response_len = 0;
 8002f0e:	2549      	movs	r5, #73	; 0x49
 8002f10:	197b      	adds	r3, r7, r5
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002f16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002f18:	19bb      	adds	r3, r7, r6
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	001c      	movs	r4, r3
 8002f1e:	2253      	movs	r2, #83	; 0x53
 8002f20:	18bb      	adds	r3, r7, r2
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	b25b      	sxtb	r3, r3
 8002f26:	2614      	movs	r6, #20
 8002f28:	19ba      	adds	r2, r7, r6
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	9301      	str	r3, [sp, #4]
 8002f2e:	197b      	adds	r3, r7, r5
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	0013      	movs	r3, r2
 8002f34:	0022      	movs	r2, r4
 8002f36:	f7fe ffa1 	bl	8001e7c <process_mac_commands>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d036      	beq.n	8002fac <rfm95_send_receive_cycle+0x1ce>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002f3e:	197b      	adds	r3, r7, r5
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d032      	beq.n	8002fac <rfm95_send_receive_cycle+0x1ce>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002f46:	197b      	adds	r3, r7, r5
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	001c      	movs	r4, r3
 8002f4c:	19ba      	adds	r2, r7, r6
 8002f4e:	255c      	movs	r5, #92	; 0x5c
 8002f50:	1979      	adds	r1, r7, r5
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	2300      	movs	r3, #0
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	0023      	movs	r3, r4
 8002f5a:	f7ff fd37 	bl	80029cc <encode_phy_payload>
 8002f5e:	0003      	movs	r3, r0
 8002f60:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002f62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f64:	239f      	movs	r3, #159	; 0x9f
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781c      	ldrb	r4, [r3, #0]
 8002f6a:	1979      	adds	r1, r7, r5
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	2354      	movs	r3, #84	; 0x54
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	0023      	movs	r3, r4
 8002f76:	f7ff fc19 	bl	80027ac <send_package>
 8002f7a:	0003      	movs	r3, r0
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4053      	eors	r3, r2
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d011      	beq.n	8002fac <rfm95_send_receive_cycle+0x1ce>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2280      	movs	r2, #128	; 0x80
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	0018      	movs	r0, r3
 8002f90:	f7fe fbc1 	bl	8001716 <write_register>
							if (handle->save_config) {
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <rfm95_send_receive_cycle+0x1ca>
								handle->save_config(&(handle->config));
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	3260      	adds	r2, #96	; 0x60
 8002fa4:	0010      	movs	r0, r2
 8002fa6:	4798      	blx	r3
							}
							return false;
 8002fa8:	2300      	movs	r3, #0
			return false;
 8002faa:	e00a      	b.n	8002fc2 <rfm95_send_receive_cycle+0x1e4>
				}
			}
		}
	}

	if (handle->save_config) {
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <rfm95_send_receive_cycle+0x1e2>
		handle->save_config(&(handle->config));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	3260      	adds	r2, #96	; 0x60
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	4798      	blx	r3
	}

	return true;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b029      	add	sp, #164	; 0xa4
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002fcc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	425b      	negs	r3, r3
 8002fd8:	1d39      	adds	r1, r7, #4
 8002fda:	4804      	ldr	r0, [pc, #16]	; (8002fec <__io_putchar+0x20>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f002 fa3b 	bl	8005458 <HAL_UART_Transmit>
  return ch;
 8002fe2:	687b      	ldr	r3, [r7, #4]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200002b8 	.word	0x200002b8

08002ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ff0:	b5b0      	push	{r4, r5, r7, lr}
 8002ff2:	b09c      	sub	sp, #112	; 0x70
 8002ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ff6:	f000 fba3 	bl	8003740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ffa:	f000 f8a9 	bl	8003150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ffe:	f000 f955 	bl	80032ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003002:	f000 f923 	bl	800324c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8003006:	f000 f8e3 	bl	80031d0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800300a:	4b49      	ldr	r3, [pc, #292]	; (8003130 <main+0x140>)
 800300c:	2200      	movs	r2, #0
 800300e:	2140      	movs	r1, #64	; 0x40
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fe41 	bl	8003c98 <HAL_GPIO_WritePin>
  uint8_t transmit_buffer = 0x11;
 8003016:	216f      	movs	r1, #111	; 0x6f
 8003018:	187b      	adds	r3, r7, r1
 800301a:	2211      	movs	r2, #17
 800301c:	701a      	strb	r2, [r3, #0]
  char buffer[20];

  HAL_SPI_Transmit(&hspi1, &transmit_buffer, 1, RFM95_SPI_TIMEOUT);
 800301e:	1879      	adds	r1, r7, r1
 8003020:	4844      	ldr	r0, [pc, #272]	; (8003134 <main+0x144>)
 8003022:	230a      	movs	r3, #10
 8003024:	2201      	movs	r2, #1
 8003026:	f001 fb79 	bl	800471c <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, 1, RFM95_SPI_TIMEOUT);
 800302a:	2458      	movs	r4, #88	; 0x58
 800302c:	1939      	adds	r1, r7, r4
 800302e:	4841      	ldr	r0, [pc, #260]	; (8003134 <main+0x144>)
 8003030:	230a      	movs	r3, #10
 8003032:	2201      	movs	r2, #1
 8003034:	f001 fcca 	bl	80049cc <HAL_SPI_Receive>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8003038:	4b3d      	ldr	r3, [pc, #244]	; (8003130 <main+0x140>)
 800303a:	2201      	movs	r2, #1
 800303c:	2140      	movs	r1, #64	; 0x40
 800303e:	0018      	movs	r0, r3
 8003040:	f000 fe2a 	bl	8003c98 <HAL_GPIO_WritePin>

  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 10);
 8003044:	1939      	adds	r1, r7, r4
 8003046:	483c      	ldr	r0, [pc, #240]	; (8003138 <main+0x148>)
 8003048:	230a      	movs	r3, #10
 800304a:	2214      	movs	r2, #20
 800304c:	f002 fa04 	bl	8005458 <HAL_UART_Transmit>
  HAL_Delay(1000);
 8003050:	23fa      	movs	r3, #250	; 0xfa
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	0018      	movs	r0, r3
 8003056:	f000 fbd7 	bl	8003808 <HAL_Delay>

	  // Initialise RFM95 module.
  if (!rfm95_init(&rfm95_handle, &huart2)) {
 800305a:	4a37      	ldr	r2, [pc, #220]	; (8003138 <main+0x148>)
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <main+0x14c>)
 800305e:	0011      	movs	r1, r2
 8003060:	0018      	movs	r0, r3
 8003062:	f7fe fda7 	bl	8001bb4 <rfm95_init>
 8003066:	0003      	movs	r3, r0
 8003068:	001a      	movs	r2, r3
 800306a:	2301      	movs	r3, #1
 800306c:	4053      	eors	r3, r2
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	d012      	beq.n	800309a <main+0xaa>
	  uint8_t init_message_fail[] = "RFM95 init failed\n\r";
 8003074:	2144      	movs	r1, #68	; 0x44
 8003076:	187b      	adds	r3, r7, r1
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <main+0x150>)
 800307a:	ca31      	ldmia	r2!, {r0, r4, r5}
 800307c:	c331      	stmia	r3!, {r0, r4, r5}
 800307e:	ca11      	ldmia	r2!, {r0, r4}
 8003080:	c311      	stmia	r3!, {r0, r4}
	  HAL_UART_Transmit(&huart2, init_message_fail, sizeof(init_message_fail), 10);
 8003082:	1879      	adds	r1, r7, r1
 8003084:	482c      	ldr	r0, [pc, #176]	; (8003138 <main+0x148>)
 8003086:	230a      	movs	r3, #10
 8003088:	2214      	movs	r2, #20
 800308a:	f002 f9e5 	bl	8005458 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800308e:	23fa      	movs	r3, #250	; 0xfa
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	0018      	movs	r0, r3
 8003094:	f000 fbb8 	bl	8003808 <HAL_Delay>
 8003098:	e013      	b.n	80030c2 <main+0xd2>
  } else {
	  uint8_t init_message_success[] = "RFM95 init success\n\r";
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	187b      	adds	r3, r7, r1
 800309e:	4a29      	ldr	r2, [pc, #164]	; (8003144 <main+0x154>)
 80030a0:	ca31      	ldmia	r2!, {r0, r4, r5}
 80030a2:	c331      	stmia	r3!, {r0, r4, r5}
 80030a4:	ca11      	ldmia	r2!, {r0, r4}
 80030a6:	c311      	stmia	r3!, {r0, r4}
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, init_message_success, sizeof(init_message_success), 10);
 80030ac:	1879      	adds	r1, r7, r1
 80030ae:	4822      	ldr	r0, [pc, #136]	; (8003138 <main+0x148>)
 80030b0:	230a      	movs	r3, #10
 80030b2:	2215      	movs	r2, #21
 80030b4:	f002 f9d0 	bl	8005458 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80030b8:	23fa      	movs	r3, #250	; 0xfa
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 fba3 	bl	8003808 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t data_packet[] = {
 80030c2:	2128      	movs	r1, #40	; 0x28
 80030c4:	187b      	adds	r3, r7, r1
 80030c6:	4a20      	ldr	r2, [pc, #128]	; (8003148 <main+0x158>)
 80030c8:	601a      	str	r2, [r3, #0]
		  0x01, 0x02, 0x03, 0x4
	  };

	  if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 80030ca:	1879      	adds	r1, r7, r1
 80030cc:	4b1b      	ldr	r3, [pc, #108]	; (800313c <main+0x14c>)
 80030ce:	2204      	movs	r2, #4
 80030d0:	0018      	movs	r0, r3
 80030d2:	f7ff fe84 	bl	8002dde <rfm95_send_receive_cycle>
 80030d6:	0003      	movs	r3, r0
 80030d8:	001a      	movs	r2, r3
 80030da:	2301      	movs	r3, #1
 80030dc:	4053      	eors	r3, r2
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d012      	beq.n	800310a <main+0x11a>
		  uint8_t send_message_failed[] = "RFM95 send failed\n\r";
 80030e4:	2114      	movs	r1, #20
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	4a18      	ldr	r2, [pc, #96]	; (800314c <main+0x15c>)
 80030ea:	ca31      	ldmia	r2!, {r0, r4, r5}
 80030ec:	c331      	stmia	r3!, {r0, r4, r5}
 80030ee:	ca11      	ldmia	r2!, {r0, r4}
 80030f0:	c311      	stmia	r3!, {r0, r4}
		  HAL_UART_Transmit(&huart2, send_message_failed, sizeof(send_message_failed), 10);
 80030f2:	1879      	adds	r1, r7, r1
 80030f4:	4810      	ldr	r0, [pc, #64]	; (8003138 <main+0x148>)
 80030f6:	230a      	movs	r3, #10
 80030f8:	2214      	movs	r2, #20
 80030fa:	f002 f9ad 	bl	8005458 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80030fe:	23fa      	movs	r3, #250	; 0xfa
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	0018      	movs	r0, r3
 8003104:	f000 fb80 	bl	8003808 <HAL_Delay>
 8003108:	e7db      	b.n	80030c2 <main+0xd2>
	  } else {
		  uint8_t send_message_success[] = "RFM95 send failed\n\r";
 800310a:	003b      	movs	r3, r7
 800310c:	4a0f      	ldr	r2, [pc, #60]	; (800314c <main+0x15c>)
 800310e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003110:	c313      	stmia	r3!, {r0, r1, r4}
 8003112:	ca03      	ldmia	r2!, {r0, r1}
 8003114:	c303      	stmia	r3!, {r0, r1}
		  HAL_UART_Transmit(&huart2, send_message_success, sizeof(send_message_success), 10);
 8003116:	0039      	movs	r1, r7
 8003118:	4807      	ldr	r0, [pc, #28]	; (8003138 <main+0x148>)
 800311a:	230a      	movs	r3, #10
 800311c:	2214      	movs	r2, #20
 800311e:	f002 f99b 	bl	8005458 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 8003122:	23fa      	movs	r3, #250	; 0xfa
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	0018      	movs	r0, r3
 8003128:	f000 fb6e 	bl	8003808 <HAL_Delay>
  {
 800312c:	e7c9      	b.n	80030c2 <main+0xd2>
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	48000400 	.word	0x48000400
 8003134:	20000254 	.word	0x20000254
 8003138:	200002b8 	.word	0x200002b8
 800313c:	20000100 	.word	0x20000100
 8003140:	08007278 	.word	0x08007278
 8003144:	0800728c 	.word	0x0800728c
 8003148:	04030201 	.word	0x04030201
 800314c:	080072a4 	.word	0x080072a4

08003150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b091      	sub	sp, #68	; 0x44
 8003154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003156:	2410      	movs	r4, #16
 8003158:	193b      	adds	r3, r7, r4
 800315a:	0018      	movs	r0, r3
 800315c:	2330      	movs	r3, #48	; 0x30
 800315e:	001a      	movs	r2, r3
 8003160:	2100      	movs	r1, #0
 8003162:	f002 fd92 	bl	8005c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003166:	003b      	movs	r3, r7
 8003168:	0018      	movs	r0, r3
 800316a:	2310      	movs	r3, #16
 800316c:	001a      	movs	r2, r3
 800316e:	2100      	movs	r1, #0
 8003170:	f002 fd8b 	bl	8005c8a <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003174:	0021      	movs	r1, r4
 8003176:	187b      	adds	r3, r7, r1
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800317c:	187b      	adds	r3, r7, r1
 800317e:	2201      	movs	r2, #1
 8003180:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003182:	187b      	adds	r3, r7, r1
 8003184:	2210      	movs	r2, #16
 8003186:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003188:	187b      	adds	r3, r7, r1
 800318a:	2200      	movs	r2, #0
 800318c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800318e:	187b      	adds	r3, r7, r1
 8003190:	0018      	movs	r0, r3
 8003192:	f000 fd9f 	bl	8003cd4 <HAL_RCC_OscConfig>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800319a:	f000 f90b 	bl	80033b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800319e:	003b      	movs	r3, r7
 80031a0:	2207      	movs	r2, #7
 80031a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80031a4:	003b      	movs	r3, r7
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031aa:	003b      	movs	r3, r7
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b0:	003b      	movs	r3, r7
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80031b6:	003b      	movs	r3, r7
 80031b8:	2100      	movs	r1, #0
 80031ba:	0018      	movs	r0, r3
 80031bc:	f001 f8a4 	bl	8004308 <HAL_RCC_ClockConfig>
 80031c0:	1e03      	subs	r3, r0, #0
 80031c2:	d001      	beq.n	80031c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80031c4:	f000 f8f6 	bl	80033b4 <Error_Handler>
  }
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b011      	add	sp, #68	; 0x44
 80031ce:	bd90      	pop	{r4, r7, pc}

080031d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <MX_SPI1_Init+0x74>)
 80031d6:	4a1c      	ldr	r2, [pc, #112]	; (8003248 <MX_SPI1_Init+0x78>)
 80031d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031da:	4b1a      	ldr	r3, [pc, #104]	; (8003244 <MX_SPI1_Init+0x74>)
 80031dc:	2282      	movs	r2, #130	; 0x82
 80031de:	0052      	lsls	r2, r2, #1
 80031e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <MX_SPI1_Init+0x74>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <MX_SPI1_Init+0x74>)
 80031ea:	22e0      	movs	r2, #224	; 0xe0
 80031ec:	00d2      	lsls	r2, r2, #3
 80031ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031f0:	4b14      	ldr	r3, [pc, #80]	; (8003244 <MX_SPI1_Init+0x74>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <MX_SPI1_Init+0x74>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031fc:	4b11      	ldr	r3, [pc, #68]	; (8003244 <MX_SPI1_Init+0x74>)
 80031fe:	2280      	movs	r2, #128	; 0x80
 8003200:	0092      	lsls	r2, r2, #2
 8003202:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003204:	4b0f      	ldr	r3, [pc, #60]	; (8003244 <MX_SPI1_Init+0x74>)
 8003206:	2210      	movs	r2, #16
 8003208:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <MX_SPI1_Init+0x74>)
 800320c:	2200      	movs	r2, #0
 800320e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003210:	4b0c      	ldr	r3, [pc, #48]	; (8003244 <MX_SPI1_Init+0x74>)
 8003212:	2200      	movs	r2, #0
 8003214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_SPI1_Init+0x74>)
 8003218:	2200      	movs	r2, #0
 800321a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800321c:	4b09      	ldr	r3, [pc, #36]	; (8003244 <MX_SPI1_Init+0x74>)
 800321e:	2207      	movs	r2, #7
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <MX_SPI1_Init+0x74>)
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <MX_SPI1_Init+0x74>)
 800322a:	2200      	movs	r2, #0
 800322c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <MX_SPI1_Init+0x74>)
 8003230:	0018      	movs	r0, r3
 8003232:	f001 f9bb 	bl	80045ac <HAL_SPI_Init>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d001      	beq.n	800323e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800323a:	f000 f8bb 	bl	80033b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000254 	.word	0x20000254
 8003248:	40013000 	.word	0x40013000

0800324c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003252:	4a15      	ldr	r2, [pc, #84]	; (80032a8 <MX_USART2_UART_Init+0x5c>)
 8003254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003258:	2296      	movs	r2, #150	; 0x96
 800325a:	0212      	lsls	r2, r2, #8
 800325c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003260:	2200      	movs	r2, #0
 8003262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003264:	4b0f      	ldr	r3, [pc, #60]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003266:	2200      	movs	r2, #0
 8003268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003270:	4b0c      	ldr	r3, [pc, #48]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003272:	220c      	movs	r2, #12
 8003274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003276:	4b0b      	ldr	r3, [pc, #44]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003278:	2200      	movs	r2, #0
 800327a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 800327e:	2200      	movs	r2, #0
 8003280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003284:	2200      	movs	r2, #0
 8003286:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 800328a:	2200      	movs	r2, #0
 800328c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800328e:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <MX_USART2_UART_Init+0x58>)
 8003290:	0018      	movs	r0, r3
 8003292:	f002 f88d 	bl	80053b0 <HAL_UART_Init>
 8003296:	1e03      	subs	r3, r0, #0
 8003298:	d001      	beq.n	800329e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800329a:	f000 f88b 	bl	80033b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800329e:	46c0      	nop			; (mov r8, r8)
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200002b8 	.word	0x200002b8
 80032a8:	40004400 	.word	0x40004400

080032ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b2:	240c      	movs	r4, #12
 80032b4:	193b      	adds	r3, r7, r4
 80032b6:	0018      	movs	r0, r3
 80032b8:	2314      	movs	r3, #20
 80032ba:	001a      	movs	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f002 fce4 	bl	8005c8a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	4b38      	ldr	r3, [pc, #224]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	0289      	lsls	r1, r1, #10
 80032cc:	430a      	orrs	r2, r1
 80032ce:	615a      	str	r2, [r3, #20]
 80032d0:	4b35      	ldr	r3, [pc, #212]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032d2:	695a      	ldr	r2, [r3, #20]
 80032d4:	2380      	movs	r3, #128	; 0x80
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	4013      	ands	r3, r2
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032de:	4b32      	ldr	r3, [pc, #200]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	4b31      	ldr	r3, [pc, #196]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032e4:	2180      	movs	r1, #128	; 0x80
 80032e6:	0309      	lsls	r1, r1, #12
 80032e8:	430a      	orrs	r2, r1
 80032ea:	615a      	str	r2, [r3, #20]
 80032ec:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	031b      	lsls	r3, r3, #12
 80032f4:	4013      	ands	r3, r2
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032fa:	4b2b      	ldr	r3, [pc, #172]	; (80033a8 <MX_GPIO_Init+0xfc>)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	4b2a      	ldr	r3, [pc, #168]	; (80033a8 <MX_GPIO_Init+0xfc>)
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	02c9      	lsls	r1, r1, #11
 8003304:	430a      	orrs	r2, r1
 8003306:	615a      	str	r2, [r3, #20]
 8003308:	4b27      	ldr	r3, [pc, #156]	; (80033a8 <MX_GPIO_Init+0xfc>)
 800330a:	695a      	ldr	r2, [r3, #20]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	02db      	lsls	r3, r3, #11
 8003310:	4013      	ands	r3, r2
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_9, GPIO_PIN_RESET);
 8003316:	23a0      	movs	r3, #160	; 0xa0
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4824      	ldr	r0, [pc, #144]	; (80033ac <MX_GPIO_Init+0x100>)
 800331c:	2200      	movs	r2, #0
 800331e:	0019      	movs	r1, r3
 8003320:	f000 fcba 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_NSS_GPIO_Port, SPI_NSS_Pin, GPIO_PIN_RESET);
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <MX_GPIO_Init+0x104>)
 8003326:	2200      	movs	r2, #0
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	0018      	movs	r0, r3
 800332c:	f000 fcb4 	bl	8003c98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003330:	193b      	adds	r3, r7, r4
 8003332:	22a0      	movs	r2, #160	; 0xa0
 8003334:	0092      	lsls	r2, r2, #2
 8003336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003338:	193b      	adds	r3, r7, r4
 800333a:	2201      	movs	r2, #1
 800333c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333e:	193b      	adds	r3, r7, r4
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	193b      	adds	r3, r7, r4
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800334a:	193b      	adds	r3, r7, r4
 800334c:	4a17      	ldr	r2, [pc, #92]	; (80033ac <MX_GPIO_Init+0x100>)
 800334e:	0019      	movs	r1, r3
 8003350:	0010      	movs	r0, r2
 8003352:	f000 fb31 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003356:	193b      	adds	r3, r7, r4
 8003358:	22e0      	movs	r2, #224	; 0xe0
 800335a:	00d2      	lsls	r2, r2, #3
 800335c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800335e:	193b      	adds	r3, r7, r4
 8003360:	2200      	movs	r2, #0
 8003362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003364:	193b      	adds	r3, r7, r4
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336a:	193a      	adds	r2, r7, r4
 800336c:	2390      	movs	r3, #144	; 0x90
 800336e:	05db      	lsls	r3, r3, #23
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f000 fb20 	bl	80039b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_NSS_Pin */
  GPIO_InitStruct.Pin = SPI_NSS_Pin;
 8003378:	0021      	movs	r1, r4
 800337a:	187b      	adds	r3, r7, r1
 800337c:	2240      	movs	r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003380:	187b      	adds	r3, r7, r1
 8003382:	2201      	movs	r2, #1
 8003384:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	187b      	adds	r3, r7, r1
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338c:	187b      	adds	r3, r7, r1
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8003392:	187b      	adds	r3, r7, r1
 8003394:	4a06      	ldr	r2, [pc, #24]	; (80033b0 <MX_GPIO_Init+0x104>)
 8003396:	0019      	movs	r1, r3
 8003398:	0010      	movs	r0, r2
 800339a:	f000 fb0d 	bl	80039b8 <HAL_GPIO_Init>

}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b009      	add	sp, #36	; 0x24
 80033a4:	bd90      	pop	{r4, r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	40021000 	.word	0x40021000
 80033ac:	48000800 	.word	0x48000800
 80033b0:	48000400 	.word	0x48000400

080033b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033b8:	b672      	cpsid	i
}
 80033ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033bc:	e7fe      	b.n	80033bc <Error_Handler+0x8>
	...

080033c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_MspInit+0x44>)
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_MspInit+0x44>)
 80033cc:	2101      	movs	r1, #1
 80033ce:	430a      	orrs	r2, r1
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_MspInit+0x44>)
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2201      	movs	r2, #1
 80033d8:	4013      	ands	r3, r2
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033de:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_MspInit+0x44>)
 80033e0:	69da      	ldr	r2, [r3, #28]
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_MspInit+0x44>)
 80033e4:	2180      	movs	r1, #128	; 0x80
 80033e6:	0549      	lsls	r1, r1, #21
 80033e8:	430a      	orrs	r2, r1
 80033ea:	61da      	str	r2, [r3, #28]
 80033ec:	4b05      	ldr	r3, [pc, #20]	; (8003404 <HAL_MspInit+0x44>)
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	055b      	lsls	r3, r3, #21
 80033f4:	4013      	ands	r3, r2
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033fa:	46c0      	nop			; (mov r8, r8)
 80033fc:	46bd      	mov	sp, r7
 80033fe:	b002      	add	sp, #8
 8003400:	bd80      	pop	{r7, pc}
 8003402:	46c0      	nop			; (mov r8, r8)
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b08b      	sub	sp, #44	; 0x2c
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003410:	2414      	movs	r4, #20
 8003412:	193b      	adds	r3, r7, r4
 8003414:	0018      	movs	r0, r3
 8003416:	2314      	movs	r3, #20
 8003418:	001a      	movs	r2, r3
 800341a:	2100      	movs	r1, #0
 800341c:	f002 fc35 	bl	8005c8a <memset>
  if(hspi->Instance==SPI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_SPI_MspInit+0x90>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d132      	bne.n	8003490 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800342a:	4b1c      	ldr	r3, [pc, #112]	; (800349c <HAL_SPI_MspInit+0x94>)
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_SPI_MspInit+0x94>)
 8003430:	2180      	movs	r1, #128	; 0x80
 8003432:	0149      	lsls	r1, r1, #5
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_SPI_MspInit+0x94>)
 800343a:	699a      	ldr	r2, [r3, #24]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	015b      	lsls	r3, r3, #5
 8003440:	4013      	ands	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <HAL_SPI_MspInit+0x94>)
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_SPI_MspInit+0x94>)
 800344c:	2180      	movs	r1, #128	; 0x80
 800344e:	0289      	lsls	r1, r1, #10
 8003450:	430a      	orrs	r2, r1
 8003452:	615a      	str	r2, [r3, #20]
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_SPI_MspInit+0x94>)
 8003456:	695a      	ldr	r2, [r3, #20]
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	029b      	lsls	r3, r3, #10
 800345c:	4013      	ands	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003462:	0021      	movs	r1, r4
 8003464:	187b      	adds	r3, r7, r1
 8003466:	22e0      	movs	r2, #224	; 0xe0
 8003468:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346a:	187b      	adds	r3, r7, r1
 800346c:	2202      	movs	r2, #2
 800346e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2203      	movs	r2, #3
 800347a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	187a      	adds	r2, r7, r1
 8003484:	2390      	movs	r3, #144	; 0x90
 8003486:	05db      	lsls	r3, r3, #23
 8003488:	0011      	movs	r1, r2
 800348a:	0018      	movs	r0, r3
 800348c:	f000 fa94 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003490:	46c0      	nop			; (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b00b      	add	sp, #44	; 0x2c
 8003496:	bd90      	pop	{r4, r7, pc}
 8003498:	40013000 	.word	0x40013000
 800349c:	40021000 	.word	0x40021000

080034a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a0:	b590      	push	{r4, r7, lr}
 80034a2:	b08b      	sub	sp, #44	; 0x2c
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a8:	2414      	movs	r4, #20
 80034aa:	193b      	adds	r3, r7, r4
 80034ac:	0018      	movs	r0, r3
 80034ae:	2314      	movs	r3, #20
 80034b0:	001a      	movs	r2, r3
 80034b2:	2100      	movs	r1, #0
 80034b4:	f002 fbe9 	bl	8005c8a <memset>
  if(huart->Instance==USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_UART_MspInit+0x90>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d132      	bne.n	8003528 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034c4:	69da      	ldr	r2, [r3, #28]
 80034c6:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034c8:	2180      	movs	r1, #128	; 0x80
 80034ca:	0289      	lsls	r1, r1, #10
 80034cc:	430a      	orrs	r2, r1
 80034ce:	61da      	str	r2, [r3, #28]
 80034d0:	4b18      	ldr	r3, [pc, #96]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034d2:	69da      	ldr	r2, [r3, #28]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	029b      	lsls	r3, r3, #10
 80034d8:	4013      	ands	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034de:	4b15      	ldr	r3, [pc, #84]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034e0:	695a      	ldr	r2, [r3, #20]
 80034e2:	4b14      	ldr	r3, [pc, #80]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	0289      	lsls	r1, r1, #10
 80034e8:	430a      	orrs	r2, r1
 80034ea:	615a      	str	r2, [r3, #20]
 80034ec:	4b11      	ldr	r3, [pc, #68]	; (8003534 <HAL_UART_MspInit+0x94>)
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	029b      	lsls	r3, r3, #10
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80034fa:	0021      	movs	r1, r4
 80034fc:	187b      	adds	r3, r7, r1
 80034fe:	220c      	movs	r2, #12
 8003500:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003502:	187b      	adds	r3, r7, r1
 8003504:	2202      	movs	r2, #2
 8003506:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003508:	187b      	adds	r3, r7, r1
 800350a:	2200      	movs	r2, #0
 800350c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350e:	187b      	adds	r3, r7, r1
 8003510:	2203      	movs	r2, #3
 8003512:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003514:	187b      	adds	r3, r7, r1
 8003516:	2201      	movs	r2, #1
 8003518:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	187a      	adds	r2, r7, r1
 800351c:	2390      	movs	r3, #144	; 0x90
 800351e:	05db      	lsls	r3, r3, #23
 8003520:	0011      	movs	r1, r2
 8003522:	0018      	movs	r0, r3
 8003524:	f000 fa48 	bl	80039b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b00b      	add	sp, #44	; 0x2c
 800352e:	bd90      	pop	{r4, r7, pc}
 8003530:	40004400 	.word	0x40004400
 8003534:	40021000 	.word	0x40021000

08003538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800353c:	e7fe      	b.n	800353c <NMI_Handler+0x4>

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003542:	e7fe      	b.n	8003542 <HardFault_Handler+0x4>

08003544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800355c:	f000 f938 	bl	80037d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003560:	46c0      	nop			; (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	af00      	add	r7, sp, #0
  return 1;
 800356a:	2301      	movs	r3, #1
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <_kill>:

int _kill(int pid, int sig)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
 800357a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800357c:	f002 fb34 	bl	8005be8 <__errno>
 8003580:	0003      	movs	r3, r0
 8003582:	2216      	movs	r2, #22
 8003584:	601a      	str	r2, [r3, #0]
  return -1;
 8003586:	2301      	movs	r3, #1
 8003588:	425b      	negs	r3, r3
}
 800358a:	0018      	movs	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	b002      	add	sp, #8
 8003590:	bd80      	pop	{r7, pc}

08003592 <_exit>:

void _exit (int status)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800359a:	2301      	movs	r3, #1
 800359c:	425a      	negs	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f7ff ffe5 	bl	8003572 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035a8:	e7fe      	b.n	80035a8 <_exit+0x16>

080035aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	e00a      	b.n	80035d2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035bc:	e000      	b.n	80035c0 <_read+0x16>
 80035be:	bf00      	nop
 80035c0:	0001      	movs	r1, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	60ba      	str	r2, [r7, #8]
 80035c8:	b2ca      	uxtb	r2, r1
 80035ca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3301      	adds	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dbf0      	blt.n	80035bc <_read+0x12>
  }

  return len;
 80035da:	687b      	ldr	r3, [r7, #4]
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b006      	add	sp, #24
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	e009      	b.n	800360a <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	60ba      	str	r2, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff fce4 	bl	8002fcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	617b      	str	r3, [r7, #20]
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	429a      	cmp	r2, r3
 8003610:	dbf1      	blt.n	80035f6 <_write+0x12>
  }
  return len;
 8003612:	687b      	ldr	r3, [r7, #4]
}
 8003614:	0018      	movs	r0, r3
 8003616:	46bd      	mov	sp, r7
 8003618:	b006      	add	sp, #24
 800361a:	bd80      	pop	{r7, pc}

0800361c <_close>:

int _close(int file)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003624:	2301      	movs	r3, #1
 8003626:	425b      	negs	r3, r3
}
 8003628:	0018      	movs	r0, r3
 800362a:	46bd      	mov	sp, r7
 800362c:	b002      	add	sp, #8
 800362e:	bd80      	pop	{r7, pc}

08003630 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2280      	movs	r2, #128	; 0x80
 800363e:	0192      	lsls	r2, r2, #6
 8003640:	605a      	str	r2, [r3, #4]
  return 0;
 8003642:	2300      	movs	r3, #0
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	b002      	add	sp, #8
 800364a:	bd80      	pop	{r7, pc}

0800364c <_isatty>:

int _isatty(int file)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003654:	2301      	movs	r3, #1
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}

0800365e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800366a:	2300      	movs	r3, #0
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}

08003674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800367c:	4a14      	ldr	r2, [pc, #80]	; (80036d0 <_sbrk+0x5c>)
 800367e:	4b15      	ldr	r3, [pc, #84]	; (80036d4 <_sbrk+0x60>)
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003688:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003690:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <_sbrk+0x64>)
 8003692:	4a12      	ldr	r2, [pc, #72]	; (80036dc <_sbrk+0x68>)
 8003694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <_sbrk+0x64>)
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	18d3      	adds	r3, r2, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d207      	bcs.n	80036b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036a4:	f002 faa0 	bl	8005be8 <__errno>
 80036a8:	0003      	movs	r3, r0
 80036aa:	220c      	movs	r2, #12
 80036ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	425b      	negs	r3, r3
 80036b2:	e009      	b.n	80036c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036b4:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <_sbrk+0x64>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ba:	4b07      	ldr	r3, [pc, #28]	; (80036d8 <_sbrk+0x64>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	18d2      	adds	r2, r2, r3
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <_sbrk+0x64>)
 80036c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80036c6:	68fb      	ldr	r3, [r7, #12]
}
 80036c8:	0018      	movs	r0, r3
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b006      	add	sp, #24
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20002000 	.word	0x20002000
 80036d4:	00000400 	.word	0x00000400
 80036d8:	2000033c 	.word	0x2000033c
 80036dc:	20000358 	.word	0x20000358

080036e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80036e4:	46c0      	nop			; (mov r8, r8)
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036ec:	480d      	ldr	r0, [pc, #52]	; (8003724 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f0:	480d      	ldr	r0, [pc, #52]	; (8003728 <LoopForever+0x6>)
  ldr r1, =_edata
 80036f2:	490e      	ldr	r1, [pc, #56]	; (800372c <LoopForever+0xa>)
  ldr r2, =_sidata
 80036f4:	4a0e      	ldr	r2, [pc, #56]	; (8003730 <LoopForever+0xe>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0b      	ldr	r2, [pc, #44]	; (8003734 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003708:	4c0b      	ldr	r4, [pc, #44]	; (8003738 <LoopForever+0x16>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003716:	f7ff ffe3 	bl	80036e0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800371a:	f002 fa7b 	bl	8005c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800371e:	f7ff fc67 	bl	8002ff0 <main>

08003722 <LoopForever>:

LoopForever:
    b LoopForever
 8003722:	e7fe      	b.n	8003722 <LoopForever>
  ldr   r0, =_estack
 8003724:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800372c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003730:	08007474 	.word	0x08007474
  ldr r2, =_sbss
 8003734:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003738:	20000354 	.word	0x20000354

0800373c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800373c:	e7fe      	b.n	800373c <ADC1_IRQHandler>
	...

08003740 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <HAL_Init+0x24>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_Init+0x24>)
 800374a:	2110      	movs	r1, #16
 800374c:	430a      	orrs	r2, r1
 800374e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8003750:	2003      	movs	r0, #3
 8003752:	f000 f809 	bl	8003768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003756:	f7ff fe33 	bl	80033c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	40022000 	.word	0x40022000

08003768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003768:	b590      	push	{r4, r7, lr}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003770:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_InitTick+0x5c>)
 8003772:	681c      	ldr	r4, [r3, #0]
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <HAL_InitTick+0x60>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	0019      	movs	r1, r3
 800377a:	23fa      	movs	r3, #250	; 0xfa
 800377c:	0098      	lsls	r0, r3, #2
 800377e:	f7fc fccd 	bl	800011c <__udivsi3>
 8003782:	0003      	movs	r3, r0
 8003784:	0019      	movs	r1, r3
 8003786:	0020      	movs	r0, r4
 8003788:	f7fc fcc8 	bl	800011c <__udivsi3>
 800378c:	0003      	movs	r3, r0
 800378e:	0018      	movs	r0, r3
 8003790:	f000 f905 	bl	800399e <HAL_SYSTICK_Config>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d001      	beq.n	800379c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e00f      	b.n	80037bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d80b      	bhi.n	80037ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	2301      	movs	r3, #1
 80037a6:	425b      	negs	r3, r3
 80037a8:	2200      	movs	r2, #0
 80037aa:	0018      	movs	r0, r3
 80037ac:	f000 f8e2 	bl	8003974 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <HAL_InitTick+0x64>)
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
 80037b8:	e000      	b.n	80037bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b003      	add	sp, #12
 80037c2:	bd90      	pop	{r4, r7, pc}
 80037c4:	200001b8 	.word	0x200001b8
 80037c8:	200001c0 	.word	0x200001c0
 80037cc:	200001bc 	.word	0x200001bc

080037d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037d4:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_IncTick+0x1c>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	001a      	movs	r2, r3
 80037da:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <HAL_IncTick+0x20>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	18d2      	adds	r2, r2, r3
 80037e0:	4b03      	ldr	r3, [pc, #12]	; (80037f0 <HAL_IncTick+0x20>)
 80037e2:	601a      	str	r2, [r3, #0]
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			; (mov r8, r8)
 80037ec:	200001c0 	.word	0x200001c0
 80037f0:	20000340 	.word	0x20000340

080037f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  return uwTick;
 80037f8:	4b02      	ldr	r3, [pc, #8]	; (8003804 <HAL_GetTick+0x10>)
 80037fa:	681b      	ldr	r3, [r3, #0]
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	46c0      	nop			; (mov r8, r8)
 8003804:	20000340 	.word	0x20000340

08003808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff fff0 	bl	80037f4 <HAL_GetTick>
 8003814:	0003      	movs	r3, r0
 8003816:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	3301      	adds	r3, #1
 8003820:	d005      	beq.n	800382e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_Delay+0x44>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	001a      	movs	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	189b      	adds	r3, r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	f7ff ffe0 	bl	80037f4 <HAL_GetTick>
 8003834:	0002      	movs	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	429a      	cmp	r2, r3
 800383e:	d8f7      	bhi.n	8003830 <HAL_Delay+0x28>
  {
  }
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46c0      	nop			; (mov r8, r8)
 8003844:	46bd      	mov	sp, r7
 8003846:	b004      	add	sp, #16
 8003848:	bd80      	pop	{r7, pc}
 800384a:	46c0      	nop			; (mov r8, r8)
 800384c:	200001c0 	.word	0x200001c0

08003850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	0002      	movs	r2, r0
 8003858:	6039      	str	r1, [r7, #0]
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	2b7f      	cmp	r3, #127	; 0x7f
 8003864:	d828      	bhi.n	80038b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003866:	4a2f      	ldr	r2, [pc, #188]	; (8003924 <__NVIC_SetPriority+0xd4>)
 8003868:	1dfb      	adds	r3, r7, #7
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b25b      	sxtb	r3, r3
 800386e:	089b      	lsrs	r3, r3, #2
 8003870:	33c0      	adds	r3, #192	; 0xc0
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	589b      	ldr	r3, [r3, r2]
 8003876:	1dfa      	adds	r2, r7, #7
 8003878:	7812      	ldrb	r2, [r2, #0]
 800387a:	0011      	movs	r1, r2
 800387c:	2203      	movs	r2, #3
 800387e:	400a      	ands	r2, r1
 8003880:	00d2      	lsls	r2, r2, #3
 8003882:	21ff      	movs	r1, #255	; 0xff
 8003884:	4091      	lsls	r1, r2
 8003886:	000a      	movs	r2, r1
 8003888:	43d2      	mvns	r2, r2
 800388a:	401a      	ands	r2, r3
 800388c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	22ff      	movs	r2, #255	; 0xff
 8003894:	401a      	ands	r2, r3
 8003896:	1dfb      	adds	r3, r7, #7
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	0018      	movs	r0, r3
 800389c:	2303      	movs	r3, #3
 800389e:	4003      	ands	r3, r0
 80038a0:	00db      	lsls	r3, r3, #3
 80038a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038a4:	481f      	ldr	r0, [pc, #124]	; (8003924 <__NVIC_SetPriority+0xd4>)
 80038a6:	1dfb      	adds	r3, r7, #7
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	b25b      	sxtb	r3, r3
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	430a      	orrs	r2, r1
 80038b0:	33c0      	adds	r3, #192	; 0xc0
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038b6:	e031      	b.n	800391c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <__NVIC_SetPriority+0xd8>)
 80038ba:	1dfb      	adds	r3, r7, #7
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	0019      	movs	r1, r3
 80038c0:	230f      	movs	r3, #15
 80038c2:	400b      	ands	r3, r1
 80038c4:	3b08      	subs	r3, #8
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3306      	adds	r3, #6
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	18d3      	adds	r3, r2, r3
 80038ce:	3304      	adds	r3, #4
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1dfa      	adds	r2, r7, #7
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	0011      	movs	r1, r2
 80038d8:	2203      	movs	r2, #3
 80038da:	400a      	ands	r2, r1
 80038dc:	00d2      	lsls	r2, r2, #3
 80038de:	21ff      	movs	r1, #255	; 0xff
 80038e0:	4091      	lsls	r1, r2
 80038e2:	000a      	movs	r2, r1
 80038e4:	43d2      	mvns	r2, r2
 80038e6:	401a      	ands	r2, r3
 80038e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	22ff      	movs	r2, #255	; 0xff
 80038f0:	401a      	ands	r2, r3
 80038f2:	1dfb      	adds	r3, r7, #7
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	0018      	movs	r0, r3
 80038f8:	2303      	movs	r3, #3
 80038fa:	4003      	ands	r3, r0
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003900:	4809      	ldr	r0, [pc, #36]	; (8003928 <__NVIC_SetPriority+0xd8>)
 8003902:	1dfb      	adds	r3, r7, #7
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	001c      	movs	r4, r3
 8003908:	230f      	movs	r3, #15
 800390a:	4023      	ands	r3, r4
 800390c:	3b08      	subs	r3, #8
 800390e:	089b      	lsrs	r3, r3, #2
 8003910:	430a      	orrs	r2, r1
 8003912:	3306      	adds	r3, #6
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	18c3      	adds	r3, r0, r3
 8003918:	3304      	adds	r3, #4
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b003      	add	sp, #12
 8003922:	bd90      	pop	{r4, r7, pc}
 8003924:	e000e100 	.word	0xe000e100
 8003928:	e000ed00 	.word	0xe000ed00

0800392c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	1e5a      	subs	r2, r3, #1
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	045b      	lsls	r3, r3, #17
 800393c:	429a      	cmp	r2, r3
 800393e:	d301      	bcc.n	8003944 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003940:	2301      	movs	r3, #1
 8003942:	e010      	b.n	8003966 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003944:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <SysTick_Config+0x44>)
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	3a01      	subs	r2, #1
 800394a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800394c:	2301      	movs	r3, #1
 800394e:	425b      	negs	r3, r3
 8003950:	2103      	movs	r1, #3
 8003952:	0018      	movs	r0, r3
 8003954:	f7ff ff7c 	bl	8003850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003958:	4b05      	ldr	r3, [pc, #20]	; (8003970 <SysTick_Config+0x44>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800395e:	4b04      	ldr	r3, [pc, #16]	; (8003970 <SysTick_Config+0x44>)
 8003960:	2207      	movs	r2, #7
 8003962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003964:	2300      	movs	r3, #0
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	b002      	add	sp, #8
 800396c:	bd80      	pop	{r7, pc}
 800396e:	46c0      	nop			; (mov r8, r8)
 8003970:	e000e010 	.word	0xe000e010

08003974 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
 800397e:	210f      	movs	r1, #15
 8003980:	187b      	adds	r3, r7, r1
 8003982:	1c02      	adds	r2, r0, #0
 8003984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	187b      	adds	r3, r7, r1
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	b25b      	sxtb	r3, r3
 800398e:	0011      	movs	r1, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f7ff ff5d 	bl	8003850 <__NVIC_SetPriority>
}
 8003996:	46c0      	nop			; (mov r8, r8)
 8003998:	46bd      	mov	sp, r7
 800399a:	b004      	add	sp, #16
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	0018      	movs	r0, r3
 80039aa:	f7ff ffbf 	bl	800392c <SysTick_Config>
 80039ae:	0003      	movs	r3, r0
}
 80039b0:	0018      	movs	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	b002      	add	sp, #8
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c6:	e14f      	b.n	8003c68 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2101      	movs	r1, #1
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4091      	lsls	r1, r2
 80039d2:	000a      	movs	r2, r1
 80039d4:	4013      	ands	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d100      	bne.n	80039e0 <HAL_GPIO_Init+0x28>
 80039de:	e140      	b.n	8003c62 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2203      	movs	r2, #3
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d005      	beq.n	80039f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2203      	movs	r2, #3
 80039f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d130      	bne.n	8003a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	2203      	movs	r2, #3
 8003a04:	409a      	lsls	r2, r3
 8003a06:	0013      	movs	r3, r2
 8003a08:	43da      	mvns	r2, r3
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	005b      	lsls	r3, r3, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	0013      	movs	r3, r2
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a2e:	2201      	movs	r2, #1
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	409a      	lsls	r2, r3
 8003a34:	0013      	movs	r3, r2
 8003a36:	43da      	mvns	r2, r3
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	091b      	lsrs	r3, r3, #4
 8003a44:	2201      	movs	r2, #1
 8003a46:	401a      	ands	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d017      	beq.n	8003a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	2203      	movs	r2, #3
 8003a72:	409a      	lsls	r2, r3
 8003a74:	0013      	movs	r3, r2
 8003a76:	43da      	mvns	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d123      	bne.n	8003aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	08da      	lsrs	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3208      	adds	r2, #8
 8003aaa:	0092      	lsls	r2, r2, #2
 8003aac:	58d3      	ldr	r3, [r2, r3]
 8003aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2207      	movs	r2, #7
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	409a      	lsls	r2, r3
 8003abc:	0013      	movs	r3, r2
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	691a      	ldr	r2, [r3, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2107      	movs	r1, #7
 8003ace:	400b      	ands	r3, r1
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	409a      	lsls	r2, r3
 8003ad4:	0013      	movs	r3, r2
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	0092      	lsls	r2, r2, #2
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	2203      	movs	r2, #3
 8003af6:	409a      	lsls	r2, r3
 8003af8:	0013      	movs	r3, r2
 8003afa:	43da      	mvns	r2, r3
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	401a      	ands	r2, r3
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	23c0      	movs	r3, #192	; 0xc0
 8003b24:	029b      	lsls	r3, r3, #10
 8003b26:	4013      	ands	r3, r2
 8003b28:	d100      	bne.n	8003b2c <HAL_GPIO_Init+0x174>
 8003b2a:	e09a      	b.n	8003c62 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2c:	4b54      	ldr	r3, [pc, #336]	; (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003b2e:	699a      	ldr	r2, [r3, #24]
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	430a      	orrs	r2, r1
 8003b36:	619a      	str	r2, [r3, #24]
 8003b38:	4b51      	ldr	r3, [pc, #324]	; (8003c80 <HAL_GPIO_Init+0x2c8>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4013      	ands	r3, r2
 8003b40:	60bb      	str	r3, [r7, #8]
 8003b42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b44:	4a4f      	ldr	r2, [pc, #316]	; (8003c84 <HAL_GPIO_Init+0x2cc>)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	089b      	lsrs	r3, r3, #2
 8003b4a:	3302      	adds	r3, #2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	589b      	ldr	r3, [r3, r2]
 8003b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2203      	movs	r2, #3
 8003b56:	4013      	ands	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	220f      	movs	r2, #15
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	0013      	movs	r3, r2
 8003b60:	43da      	mvns	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	2390      	movs	r3, #144	; 0x90
 8003b6c:	05db      	lsls	r3, r3, #23
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x1e2>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a44      	ldr	r2, [pc, #272]	; (8003c88 <HAL_GPIO_Init+0x2d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x1de>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a43      	ldr	r2, [pc, #268]	; (8003c8c <HAL_GPIO_Init+0x2d4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x1da>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a42      	ldr	r2, [pc, #264]	; (8003c90 <HAL_GPIO_Init+0x2d8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x1d6>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e006      	b.n	8003b9c <HAL_GPIO_Init+0x1e4>
 8003b8e:	2305      	movs	r3, #5
 8003b90:	e004      	b.n	8003b9c <HAL_GPIO_Init+0x1e4>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e002      	b.n	8003b9c <HAL_GPIO_Init+0x1e4>
 8003b96:	2301      	movs	r3, #1
 8003b98:	e000      	b.n	8003b9c <HAL_GPIO_Init+0x1e4>
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	2103      	movs	r1, #3
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	4093      	lsls	r3, r2
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bac:	4935      	ldr	r1, [pc, #212]	; (8003c84 <HAL_GPIO_Init+0x2cc>)
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	089b      	lsrs	r3, r3, #2
 8003bb2:	3302      	adds	r3, #2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bba:	4b36      	ldr	r3, [pc, #216]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	025b      	lsls	r3, r3, #9
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d003      	beq.n	8003bde <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003bde:	4b2d      	ldr	r3, [pc, #180]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003be4:	4b2b      	ldr	r3, [pc, #172]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	43da      	mvns	r2, r3
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	2380      	movs	r3, #128	; 0x80
 8003bfa:	029b      	lsls	r3, r3, #10
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c08:	4b22      	ldr	r3, [pc, #136]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0e:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	4013      	ands	r3, r2
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c32:	4b18      	ldr	r3, [pc, #96]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c38:	4b16      	ldr	r3, [pc, #88]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	039b      	lsls	r3, r3, #14
 8003c50:	4013      	ands	r3, r2
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	; (8003c94 <HAL_GPIO_Init+0x2dc>)
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	3301      	adds	r3, #1
 8003c66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	40da      	lsrs	r2, r3
 8003c70:	1e13      	subs	r3, r2, #0
 8003c72:	d000      	beq.n	8003c76 <HAL_GPIO_Init+0x2be>
 8003c74:	e6a8      	b.n	80039c8 <HAL_GPIO_Init+0x10>
  } 
}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	b006      	add	sp, #24
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40010000 	.word	0x40010000
 8003c88:	48000400 	.word	0x48000400
 8003c8c:	48000800 	.word	0x48000800
 8003c90:	48000c00 	.word	0x48000c00
 8003c94:	40010400 	.word	0x40010400

08003c98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	0008      	movs	r0, r1
 8003ca2:	0011      	movs	r1, r2
 8003ca4:	1cbb      	adds	r3, r7, #2
 8003ca6:	1c02      	adds	r2, r0, #0
 8003ca8:	801a      	strh	r2, [r3, #0]
 8003caa:	1c7b      	adds	r3, r7, #1
 8003cac:	1c0a      	adds	r2, r1, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cb0:	1c7b      	adds	r3, r7, #1
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cb8:	1cbb      	adds	r3, r7, #2
 8003cba:	881a      	ldrh	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cc0:	e003      	b.n	8003cca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cc2:	1cbb      	adds	r3, r7, #2
 8003cc4:	881a      	ldrh	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e301      	b.n	80042ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2201      	movs	r2, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	d100      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x1e>
 8003cf0:	e08d      	b.n	8003e0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003cf2:	4bc3      	ldr	r3, [pc, #780]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	220c      	movs	r2, #12
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00e      	beq.n	8003d1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cfe:	4bc0      	ldr	r3, [pc, #768]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	220c      	movs	r2, #12
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d116      	bne.n	8003d38 <HAL_RCC_OscConfig+0x64>
 8003d0a:	4bbd      	ldr	r3, [pc, #756]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	025b      	lsls	r3, r3, #9
 8003d12:	401a      	ands	r2, r3
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	025b      	lsls	r3, r3, #9
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d10d      	bne.n	8003d38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1c:	4bb8      	ldr	r3, [pc, #736]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	029b      	lsls	r3, r3, #10
 8003d24:	4013      	ands	r3, r2
 8003d26:	d100      	bne.n	8003d2a <HAL_RCC_OscConfig+0x56>
 8003d28:	e070      	b.n	8003e0c <HAL_RCC_OscConfig+0x138>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d000      	beq.n	8003d34 <HAL_RCC_OscConfig+0x60>
 8003d32:	e06b      	b.n	8003e0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e2d8      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d107      	bne.n	8003d50 <HAL_RCC_OscConfig+0x7c>
 8003d40:	4baf      	ldr	r3, [pc, #700]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	4bae      	ldr	r3, [pc, #696]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	0249      	lsls	r1, r1, #9
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	601a      	str	r2, [r3, #0]
 8003d4e:	e02f      	b.n	8003db0 <HAL_RCC_OscConfig+0xdc>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10c      	bne.n	8003d72 <HAL_RCC_OscConfig+0x9e>
 8003d58:	4ba9      	ldr	r3, [pc, #676]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	4ba8      	ldr	r3, [pc, #672]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d5e:	49a9      	ldr	r1, [pc, #676]	; (8004004 <HAL_RCC_OscConfig+0x330>)
 8003d60:	400a      	ands	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	4ba6      	ldr	r3, [pc, #664]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4ba5      	ldr	r3, [pc, #660]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	49a7      	ldr	r1, [pc, #668]	; (8004008 <HAL_RCC_OscConfig+0x334>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	e01e      	b.n	8003db0 <HAL_RCC_OscConfig+0xdc>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10e      	bne.n	8003d98 <HAL_RCC_OscConfig+0xc4>
 8003d7a:	4ba1      	ldr	r3, [pc, #644]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4ba0      	ldr	r3, [pc, #640]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	2180      	movs	r1, #128	; 0x80
 8003d82:	02c9      	lsls	r1, r1, #11
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	4b9d      	ldr	r3, [pc, #628]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4b9c      	ldr	r3, [pc, #624]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	0249      	lsls	r1, r1, #9
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_OscConfig+0xdc>
 8003d98:	4b99      	ldr	r3, [pc, #612]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b98      	ldr	r3, [pc, #608]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003d9e:	4999      	ldr	r1, [pc, #612]	; (8004004 <HAL_RCC_OscConfig+0x330>)
 8003da0:	400a      	ands	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	4b96      	ldr	r3, [pc, #600]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	4b95      	ldr	r3, [pc, #596]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	4997      	ldr	r1, [pc, #604]	; (8004008 <HAL_RCC_OscConfig+0x334>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d014      	beq.n	8003de2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db8:	f7ff fd1c 	bl	80037f4 <HAL_GetTick>
 8003dbc:	0003      	movs	r3, r0
 8003dbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc0:	e008      	b.n	8003dd4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc2:	f7ff fd17 	bl	80037f4 <HAL_GetTick>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	2b64      	cmp	r3, #100	; 0x64
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e28a      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd4:	4b8a      	ldr	r3, [pc, #552]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	029b      	lsls	r3, r3, #10
 8003ddc:	4013      	ands	r3, r2
 8003dde:	d0f0      	beq.n	8003dc2 <HAL_RCC_OscConfig+0xee>
 8003de0:	e015      	b.n	8003e0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7ff fd07 	bl	80037f4 <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7ff fd02 	bl	80037f4 <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b64      	cmp	r3, #100	; 0x64
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e275      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dfe:	4b80      	ldr	r3, [pc, #512]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	029b      	lsls	r3, r3, #10
 8003e06:	4013      	ands	r3, r2
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x118>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2202      	movs	r2, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	d100      	bne.n	8003e1a <HAL_RCC_OscConfig+0x146>
 8003e18:	e069      	b.n	8003eee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003e1a:	4b79      	ldr	r3, [pc, #484]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	220c      	movs	r2, #12
 8003e20:	4013      	ands	r3, r2
 8003e22:	d00b      	beq.n	8003e3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003e24:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	220c      	movs	r2, #12
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d11c      	bne.n	8003e6a <HAL_RCC_OscConfig+0x196>
 8003e30:	4b73      	ldr	r3, [pc, #460]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	025b      	lsls	r3, r3, #9
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d116      	bne.n	8003e6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3c:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2202      	movs	r2, #2
 8003e42:	4013      	ands	r3, r2
 8003e44:	d005      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17e>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d001      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e24b      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e52:	4b6b      	ldr	r3, [pc, #428]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	22f8      	movs	r2, #248	; 0xf8
 8003e58:	4393      	bics	r3, r2
 8003e5a:	0019      	movs	r1, r3
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	00da      	lsls	r2, r3, #3
 8003e62:	4b67      	ldr	r3, [pc, #412]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e64:	430a      	orrs	r2, r1
 8003e66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e68:	e041      	b.n	8003eee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e72:	4b63      	ldr	r3, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b62      	ldr	r3, [pc, #392]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e78:	2101      	movs	r1, #1
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7e:	f7ff fcb9 	bl	80037f4 <HAL_GetTick>
 8003e82:	0003      	movs	r3, r0
 8003e84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e88:	f7ff fcb4 	bl	80037f4 <HAL_GetTick>
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e227      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9a:	4b59      	ldr	r3, [pc, #356]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d0f1      	beq.n	8003e88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ea4:	4b56      	ldr	r3, [pc, #344]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	22f8      	movs	r2, #248	; 0xf8
 8003eaa:	4393      	bics	r3, r2
 8003eac:	0019      	movs	r1, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	00da      	lsls	r2, r3, #3
 8003eb4:	4b52      	ldr	r3, [pc, #328]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	e018      	b.n	8003eee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ebc:	4b50      	ldr	r3, [pc, #320]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	4b4f      	ldr	r3, [pc, #316]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ec2:	2101      	movs	r1, #1
 8003ec4:	438a      	bics	r2, r1
 8003ec6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec8:	f7ff fc94 	bl	80037f4 <HAL_GetTick>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7ff fc8f 	bl	80037f4 <HAL_GetTick>
 8003ed6:	0002      	movs	r2, r0
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e202      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee4:	4b46      	ldr	r3, [pc, #280]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	4013      	ands	r3, r2
 8003eec:	d1f1      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2208      	movs	r2, #8
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d036      	beq.n	8003f66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d019      	beq.n	8003f34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f00:	4b3f      	ldr	r3, [pc, #252]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f04:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f06:	2101      	movs	r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f0c:	f7ff fc72 	bl	80037f4 <HAL_GetTick>
 8003f10:	0003      	movs	r3, r0
 8003f12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f14:	e008      	b.n	8003f28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f16:	f7ff fc6d 	bl	80037f4 <HAL_GetTick>
 8003f1a:	0002      	movs	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d901      	bls.n	8003f28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e1e0      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	2202      	movs	r2, #2
 8003f2e:	4013      	ands	r3, r2
 8003f30:	d0f1      	beq.n	8003f16 <HAL_RCC_OscConfig+0x242>
 8003f32:	e018      	b.n	8003f66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f34:	4b32      	ldr	r3, [pc, #200]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f38:	4b31      	ldr	r3, [pc, #196]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	438a      	bics	r2, r1
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f40:	f7ff fc58 	bl	80037f4 <HAL_GetTick>
 8003f44:	0003      	movs	r3, r0
 8003f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e008      	b.n	8003f5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7ff fc53 	bl	80037f4 <HAL_GetTick>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e1c6      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2202      	movs	r2, #2
 8003f62:	4013      	ands	r3, r2
 8003f64:	d1f1      	bne.n	8003f4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d100      	bne.n	8003f72 <HAL_RCC_OscConfig+0x29e>
 8003f70:	e0b4      	b.n	80040dc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	201f      	movs	r0, #31
 8003f74:	183b      	adds	r3, r7, r0
 8003f76:	2200      	movs	r2, #0
 8003f78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f7a:	4b21      	ldr	r3, [pc, #132]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f7c:	69da      	ldr	r2, [r3, #28]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	055b      	lsls	r3, r3, #21
 8003f82:	4013      	ands	r3, r2
 8003f84:	d110      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f86:	4b1e      	ldr	r3, [pc, #120]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f88:	69da      	ldr	r2, [r3, #28]
 8003f8a:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0549      	lsls	r1, r1, #21
 8003f90:	430a      	orrs	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
 8003f94:	4b1a      	ldr	r3, [pc, #104]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	055b      	lsls	r3, r3, #21
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fa2:	183b      	adds	r3, r7, r0
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	4b18      	ldr	r3, [pc, #96]	; (800400c <HAL_RCC_OscConfig+0x338>)
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d11a      	bne.n	8003fea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fb4:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_RCC_OscConfig+0x338>)
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	4b14      	ldr	r3, [pc, #80]	; (800400c <HAL_RCC_OscConfig+0x338>)
 8003fba:	2180      	movs	r1, #128	; 0x80
 8003fbc:	0049      	lsls	r1, r1, #1
 8003fbe:	430a      	orrs	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fc2:	f7ff fc17 	bl	80037f4 <HAL_GetTick>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fcc:	f7ff fc12 	bl	80037f4 <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b64      	cmp	r3, #100	; 0x64
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e185      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_OscConfig+0x338>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	2380      	movs	r3, #128	; 0x80
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	d0f0      	beq.n	8003fcc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d10e      	bne.n	8004010 <HAL_RCC_OscConfig+0x33c>
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ff4:	6a1a      	ldr	r2, [r3, #32]
 8003ff6:	4b02      	ldr	r3, [pc, #8]	; (8004000 <HAL_RCC_OscConfig+0x32c>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	621a      	str	r2, [r3, #32]
 8003ffe:	e035      	b.n	800406c <HAL_RCC_OscConfig+0x398>
 8004000:	40021000 	.word	0x40021000
 8004004:	fffeffff 	.word	0xfffeffff
 8004008:	fffbffff 	.word	0xfffbffff
 800400c:	40007000 	.word	0x40007000
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10c      	bne.n	8004032 <HAL_RCC_OscConfig+0x35e>
 8004018:	4bb6      	ldr	r3, [pc, #728]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	4bb5      	ldr	r3, [pc, #724]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800401e:	2101      	movs	r1, #1
 8004020:	438a      	bics	r2, r1
 8004022:	621a      	str	r2, [r3, #32]
 8004024:	4bb3      	ldr	r3, [pc, #716]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	4bb2      	ldr	r3, [pc, #712]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800402a:	2104      	movs	r1, #4
 800402c:	438a      	bics	r2, r1
 800402e:	621a      	str	r2, [r3, #32]
 8004030:	e01c      	b.n	800406c <HAL_RCC_OscConfig+0x398>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x380>
 800403a:	4bae      	ldr	r3, [pc, #696]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	4bad      	ldr	r3, [pc, #692]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004040:	2104      	movs	r1, #4
 8004042:	430a      	orrs	r2, r1
 8004044:	621a      	str	r2, [r3, #32]
 8004046:	4bab      	ldr	r3, [pc, #684]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004048:	6a1a      	ldr	r2, [r3, #32]
 800404a:	4baa      	ldr	r3, [pc, #680]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800404c:	2101      	movs	r1, #1
 800404e:	430a      	orrs	r2, r1
 8004050:	621a      	str	r2, [r3, #32]
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0x398>
 8004054:	4ba7      	ldr	r3, [pc, #668]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004056:	6a1a      	ldr	r2, [r3, #32]
 8004058:	4ba6      	ldr	r3, [pc, #664]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800405a:	2101      	movs	r1, #1
 800405c:	438a      	bics	r2, r1
 800405e:	621a      	str	r2, [r3, #32]
 8004060:	4ba4      	ldr	r3, [pc, #656]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004062:	6a1a      	ldr	r2, [r3, #32]
 8004064:	4ba3      	ldr	r3, [pc, #652]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004066:	2104      	movs	r1, #4
 8004068:	438a      	bics	r2, r1
 800406a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d014      	beq.n	800409e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004074:	f7ff fbbe 	bl	80037f4 <HAL_GetTick>
 8004078:	0003      	movs	r3, r0
 800407a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407c:	e009      	b.n	8004092 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407e:	f7ff fbb9 	bl	80037f4 <HAL_GetTick>
 8004082:	0002      	movs	r2, r0
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	4a9b      	ldr	r2, [pc, #620]	; (80042f8 <HAL_RCC_OscConfig+0x624>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e12b      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	4b98      	ldr	r3, [pc, #608]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	2202      	movs	r2, #2
 8004098:	4013      	ands	r3, r2
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x3aa>
 800409c:	e013      	b.n	80040c6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800409e:	f7ff fba9 	bl	80037f4 <HAL_GetTick>
 80040a2:	0003      	movs	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	e009      	b.n	80040bc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7ff fba4 	bl	80037f4 <HAL_GetTick>
 80040ac:	0002      	movs	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	4a91      	ldr	r2, [pc, #580]	; (80042f8 <HAL_RCC_OscConfig+0x624>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e116      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040bc:	4b8d      	ldr	r3, [pc, #564]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	2202      	movs	r2, #2
 80040c2:	4013      	ands	r3, r2
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040c6:	231f      	movs	r3, #31
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b88      	ldr	r3, [pc, #544]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040d6:	4989      	ldr	r1, [pc, #548]	; (80042fc <HAL_RCC_OscConfig+0x628>)
 80040d8:	400a      	ands	r2, r1
 80040da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2210      	movs	r2, #16
 80040e2:	4013      	ands	r3, r2
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d12a      	bne.n	8004144 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80040ee:	4b81      	ldr	r3, [pc, #516]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	4b80      	ldr	r3, [pc, #512]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040f4:	2104      	movs	r1, #4
 80040f6:	430a      	orrs	r2, r1
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80040fa:	4b7e      	ldr	r3, [pc, #504]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80040fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fe:	4b7d      	ldr	r3, [pc, #500]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004100:	2101      	movs	r1, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004106:	f7ff fb75 	bl	80037f4 <HAL_GetTick>
 800410a:	0003      	movs	r3, r0
 800410c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004110:	f7ff fb70 	bl	80037f4 <HAL_GetTick>
 8004114:	0002      	movs	r2, r0
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0e3      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004122:	4b74      	ldr	r3, [pc, #464]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004126:	2202      	movs	r2, #2
 8004128:	4013      	ands	r3, r2
 800412a:	d0f1      	beq.n	8004110 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800412c:	4b71      	ldr	r3, [pc, #452]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	22f8      	movs	r2, #248	; 0xf8
 8004132:	4393      	bics	r3, r2
 8004134:	0019      	movs	r1, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	00da      	lsls	r2, r3, #3
 800413c:	4b6d      	ldr	r3, [pc, #436]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800413e:	430a      	orrs	r2, r1
 8004140:	635a      	str	r2, [r3, #52]	; 0x34
 8004142:	e034      	b.n	80041ae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	3305      	adds	r3, #5
 800414a:	d111      	bne.n	8004170 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800414c:	4b69      	ldr	r3, [pc, #420]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800414e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004150:	4b68      	ldr	r3, [pc, #416]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004152:	2104      	movs	r1, #4
 8004154:	438a      	bics	r2, r1
 8004156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004158:	4b66      	ldr	r3, [pc, #408]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800415a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800415c:	22f8      	movs	r2, #248	; 0xf8
 800415e:	4393      	bics	r3, r2
 8004160:	0019      	movs	r1, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	00da      	lsls	r2, r3, #3
 8004168:	4b62      	ldr	r3, [pc, #392]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800416a:	430a      	orrs	r2, r1
 800416c:	635a      	str	r2, [r3, #52]	; 0x34
 800416e:	e01e      	b.n	80041ae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004170:	4b60      	ldr	r3, [pc, #384]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004174:	4b5f      	ldr	r3, [pc, #380]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004176:	2104      	movs	r1, #4
 8004178:	430a      	orrs	r2, r1
 800417a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800417c:	4b5d      	ldr	r3, [pc, #372]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800417e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004180:	4b5c      	ldr	r3, [pc, #368]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004182:	2101      	movs	r1, #1
 8004184:	438a      	bics	r2, r1
 8004186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004188:	f7ff fb34 	bl	80037f4 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004192:	f7ff fb2f 	bl	80037f4 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0a2      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80041a4:	4b53      	ldr	r3, [pc, #332]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80041a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a8:	2202      	movs	r2, #2
 80041aa:	4013      	ands	r3, r2
 80041ac:	d1f1      	bne.n	8004192 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d100      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4e4>
 80041b6:	e097      	b.n	80042e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b8:	4b4e      	ldr	r3, [pc, #312]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	220c      	movs	r2, #12
 80041be:	4013      	ands	r3, r2
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d100      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4f2>
 80041c4:	e06b      	b.n	800429e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d14c      	bne.n	8004268 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	4b49      	ldr	r3, [pc, #292]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b48      	ldr	r3, [pc, #288]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80041d4:	494a      	ldr	r1, [pc, #296]	; (8004300 <HAL_RCC_OscConfig+0x62c>)
 80041d6:	400a      	ands	r2, r1
 80041d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7ff fb0b 	bl	80037f4 <HAL_GetTick>
 80041de:	0003      	movs	r3, r0
 80041e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7ff fb06 	bl	80037f4 <HAL_GetTick>
 80041e8:	0002      	movs	r2, r0
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e079      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041f6:	4b3f      	ldr	r3, [pc, #252]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	049b      	lsls	r3, r3, #18
 80041fe:	4013      	ands	r3, r2
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004202:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	220f      	movs	r2, #15
 8004208:	4393      	bics	r3, r2
 800420a:	0019      	movs	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004210:	4b38      	ldr	r3, [pc, #224]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004212:	430a      	orrs	r2, r1
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	4a3a      	ldr	r2, [pc, #232]	; (8004304 <HAL_RCC_OscConfig+0x630>)
 800421c:	4013      	ands	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	431a      	orrs	r2, r3
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004230:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	4b2f      	ldr	r3, [pc, #188]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004236:	2180      	movs	r1, #128	; 0x80
 8004238:	0449      	lsls	r1, r1, #17
 800423a:	430a      	orrs	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423e:	f7ff fad9 	bl	80037f4 <HAL_GetTick>
 8004242:	0003      	movs	r3, r0
 8004244:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004248:	f7ff fad4 	bl	80037f4 <HAL_GetTick>
 800424c:	0002      	movs	r2, r0
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e047      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800425a:	4b26      	ldr	r3, [pc, #152]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	049b      	lsls	r3, r3, #18
 8004262:	4013      	ands	r3, r2
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0x574>
 8004266:	e03f      	b.n	80042e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004268:	4b22      	ldr	r3, [pc, #136]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b21      	ldr	r3, [pc, #132]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 800426e:	4924      	ldr	r1, [pc, #144]	; (8004300 <HAL_RCC_OscConfig+0x62c>)
 8004270:	400a      	ands	r2, r1
 8004272:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004274:	f7ff fabe 	bl	80037f4 <HAL_GetTick>
 8004278:	0003      	movs	r3, r0
 800427a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427e:	f7ff fab9 	bl	80037f4 <HAL_GetTick>
 8004282:	0002      	movs	r2, r0
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e02c      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	2380      	movs	r3, #128	; 0x80
 8004296:	049b      	lsls	r3, r3, #18
 8004298:	4013      	ands	r3, r2
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x5aa>
 800429c:	e024      	b.n	80042e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e01f      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <HAL_RCC_OscConfig+0x620>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	2380      	movs	r3, #128	; 0x80
 80042ba:	025b      	lsls	r3, r3, #9
 80042bc:	401a      	ands	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d10e      	bne.n	80042e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	220f      	movs	r2, #15
 80042ca:	401a      	ands	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	23f0      	movs	r3, #240	; 0xf0
 80042d8:	039b      	lsls	r3, r3, #14
 80042da:	401a      	ands	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e000      	b.n	80042ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b008      	add	sp, #32
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			; (mov r8, r8)
 80042f4:	40021000 	.word	0x40021000
 80042f8:	00001388 	.word	0x00001388
 80042fc:	efffffff 	.word	0xefffffff
 8004300:	feffffff 	.word	0xfeffffff
 8004304:	ffc2ffff 	.word	0xffc2ffff

08004308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d101      	bne.n	800431c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e0b3      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800431c:	4b5b      	ldr	r3, [pc, #364]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2201      	movs	r2, #1
 8004322:	4013      	ands	r3, r2
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	429a      	cmp	r2, r3
 8004328:	d911      	bls.n	800434e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432a:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	4393      	bics	r3, r2
 8004332:	0019      	movs	r1, r3
 8004334:	4b55      	ldr	r3, [pc, #340]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 8004336:	683a      	ldr	r2, [r7, #0]
 8004338:	430a      	orrs	r2, r1
 800433a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d001      	beq.n	800434e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e09a      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2202      	movs	r2, #2
 8004354:	4013      	ands	r3, r2
 8004356:	d015      	beq.n	8004384 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2204      	movs	r2, #4
 800435e:	4013      	ands	r3, r2
 8004360:	d006      	beq.n	8004370 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004362:	4b4b      	ldr	r3, [pc, #300]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	4b4a      	ldr	r3, [pc, #296]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004368:	21e0      	movs	r1, #224	; 0xe0
 800436a:	00c9      	lsls	r1, r1, #3
 800436c:	430a      	orrs	r2, r1
 800436e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004370:	4b47      	ldr	r3, [pc, #284]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	22f0      	movs	r2, #240	; 0xf0
 8004376:	4393      	bics	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689a      	ldr	r2, [r3, #8]
 800437e:	4b44      	ldr	r3, [pc, #272]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2201      	movs	r2, #1
 800438a:	4013      	ands	r3, r2
 800438c:	d040      	beq.n	8004410 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d107      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004396:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	2380      	movs	r3, #128	; 0x80
 800439c:	029b      	lsls	r3, r3, #10
 800439e:	4013      	ands	r3, r2
 80043a0:	d114      	bne.n	80043cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e06e      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ae:	4b38      	ldr	r3, [pc, #224]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	049b      	lsls	r3, r3, #18
 80043b6:	4013      	ands	r3, r2
 80043b8:	d108      	bne.n	80043cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e062      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043be:	4b34      	ldr	r3, [pc, #208]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2202      	movs	r2, #2
 80043c4:	4013      	ands	r3, r2
 80043c6:	d101      	bne.n	80043cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e05b      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043cc:	4b30      	ldr	r3, [pc, #192]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	2203      	movs	r2, #3
 80043d2:	4393      	bics	r3, r2
 80043d4:	0019      	movs	r1, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	4b2d      	ldr	r3, [pc, #180]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 80043dc:	430a      	orrs	r2, r1
 80043de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043e0:	f7ff fa08 	bl	80037f4 <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e8:	e009      	b.n	80043fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043ea:	f7ff fa03 	bl	80037f4 <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	4a27      	ldr	r2, [pc, #156]	; (8004494 <HAL_RCC_ClockConfig+0x18c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e042      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fe:	4b24      	ldr	r3, [pc, #144]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	220c      	movs	r2, #12
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	429a      	cmp	r2, r3
 800440e:	d1ec      	bne.n	80043ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004410:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2201      	movs	r2, #1
 8004416:	4013      	ands	r3, r2
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d211      	bcs.n	8004442 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800441e:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	4393      	bics	r3, r2
 8004426:	0019      	movs	r1, r3
 8004428:	4b18      	ldr	r3, [pc, #96]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004430:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_RCC_ClockConfig+0x184>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2201      	movs	r2, #1
 8004436:	4013      	ands	r3, r2
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d001      	beq.n	8004442 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e020      	b.n	8004484 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	d009      	beq.n	8004460 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	4a11      	ldr	r2, [pc, #68]	; (8004498 <HAL_RCC_ClockConfig+0x190>)
 8004452:	4013      	ands	r3, r2
 8004454:	0019      	movs	r1, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68da      	ldr	r2, [r3, #12]
 800445a:	4b0d      	ldr	r3, [pc, #52]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004460:	f000 f820 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004464:	0001      	movs	r1, r0
 8004466:	4b0a      	ldr	r3, [pc, #40]	; (8004490 <HAL_RCC_ClockConfig+0x188>)
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	091b      	lsrs	r3, r3, #4
 800446c:	220f      	movs	r2, #15
 800446e:	4013      	ands	r3, r2
 8004470:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x194>)
 8004472:	5cd3      	ldrb	r3, [r2, r3]
 8004474:	000a      	movs	r2, r1
 8004476:	40da      	lsrs	r2, r3
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_ClockConfig+0x198>)
 800447a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800447c:	2003      	movs	r0, #3
 800447e:	f7ff f973 	bl	8003768 <HAL_InitTick>
  
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	0018      	movs	r0, r3
 8004486:	46bd      	mov	sp, r7
 8004488:	b004      	add	sp, #16
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40022000 	.word	0x40022000
 8004490:	40021000 	.word	0x40021000
 8004494:	00001388 	.word	0x00001388
 8004498:	fffff8ff 	.word	0xfffff8ff
 800449c:	08007378 	.word	0x08007378
 80044a0:	200001b8 	.word	0x200001b8

080044a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b590      	push	{r4, r7, lr}
 80044a6:	b08f      	sub	sp, #60	; 0x3c
 80044a8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80044aa:	2314      	movs	r3, #20
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	4a2b      	ldr	r2, [pc, #172]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044b2:	c313      	stmia	r3!, {r0, r1, r4}
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80044b8:	1d3b      	adds	r3, r7, #4
 80044ba:	4a29      	ldr	r2, [pc, #164]	; (8004560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044be:	c313      	stmia	r3!, {r0, r1, r4}
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044c8:	2300      	movs	r3, #0
 80044ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80044cc:	2300      	movs	r3, #0
 80044ce:	637b      	str	r3, [r7, #52]	; 0x34
 80044d0:	2300      	movs	r3, #0
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80044d8:	4b22      	ldr	r3, [pc, #136]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e0:	220c      	movs	r2, #12
 80044e2:	4013      	ands	r3, r2
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d002      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x4a>
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d003      	beq.n	80044f4 <HAL_RCC_GetSysClockFreq+0x50>
 80044ec:	e02d      	b.n	800454a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80044f2:	e02d      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	220f      	movs	r2, #15
 80044fa:	4013      	ands	r3, r2
 80044fc:	2214      	movs	r2, #20
 80044fe:	18ba      	adds	r2, r7, r2
 8004500:	5cd3      	ldrb	r3, [r2, r3]
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004504:	4b17      	ldr	r3, [pc, #92]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	220f      	movs	r2, #15
 800450a:	4013      	ands	r3, r2
 800450c:	1d3a      	adds	r2, r7, #4
 800450e:	5cd3      	ldrb	r3, [r2, r3]
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004512:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004514:	2380      	movs	r3, #128	; 0x80
 8004516:	025b      	lsls	r3, r3, #9
 8004518:	4013      	ands	r3, r2
 800451a:	d009      	beq.n	8004530 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800451c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800451e:	4812      	ldr	r0, [pc, #72]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004520:	f7fb fdfc 	bl	800011c <__udivsi3>
 8004524:	0003      	movs	r3, r0
 8004526:	001a      	movs	r2, r3
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	4353      	muls	r3, r2
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
 800452e:	e009      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004532:	000a      	movs	r2, r1
 8004534:	0152      	lsls	r2, r2, #5
 8004536:	1a52      	subs	r2, r2, r1
 8004538:	0193      	lsls	r3, r2, #6
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	00db      	lsls	r3, r3, #3
 800453e:	185b      	adds	r3, r3, r1
 8004540:	021b      	lsls	r3, r3, #8
 8004542:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004546:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004548:	e002      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800454a:	4b07      	ldr	r3, [pc, #28]	; (8004568 <HAL_RCC_GetSysClockFreq+0xc4>)
 800454c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800454e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004552:	0018      	movs	r0, r3
 8004554:	46bd      	mov	sp, r7
 8004556:	b00f      	add	sp, #60	; 0x3c
 8004558:	bd90      	pop	{r4, r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	080072b8 	.word	0x080072b8
 8004560:	080072c8 	.word	0x080072c8
 8004564:	40021000 	.word	0x40021000
 8004568:	007a1200 	.word	0x007a1200

0800456c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004570:	4b02      	ldr	r3, [pc, #8]	; (800457c <HAL_RCC_GetHCLKFreq+0x10>)
 8004572:	681b      	ldr	r3, [r3, #0]
}
 8004574:	0018      	movs	r0, r3
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	200001b8 	.word	0x200001b8

08004580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004584:	f7ff fff2 	bl	800456c <HAL_RCC_GetHCLKFreq>
 8004588:	0001      	movs	r1, r0
 800458a:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	2207      	movs	r2, #7
 8004592:	4013      	ands	r3, r2
 8004594:	4a04      	ldr	r2, [pc, #16]	; (80045a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004596:	5cd3      	ldrb	r3, [r2, r3]
 8004598:	40d9      	lsrs	r1, r3
 800459a:	000b      	movs	r3, r1
}    
 800459c:	0018      	movs	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	46c0      	nop			; (mov r8, r8)
 80045a4:	40021000 	.word	0x40021000
 80045a8:	08007388 	.word	0x08007388

080045ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0a8      	b.n	8004710 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d109      	bne.n	80045da <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	2382      	movs	r3, #130	; 0x82
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d009      	beq.n	80045e6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	61da      	str	r2, [r3, #28]
 80045d8:	e005      	b.n	80045e6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	225d      	movs	r2, #93	; 0x5d
 80045f0:	5c9b      	ldrb	r3, [r3, r2]
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	225c      	movs	r2, #92	; 0x5c
 80045fc:	2100      	movs	r1, #0
 80045fe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f7fe ff00 	bl	8003408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	225d      	movs	r2, #93	; 0x5d
 800460c:	2102      	movs	r1, #2
 800460e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	438a      	bics	r2, r1
 800461e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	23e0      	movs	r3, #224	; 0xe0
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	429a      	cmp	r2, r3
 800462a:	d902      	bls.n	8004632 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462c:	2300      	movs	r3, #0
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	e002      	b.n	8004638 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	015b      	lsls	r3, r3, #5
 8004636:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	23f0      	movs	r3, #240	; 0xf0
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	429a      	cmp	r2, r3
 8004642:	d008      	beq.n	8004656 <HAL_SPI_Init+0xaa>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	23e0      	movs	r3, #224	; 0xe0
 800464a:	00db      	lsls	r3, r3, #3
 800464c:	429a      	cmp	r2, r3
 800464e:	d002      	beq.n	8004656 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	2382      	movs	r3, #130	; 0x82
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	401a      	ands	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	2384      	movs	r3, #132	; 0x84
 8004666:	021b      	lsls	r3, r3, #8
 8004668:	400b      	ands	r3, r1
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	2102      	movs	r1, #2
 8004672:	400b      	ands	r3, r1
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	2101      	movs	r1, #1
 800467c:	400b      	ands	r3, r1
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6999      	ldr	r1, [r3, #24]
 8004684:	2380      	movs	r3, #128	; 0x80
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	400b      	ands	r3, r1
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	2138      	movs	r1, #56	; 0x38
 8004692:	400b      	ands	r3, r1
 8004694:	431a      	orrs	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	2180      	movs	r1, #128	; 0x80
 800469c:	400b      	ands	r3, r1
 800469e:	431a      	orrs	r2, r3
 80046a0:	0011      	movs	r1, r2
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046a6:	2380      	movs	r3, #128	; 0x80
 80046a8:	019b      	lsls	r3, r3, #6
 80046aa:	401a      	ands	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	0c1b      	lsrs	r3, r3, #16
 80046ba:	2204      	movs	r2, #4
 80046bc:	401a      	ands	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c2:	2110      	movs	r1, #16
 80046c4:	400b      	ands	r3, r1
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046cc:	2108      	movs	r1, #8
 80046ce:	400b      	ands	r3, r1
 80046d0:	431a      	orrs	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68d9      	ldr	r1, [r3, #12]
 80046d6:	23f0      	movs	r3, #240	; 0xf0
 80046d8:	011b      	lsls	r3, r3, #4
 80046da:	400b      	ands	r3, r1
 80046dc:	431a      	orrs	r2, r3
 80046de:	0011      	movs	r1, r2
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	2380      	movs	r3, #128	; 0x80
 80046e4:	015b      	lsls	r3, r3, #5
 80046e6:	401a      	ands	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4907      	ldr	r1, [pc, #28]	; (8004718 <HAL_SPI_Init+0x16c>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	225d      	movs	r2, #93	; 0x5d
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	0018      	movs	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	b004      	add	sp, #16
 8004716:	bd80      	pop	{r7, pc}
 8004718:	fffff7ff 	.word	0xfffff7ff

0800471c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	1dbb      	adds	r3, r7, #6
 800472a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800472c:	231f      	movs	r3, #31
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	225c      	movs	r2, #92	; 0x5c
 8004738:	5c9b      	ldrb	r3, [r3, r2]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_SPI_Transmit+0x26>
 800473e:	2302      	movs	r3, #2
 8004740:	e140      	b.n	80049c4 <HAL_SPI_Transmit+0x2a8>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	225c      	movs	r2, #92	; 0x5c
 8004746:	2101      	movs	r1, #1
 8004748:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800474a:	f7ff f853 	bl	80037f4 <HAL_GetTick>
 800474e:	0003      	movs	r3, r0
 8004750:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004752:	2316      	movs	r3, #22
 8004754:	18fb      	adds	r3, r7, r3
 8004756:	1dba      	adds	r2, r7, #6
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	225d      	movs	r2, #93	; 0x5d
 8004760:	5c9b      	ldrb	r3, [r3, r2]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b01      	cmp	r3, #1
 8004766:	d004      	beq.n	8004772 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004768:	231f      	movs	r3, #31
 800476a:	18fb      	adds	r3, r7, r3
 800476c:	2202      	movs	r2, #2
 800476e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004770:	e11d      	b.n	80049ae <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_SPI_Transmit+0x64>
 8004778:	1dbb      	adds	r3, r7, #6
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d104      	bne.n	800478a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8004780:	231f      	movs	r3, #31
 8004782:	18fb      	adds	r3, r7, r3
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
    goto error;
 8004788:	e111      	b.n	80049ae <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	225d      	movs	r2, #93	; 0x5d
 800478e:	2103      	movs	r1, #3
 8004790:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1dba      	adds	r2, r7, #6
 80047a2:	8812      	ldrh	r2, [r2, #0]
 80047a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	1dba      	adds	r2, r7, #6
 80047aa:	8812      	ldrh	r2, [r2, #0]
 80047ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2244      	movs	r2, #68	; 0x44
 80047b8:	2100      	movs	r1, #0
 80047ba:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2246      	movs	r2, #70	; 0x46
 80047c0:	2100      	movs	r1, #0
 80047c2:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2200      	movs	r2, #0
 80047ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689a      	ldr	r2, [r3, #8]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	429a      	cmp	r2, r3
 80047da:	d110      	bne.n	80047fe <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2140      	movs	r1, #64	; 0x40
 80047e8:	438a      	bics	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	01c9      	lsls	r1, r1, #7
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2240      	movs	r2, #64	; 0x40
 8004806:	4013      	ands	r3, r2
 8004808:	2b40      	cmp	r3, #64	; 0x40
 800480a:	d007      	beq.n	800481c <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2140      	movs	r1, #64	; 0x40
 8004818:	430a      	orrs	r2, r1
 800481a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	23e0      	movs	r3, #224	; 0xe0
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	429a      	cmp	r2, r3
 8004826:	d94e      	bls.n	80048c6 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d004      	beq.n	800483a <HAL_SPI_Transmit+0x11e>
 8004830:	2316      	movs	r3, #22
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d13f      	bne.n	80048ba <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	881a      	ldrh	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	1c9a      	adds	r2, r3, #2
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800485e:	e02c      	b.n	80048ba <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	2202      	movs	r2, #2
 8004868:	4013      	ands	r3, r2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d112      	bne.n	8004894 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004872:	881a      	ldrh	r2, [r3, #0]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487e:	1c9a      	adds	r2, r3, #2
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004888:	b29b      	uxth	r3, r3
 800488a:	3b01      	subs	r3, #1
 800488c:	b29a      	uxth	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004892:	e012      	b.n	80048ba <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004894:	f7fe ffae 	bl	80037f4 <HAL_GetTick>
 8004898:	0002      	movs	r2, r0
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d802      	bhi.n	80048aa <HAL_SPI_Transmit+0x18e>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	d102      	bne.n	80048b0 <HAL_SPI_Transmit+0x194>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d104      	bne.n	80048ba <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80048b0:	231f      	movs	r3, #31
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	2203      	movs	r2, #3
 80048b6:	701a      	strb	r2, [r3, #0]
          goto error;
 80048b8:	e079      	b.n	80049ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1cd      	bne.n	8004860 <HAL_SPI_Transmit+0x144>
 80048c4:	e04f      	b.n	8004966 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_SPI_Transmit+0x1bc>
 80048ce:	2316      	movs	r3, #22
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d141      	bne.n	800495c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80048fe:	e02d      	b.n	800495c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	2202      	movs	r2, #2
 8004908:	4013      	ands	r3, r2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d113      	bne.n	8004936 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	330c      	adds	r3, #12
 8004918:	7812      	ldrb	r2, [r2, #0]
 800491a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004934:	e012      	b.n	800495c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004936:	f7fe ff5d 	bl	80037f4 <HAL_GetTick>
 800493a:	0002      	movs	r2, r0
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	683a      	ldr	r2, [r7, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d802      	bhi.n	800494c <HAL_SPI_Transmit+0x230>
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	3301      	adds	r3, #1
 800494a:	d102      	bne.n	8004952 <HAL_SPI_Transmit+0x236>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8004952:	231f      	movs	r3, #31
 8004954:	18fb      	adds	r3, r7, r3
 8004956:	2203      	movs	r2, #3
 8004958:	701a      	strb	r2, [r3, #0]
          goto error;
 800495a:	e028      	b.n	80049ae <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1cc      	bne.n	8004900 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	0018      	movs	r0, r3
 800496e:	f000 fcd9 	bl	8005324 <SPI_EndRxTxTransaction>
 8004972:	1e03      	subs	r3, r0, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	613b      	str	r3, [r7, #16]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	613b      	str	r3, [r7, #16]
 8004998:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80049a2:	231f      	movs	r3, #31
 80049a4:	18fb      	adds	r3, r7, r3
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e000      	b.n	80049ae <HAL_SPI_Transmit+0x292>
  }

error:
 80049ac:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	225d      	movs	r2, #93	; 0x5d
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	225c      	movs	r2, #92	; 0x5c
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80049be:	231f      	movs	r3, #31
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	781b      	ldrb	r3, [r3, #0]
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b008      	add	sp, #32
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049cc:	b590      	push	{r4, r7, lr}
 80049ce:	b089      	sub	sp, #36	; 0x24
 80049d0:	af02      	add	r7, sp, #8
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	603b      	str	r3, [r7, #0]
 80049d8:	1dbb      	adds	r3, r7, #6
 80049da:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049dc:	2317      	movs	r3, #23
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	2382      	movs	r3, #130	; 0x82
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d113      	bne.n	8004a18 <HAL_SPI_Receive+0x4c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10f      	bne.n	8004a18 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	225d      	movs	r2, #93	; 0x5d
 80049fc:	2104      	movs	r1, #4
 80049fe:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a00:	1dbb      	adds	r3, r7, #6
 8004a02:	881c      	ldrh	r4, [r3, #0]
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	0023      	movs	r3, r4
 8004a10:	f000 f928 	bl	8004c64 <HAL_SPI_TransmitReceive>
 8004a14:	0003      	movs	r3, r0
 8004a16:	e11c      	b.n	8004c52 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	225c      	movs	r2, #92	; 0x5c
 8004a1c:	5c9b      	ldrb	r3, [r3, r2]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d101      	bne.n	8004a26 <HAL_SPI_Receive+0x5a>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e115      	b.n	8004c52 <HAL_SPI_Receive+0x286>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	225c      	movs	r2, #92	; 0x5c
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a2e:	f7fe fee1 	bl	80037f4 <HAL_GetTick>
 8004a32:	0003      	movs	r3, r0
 8004a34:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	225d      	movs	r2, #93	; 0x5d
 8004a3a:	5c9b      	ldrb	r3, [r3, r2]
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d004      	beq.n	8004a4c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004a42:	2317      	movs	r3, #23
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	2202      	movs	r2, #2
 8004a48:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a4a:	e0f7      	b.n	8004c3c <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_SPI_Receive+0x8e>
 8004a52:	1dbb      	adds	r3, r7, #6
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d104      	bne.n	8004a64 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8004a5a:	2317      	movs	r3, #23
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a62:	e0eb      	b.n	8004c3c <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	225d      	movs	r2, #93	; 0x5d
 8004a68:	2104      	movs	r1, #4
 8004a6a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	1dba      	adds	r2, r7, #6
 8004a7c:	2144      	movs	r1, #68	; 0x44
 8004a7e:	8812      	ldrh	r2, [r2, #0]
 8004a80:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	1dba      	adds	r2, r7, #6
 8004a86:	2146      	movs	r1, #70	; 0x46
 8004a88:	8812      	ldrh	r2, [r2, #0]
 8004a8a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	23e0      	movs	r3, #224	; 0xe0
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d908      	bls.n	8004ac8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4966      	ldr	r1, [pc, #408]	; (8004c5c <HAL_SPI_Receive+0x290>)
 8004ac2:	400a      	ands	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e008      	b.n	8004ada <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	2180      	movs	r1, #128	; 0x80
 8004ad4:	0149      	lsls	r1, r1, #5
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	689a      	ldr	r2, [r3, #8]
 8004ade:	2380      	movs	r3, #128	; 0x80
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d10f      	bne.n	8004b06 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2140      	movs	r1, #64	; 0x40
 8004af2:	438a      	bics	r2, r1
 8004af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4957      	ldr	r1, [pc, #348]	; (8004c60 <HAL_SPI_Receive+0x294>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2240      	movs	r2, #64	; 0x40
 8004b0e:	4013      	ands	r3, r2
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d007      	beq.n	8004b24 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2140      	movs	r1, #64	; 0x40
 8004b20:	430a      	orrs	r2, r1
 8004b22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	23e0      	movs	r3, #224	; 0xe0
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d900      	bls.n	8004b32 <HAL_SPI_Receive+0x166>
 8004b30:	e069      	b.n	8004c06 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b32:	e031      	b.n	8004b98 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d117      	bne.n	8004b72 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	001a      	movs	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	7812      	ldrb	r2, [r2, #0]
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b58:	1c5a      	adds	r2, r3, #1
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2246      	movs	r2, #70	; 0x46
 8004b62:	5a9b      	ldrh	r3, [r3, r2]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b299      	uxth	r1, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2246      	movs	r2, #70	; 0x46
 8004b6e:	5299      	strh	r1, [r3, r2]
 8004b70:	e012      	b.n	8004b98 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b72:	f7fe fe3f 	bl	80037f4 <HAL_GetTick>
 8004b76:	0002      	movs	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d802      	bhi.n	8004b88 <HAL_SPI_Receive+0x1bc>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	3301      	adds	r3, #1
 8004b86:	d102      	bne.n	8004b8e <HAL_SPI_Receive+0x1c2>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d104      	bne.n	8004b98 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8004b8e:	2317      	movs	r3, #23
 8004b90:	18fb      	adds	r3, r7, r3
 8004b92:	2203      	movs	r2, #3
 8004b94:	701a      	strb	r2, [r3, #0]
          goto error;
 8004b96:	e051      	b.n	8004c3c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2246      	movs	r2, #70	; 0x46
 8004b9c:	5a9b      	ldrh	r3, [r3, r2]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1c7      	bne.n	8004b34 <HAL_SPI_Receive+0x168>
 8004ba4:	e035      	b.n	8004c12 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2201      	movs	r2, #1
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d115      	bne.n	8004be0 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68da      	ldr	r2, [r3, #12]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	b292      	uxth	r2, r2
 8004bc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	1c9a      	adds	r2, r3, #2
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2246      	movs	r2, #70	; 0x46
 8004bd0:	5a9b      	ldrh	r3, [r3, r2]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	b299      	uxth	r1, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2246      	movs	r2, #70	; 0x46
 8004bdc:	5299      	strh	r1, [r3, r2]
 8004bde:	e012      	b.n	8004c06 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004be0:	f7fe fe08 	bl	80037f4 <HAL_GetTick>
 8004be4:	0002      	movs	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d802      	bhi.n	8004bf6 <HAL_SPI_Receive+0x22a>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <HAL_SPI_Receive+0x230>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d104      	bne.n	8004c06 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8004bfc:	2317      	movs	r3, #23
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2203      	movs	r2, #3
 8004c02:	701a      	strb	r2, [r3, #0]
          goto error;
 8004c04:	e01a      	b.n	8004c3c <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2246      	movs	r2, #70	; 0x46
 8004c0a:	5a9b      	ldrh	r3, [r3, r2]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1c9      	bne.n	8004ba6 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 fb25 	bl	8005268 <SPI_EndRxTransaction>
 8004c1e:	1e03      	subs	r3, r0, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2220      	movs	r2, #32
 8004c26:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d004      	beq.n	8004c3a <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8004c30:	2317      	movs	r3, #23
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
 8004c38:	e000      	b.n	8004c3c <HAL_SPI_Receive+0x270>
  }

error :
 8004c3a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	225d      	movs	r2, #93	; 0x5d
 8004c40:	2101      	movs	r1, #1
 8004c42:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	225c      	movs	r2, #92	; 0x5c
 8004c48:	2100      	movs	r1, #0
 8004c4a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004c4c:	2317      	movs	r3, #23
 8004c4e:	18fb      	adds	r3, r7, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
}
 8004c52:	0018      	movs	r0, r3
 8004c54:	46bd      	mov	sp, r7
 8004c56:	b007      	add	sp, #28
 8004c58:	bd90      	pop	{r4, r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	ffffefff 	.word	0xffffefff
 8004c60:	ffffbfff 	.word	0xffffbfff

08004c64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	001a      	movs	r2, r3
 8004c72:	1cbb      	adds	r3, r7, #2
 8004c74:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c76:	2301      	movs	r3, #1
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c7a:	2323      	movs	r3, #35	; 0x23
 8004c7c:	18fb      	adds	r3, r7, r3
 8004c7e:	2200      	movs	r2, #0
 8004c80:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	225c      	movs	r2, #92	; 0x5c
 8004c86:	5c9b      	ldrb	r3, [r3, r2]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_SPI_TransmitReceive+0x2c>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	e1b5      	b.n	8004ffc <HAL_SPI_TransmitReceive+0x398>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	225c      	movs	r2, #92	; 0x5c
 8004c94:	2101      	movs	r1, #1
 8004c96:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c98:	f7fe fdac 	bl	80037f4 <HAL_GetTick>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004ca0:	201b      	movs	r0, #27
 8004ca2:	183b      	adds	r3, r7, r0
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	215d      	movs	r1, #93	; 0x5d
 8004ca8:	5c52      	ldrb	r2, [r2, r1]
 8004caa:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004cb2:	2312      	movs	r3, #18
 8004cb4:	18fb      	adds	r3, r7, r3
 8004cb6:	1cba      	adds	r2, r7, #2
 8004cb8:	8812      	ldrh	r2, [r2, #0]
 8004cba:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d011      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x84>
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	2382      	movs	r3, #130	; 0x82
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d107      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d103      	bne.n	8004cde <HAL_SPI_TransmitReceive+0x7a>
 8004cd6:	183b      	adds	r3, r7, r0
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d004      	beq.n	8004ce8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8004cde:	2323      	movs	r3, #35	; 0x23
 8004ce0:	18fb      	adds	r3, r7, r3
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	701a      	strb	r2, [r3, #0]
    goto error;
 8004ce6:	e17e      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0x98>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <HAL_SPI_TransmitReceive+0x98>
 8004cf4:	1cbb      	adds	r3, r7, #2
 8004cf6:	881b      	ldrh	r3, [r3, #0]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d104      	bne.n	8004d06 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004cfc:	2323      	movs	r3, #35	; 0x23
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	2201      	movs	r2, #1
 8004d02:	701a      	strb	r2, [r3, #0]
    goto error;
 8004d04:	e16f      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	225d      	movs	r2, #93	; 0x5d
 8004d0a:	5c9b      	ldrb	r3, [r3, r2]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b04      	cmp	r3, #4
 8004d10:	d003      	beq.n	8004d1a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	225d      	movs	r2, #93	; 0x5d
 8004d16:	2105      	movs	r1, #5
 8004d18:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1cba      	adds	r2, r7, #2
 8004d2a:	2146      	movs	r1, #70	; 0x46
 8004d2c:	8812      	ldrh	r2, [r2, #0]
 8004d2e:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1cba      	adds	r2, r7, #2
 8004d34:	2144      	movs	r1, #68	; 0x44
 8004d36:	8812      	ldrh	r2, [r2, #0]
 8004d38:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	1cba      	adds	r2, r7, #2
 8004d44:	8812      	ldrh	r2, [r2, #0]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	1cba      	adds	r2, r7, #2
 8004d4c:	8812      	ldrh	r2, [r2, #0]
 8004d4e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	23e0      	movs	r3, #224	; 0xe0
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d908      	bls.n	8004d7a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	49a4      	ldr	r1, [pc, #656]	; (8005004 <HAL_SPI_TransmitReceive+0x3a0>)
 8004d74:	400a      	ands	r2, r1
 8004d76:	605a      	str	r2, [r3, #4]
 8004d78:	e008      	b.n	8004d8c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	0149      	lsls	r1, r1, #5
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2240      	movs	r2, #64	; 0x40
 8004d94:	4013      	ands	r3, r2
 8004d96:	2b40      	cmp	r3, #64	; 0x40
 8004d98:	d007      	beq.n	8004daa <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	430a      	orrs	r2, r1
 8004da8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	23e0      	movs	r3, #224	; 0xe0
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d800      	bhi.n	8004db8 <HAL_SPI_TransmitReceive+0x154>
 8004db6:	e07f      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d005      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x168>
 8004dc0:	2312      	movs	r3, #18
 8004dc2:	18fb      	adds	r3, r7, r3
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d000      	beq.n	8004dcc <HAL_SPI_TransmitReceive+0x168>
 8004dca:	e069      	b.n	8004ea0 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	881a      	ldrh	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ddc:	1c9a      	adds	r2, r3, #2
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004df0:	e056      	b.n	8004ea0 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d11b      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x1d4>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d016      	beq.n	8004e38 <HAL_SPI_TransmitReceive+0x1d4>
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d113      	bne.n	8004e38 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e14:	881a      	ldrh	r2, [r3, #0]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e20:	1c9a      	adds	r2, r3, #2
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e34:	2300      	movs	r3, #0
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	4013      	ands	r3, r2
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d11c      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x21c>
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2246      	movs	r2, #70	; 0x46
 8004e4a:	5a9b      	ldrh	r3, [r3, r2]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d016      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	b292      	uxth	r2, r2
 8004e5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	1c9a      	adds	r2, r3, #2
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2246      	movs	r2, #70	; 0x46
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	3b01      	subs	r3, #1
 8004e74:	b299      	uxth	r1, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2246      	movs	r2, #70	; 0x46
 8004e7a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e80:	f7fe fcb8 	bl	80037f4 <HAL_GetTick>
 8004e84:	0002      	movs	r2, r0
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d807      	bhi.n	8004ea0 <HAL_SPI_TransmitReceive+0x23c>
 8004e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e92:	3301      	adds	r3, #1
 8004e94:	d004      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8004e96:	2323      	movs	r3, #35	; 0x23
 8004e98:	18fb      	adds	r3, r7, r3
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	701a      	strb	r2, [r3, #0]
        goto error;
 8004e9e:	e0a2      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1a3      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x18e>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2246      	movs	r2, #70	; 0x46
 8004eae:	5a9b      	ldrh	r3, [r3, r2]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d19d      	bne.n	8004df2 <HAL_SPI_TransmitReceive+0x18e>
 8004eb6:	e085      	b.n	8004fc4 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x268>
 8004ec0:	2312      	movs	r3, #18
 8004ec2:	18fb      	adds	r3, r7, r3
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d000      	beq.n	8004ecc <HAL_SPI_TransmitReceive+0x268>
 8004eca:	e070      	b.n	8004fae <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	7812      	ldrb	r2, [r2, #0]
 8004ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	3b01      	subs	r3, #1
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ef2:	e05c      	b.n	8004fae <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	2202      	movs	r2, #2
 8004efc:	4013      	ands	r3, r2
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d11c      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x2d8>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d017      	beq.n	8004f3c <HAL_SPI_TransmitReceive+0x2d8>
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d114      	bne.n	8004f3c <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	330c      	adds	r3, #12
 8004f1c:	7812      	ldrb	r2, [r2, #0]
 8004f1e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b01      	subs	r3, #1
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2201      	movs	r2, #1
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d11e      	bne.n	8004f88 <HAL_SPI_TransmitReceive+0x324>
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2246      	movs	r2, #70	; 0x46
 8004f4e:	5a9b      	ldrh	r3, [r3, r2]
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d018      	beq.n	8004f88 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	330c      	adds	r3, #12
 8004f5c:	001a      	movs	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2246      	movs	r2, #70	; 0x46
 8004f76:	5a9b      	ldrh	r3, [r3, r2]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b299      	uxth	r1, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2246      	movs	r2, #70	; 0x46
 8004f82:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f84:	2301      	movs	r3, #1
 8004f86:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f88:	f7fe fc34 	bl	80037f4 <HAL_GetTick>
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d802      	bhi.n	8004f9e <HAL_SPI_TransmitReceive+0x33a>
 8004f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_TransmitReceive+0x340>
 8004f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8004fa4:	2323      	movs	r3, #35	; 0x23
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2203      	movs	r2, #3
 8004faa:	701a      	strb	r2, [r3, #0]
        goto error;
 8004fac:	e01b      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb2:	b29b      	uxth	r3, r3
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d19d      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x290>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2246      	movs	r2, #70	; 0x46
 8004fbc:	5a9b      	ldrh	r3, [r3, r2]
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d197      	bne.n	8004ef4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 f9aa 	bl	8005324 <SPI_EndRxTxTransaction>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d007      	beq.n	8004fe4 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8004fd4:	2323      	movs	r3, #35	; 0x23
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2201      	movs	r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2220      	movs	r2, #32
 8004fe0:	661a      	str	r2, [r3, #96]	; 0x60
 8004fe2:	e000      	b.n	8004fe6 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8004fe4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	225d      	movs	r2, #93	; 0x5d
 8004fea:	2101      	movs	r1, #1
 8004fec:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	225c      	movs	r2, #92	; 0x5c
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004ff6:	2323      	movs	r3, #35	; 0x23
 8004ff8:	18fb      	adds	r3, r7, r3
 8004ffa:	781b      	ldrb	r3, [r3, #0]
}
 8004ffc:	0018      	movs	r0, r3
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b00a      	add	sp, #40	; 0x28
 8005002:	bd80      	pop	{r7, pc}
 8005004:	ffffefff 	.word	0xffffefff

08005008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b088      	sub	sp, #32
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	603b      	str	r3, [r7, #0]
 8005014:	1dfb      	adds	r3, r7, #7
 8005016:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005018:	f7fe fbec 	bl	80037f4 <HAL_GetTick>
 800501c:	0002      	movs	r2, r0
 800501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	18d3      	adds	r3, r2, r3
 8005026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005028:	f7fe fbe4 	bl	80037f4 <HAL_GetTick>
 800502c:	0003      	movs	r3, r0
 800502e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005030:	4b3a      	ldr	r3, [pc, #232]	; (800511c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	015b      	lsls	r3, r3, #5
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	69fa      	ldr	r2, [r7, #28]
 800503a:	4353      	muls	r3, r2
 800503c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800503e:	e058      	b.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	3301      	adds	r3, #1
 8005044:	d055      	beq.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005046:	f7fe fbd5 	bl	80037f4 <HAL_GetTick>
 800504a:	0002      	movs	r2, r0
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	69fa      	ldr	r2, [r7, #28]
 8005052:	429a      	cmp	r2, r3
 8005054:	d902      	bls.n	800505c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d142      	bne.n	80050e2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	21e0      	movs	r1, #224	; 0xe0
 8005068:	438a      	bics	r2, r1
 800506a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	685a      	ldr	r2, [r3, #4]
 8005070:	2382      	movs	r3, #130	; 0x82
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	429a      	cmp	r2, r3
 8005076:	d113      	bne.n	80050a0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	689a      	ldr	r2, [r3, #8]
 800507c:	2380      	movs	r3, #128	; 0x80
 800507e:	021b      	lsls	r3, r3, #8
 8005080:	429a      	cmp	r2, r3
 8005082:	d005      	beq.n	8005090 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	689a      	ldr	r2, [r3, #8]
 8005088:	2380      	movs	r3, #128	; 0x80
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	429a      	cmp	r2, r3
 800508e:	d107      	bne.n	80050a0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2140      	movs	r1, #64	; 0x40
 800509c:	438a      	bics	r2, r1
 800509e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d110      	bne.n	80050ce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	491a      	ldr	r1, [pc, #104]	; (8005120 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80050b8:	400a      	ands	r2, r1
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	0189      	lsls	r1, r1, #6
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	225d      	movs	r2, #93	; 0x5d
 80050d2:	2101      	movs	r1, #1
 80050d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	225c      	movs	r2, #92	; 0x5c
 80050da:	2100      	movs	r1, #0
 80050dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e017      	b.n	8005112 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	3b01      	subs	r3, #1
 80050f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	4013      	ands	r3, r2
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	425a      	negs	r2, r3
 8005102:	4153      	adcs	r3, r2
 8005104:	b2db      	uxtb	r3, r3
 8005106:	001a      	movs	r2, r3
 8005108:	1dfb      	adds	r3, r7, #7
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d197      	bne.n	8005040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	0018      	movs	r0, r3
 8005114:	46bd      	mov	sp, r7
 8005116:	b008      	add	sp, #32
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	200001b8 	.word	0x200001b8
 8005120:	ffffdfff 	.word	0xffffdfff

08005124 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005132:	2317      	movs	r3, #23
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	2200      	movs	r2, #0
 8005138:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800513a:	f7fe fb5b 	bl	80037f4 <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005142:	1a9b      	subs	r3, r3, r2
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	18d3      	adds	r3, r2, r3
 8005148:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800514a:	f7fe fb53 	bl	80037f4 <HAL_GetTick>
 800514e:	0003      	movs	r3, r0
 8005150:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	330c      	adds	r3, #12
 8005158:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800515a:	4b41      	ldr	r3, [pc, #260]	; (8005260 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	0013      	movs	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	189b      	adds	r3, r3, r2
 8005164:	00da      	lsls	r2, r3, #3
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	0d1b      	lsrs	r3, r3, #20
 800516a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516c:	4353      	muls	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005170:	e068      	b.n	8005244 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	23c0      	movs	r3, #192	; 0xc0
 8005176:	00db      	lsls	r3, r3, #3
 8005178:	429a      	cmp	r2, r3
 800517a:	d10a      	bne.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	2117      	movs	r1, #23
 800518a:	187b      	adds	r3, r7, r1
 800518c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800518e:	187b      	adds	r3, r7, r1
 8005190:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	d055      	beq.n	8005244 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005198:	f7fe fb2c 	bl	80037f4 <HAL_GetTick>
 800519c:	0002      	movs	r2, r0
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d902      	bls.n	80051ae <SPI_WaitFifoStateUntilTimeout+0x8a>
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d142      	bne.n	8005234 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	685a      	ldr	r2, [r3, #4]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	21e0      	movs	r1, #224	; 0xe0
 80051ba:	438a      	bics	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	2382      	movs	r3, #130	; 0x82
 80051c4:	005b      	lsls	r3, r3, #1
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d113      	bne.n	80051f2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d005      	beq.n	80051e2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689a      	ldr	r2, [r3, #8]
 80051da:	2380      	movs	r3, #128	; 0x80
 80051dc:	00db      	lsls	r3, r3, #3
 80051de:	429a      	cmp	r2, r3
 80051e0:	d107      	bne.n	80051f2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	438a      	bics	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051f6:	2380      	movs	r3, #128	; 0x80
 80051f8:	019b      	lsls	r3, r3, #6
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d110      	bne.n	8005220 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4916      	ldr	r1, [pc, #88]	; (8005264 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800520a:	400a      	ands	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	2180      	movs	r1, #128	; 0x80
 800521a:	0189      	lsls	r1, r1, #6
 800521c:	430a      	orrs	r2, r1
 800521e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	225d      	movs	r2, #93	; 0x5d
 8005224:	2101      	movs	r1, #1
 8005226:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	225c      	movs	r2, #92	; 0x5c
 800522c:	2100      	movs	r1, #0
 800522e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e010      	b.n	8005256 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3b01      	subs	r3, #1
 8005242:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4013      	ands	r3, r2
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	429a      	cmp	r2, r3
 8005252:	d18e      	bne.n	8005172 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	0018      	movs	r0, r3
 8005258:	46bd      	mov	sp, r7
 800525a:	b00a      	add	sp, #40	; 0x28
 800525c:	bd80      	pop	{r7, pc}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	200001b8 	.word	0x200001b8
 8005264:	ffffdfff 	.word	0xffffdfff

08005268 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af02      	add	r7, sp, #8
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	2382      	movs	r3, #130	; 0x82
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	429a      	cmp	r2, r3
 800527e:	d113      	bne.n	80052a8 <SPI_EndRxTransaction+0x40>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689a      	ldr	r2, [r3, #8]
 8005284:	2380      	movs	r3, #128	; 0x80
 8005286:	021b      	lsls	r3, r3, #8
 8005288:	429a      	cmp	r2, r3
 800528a:	d005      	beq.n	8005298 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689a      	ldr	r2, [r3, #8]
 8005290:	2380      	movs	r3, #128	; 0x80
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	429a      	cmp	r2, r3
 8005296:	d107      	bne.n	80052a8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2140      	movs	r1, #64	; 0x40
 80052a4:	438a      	bics	r2, r1
 80052a6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052a8:	68ba      	ldr	r2, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	9300      	str	r3, [sp, #0]
 80052b0:	0013      	movs	r3, r2
 80052b2:	2200      	movs	r2, #0
 80052b4:	2180      	movs	r1, #128	; 0x80
 80052b6:	f7ff fea7 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 80052ba:	1e03      	subs	r3, r0, #0
 80052bc:	d007      	beq.n	80052ce <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c2:	2220      	movs	r2, #32
 80052c4:	431a      	orrs	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e026      	b.n	800531c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	2382      	movs	r3, #130	; 0x82
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d11f      	bne.n	800531a <SPI_EndRxTransaction+0xb2>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	021b      	lsls	r3, r3, #8
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d005      	beq.n	80052f2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	2380      	movs	r3, #128	; 0x80
 80052ec:	00db      	lsls	r3, r3, #3
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d113      	bne.n	800531a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80052f2:	68ba      	ldr	r2, [r7, #8]
 80052f4:	23c0      	movs	r3, #192	; 0xc0
 80052f6:	00d9      	lsls	r1, r3, #3
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	0013      	movs	r3, r2
 8005300:	2200      	movs	r2, #0
 8005302:	f7ff ff0f 	bl	8005124 <SPI_WaitFifoStateUntilTimeout>
 8005306:	1e03      	subs	r3, r0, #0
 8005308:	d007      	beq.n	800531a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800530e:	2220      	movs	r2, #32
 8005310:	431a      	orrs	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e000      	b.n	800531c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b004      	add	sp, #16
 8005322:	bd80      	pop	{r7, pc}

08005324 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	23c0      	movs	r3, #192	; 0xc0
 8005334:	0159      	lsls	r1, r3, #5
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	0013      	movs	r3, r2
 800533e:	2200      	movs	r2, #0
 8005340:	f7ff fef0 	bl	8005124 <SPI_WaitFifoStateUntilTimeout>
 8005344:	1e03      	subs	r3, r0, #0
 8005346:	d007      	beq.n	8005358 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800534c:	2220      	movs	r2, #32
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e027      	b.n	80053a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	0013      	movs	r3, r2
 8005362:	2200      	movs	r2, #0
 8005364:	2180      	movs	r1, #128	; 0x80
 8005366:	f7ff fe4f 	bl	8005008 <SPI_WaitFlagStateUntilTimeout>
 800536a:	1e03      	subs	r3, r0, #0
 800536c:	d007      	beq.n	800537e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005372:	2220      	movs	r2, #32
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e014      	b.n	80053a8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	23c0      	movs	r3, #192	; 0xc0
 8005382:	00d9      	lsls	r1, r3, #3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	0013      	movs	r3, r2
 800538c:	2200      	movs	r2, #0
 800538e:	f7ff fec9 	bl	8005124 <SPI_WaitFifoStateUntilTimeout>
 8005392:	1e03      	subs	r3, r0, #0
 8005394:	d007      	beq.n	80053a6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800539a:	2220      	movs	r2, #32
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e000      	b.n	80053a8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	0018      	movs	r0, r3
 80053aa:	46bd      	mov	sp, r7
 80053ac:	b004      	add	sp, #16
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e044      	b.n	800544c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d107      	bne.n	80053da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2274      	movs	r2, #116	; 0x74
 80053ce:	2100      	movs	r1, #0
 80053d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	0018      	movs	r0, r3
 80053d6:	f7fe f863 	bl	80034a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2224      	movs	r2, #36	; 0x24
 80053de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2101      	movs	r1, #1
 80053ec:	438a      	bics	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	0018      	movs	r0, r3
 80053f4:	f000 f8da 	bl	80055ac <UART_SetConfig>
 80053f8:	0003      	movs	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e024      	b.n	800544c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 fa0d 	bl	800582c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	490d      	ldr	r1, [pc, #52]	; (8005454 <HAL_UART_Init+0xa4>)
 800541e:	400a      	ands	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2108      	movs	r1, #8
 800542e:	438a      	bics	r2, r1
 8005430:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	430a      	orrs	r2, r1
 8005440:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	0018      	movs	r0, r3
 8005446:	f000 faa5 	bl	8005994 <UART_CheckIdleState>
 800544a:	0003      	movs	r3, r0
}
 800544c:	0018      	movs	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}
 8005454:	fffff7ff 	.word	0xfffff7ff

08005458 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af02      	add	r7, sp, #8
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	603b      	str	r3, [r7, #0]
 8005464:	1dbb      	adds	r3, r7, #6
 8005466:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800546c:	2b20      	cmp	r3, #32
 800546e:	d000      	beq.n	8005472 <HAL_UART_Transmit+0x1a>
 8005470:	e096      	b.n	80055a0 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <HAL_UART_Transmit+0x28>
 8005478:	1dbb      	adds	r3, r7, #6
 800547a:	881b      	ldrh	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d101      	bne.n	8005484 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e08e      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	2380      	movs	r3, #128	; 0x80
 800548a:	015b      	lsls	r3, r3, #5
 800548c:	429a      	cmp	r2, r3
 800548e:	d109      	bne.n	80054a4 <HAL_UART_Transmit+0x4c>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2201      	movs	r2, #1
 800549c:	4013      	ands	r3, r2
 800549e:	d001      	beq.n	80054a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e07e      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2274      	movs	r2, #116	; 0x74
 80054a8:	5c9b      	ldrb	r3, [r3, r2]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d101      	bne.n	80054b2 <HAL_UART_Transmit+0x5a>
 80054ae:	2302      	movs	r3, #2
 80054b0:	e077      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2274      	movs	r2, #116	; 0x74
 80054b6:	2101      	movs	r1, #1
 80054b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2280      	movs	r2, #128	; 0x80
 80054be:	2100      	movs	r1, #0
 80054c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2221      	movs	r2, #33	; 0x21
 80054c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c8:	f7fe f994 	bl	80037f4 <HAL_GetTick>
 80054cc:	0003      	movs	r3, r0
 80054ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	1dba      	adds	r2, r7, #6
 80054d4:	2150      	movs	r1, #80	; 0x50
 80054d6:	8812      	ldrh	r2, [r2, #0]
 80054d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	1dba      	adds	r2, r7, #6
 80054de:	2152      	movs	r1, #82	; 0x52
 80054e0:	8812      	ldrh	r2, [r2, #0]
 80054e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	2380      	movs	r3, #128	; 0x80
 80054ea:	015b      	lsls	r3, r3, #5
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d108      	bne.n	8005502 <HAL_UART_Transmit+0xaa>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61bb      	str	r3, [r7, #24]
 8005500:	e003      	b.n	800550a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005506:	2300      	movs	r3, #0
 8005508:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2274      	movs	r2, #116	; 0x74
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005512:	e02d      	b.n	8005570 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	0013      	movs	r3, r2
 800551e:	2200      	movs	r2, #0
 8005520:	2180      	movs	r1, #128	; 0x80
 8005522:	f000 fa7f 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 8005526:	1e03      	subs	r3, r0, #0
 8005528:	d001      	beq.n	800552e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e039      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	881a      	ldrh	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	05d2      	lsls	r2, r2, #23
 800553e:	0dd2      	lsrs	r2, r2, #23
 8005540:	b292      	uxth	r2, r2
 8005542:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	3302      	adds	r3, #2
 8005548:	61bb      	str	r3, [r7, #24]
 800554a:	e008      	b.n	800555e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	b292      	uxth	r2, r2
 8005556:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	3301      	adds	r3, #1
 800555c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2252      	movs	r2, #82	; 0x52
 8005562:	5a9b      	ldrh	r3, [r3, r2]
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b299      	uxth	r1, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2252      	movs	r2, #82	; 0x52
 800556e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2252      	movs	r2, #82	; 0x52
 8005574:	5a9b      	ldrh	r3, [r3, r2]
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1cb      	bne.n	8005514 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	9300      	str	r3, [sp, #0]
 8005584:	0013      	movs	r3, r2
 8005586:	2200      	movs	r2, #0
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	f000 fa4b 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 800558e:	1e03      	subs	r3, r0, #0
 8005590:	d001      	beq.n	8005596 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e005      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2220      	movs	r2, #32
 800559a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800559c:	2300      	movs	r3, #0
 800559e:	e000      	b.n	80055a2 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80055a0:	2302      	movs	r3, #2
  }
}
 80055a2:	0018      	movs	r0, r3
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b008      	add	sp, #32
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b088      	sub	sp, #32
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055b4:	231e      	movs	r3, #30
 80055b6:	18fb      	adds	r3, r7, r3
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689a      	ldr	r2, [r3, #8]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a8d      	ldr	r2, [pc, #564]	; (8005810 <UART_SetConfig+0x264>)
 80055dc:	4013      	ands	r3, r2
 80055de:	0019      	movs	r1, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	697a      	ldr	r2, [r7, #20]
 80055e6:	430a      	orrs	r2, r1
 80055e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a88      	ldr	r2, [pc, #544]	; (8005814 <UART_SetConfig+0x268>)
 80055f2:	4013      	ands	r3, r2
 80055f4:	0019      	movs	r1, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	430a      	orrs	r2, r1
 8005600:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	699b      	ldr	r3, [r3, #24]
 8005606:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4313      	orrs	r3, r2
 8005610:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	4a7f      	ldr	r2, [pc, #508]	; (8005818 <UART_SetConfig+0x26c>)
 800561a:	4013      	ands	r3, r2
 800561c:	0019      	movs	r1, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	430a      	orrs	r2, r1
 8005626:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a7b      	ldr	r2, [pc, #492]	; (800581c <UART_SetConfig+0x270>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d127      	bne.n	8005682 <UART_SetConfig+0xd6>
 8005632:	4b7b      	ldr	r3, [pc, #492]	; (8005820 <UART_SetConfig+0x274>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	2203      	movs	r2, #3
 8005638:	4013      	ands	r3, r2
 800563a:	2b03      	cmp	r3, #3
 800563c:	d00d      	beq.n	800565a <UART_SetConfig+0xae>
 800563e:	d81b      	bhi.n	8005678 <UART_SetConfig+0xcc>
 8005640:	2b02      	cmp	r3, #2
 8005642:	d014      	beq.n	800566e <UART_SetConfig+0xc2>
 8005644:	d818      	bhi.n	8005678 <UART_SetConfig+0xcc>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <UART_SetConfig+0xa4>
 800564a:	2b01      	cmp	r3, #1
 800564c:	d00a      	beq.n	8005664 <UART_SetConfig+0xb8>
 800564e:	e013      	b.n	8005678 <UART_SetConfig+0xcc>
 8005650:	231f      	movs	r3, #31
 8005652:	18fb      	adds	r3, r7, r3
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e021      	b.n	800569e <UART_SetConfig+0xf2>
 800565a:	231f      	movs	r3, #31
 800565c:	18fb      	adds	r3, r7, r3
 800565e:	2202      	movs	r2, #2
 8005660:	701a      	strb	r2, [r3, #0]
 8005662:	e01c      	b.n	800569e <UART_SetConfig+0xf2>
 8005664:	231f      	movs	r3, #31
 8005666:	18fb      	adds	r3, r7, r3
 8005668:	2204      	movs	r2, #4
 800566a:	701a      	strb	r2, [r3, #0]
 800566c:	e017      	b.n	800569e <UART_SetConfig+0xf2>
 800566e:	231f      	movs	r3, #31
 8005670:	18fb      	adds	r3, r7, r3
 8005672:	2208      	movs	r2, #8
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e012      	b.n	800569e <UART_SetConfig+0xf2>
 8005678:	231f      	movs	r3, #31
 800567a:	18fb      	adds	r3, r7, r3
 800567c:	2210      	movs	r2, #16
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e00d      	b.n	800569e <UART_SetConfig+0xf2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a67      	ldr	r2, [pc, #412]	; (8005824 <UART_SetConfig+0x278>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d104      	bne.n	8005696 <UART_SetConfig+0xea>
 800568c:	231f      	movs	r3, #31
 800568e:	18fb      	adds	r3, r7, r3
 8005690:	2200      	movs	r2, #0
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	e003      	b.n	800569e <UART_SetConfig+0xf2>
 8005696:	231f      	movs	r3, #31
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	2210      	movs	r2, #16
 800569c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	2380      	movs	r3, #128	; 0x80
 80056a4:	021b      	lsls	r3, r3, #8
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d15d      	bne.n	8005766 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 80056aa:	231f      	movs	r3, #31
 80056ac:	18fb      	adds	r3, r7, r3
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d015      	beq.n	80056e0 <UART_SetConfig+0x134>
 80056b4:	dc18      	bgt.n	80056e8 <UART_SetConfig+0x13c>
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d00d      	beq.n	80056d6 <UART_SetConfig+0x12a>
 80056ba:	dc15      	bgt.n	80056e8 <UART_SetConfig+0x13c>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <UART_SetConfig+0x11a>
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d005      	beq.n	80056d0 <UART_SetConfig+0x124>
 80056c4:	e010      	b.n	80056e8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056c6:	f7fe ff5b 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 80056ca:	0003      	movs	r3, r0
 80056cc:	61bb      	str	r3, [r7, #24]
        break;
 80056ce:	e012      	b.n	80056f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d0:	4b55      	ldr	r3, [pc, #340]	; (8005828 <UART_SetConfig+0x27c>)
 80056d2:	61bb      	str	r3, [r7, #24]
        break;
 80056d4:	e00f      	b.n	80056f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056d6:	f7fe fee5 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 80056da:	0003      	movs	r3, r0
 80056dc:	61bb      	str	r3, [r7, #24]
        break;
 80056de:	e00a      	b.n	80056f6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e0:	2380      	movs	r3, #128	; 0x80
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	61bb      	str	r3, [r7, #24]
        break;
 80056e6:	e006      	b.n	80056f6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80056ec:	231e      	movs	r3, #30
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	2201      	movs	r2, #1
 80056f2:	701a      	strb	r2, [r3, #0]
        break;
 80056f4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d100      	bne.n	80056fe <UART_SetConfig+0x152>
 80056fc:	e07b      	b.n	80057f6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	005a      	lsls	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	085b      	lsrs	r3, r3, #1
 8005708:	18d2      	adds	r2, r2, r3
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	0019      	movs	r1, r3
 8005710:	0010      	movs	r0, r2
 8005712:	f7fa fd03 	bl	800011c <__udivsi3>
 8005716:	0003      	movs	r3, r0
 8005718:	b29b      	uxth	r3, r3
 800571a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b0f      	cmp	r3, #15
 8005720:	d91c      	bls.n	800575c <UART_SetConfig+0x1b0>
 8005722:	693a      	ldr	r2, [r7, #16]
 8005724:	2380      	movs	r3, #128	; 0x80
 8005726:	025b      	lsls	r3, r3, #9
 8005728:	429a      	cmp	r2, r3
 800572a:	d217      	bcs.n	800575c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	b29a      	uxth	r2, r3
 8005730:	200e      	movs	r0, #14
 8005732:	183b      	adds	r3, r7, r0
 8005734:	210f      	movs	r1, #15
 8005736:	438a      	bics	r2, r1
 8005738:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	085b      	lsrs	r3, r3, #1
 800573e:	b29b      	uxth	r3, r3
 8005740:	2207      	movs	r2, #7
 8005742:	4013      	ands	r3, r2
 8005744:	b299      	uxth	r1, r3
 8005746:	183b      	adds	r3, r7, r0
 8005748:	183a      	adds	r2, r7, r0
 800574a:	8812      	ldrh	r2, [r2, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	183a      	adds	r2, r7, r0
 8005756:	8812      	ldrh	r2, [r2, #0]
 8005758:	60da      	str	r2, [r3, #12]
 800575a:	e04c      	b.n	80057f6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800575c:	231e      	movs	r3, #30
 800575e:	18fb      	adds	r3, r7, r3
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	e047      	b.n	80057f6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005766:	231f      	movs	r3, #31
 8005768:	18fb      	adds	r3, r7, r3
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d015      	beq.n	800579c <UART_SetConfig+0x1f0>
 8005770:	dc18      	bgt.n	80057a4 <UART_SetConfig+0x1f8>
 8005772:	2b04      	cmp	r3, #4
 8005774:	d00d      	beq.n	8005792 <UART_SetConfig+0x1e6>
 8005776:	dc15      	bgt.n	80057a4 <UART_SetConfig+0x1f8>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <UART_SetConfig+0x1d6>
 800577c:	2b02      	cmp	r3, #2
 800577e:	d005      	beq.n	800578c <UART_SetConfig+0x1e0>
 8005780:	e010      	b.n	80057a4 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7fe fefd 	bl	8004580 <HAL_RCC_GetPCLK1Freq>
 8005786:	0003      	movs	r3, r0
 8005788:	61bb      	str	r3, [r7, #24]
        break;
 800578a:	e012      	b.n	80057b2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800578c:	4b26      	ldr	r3, [pc, #152]	; (8005828 <UART_SetConfig+0x27c>)
 800578e:	61bb      	str	r3, [r7, #24]
        break;
 8005790:	e00f      	b.n	80057b2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005792:	f7fe fe87 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8005796:	0003      	movs	r3, r0
 8005798:	61bb      	str	r3, [r7, #24]
        break;
 800579a:	e00a      	b.n	80057b2 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	61bb      	str	r3, [r7, #24]
        break;
 80057a2:	e006      	b.n	80057b2 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80057a4:	2300      	movs	r3, #0
 80057a6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80057a8:	231e      	movs	r3, #30
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
        break;
 80057b0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	085a      	lsrs	r2, r3, #1
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	18d2      	adds	r2, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	0019      	movs	r1, r3
 80057c8:	0010      	movs	r0, r2
 80057ca:	f7fa fca7 	bl	800011c <__udivsi3>
 80057ce:	0003      	movs	r3, r0
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b0f      	cmp	r3, #15
 80057d8:	d909      	bls.n	80057ee <UART_SetConfig+0x242>
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	2380      	movs	r3, #128	; 0x80
 80057de:	025b      	lsls	r3, r3, #9
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d204      	bcs.n	80057ee <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	60da      	str	r2, [r3, #12]
 80057ec:	e003      	b.n	80057f6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80057ee:	231e      	movs	r3, #30
 80057f0:	18fb      	adds	r3, r7, r3
 80057f2:	2201      	movs	r2, #1
 80057f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005802:	231e      	movs	r3, #30
 8005804:	18fb      	adds	r3, r7, r3
 8005806:	781b      	ldrb	r3, [r3, #0]
}
 8005808:	0018      	movs	r0, r3
 800580a:	46bd      	mov	sp, r7
 800580c:	b008      	add	sp, #32
 800580e:	bd80      	pop	{r7, pc}
 8005810:	ffff69f3 	.word	0xffff69f3
 8005814:	ffffcfff 	.word	0xffffcfff
 8005818:	fffff4ff 	.word	0xfffff4ff
 800581c:	40013800 	.word	0x40013800
 8005820:	40021000 	.word	0x40021000
 8005824:	40004400 	.word	0x40004400
 8005828:	007a1200 	.word	0x007a1200

0800582c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	2201      	movs	r2, #1
 800583a:	4013      	ands	r3, r2
 800583c:	d00b      	beq.n	8005856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4a4a      	ldr	r2, [pc, #296]	; (8005970 <UART_AdvFeatureConfig+0x144>)
 8005846:	4013      	ands	r3, r2
 8005848:	0019      	movs	r1, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	2202      	movs	r2, #2
 800585c:	4013      	ands	r3, r2
 800585e:	d00b      	beq.n	8005878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	4a43      	ldr	r2, [pc, #268]	; (8005974 <UART_AdvFeatureConfig+0x148>)
 8005868:	4013      	ands	r3, r2
 800586a:	0019      	movs	r1, r3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	2204      	movs	r2, #4
 800587e:	4013      	ands	r3, r2
 8005880:	d00b      	beq.n	800589a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	4a3b      	ldr	r2, [pc, #236]	; (8005978 <UART_AdvFeatureConfig+0x14c>)
 800588a:	4013      	ands	r3, r2
 800588c:	0019      	movs	r1, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	2208      	movs	r2, #8
 80058a0:	4013      	ands	r3, r2
 80058a2:	d00b      	beq.n	80058bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	4a34      	ldr	r2, [pc, #208]	; (800597c <UART_AdvFeatureConfig+0x150>)
 80058ac:	4013      	ands	r3, r2
 80058ae:	0019      	movs	r1, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	2210      	movs	r2, #16
 80058c2:	4013      	ands	r3, r2
 80058c4:	d00b      	beq.n	80058de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <UART_AdvFeatureConfig+0x154>)
 80058ce:	4013      	ands	r3, r2
 80058d0:	0019      	movs	r1, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	2220      	movs	r2, #32
 80058e4:	4013      	ands	r3, r2
 80058e6:	d00b      	beq.n	8005900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	4a25      	ldr	r2, [pc, #148]	; (8005984 <UART_AdvFeatureConfig+0x158>)
 80058f0:	4013      	ands	r3, r2
 80058f2:	0019      	movs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	2240      	movs	r2, #64	; 0x40
 8005906:	4013      	ands	r3, r2
 8005908:	d01d      	beq.n	8005946 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <UART_AdvFeatureConfig+0x15c>)
 8005912:	4013      	ands	r3, r2
 8005914:	0019      	movs	r1, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	430a      	orrs	r2, r1
 8005920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005926:	2380      	movs	r3, #128	; 0x80
 8005928:	035b      	lsls	r3, r3, #13
 800592a:	429a      	cmp	r2, r3
 800592c:	d10b      	bne.n	8005946 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	4a15      	ldr	r2, [pc, #84]	; (800598c <UART_AdvFeatureConfig+0x160>)
 8005936:	4013      	ands	r3, r2
 8005938:	0019      	movs	r1, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	4013      	ands	r3, r2
 800594e:	d00b      	beq.n	8005968 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	4a0e      	ldr	r2, [pc, #56]	; (8005990 <UART_AdvFeatureConfig+0x164>)
 8005958:	4013      	ands	r3, r2
 800595a:	0019      	movs	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }
}
 8005968:	46c0      	nop			; (mov r8, r8)
 800596a:	46bd      	mov	sp, r7
 800596c:	b002      	add	sp, #8
 800596e:	bd80      	pop	{r7, pc}
 8005970:	fffdffff 	.word	0xfffdffff
 8005974:	fffeffff 	.word	0xfffeffff
 8005978:	fffbffff 	.word	0xfffbffff
 800597c:	ffff7fff 	.word	0xffff7fff
 8005980:	ffffefff 	.word	0xffffefff
 8005984:	ffffdfff 	.word	0xffffdfff
 8005988:	ffefffff 	.word	0xffefffff
 800598c:	ff9fffff 	.word	0xff9fffff
 8005990:	fff7ffff 	.word	0xfff7ffff

08005994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af02      	add	r7, sp, #8
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2280      	movs	r2, #128	; 0x80
 80059a0:	2100      	movs	r1, #0
 80059a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059a4:	f7fd ff26 	bl	80037f4 <HAL_GetTick>
 80059a8:	0003      	movs	r3, r0
 80059aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2208      	movs	r2, #8
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b08      	cmp	r3, #8
 80059b8:	d10c      	bne.n	80059d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2280      	movs	r2, #128	; 0x80
 80059be:	0391      	lsls	r1, r2, #14
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <UART_CheckIdleState+0x8c>)
 80059c4:	9200      	str	r2, [sp, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f000 f82c 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 80059cc:	1e03      	subs	r3, r0, #0
 80059ce:	d001      	beq.n	80059d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e021      	b.n	8005a18 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2204      	movs	r2, #4
 80059dc:	4013      	ands	r3, r2
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d10c      	bne.n	80059fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2280      	movs	r2, #128	; 0x80
 80059e6:	03d1      	lsls	r1, r2, #15
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	4a0d      	ldr	r2, [pc, #52]	; (8005a20 <UART_CheckIdleState+0x8c>)
 80059ec:	9200      	str	r2, [sp, #0]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f000 f818 	bl	8005a24 <UART_WaitOnFlagUntilTimeout>
 80059f4:	1e03      	subs	r3, r0, #0
 80059f6:	d001      	beq.n	80059fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f8:	2303      	movs	r3, #3
 80059fa:	e00d      	b.n	8005a18 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2274      	movs	r2, #116	; 0x74
 8005a12:	2100      	movs	r1, #0
 8005a14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	0018      	movs	r0, r3
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	b004      	add	sp, #16
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	01ffffff 	.word	0x01ffffff

08005a24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b094      	sub	sp, #80	; 0x50
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	603b      	str	r3, [r7, #0]
 8005a30:	1dfb      	adds	r3, r7, #7
 8005a32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a34:	e0a3      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a38:	3301      	adds	r3, #1
 8005a3a:	d100      	bne.n	8005a3e <UART_WaitOnFlagUntilTimeout+0x1a>
 8005a3c:	e09f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3e:	f7fd fed9 	bl	80037f4 <HAL_GetTick>
 8005a42:	0002      	movs	r2, r0
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d13d      	bne.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a54:	f3ef 8310 	mrs	r3, PRIMASK
 8005a58:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a5e:	2301      	movs	r3, #1
 8005a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	f383 8810 	msr	PRIMASK, r3
}
 8005a68:	46c0      	nop			; (mov r8, r8)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	494c      	ldr	r1, [pc, #304]	; (8005ba8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005a76:	400a      	ands	r2, r1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a7c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a86:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a90:	2301      	movs	r3, #1
 8005a92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	f383 8810 	msr	PRIMASK, r3
}
 8005a9a:	46c0      	nop			; (mov r8, r8)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	438a      	bics	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2274      	movs	r2, #116	; 0x74
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e067      	b.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	4013      	ands	r3, r2
 8005ada:	d050      	beq.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	69da      	ldr	r2, [r3, #28]
 8005ae2:	2380      	movs	r3, #128	; 0x80
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	401a      	ands	r2, r3
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	011b      	lsls	r3, r3, #4
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d146      	bne.n	8005b7e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2280      	movs	r2, #128	; 0x80
 8005af6:	0112      	lsls	r2, r2, #4
 8005af8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005afa:	f3ef 8310 	mrs	r3, PRIMASK
 8005afe:	613b      	str	r3, [r7, #16]
  return(result);
 8005b00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b04:	2301      	movs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	46c0      	nop			; (mov r8, r8)
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4923      	ldr	r1, [pc, #140]	; (8005ba8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8005b1c:	400a      	ands	r2, r1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	f383 8810 	msr	PRIMASK, r3
}
 8005b2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b2c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b30:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b32:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b36:	2301      	movs	r3, #1
 8005b38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	f383 8810 	msr	PRIMASK, r3
}
 8005b40:	46c0      	nop			; (mov r8, r8)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	438a      	bics	r2, r1
 8005b50:	609a      	str	r2, [r3, #8]
 8005b52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	f383 8810 	msr	PRIMASK, r3
}
 8005b5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2220      	movs	r2, #32
 8005b68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2280      	movs	r2, #128	; 0x80
 8005b6e:	2120      	movs	r1, #32
 8005b70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2274      	movs	r2, #116	; 0x74
 8005b76:	2100      	movs	r1, #0
 8005b78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e010      	b.n	8005ba0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	4013      	ands	r3, r2
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	425a      	negs	r2, r3
 8005b8e:	4153      	adcs	r3, r2
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	001a      	movs	r2, r3
 8005b94:	1dfb      	adds	r3, r7, #7
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d100      	bne.n	8005b9e <UART_WaitOnFlagUntilTimeout+0x17a>
 8005b9c:	e74b      	b.n	8005a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b9e:	2300      	movs	r3, #0
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b014      	add	sp, #80	; 0x50
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	fffffe5f 	.word	0xfffffe5f

08005bac <__assert_func>:
 8005bac:	b530      	push	{r4, r5, lr}
 8005bae:	0014      	movs	r4, r2
 8005bb0:	001a      	movs	r2, r3
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <__assert_func+0x2c>)
 8005bb4:	0005      	movs	r5, r0
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	b085      	sub	sp, #20
 8005bba:	68d8      	ldr	r0, [r3, #12]
 8005bbc:	4b07      	ldr	r3, [pc, #28]	; (8005bdc <__assert_func+0x30>)
 8005bbe:	2c00      	cmp	r4, #0
 8005bc0:	d101      	bne.n	8005bc6 <__assert_func+0x1a>
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <__assert_func+0x34>)
 8005bc4:	001c      	movs	r4, r3
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	9100      	str	r1, [sp, #0]
 8005bca:	002b      	movs	r3, r5
 8005bcc:	4905      	ldr	r1, [pc, #20]	; (8005be4 <__assert_func+0x38>)
 8005bce:	9402      	str	r4, [sp, #8]
 8005bd0:	f000 f810 	bl	8005bf4 <fiprintf>
 8005bd4:	f000 fc32 	bl	800643c <abort>
 8005bd8:	200001c4 	.word	0x200001c4
 8005bdc:	08007390 	.word	0x08007390
 8005be0:	080073cb 	.word	0x080073cb
 8005be4:	0800739d 	.word	0x0800739d

08005be8 <__errno>:
 8005be8:	4b01      	ldr	r3, [pc, #4]	; (8005bf0 <__errno+0x8>)
 8005bea:	6818      	ldr	r0, [r3, #0]
 8005bec:	4770      	bx	lr
 8005bee:	46c0      	nop			; (mov r8, r8)
 8005bf0:	200001c4 	.word	0x200001c4

08005bf4 <fiprintf>:
 8005bf4:	b40e      	push	{r1, r2, r3}
 8005bf6:	b503      	push	{r0, r1, lr}
 8005bf8:	0001      	movs	r1, r0
 8005bfa:	ab03      	add	r3, sp, #12
 8005bfc:	4804      	ldr	r0, [pc, #16]	; (8005c10 <fiprintf+0x1c>)
 8005bfe:	cb04      	ldmia	r3!, {r2}
 8005c00:	6800      	ldr	r0, [r0, #0]
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f000 f870 	bl	8005ce8 <_vfiprintf_r>
 8005c08:	b002      	add	sp, #8
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	b003      	add	sp, #12
 8005c0e:	4718      	bx	r3
 8005c10:	200001c4 	.word	0x200001c4

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	2600      	movs	r6, #0
 8005c18:	4d0c      	ldr	r5, [pc, #48]	; (8005c4c <__libc_init_array+0x38>)
 8005c1a:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <__libc_init_array+0x3c>)
 8005c1c:	1b64      	subs	r4, r4, r5
 8005c1e:	10a4      	asrs	r4, r4, #2
 8005c20:	42a6      	cmp	r6, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	2600      	movs	r6, #0
 8005c26:	f001 fa13 	bl	8007050 <_init>
 8005c2a:	4d0a      	ldr	r5, [pc, #40]	; (8005c54 <__libc_init_array+0x40>)
 8005c2c:	4c0a      	ldr	r4, [pc, #40]	; (8005c58 <__libc_init_array+0x44>)
 8005c2e:	1b64      	subs	r4, r4, r5
 8005c30:	10a4      	asrs	r4, r4, #2
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	00b3      	lsls	r3, r6, #2
 8005c3a:	58eb      	ldr	r3, [r5, r3]
 8005c3c:	4798      	blx	r3
 8005c3e:	3601      	adds	r6, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	00b3      	lsls	r3, r6, #2
 8005c44:	58eb      	ldr	r3, [r5, r3]
 8005c46:	4798      	blx	r3
 8005c48:	3601      	adds	r6, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	0800746c 	.word	0x0800746c
 8005c50:	0800746c 	.word	0x0800746c
 8005c54:	0800746c 	.word	0x0800746c
 8005c58:	08007470 	.word	0x08007470

08005c5c <memcmp>:
 8005c5c:	b530      	push	{r4, r5, lr}
 8005c5e:	2400      	movs	r4, #0
 8005c60:	3901      	subs	r1, #1
 8005c62:	42a2      	cmp	r2, r4
 8005c64:	d101      	bne.n	8005c6a <memcmp+0xe>
 8005c66:	2000      	movs	r0, #0
 8005c68:	e005      	b.n	8005c76 <memcmp+0x1a>
 8005c6a:	5d03      	ldrb	r3, [r0, r4]
 8005c6c:	3401      	adds	r4, #1
 8005c6e:	5d0d      	ldrb	r5, [r1, r4]
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	d0f6      	beq.n	8005c62 <memcmp+0x6>
 8005c74:	1b58      	subs	r0, r3, r5
 8005c76:	bd30      	pop	{r4, r5, pc}

08005c78 <memcpy>:
 8005c78:	2300      	movs	r3, #0
 8005c7a:	b510      	push	{r4, lr}
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d100      	bne.n	8005c82 <memcpy+0xa>
 8005c80:	bd10      	pop	{r4, pc}
 8005c82:	5ccc      	ldrb	r4, [r1, r3]
 8005c84:	54c4      	strb	r4, [r0, r3]
 8005c86:	3301      	adds	r3, #1
 8005c88:	e7f8      	b.n	8005c7c <memcpy+0x4>

08005c8a <memset>:
 8005c8a:	0003      	movs	r3, r0
 8005c8c:	1882      	adds	r2, r0, r2
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d100      	bne.n	8005c94 <memset+0xa>
 8005c92:	4770      	bx	lr
 8005c94:	7019      	strb	r1, [r3, #0]
 8005c96:	3301      	adds	r3, #1
 8005c98:	e7f9      	b.n	8005c8e <memset+0x4>

08005c9a <__sfputc_r>:
 8005c9a:	6893      	ldr	r3, [r2, #8]
 8005c9c:	b510      	push	{r4, lr}
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	6093      	str	r3, [r2, #8]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da04      	bge.n	8005cb0 <__sfputc_r+0x16>
 8005ca6:	6994      	ldr	r4, [r2, #24]
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	db07      	blt.n	8005cbc <__sfputc_r+0x22>
 8005cac:	290a      	cmp	r1, #10
 8005cae:	d005      	beq.n	8005cbc <__sfputc_r+0x22>
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	1c58      	adds	r0, r3, #1
 8005cb4:	6010      	str	r0, [r2, #0]
 8005cb6:	7019      	strb	r1, [r3, #0]
 8005cb8:	0008      	movs	r0, r1
 8005cba:	bd10      	pop	{r4, pc}
 8005cbc:	f000 faf0 	bl	80062a0 <__swbuf_r>
 8005cc0:	0001      	movs	r1, r0
 8005cc2:	e7f9      	b.n	8005cb8 <__sfputc_r+0x1e>

08005cc4 <__sfputs_r>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	0006      	movs	r6, r0
 8005cc8:	000f      	movs	r7, r1
 8005cca:	0014      	movs	r4, r2
 8005ccc:	18d5      	adds	r5, r2, r3
 8005cce:	42ac      	cmp	r4, r5
 8005cd0:	d101      	bne.n	8005cd6 <__sfputs_r+0x12>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e007      	b.n	8005ce6 <__sfputs_r+0x22>
 8005cd6:	7821      	ldrb	r1, [r4, #0]
 8005cd8:	003a      	movs	r2, r7
 8005cda:	0030      	movs	r0, r6
 8005cdc:	f7ff ffdd 	bl	8005c9a <__sfputc_r>
 8005ce0:	3401      	adds	r4, #1
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	d1f3      	bne.n	8005cce <__sfputs_r+0xa>
 8005ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005ce8 <_vfiprintf_r>:
 8005ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cea:	b0a1      	sub	sp, #132	; 0x84
 8005cec:	0006      	movs	r6, r0
 8005cee:	000c      	movs	r4, r1
 8005cf0:	001f      	movs	r7, r3
 8005cf2:	9203      	str	r2, [sp, #12]
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d004      	beq.n	8005d02 <_vfiprintf_r+0x1a>
 8005cf8:	6983      	ldr	r3, [r0, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d101      	bne.n	8005d02 <_vfiprintf_r+0x1a>
 8005cfe:	f000 fcd3 	bl	80066a8 <__sinit>
 8005d02:	4b8e      	ldr	r3, [pc, #568]	; (8005f3c <_vfiprintf_r+0x254>)
 8005d04:	429c      	cmp	r4, r3
 8005d06:	d11c      	bne.n	8005d42 <_vfiprintf_r+0x5a>
 8005d08:	6874      	ldr	r4, [r6, #4]
 8005d0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d0c:	07db      	lsls	r3, r3, #31
 8005d0e:	d405      	bmi.n	8005d1c <_vfiprintf_r+0x34>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	059b      	lsls	r3, r3, #22
 8005d14:	d402      	bmi.n	8005d1c <_vfiprintf_r+0x34>
 8005d16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d18:	f000 fd67 	bl	80067ea <__retarget_lock_acquire_recursive>
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	071b      	lsls	r3, r3, #28
 8005d20:	d502      	bpl.n	8005d28 <_vfiprintf_r+0x40>
 8005d22:	6923      	ldr	r3, [r4, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d11d      	bne.n	8005d64 <_vfiprintf_r+0x7c>
 8005d28:	0021      	movs	r1, r4
 8005d2a:	0030      	movs	r0, r6
 8005d2c:	f000 fb0e 	bl	800634c <__swsetup_r>
 8005d30:	2800      	cmp	r0, #0
 8005d32:	d017      	beq.n	8005d64 <_vfiprintf_r+0x7c>
 8005d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d36:	07db      	lsls	r3, r3, #31
 8005d38:	d50d      	bpl.n	8005d56 <_vfiprintf_r+0x6e>
 8005d3a:	2001      	movs	r0, #1
 8005d3c:	4240      	negs	r0, r0
 8005d3e:	b021      	add	sp, #132	; 0x84
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	4b7f      	ldr	r3, [pc, #508]	; (8005f40 <_vfiprintf_r+0x258>)
 8005d44:	429c      	cmp	r4, r3
 8005d46:	d101      	bne.n	8005d4c <_vfiprintf_r+0x64>
 8005d48:	68b4      	ldr	r4, [r6, #8]
 8005d4a:	e7de      	b.n	8005d0a <_vfiprintf_r+0x22>
 8005d4c:	4b7d      	ldr	r3, [pc, #500]	; (8005f44 <_vfiprintf_r+0x25c>)
 8005d4e:	429c      	cmp	r4, r3
 8005d50:	d1db      	bne.n	8005d0a <_vfiprintf_r+0x22>
 8005d52:	68f4      	ldr	r4, [r6, #12]
 8005d54:	e7d9      	b.n	8005d0a <_vfiprintf_r+0x22>
 8005d56:	89a3      	ldrh	r3, [r4, #12]
 8005d58:	059b      	lsls	r3, r3, #22
 8005d5a:	d4ee      	bmi.n	8005d3a <_vfiprintf_r+0x52>
 8005d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5e:	f000 fd45 	bl	80067ec <__retarget_lock_release_recursive>
 8005d62:	e7ea      	b.n	8005d3a <_vfiprintf_r+0x52>
 8005d64:	2300      	movs	r3, #0
 8005d66:	ad08      	add	r5, sp, #32
 8005d68:	616b      	str	r3, [r5, #20]
 8005d6a:	3320      	adds	r3, #32
 8005d6c:	766b      	strb	r3, [r5, #25]
 8005d6e:	3310      	adds	r3, #16
 8005d70:	76ab      	strb	r3, [r5, #26]
 8005d72:	9707      	str	r7, [sp, #28]
 8005d74:	9f03      	ldr	r7, [sp, #12]
 8005d76:	783b      	ldrb	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <_vfiprintf_r+0x98>
 8005d7c:	2b25      	cmp	r3, #37	; 0x25
 8005d7e:	d14e      	bne.n	8005e1e <_vfiprintf_r+0x136>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	1afb      	subs	r3, r7, r3
 8005d84:	9305      	str	r3, [sp, #20]
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	429f      	cmp	r7, r3
 8005d8a:	d00d      	beq.n	8005da8 <_vfiprintf_r+0xc0>
 8005d8c:	9b05      	ldr	r3, [sp, #20]
 8005d8e:	0021      	movs	r1, r4
 8005d90:	0030      	movs	r0, r6
 8005d92:	9a03      	ldr	r2, [sp, #12]
 8005d94:	f7ff ff96 	bl	8005cc4 <__sfputs_r>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d100      	bne.n	8005d9e <_vfiprintf_r+0xb6>
 8005d9c:	e0b5      	b.n	8005f0a <_vfiprintf_r+0x222>
 8005d9e:	696a      	ldr	r2, [r5, #20]
 8005da0:	9b05      	ldr	r3, [sp, #20]
 8005da2:	4694      	mov	ip, r2
 8005da4:	4463      	add	r3, ip
 8005da6:	616b      	str	r3, [r5, #20]
 8005da8:	783b      	ldrb	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d100      	bne.n	8005db0 <_vfiprintf_r+0xc8>
 8005dae:	e0ac      	b.n	8005f0a <_vfiprintf_r+0x222>
 8005db0:	2201      	movs	r2, #1
 8005db2:	1c7b      	adds	r3, r7, #1
 8005db4:	9303      	str	r3, [sp, #12]
 8005db6:	2300      	movs	r3, #0
 8005db8:	4252      	negs	r2, r2
 8005dba:	606a      	str	r2, [r5, #4]
 8005dbc:	a904      	add	r1, sp, #16
 8005dbe:	3254      	adds	r2, #84	; 0x54
 8005dc0:	1852      	adds	r2, r2, r1
 8005dc2:	602b      	str	r3, [r5, #0]
 8005dc4:	60eb      	str	r3, [r5, #12]
 8005dc6:	60ab      	str	r3, [r5, #8]
 8005dc8:	7013      	strb	r3, [r2, #0]
 8005dca:	65ab      	str	r3, [r5, #88]	; 0x58
 8005dcc:	9b03      	ldr	r3, [sp, #12]
 8005dce:	2205      	movs	r2, #5
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	485d      	ldr	r0, [pc, #372]	; (8005f48 <_vfiprintf_r+0x260>)
 8005dd4:	f000 fd78 	bl	80068c8 <memchr>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	1c5f      	adds	r7, r3, #1
 8005ddc:	2800      	cmp	r0, #0
 8005dde:	d120      	bne.n	8005e22 <_vfiprintf_r+0x13a>
 8005de0:	682a      	ldr	r2, [r5, #0]
 8005de2:	06d3      	lsls	r3, r2, #27
 8005de4:	d504      	bpl.n	8005df0 <_vfiprintf_r+0x108>
 8005de6:	2353      	movs	r3, #83	; 0x53
 8005de8:	a904      	add	r1, sp, #16
 8005dea:	185b      	adds	r3, r3, r1
 8005dec:	2120      	movs	r1, #32
 8005dee:	7019      	strb	r1, [r3, #0]
 8005df0:	0713      	lsls	r3, r2, #28
 8005df2:	d504      	bpl.n	8005dfe <_vfiprintf_r+0x116>
 8005df4:	2353      	movs	r3, #83	; 0x53
 8005df6:	a904      	add	r1, sp, #16
 8005df8:	185b      	adds	r3, r3, r1
 8005dfa:	212b      	movs	r1, #43	; 0x2b
 8005dfc:	7019      	strb	r1, [r3, #0]
 8005dfe:	9b03      	ldr	r3, [sp, #12]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b2a      	cmp	r3, #42	; 0x2a
 8005e04:	d016      	beq.n	8005e34 <_vfiprintf_r+0x14c>
 8005e06:	2100      	movs	r1, #0
 8005e08:	68eb      	ldr	r3, [r5, #12]
 8005e0a:	9f03      	ldr	r7, [sp, #12]
 8005e0c:	783a      	ldrb	r2, [r7, #0]
 8005e0e:	1c78      	adds	r0, r7, #1
 8005e10:	3a30      	subs	r2, #48	; 0x30
 8005e12:	4684      	mov	ip, r0
 8005e14:	2a09      	cmp	r2, #9
 8005e16:	d94f      	bls.n	8005eb8 <_vfiprintf_r+0x1d0>
 8005e18:	2900      	cmp	r1, #0
 8005e1a:	d111      	bne.n	8005e40 <_vfiprintf_r+0x158>
 8005e1c:	e017      	b.n	8005e4e <_vfiprintf_r+0x166>
 8005e1e:	3701      	adds	r7, #1
 8005e20:	e7a9      	b.n	8005d76 <_vfiprintf_r+0x8e>
 8005e22:	4b49      	ldr	r3, [pc, #292]	; (8005f48 <_vfiprintf_r+0x260>)
 8005e24:	682a      	ldr	r2, [r5, #0]
 8005e26:	1ac0      	subs	r0, r0, r3
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4083      	lsls	r3, r0
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	602b      	str	r3, [r5, #0]
 8005e30:	9703      	str	r7, [sp, #12]
 8005e32:	e7cb      	b.n	8005dcc <_vfiprintf_r+0xe4>
 8005e34:	9b07      	ldr	r3, [sp, #28]
 8005e36:	1d19      	adds	r1, r3, #4
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	9107      	str	r1, [sp, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	db01      	blt.n	8005e44 <_vfiprintf_r+0x15c>
 8005e40:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e42:	e004      	b.n	8005e4e <_vfiprintf_r+0x166>
 8005e44:	425b      	negs	r3, r3
 8005e46:	60eb      	str	r3, [r5, #12]
 8005e48:	2302      	movs	r3, #2
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	602b      	str	r3, [r5, #0]
 8005e4e:	783b      	ldrb	r3, [r7, #0]
 8005e50:	2b2e      	cmp	r3, #46	; 0x2e
 8005e52:	d10a      	bne.n	8005e6a <_vfiprintf_r+0x182>
 8005e54:	787b      	ldrb	r3, [r7, #1]
 8005e56:	2b2a      	cmp	r3, #42	; 0x2a
 8005e58:	d137      	bne.n	8005eca <_vfiprintf_r+0x1e2>
 8005e5a:	9b07      	ldr	r3, [sp, #28]
 8005e5c:	3702      	adds	r7, #2
 8005e5e:	1d1a      	adds	r2, r3, #4
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	9207      	str	r2, [sp, #28]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	db2d      	blt.n	8005ec4 <_vfiprintf_r+0x1dc>
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	2203      	movs	r2, #3
 8005e6c:	7839      	ldrb	r1, [r7, #0]
 8005e6e:	4837      	ldr	r0, [pc, #220]	; (8005f4c <_vfiprintf_r+0x264>)
 8005e70:	f000 fd2a 	bl	80068c8 <memchr>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d007      	beq.n	8005e88 <_vfiprintf_r+0x1a0>
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <_vfiprintf_r+0x264>)
 8005e7a:	682a      	ldr	r2, [r5, #0]
 8005e7c:	1ac0      	subs	r0, r0, r3
 8005e7e:	2340      	movs	r3, #64	; 0x40
 8005e80:	4083      	lsls	r3, r0
 8005e82:	4313      	orrs	r3, r2
 8005e84:	3701      	adds	r7, #1
 8005e86:	602b      	str	r3, [r5, #0]
 8005e88:	7839      	ldrb	r1, [r7, #0]
 8005e8a:	1c7b      	adds	r3, r7, #1
 8005e8c:	2206      	movs	r2, #6
 8005e8e:	4830      	ldr	r0, [pc, #192]	; (8005f50 <_vfiprintf_r+0x268>)
 8005e90:	9303      	str	r3, [sp, #12]
 8005e92:	7629      	strb	r1, [r5, #24]
 8005e94:	f000 fd18 	bl	80068c8 <memchr>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d045      	beq.n	8005f28 <_vfiprintf_r+0x240>
 8005e9c:	4b2d      	ldr	r3, [pc, #180]	; (8005f54 <_vfiprintf_r+0x26c>)
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d127      	bne.n	8005ef2 <_vfiprintf_r+0x20a>
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	9b07      	ldr	r3, [sp, #28]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	4393      	bics	r3, r2
 8005eaa:	3308      	adds	r3, #8
 8005eac:	9307      	str	r3, [sp, #28]
 8005eae:	696b      	ldr	r3, [r5, #20]
 8005eb0:	9a04      	ldr	r2, [sp, #16]
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	616b      	str	r3, [r5, #20]
 8005eb6:	e75d      	b.n	8005d74 <_vfiprintf_r+0x8c>
 8005eb8:	210a      	movs	r1, #10
 8005eba:	434b      	muls	r3, r1
 8005ebc:	4667      	mov	r7, ip
 8005ebe:	189b      	adds	r3, r3, r2
 8005ec0:	3909      	subs	r1, #9
 8005ec2:	e7a3      	b.n	8005e0c <_vfiprintf_r+0x124>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	425b      	negs	r3, r3
 8005ec8:	e7ce      	b.n	8005e68 <_vfiprintf_r+0x180>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	001a      	movs	r2, r3
 8005ece:	3701      	adds	r7, #1
 8005ed0:	606b      	str	r3, [r5, #4]
 8005ed2:	7839      	ldrb	r1, [r7, #0]
 8005ed4:	1c78      	adds	r0, r7, #1
 8005ed6:	3930      	subs	r1, #48	; 0x30
 8005ed8:	4684      	mov	ip, r0
 8005eda:	2909      	cmp	r1, #9
 8005edc:	d903      	bls.n	8005ee6 <_vfiprintf_r+0x1fe>
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0c3      	beq.n	8005e6a <_vfiprintf_r+0x182>
 8005ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ee4:	e7c1      	b.n	8005e6a <_vfiprintf_r+0x182>
 8005ee6:	230a      	movs	r3, #10
 8005ee8:	435a      	muls	r2, r3
 8005eea:	4667      	mov	r7, ip
 8005eec:	1852      	adds	r2, r2, r1
 8005eee:	3b09      	subs	r3, #9
 8005ef0:	e7ef      	b.n	8005ed2 <_vfiprintf_r+0x1ea>
 8005ef2:	ab07      	add	r3, sp, #28
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	0022      	movs	r2, r4
 8005ef8:	0029      	movs	r1, r5
 8005efa:	0030      	movs	r0, r6
 8005efc:	4b16      	ldr	r3, [pc, #88]	; (8005f58 <_vfiprintf_r+0x270>)
 8005efe:	e000      	b.n	8005f02 <_vfiprintf_r+0x21a>
 8005f00:	bf00      	nop
 8005f02:	9004      	str	r0, [sp, #16]
 8005f04:	9b04      	ldr	r3, [sp, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	d1d1      	bne.n	8005eae <_vfiprintf_r+0x1c6>
 8005f0a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f0c:	07db      	lsls	r3, r3, #31
 8005f0e:	d405      	bmi.n	8005f1c <_vfiprintf_r+0x234>
 8005f10:	89a3      	ldrh	r3, [r4, #12]
 8005f12:	059b      	lsls	r3, r3, #22
 8005f14:	d402      	bmi.n	8005f1c <_vfiprintf_r+0x234>
 8005f16:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f18:	f000 fc68 	bl	80067ec <__retarget_lock_release_recursive>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	065b      	lsls	r3, r3, #25
 8005f20:	d500      	bpl.n	8005f24 <_vfiprintf_r+0x23c>
 8005f22:	e70a      	b.n	8005d3a <_vfiprintf_r+0x52>
 8005f24:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005f26:	e70a      	b.n	8005d3e <_vfiprintf_r+0x56>
 8005f28:	ab07      	add	r3, sp, #28
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	0022      	movs	r2, r4
 8005f2e:	0029      	movs	r1, r5
 8005f30:	0030      	movs	r0, r6
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <_vfiprintf_r+0x270>)
 8005f34:	f000 f882 	bl	800603c <_printf_i>
 8005f38:	e7e3      	b.n	8005f02 <_vfiprintf_r+0x21a>
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	08007424 	.word	0x08007424
 8005f40:	08007444 	.word	0x08007444
 8005f44:	08007404 	.word	0x08007404
 8005f48:	080073d0 	.word	0x080073d0
 8005f4c:	080073d6 	.word	0x080073d6
 8005f50:	080073da 	.word	0x080073da
 8005f54:	00000000 	.word	0x00000000
 8005f58:	08005cc5 	.word	0x08005cc5

08005f5c <_printf_common>:
 8005f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f5e:	0015      	movs	r5, r2
 8005f60:	9301      	str	r3, [sp, #4]
 8005f62:	688a      	ldr	r2, [r1, #8]
 8005f64:	690b      	ldr	r3, [r1, #16]
 8005f66:	000c      	movs	r4, r1
 8005f68:	9000      	str	r0, [sp, #0]
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	da00      	bge.n	8005f70 <_printf_common+0x14>
 8005f6e:	0013      	movs	r3, r2
 8005f70:	0022      	movs	r2, r4
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	3243      	adds	r2, #67	; 0x43
 8005f76:	7812      	ldrb	r2, [r2, #0]
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d001      	beq.n	8005f80 <_printf_common+0x24>
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	602b      	str	r3, [r5, #0]
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	069b      	lsls	r3, r3, #26
 8005f84:	d502      	bpl.n	8005f8c <_printf_common+0x30>
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	3302      	adds	r3, #2
 8005f8a:	602b      	str	r3, [r5, #0]
 8005f8c:	6822      	ldr	r2, [r4, #0]
 8005f8e:	2306      	movs	r3, #6
 8005f90:	0017      	movs	r7, r2
 8005f92:	401f      	ands	r7, r3
 8005f94:	421a      	tst	r2, r3
 8005f96:	d027      	beq.n	8005fe8 <_printf_common+0x8c>
 8005f98:	0023      	movs	r3, r4
 8005f9a:	3343      	adds	r3, #67	; 0x43
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	1e5a      	subs	r2, r3, #1
 8005fa0:	4193      	sbcs	r3, r2
 8005fa2:	6822      	ldr	r2, [r4, #0]
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d430      	bmi.n	800600a <_printf_common+0xae>
 8005fa8:	0022      	movs	r2, r4
 8005faa:	9901      	ldr	r1, [sp, #4]
 8005fac:	9800      	ldr	r0, [sp, #0]
 8005fae:	9e08      	ldr	r6, [sp, #32]
 8005fb0:	3243      	adds	r2, #67	; 0x43
 8005fb2:	47b0      	blx	r6
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d025      	beq.n	8006004 <_printf_common+0xa8>
 8005fb8:	2306      	movs	r3, #6
 8005fba:	6820      	ldr	r0, [r4, #0]
 8005fbc:	682a      	ldr	r2, [r5, #0]
 8005fbe:	68e1      	ldr	r1, [r4, #12]
 8005fc0:	2500      	movs	r5, #0
 8005fc2:	4003      	ands	r3, r0
 8005fc4:	2b04      	cmp	r3, #4
 8005fc6:	d103      	bne.n	8005fd0 <_printf_common+0x74>
 8005fc8:	1a8d      	subs	r5, r1, r2
 8005fca:	43eb      	mvns	r3, r5
 8005fcc:	17db      	asrs	r3, r3, #31
 8005fce:	401d      	ands	r5, r3
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	6922      	ldr	r2, [r4, #16]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	dd01      	ble.n	8005fdc <_printf_common+0x80>
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	18ed      	adds	r5, r5, r3
 8005fdc:	2700      	movs	r7, #0
 8005fde:	42bd      	cmp	r5, r7
 8005fe0:	d120      	bne.n	8006024 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e010      	b.n	8006008 <_printf_common+0xac>
 8005fe6:	3701      	adds	r7, #1
 8005fe8:	68e3      	ldr	r3, [r4, #12]
 8005fea:	682a      	ldr	r2, [r5, #0]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	42bb      	cmp	r3, r7
 8005ff0:	ddd2      	ble.n	8005f98 <_printf_common+0x3c>
 8005ff2:	0022      	movs	r2, r4
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	9901      	ldr	r1, [sp, #4]
 8005ff8:	9800      	ldr	r0, [sp, #0]
 8005ffa:	9e08      	ldr	r6, [sp, #32]
 8005ffc:	3219      	adds	r2, #25
 8005ffe:	47b0      	blx	r6
 8006000:	1c43      	adds	r3, r0, #1
 8006002:	d1f0      	bne.n	8005fe6 <_printf_common+0x8a>
 8006004:	2001      	movs	r0, #1
 8006006:	4240      	negs	r0, r0
 8006008:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800600a:	2030      	movs	r0, #48	; 0x30
 800600c:	18e1      	adds	r1, r4, r3
 800600e:	3143      	adds	r1, #67	; 0x43
 8006010:	7008      	strb	r0, [r1, #0]
 8006012:	0021      	movs	r1, r4
 8006014:	1c5a      	adds	r2, r3, #1
 8006016:	3145      	adds	r1, #69	; 0x45
 8006018:	7809      	ldrb	r1, [r1, #0]
 800601a:	18a2      	adds	r2, r4, r2
 800601c:	3243      	adds	r2, #67	; 0x43
 800601e:	3302      	adds	r3, #2
 8006020:	7011      	strb	r1, [r2, #0]
 8006022:	e7c1      	b.n	8005fa8 <_printf_common+0x4c>
 8006024:	0022      	movs	r2, r4
 8006026:	2301      	movs	r3, #1
 8006028:	9901      	ldr	r1, [sp, #4]
 800602a:	9800      	ldr	r0, [sp, #0]
 800602c:	9e08      	ldr	r6, [sp, #32]
 800602e:	321a      	adds	r2, #26
 8006030:	47b0      	blx	r6
 8006032:	1c43      	adds	r3, r0, #1
 8006034:	d0e6      	beq.n	8006004 <_printf_common+0xa8>
 8006036:	3701      	adds	r7, #1
 8006038:	e7d1      	b.n	8005fde <_printf_common+0x82>
	...

0800603c <_printf_i>:
 800603c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603e:	b08b      	sub	sp, #44	; 0x2c
 8006040:	9206      	str	r2, [sp, #24]
 8006042:	000a      	movs	r2, r1
 8006044:	3243      	adds	r2, #67	; 0x43
 8006046:	9307      	str	r3, [sp, #28]
 8006048:	9005      	str	r0, [sp, #20]
 800604a:	9204      	str	r2, [sp, #16]
 800604c:	7e0a      	ldrb	r2, [r1, #24]
 800604e:	000c      	movs	r4, r1
 8006050:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006052:	2a78      	cmp	r2, #120	; 0x78
 8006054:	d807      	bhi.n	8006066 <_printf_i+0x2a>
 8006056:	2a62      	cmp	r2, #98	; 0x62
 8006058:	d809      	bhi.n	800606e <_printf_i+0x32>
 800605a:	2a00      	cmp	r2, #0
 800605c:	d100      	bne.n	8006060 <_printf_i+0x24>
 800605e:	e0c1      	b.n	80061e4 <_printf_i+0x1a8>
 8006060:	2a58      	cmp	r2, #88	; 0x58
 8006062:	d100      	bne.n	8006066 <_printf_i+0x2a>
 8006064:	e08c      	b.n	8006180 <_printf_i+0x144>
 8006066:	0026      	movs	r6, r4
 8006068:	3642      	adds	r6, #66	; 0x42
 800606a:	7032      	strb	r2, [r6, #0]
 800606c:	e022      	b.n	80060b4 <_printf_i+0x78>
 800606e:	0010      	movs	r0, r2
 8006070:	3863      	subs	r0, #99	; 0x63
 8006072:	2815      	cmp	r0, #21
 8006074:	d8f7      	bhi.n	8006066 <_printf_i+0x2a>
 8006076:	f7fa f847 	bl	8000108 <__gnu_thumb1_case_shi>
 800607a:	0016      	.short	0x0016
 800607c:	fff6001f 	.word	0xfff6001f
 8006080:	fff6fff6 	.word	0xfff6fff6
 8006084:	001ffff6 	.word	0x001ffff6
 8006088:	fff6fff6 	.word	0xfff6fff6
 800608c:	fff6fff6 	.word	0xfff6fff6
 8006090:	003600a8 	.word	0x003600a8
 8006094:	fff6009a 	.word	0xfff6009a
 8006098:	00b9fff6 	.word	0x00b9fff6
 800609c:	0036fff6 	.word	0x0036fff6
 80060a0:	fff6fff6 	.word	0xfff6fff6
 80060a4:	009e      	.short	0x009e
 80060a6:	0026      	movs	r6, r4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	3642      	adds	r6, #66	; 0x42
 80060ac:	1d11      	adds	r1, r2, #4
 80060ae:	6019      	str	r1, [r3, #0]
 80060b0:	6813      	ldr	r3, [r2, #0]
 80060b2:	7033      	strb	r3, [r6, #0]
 80060b4:	2301      	movs	r3, #1
 80060b6:	e0a7      	b.n	8006208 <_printf_i+0x1cc>
 80060b8:	6808      	ldr	r0, [r1, #0]
 80060ba:	6819      	ldr	r1, [r3, #0]
 80060bc:	1d0a      	adds	r2, r1, #4
 80060be:	0605      	lsls	r5, r0, #24
 80060c0:	d50b      	bpl.n	80060da <_printf_i+0x9e>
 80060c2:	680d      	ldr	r5, [r1, #0]
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	da03      	bge.n	80060d2 <_printf_i+0x96>
 80060ca:	232d      	movs	r3, #45	; 0x2d
 80060cc:	9a04      	ldr	r2, [sp, #16]
 80060ce:	426d      	negs	r5, r5
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	4b61      	ldr	r3, [pc, #388]	; (8006258 <_printf_i+0x21c>)
 80060d4:	270a      	movs	r7, #10
 80060d6:	9303      	str	r3, [sp, #12]
 80060d8:	e01b      	b.n	8006112 <_printf_i+0xd6>
 80060da:	680d      	ldr	r5, [r1, #0]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	0641      	lsls	r1, r0, #25
 80060e0:	d5f1      	bpl.n	80060c6 <_printf_i+0x8a>
 80060e2:	b22d      	sxth	r5, r5
 80060e4:	e7ef      	b.n	80060c6 <_printf_i+0x8a>
 80060e6:	680d      	ldr	r5, [r1, #0]
 80060e8:	6819      	ldr	r1, [r3, #0]
 80060ea:	1d08      	adds	r0, r1, #4
 80060ec:	6018      	str	r0, [r3, #0]
 80060ee:	062e      	lsls	r6, r5, #24
 80060f0:	d501      	bpl.n	80060f6 <_printf_i+0xba>
 80060f2:	680d      	ldr	r5, [r1, #0]
 80060f4:	e003      	b.n	80060fe <_printf_i+0xc2>
 80060f6:	066d      	lsls	r5, r5, #25
 80060f8:	d5fb      	bpl.n	80060f2 <_printf_i+0xb6>
 80060fa:	680d      	ldr	r5, [r1, #0]
 80060fc:	b2ad      	uxth	r5, r5
 80060fe:	4b56      	ldr	r3, [pc, #344]	; (8006258 <_printf_i+0x21c>)
 8006100:	2708      	movs	r7, #8
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	2a6f      	cmp	r2, #111	; 0x6f
 8006106:	d000      	beq.n	800610a <_printf_i+0xce>
 8006108:	3702      	adds	r7, #2
 800610a:	0023      	movs	r3, r4
 800610c:	2200      	movs	r2, #0
 800610e:	3343      	adds	r3, #67	; 0x43
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	6863      	ldr	r3, [r4, #4]
 8006114:	60a3      	str	r3, [r4, #8]
 8006116:	2b00      	cmp	r3, #0
 8006118:	db03      	blt.n	8006122 <_printf_i+0xe6>
 800611a:	2204      	movs	r2, #4
 800611c:	6821      	ldr	r1, [r4, #0]
 800611e:	4391      	bics	r1, r2
 8006120:	6021      	str	r1, [r4, #0]
 8006122:	2d00      	cmp	r5, #0
 8006124:	d102      	bne.n	800612c <_printf_i+0xf0>
 8006126:	9e04      	ldr	r6, [sp, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <_printf_i+0x10a>
 800612c:	9e04      	ldr	r6, [sp, #16]
 800612e:	0028      	movs	r0, r5
 8006130:	0039      	movs	r1, r7
 8006132:	f7fa f879 	bl	8000228 <__aeabi_uidivmod>
 8006136:	9b03      	ldr	r3, [sp, #12]
 8006138:	3e01      	subs	r6, #1
 800613a:	5c5b      	ldrb	r3, [r3, r1]
 800613c:	7033      	strb	r3, [r6, #0]
 800613e:	002b      	movs	r3, r5
 8006140:	0005      	movs	r5, r0
 8006142:	429f      	cmp	r7, r3
 8006144:	d9f3      	bls.n	800612e <_printf_i+0xf2>
 8006146:	2f08      	cmp	r7, #8
 8006148:	d109      	bne.n	800615e <_printf_i+0x122>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	07db      	lsls	r3, r3, #31
 800614e:	d506      	bpl.n	800615e <_printf_i+0x122>
 8006150:	6863      	ldr	r3, [r4, #4]
 8006152:	6922      	ldr	r2, [r4, #16]
 8006154:	4293      	cmp	r3, r2
 8006156:	dc02      	bgt.n	800615e <_printf_i+0x122>
 8006158:	2330      	movs	r3, #48	; 0x30
 800615a:	3e01      	subs	r6, #1
 800615c:	7033      	strb	r3, [r6, #0]
 800615e:	9b04      	ldr	r3, [sp, #16]
 8006160:	1b9b      	subs	r3, r3, r6
 8006162:	6123      	str	r3, [r4, #16]
 8006164:	9b07      	ldr	r3, [sp, #28]
 8006166:	0021      	movs	r1, r4
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	9805      	ldr	r0, [sp, #20]
 800616c:	9b06      	ldr	r3, [sp, #24]
 800616e:	aa09      	add	r2, sp, #36	; 0x24
 8006170:	f7ff fef4 	bl	8005f5c <_printf_common>
 8006174:	1c43      	adds	r3, r0, #1
 8006176:	d14c      	bne.n	8006212 <_printf_i+0x1d6>
 8006178:	2001      	movs	r0, #1
 800617a:	4240      	negs	r0, r0
 800617c:	b00b      	add	sp, #44	; 0x2c
 800617e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006180:	3145      	adds	r1, #69	; 0x45
 8006182:	700a      	strb	r2, [r1, #0]
 8006184:	4a34      	ldr	r2, [pc, #208]	; (8006258 <_printf_i+0x21c>)
 8006186:	9203      	str	r2, [sp, #12]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	6821      	ldr	r1, [r4, #0]
 800618c:	ca20      	ldmia	r2!, {r5}
 800618e:	601a      	str	r2, [r3, #0]
 8006190:	0608      	lsls	r0, r1, #24
 8006192:	d516      	bpl.n	80061c2 <_printf_i+0x186>
 8006194:	07cb      	lsls	r3, r1, #31
 8006196:	d502      	bpl.n	800619e <_printf_i+0x162>
 8006198:	2320      	movs	r3, #32
 800619a:	4319      	orrs	r1, r3
 800619c:	6021      	str	r1, [r4, #0]
 800619e:	2710      	movs	r7, #16
 80061a0:	2d00      	cmp	r5, #0
 80061a2:	d1b2      	bne.n	800610a <_printf_i+0xce>
 80061a4:	2320      	movs	r3, #32
 80061a6:	6822      	ldr	r2, [r4, #0]
 80061a8:	439a      	bics	r2, r3
 80061aa:	6022      	str	r2, [r4, #0]
 80061ac:	e7ad      	b.n	800610a <_printf_i+0xce>
 80061ae:	2220      	movs	r2, #32
 80061b0:	6809      	ldr	r1, [r1, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	6022      	str	r2, [r4, #0]
 80061b6:	0022      	movs	r2, r4
 80061b8:	2178      	movs	r1, #120	; 0x78
 80061ba:	3245      	adds	r2, #69	; 0x45
 80061bc:	7011      	strb	r1, [r2, #0]
 80061be:	4a27      	ldr	r2, [pc, #156]	; (800625c <_printf_i+0x220>)
 80061c0:	e7e1      	b.n	8006186 <_printf_i+0x14a>
 80061c2:	0648      	lsls	r0, r1, #25
 80061c4:	d5e6      	bpl.n	8006194 <_printf_i+0x158>
 80061c6:	b2ad      	uxth	r5, r5
 80061c8:	e7e4      	b.n	8006194 <_printf_i+0x158>
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	680d      	ldr	r5, [r1, #0]
 80061ce:	1d10      	adds	r0, r2, #4
 80061d0:	6949      	ldr	r1, [r1, #20]
 80061d2:	6018      	str	r0, [r3, #0]
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	062e      	lsls	r6, r5, #24
 80061d8:	d501      	bpl.n	80061de <_printf_i+0x1a2>
 80061da:	6019      	str	r1, [r3, #0]
 80061dc:	e002      	b.n	80061e4 <_printf_i+0x1a8>
 80061de:	066d      	lsls	r5, r5, #25
 80061e0:	d5fb      	bpl.n	80061da <_printf_i+0x19e>
 80061e2:	8019      	strh	r1, [r3, #0]
 80061e4:	2300      	movs	r3, #0
 80061e6:	9e04      	ldr	r6, [sp, #16]
 80061e8:	6123      	str	r3, [r4, #16]
 80061ea:	e7bb      	b.n	8006164 <_printf_i+0x128>
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	1d11      	adds	r1, r2, #4
 80061f0:	6019      	str	r1, [r3, #0]
 80061f2:	6816      	ldr	r6, [r2, #0]
 80061f4:	2100      	movs	r1, #0
 80061f6:	0030      	movs	r0, r6
 80061f8:	6862      	ldr	r2, [r4, #4]
 80061fa:	f000 fb65 	bl	80068c8 <memchr>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d001      	beq.n	8006206 <_printf_i+0x1ca>
 8006202:	1b80      	subs	r0, r0, r6
 8006204:	6060      	str	r0, [r4, #4]
 8006206:	6863      	ldr	r3, [r4, #4]
 8006208:	6123      	str	r3, [r4, #16]
 800620a:	2300      	movs	r3, #0
 800620c:	9a04      	ldr	r2, [sp, #16]
 800620e:	7013      	strb	r3, [r2, #0]
 8006210:	e7a8      	b.n	8006164 <_printf_i+0x128>
 8006212:	6923      	ldr	r3, [r4, #16]
 8006214:	0032      	movs	r2, r6
 8006216:	9906      	ldr	r1, [sp, #24]
 8006218:	9805      	ldr	r0, [sp, #20]
 800621a:	9d07      	ldr	r5, [sp, #28]
 800621c:	47a8      	blx	r5
 800621e:	1c43      	adds	r3, r0, #1
 8006220:	d0aa      	beq.n	8006178 <_printf_i+0x13c>
 8006222:	6823      	ldr	r3, [r4, #0]
 8006224:	079b      	lsls	r3, r3, #30
 8006226:	d415      	bmi.n	8006254 <_printf_i+0x218>
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	68e0      	ldr	r0, [r4, #12]
 800622c:	4298      	cmp	r0, r3
 800622e:	daa5      	bge.n	800617c <_printf_i+0x140>
 8006230:	0018      	movs	r0, r3
 8006232:	e7a3      	b.n	800617c <_printf_i+0x140>
 8006234:	0022      	movs	r2, r4
 8006236:	2301      	movs	r3, #1
 8006238:	9906      	ldr	r1, [sp, #24]
 800623a:	9805      	ldr	r0, [sp, #20]
 800623c:	9e07      	ldr	r6, [sp, #28]
 800623e:	3219      	adds	r2, #25
 8006240:	47b0      	blx	r6
 8006242:	1c43      	adds	r3, r0, #1
 8006244:	d098      	beq.n	8006178 <_printf_i+0x13c>
 8006246:	3501      	adds	r5, #1
 8006248:	68e3      	ldr	r3, [r4, #12]
 800624a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800624c:	1a9b      	subs	r3, r3, r2
 800624e:	42ab      	cmp	r3, r5
 8006250:	dcf0      	bgt.n	8006234 <_printf_i+0x1f8>
 8006252:	e7e9      	b.n	8006228 <_printf_i+0x1ec>
 8006254:	2500      	movs	r5, #0
 8006256:	e7f7      	b.n	8006248 <_printf_i+0x20c>
 8006258:	080073e1 	.word	0x080073e1
 800625c:	080073f2 	.word	0x080073f2

08006260 <siprintf>:
 8006260:	b40e      	push	{r1, r2, r3}
 8006262:	b500      	push	{lr}
 8006264:	490b      	ldr	r1, [pc, #44]	; (8006294 <siprintf+0x34>)
 8006266:	b09c      	sub	sp, #112	; 0x70
 8006268:	ab1d      	add	r3, sp, #116	; 0x74
 800626a:	9002      	str	r0, [sp, #8]
 800626c:	9006      	str	r0, [sp, #24]
 800626e:	9107      	str	r1, [sp, #28]
 8006270:	9104      	str	r1, [sp, #16]
 8006272:	4809      	ldr	r0, [pc, #36]	; (8006298 <siprintf+0x38>)
 8006274:	4909      	ldr	r1, [pc, #36]	; (800629c <siprintf+0x3c>)
 8006276:	cb04      	ldmia	r3!, {r2}
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	a902      	add	r1, sp, #8
 800627e:	9301      	str	r3, [sp, #4]
 8006280:	f000 fcb4 	bl	8006bec <_svfiprintf_r>
 8006284:	2300      	movs	r3, #0
 8006286:	9a02      	ldr	r2, [sp, #8]
 8006288:	7013      	strb	r3, [r2, #0]
 800628a:	b01c      	add	sp, #112	; 0x70
 800628c:	bc08      	pop	{r3}
 800628e:	b003      	add	sp, #12
 8006290:	4718      	bx	r3
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	7fffffff 	.word	0x7fffffff
 8006298:	200001c4 	.word	0x200001c4
 800629c:	ffff0208 	.word	0xffff0208

080062a0 <__swbuf_r>:
 80062a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a2:	0005      	movs	r5, r0
 80062a4:	000e      	movs	r6, r1
 80062a6:	0014      	movs	r4, r2
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d004      	beq.n	80062b6 <__swbuf_r+0x16>
 80062ac:	6983      	ldr	r3, [r0, #24]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d101      	bne.n	80062b6 <__swbuf_r+0x16>
 80062b2:	f000 f9f9 	bl	80066a8 <__sinit>
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <__swbuf_r+0xa0>)
 80062b8:	429c      	cmp	r4, r3
 80062ba:	d12e      	bne.n	800631a <__swbuf_r+0x7a>
 80062bc:	686c      	ldr	r4, [r5, #4]
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	071b      	lsls	r3, r3, #28
 80062c6:	d532      	bpl.n	800632e <__swbuf_r+0x8e>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02f      	beq.n	800632e <__swbuf_r+0x8e>
 80062ce:	6823      	ldr	r3, [r4, #0]
 80062d0:	6922      	ldr	r2, [r4, #16]
 80062d2:	b2f7      	uxtb	r7, r6
 80062d4:	1a98      	subs	r0, r3, r2
 80062d6:	6963      	ldr	r3, [r4, #20]
 80062d8:	b2f6      	uxtb	r6, r6
 80062da:	4283      	cmp	r3, r0
 80062dc:	dc05      	bgt.n	80062ea <__swbuf_r+0x4a>
 80062de:	0021      	movs	r1, r4
 80062e0:	0028      	movs	r0, r5
 80062e2:	f000 f93f 	bl	8006564 <_fflush_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d127      	bne.n	800633a <__swbuf_r+0x9a>
 80062ea:	68a3      	ldr	r3, [r4, #8]
 80062ec:	3001      	adds	r0, #1
 80062ee:	3b01      	subs	r3, #1
 80062f0:	60a3      	str	r3, [r4, #8]
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	6022      	str	r2, [r4, #0]
 80062f8:	701f      	strb	r7, [r3, #0]
 80062fa:	6963      	ldr	r3, [r4, #20]
 80062fc:	4283      	cmp	r3, r0
 80062fe:	d004      	beq.n	800630a <__swbuf_r+0x6a>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	07db      	lsls	r3, r3, #31
 8006304:	d507      	bpl.n	8006316 <__swbuf_r+0x76>
 8006306:	2e0a      	cmp	r6, #10
 8006308:	d105      	bne.n	8006316 <__swbuf_r+0x76>
 800630a:	0021      	movs	r1, r4
 800630c:	0028      	movs	r0, r5
 800630e:	f000 f929 	bl	8006564 <_fflush_r>
 8006312:	2800      	cmp	r0, #0
 8006314:	d111      	bne.n	800633a <__swbuf_r+0x9a>
 8006316:	0030      	movs	r0, r6
 8006318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <__swbuf_r+0xa4>)
 800631c:	429c      	cmp	r4, r3
 800631e:	d101      	bne.n	8006324 <__swbuf_r+0x84>
 8006320:	68ac      	ldr	r4, [r5, #8]
 8006322:	e7cc      	b.n	80062be <__swbuf_r+0x1e>
 8006324:	4b08      	ldr	r3, [pc, #32]	; (8006348 <__swbuf_r+0xa8>)
 8006326:	429c      	cmp	r4, r3
 8006328:	d1c9      	bne.n	80062be <__swbuf_r+0x1e>
 800632a:	68ec      	ldr	r4, [r5, #12]
 800632c:	e7c7      	b.n	80062be <__swbuf_r+0x1e>
 800632e:	0021      	movs	r1, r4
 8006330:	0028      	movs	r0, r5
 8006332:	f000 f80b 	bl	800634c <__swsetup_r>
 8006336:	2800      	cmp	r0, #0
 8006338:	d0c9      	beq.n	80062ce <__swbuf_r+0x2e>
 800633a:	2601      	movs	r6, #1
 800633c:	4276      	negs	r6, r6
 800633e:	e7ea      	b.n	8006316 <__swbuf_r+0x76>
 8006340:	08007424 	.word	0x08007424
 8006344:	08007444 	.word	0x08007444
 8006348:	08007404 	.word	0x08007404

0800634c <__swsetup_r>:
 800634c:	4b37      	ldr	r3, [pc, #220]	; (800642c <__swsetup_r+0xe0>)
 800634e:	b570      	push	{r4, r5, r6, lr}
 8006350:	681d      	ldr	r5, [r3, #0]
 8006352:	0006      	movs	r6, r0
 8006354:	000c      	movs	r4, r1
 8006356:	2d00      	cmp	r5, #0
 8006358:	d005      	beq.n	8006366 <__swsetup_r+0x1a>
 800635a:	69ab      	ldr	r3, [r5, #24]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d102      	bne.n	8006366 <__swsetup_r+0x1a>
 8006360:	0028      	movs	r0, r5
 8006362:	f000 f9a1 	bl	80066a8 <__sinit>
 8006366:	4b32      	ldr	r3, [pc, #200]	; (8006430 <__swsetup_r+0xe4>)
 8006368:	429c      	cmp	r4, r3
 800636a:	d10f      	bne.n	800638c <__swsetup_r+0x40>
 800636c:	686c      	ldr	r4, [r5, #4]
 800636e:	230c      	movs	r3, #12
 8006370:	5ee2      	ldrsh	r2, [r4, r3]
 8006372:	b293      	uxth	r3, r2
 8006374:	0711      	lsls	r1, r2, #28
 8006376:	d42d      	bmi.n	80063d4 <__swsetup_r+0x88>
 8006378:	06d9      	lsls	r1, r3, #27
 800637a:	d411      	bmi.n	80063a0 <__swsetup_r+0x54>
 800637c:	2309      	movs	r3, #9
 800637e:	2001      	movs	r0, #1
 8006380:	6033      	str	r3, [r6, #0]
 8006382:	3337      	adds	r3, #55	; 0x37
 8006384:	4313      	orrs	r3, r2
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	4240      	negs	r0, r0
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	4b29      	ldr	r3, [pc, #164]	; (8006434 <__swsetup_r+0xe8>)
 800638e:	429c      	cmp	r4, r3
 8006390:	d101      	bne.n	8006396 <__swsetup_r+0x4a>
 8006392:	68ac      	ldr	r4, [r5, #8]
 8006394:	e7eb      	b.n	800636e <__swsetup_r+0x22>
 8006396:	4b28      	ldr	r3, [pc, #160]	; (8006438 <__swsetup_r+0xec>)
 8006398:	429c      	cmp	r4, r3
 800639a:	d1e8      	bne.n	800636e <__swsetup_r+0x22>
 800639c:	68ec      	ldr	r4, [r5, #12]
 800639e:	e7e6      	b.n	800636e <__swsetup_r+0x22>
 80063a0:	075b      	lsls	r3, r3, #29
 80063a2:	d513      	bpl.n	80063cc <__swsetup_r+0x80>
 80063a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063a6:	2900      	cmp	r1, #0
 80063a8:	d008      	beq.n	80063bc <__swsetup_r+0x70>
 80063aa:	0023      	movs	r3, r4
 80063ac:	3344      	adds	r3, #68	; 0x44
 80063ae:	4299      	cmp	r1, r3
 80063b0:	d002      	beq.n	80063b8 <__swsetup_r+0x6c>
 80063b2:	0030      	movs	r0, r6
 80063b4:	f000 faa6 	bl	8006904 <_free_r>
 80063b8:	2300      	movs	r3, #0
 80063ba:	6363      	str	r3, [r4, #52]	; 0x34
 80063bc:	2224      	movs	r2, #36	; 0x24
 80063be:	89a3      	ldrh	r3, [r4, #12]
 80063c0:	4393      	bics	r3, r2
 80063c2:	81a3      	strh	r3, [r4, #12]
 80063c4:	2300      	movs	r3, #0
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	6923      	ldr	r3, [r4, #16]
 80063ca:	6023      	str	r3, [r4, #0]
 80063cc:	2308      	movs	r3, #8
 80063ce:	89a2      	ldrh	r2, [r4, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	81a3      	strh	r3, [r4, #12]
 80063d4:	6923      	ldr	r3, [r4, #16]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d10b      	bne.n	80063f2 <__swsetup_r+0xa6>
 80063da:	21a0      	movs	r1, #160	; 0xa0
 80063dc:	2280      	movs	r2, #128	; 0x80
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	0089      	lsls	r1, r1, #2
 80063e2:	0092      	lsls	r2, r2, #2
 80063e4:	400b      	ands	r3, r1
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d003      	beq.n	80063f2 <__swsetup_r+0xa6>
 80063ea:	0021      	movs	r1, r4
 80063ec:	0030      	movs	r0, r6
 80063ee:	f000 fa27 	bl	8006840 <__smakebuf_r>
 80063f2:	220c      	movs	r2, #12
 80063f4:	5ea3      	ldrsh	r3, [r4, r2]
 80063f6:	2001      	movs	r0, #1
 80063f8:	001a      	movs	r2, r3
 80063fa:	b299      	uxth	r1, r3
 80063fc:	4002      	ands	r2, r0
 80063fe:	4203      	tst	r3, r0
 8006400:	d00f      	beq.n	8006422 <__swsetup_r+0xd6>
 8006402:	2200      	movs	r2, #0
 8006404:	60a2      	str	r2, [r4, #8]
 8006406:	6962      	ldr	r2, [r4, #20]
 8006408:	4252      	negs	r2, r2
 800640a:	61a2      	str	r2, [r4, #24]
 800640c:	2000      	movs	r0, #0
 800640e:	6922      	ldr	r2, [r4, #16]
 8006410:	4282      	cmp	r2, r0
 8006412:	d1ba      	bne.n	800638a <__swsetup_r+0x3e>
 8006414:	060a      	lsls	r2, r1, #24
 8006416:	d5b8      	bpl.n	800638a <__swsetup_r+0x3e>
 8006418:	2240      	movs	r2, #64	; 0x40
 800641a:	4313      	orrs	r3, r2
 800641c:	81a3      	strh	r3, [r4, #12]
 800641e:	3801      	subs	r0, #1
 8006420:	e7b3      	b.n	800638a <__swsetup_r+0x3e>
 8006422:	0788      	lsls	r0, r1, #30
 8006424:	d400      	bmi.n	8006428 <__swsetup_r+0xdc>
 8006426:	6962      	ldr	r2, [r4, #20]
 8006428:	60a2      	str	r2, [r4, #8]
 800642a:	e7ef      	b.n	800640c <__swsetup_r+0xc0>
 800642c:	200001c4 	.word	0x200001c4
 8006430:	08007424 	.word	0x08007424
 8006434:	08007444 	.word	0x08007444
 8006438:	08007404 	.word	0x08007404

0800643c <abort>:
 800643c:	2006      	movs	r0, #6
 800643e:	b510      	push	{r4, lr}
 8006440:	f000 fd10 	bl	8006e64 <raise>
 8006444:	2001      	movs	r0, #1
 8006446:	f7fd f8a4 	bl	8003592 <_exit>
	...

0800644c <__sflush_r>:
 800644c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800644e:	898b      	ldrh	r3, [r1, #12]
 8006450:	0005      	movs	r5, r0
 8006452:	000c      	movs	r4, r1
 8006454:	071a      	lsls	r2, r3, #28
 8006456:	d45f      	bmi.n	8006518 <__sflush_r+0xcc>
 8006458:	684a      	ldr	r2, [r1, #4]
 800645a:	2a00      	cmp	r2, #0
 800645c:	dc04      	bgt.n	8006468 <__sflush_r+0x1c>
 800645e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006460:	2a00      	cmp	r2, #0
 8006462:	dc01      	bgt.n	8006468 <__sflush_r+0x1c>
 8006464:	2000      	movs	r0, #0
 8006466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006468:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800646a:	2f00      	cmp	r7, #0
 800646c:	d0fa      	beq.n	8006464 <__sflush_r+0x18>
 800646e:	2200      	movs	r2, #0
 8006470:	2180      	movs	r1, #128	; 0x80
 8006472:	682e      	ldr	r6, [r5, #0]
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	001a      	movs	r2, r3
 8006478:	0149      	lsls	r1, r1, #5
 800647a:	400a      	ands	r2, r1
 800647c:	420b      	tst	r3, r1
 800647e:	d034      	beq.n	80064ea <__sflush_r+0x9e>
 8006480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006482:	89a3      	ldrh	r3, [r4, #12]
 8006484:	075b      	lsls	r3, r3, #29
 8006486:	d506      	bpl.n	8006496 <__sflush_r+0x4a>
 8006488:	6863      	ldr	r3, [r4, #4]
 800648a:	1ac0      	subs	r0, r0, r3
 800648c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <__sflush_r+0x4a>
 8006492:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	0002      	movs	r2, r0
 8006498:	6a21      	ldr	r1, [r4, #32]
 800649a:	2300      	movs	r3, #0
 800649c:	0028      	movs	r0, r5
 800649e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80064a0:	47b8      	blx	r7
 80064a2:	89a1      	ldrh	r1, [r4, #12]
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	d106      	bne.n	80064b6 <__sflush_r+0x6a>
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	2b1d      	cmp	r3, #29
 80064ac:	d831      	bhi.n	8006512 <__sflush_r+0xc6>
 80064ae:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <__sflush_r+0x114>)
 80064b0:	40da      	lsrs	r2, r3
 80064b2:	07d3      	lsls	r3, r2, #31
 80064b4:	d52d      	bpl.n	8006512 <__sflush_r+0xc6>
 80064b6:	2300      	movs	r3, #0
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	04cb      	lsls	r3, r1, #19
 80064c0:	d505      	bpl.n	80064ce <__sflush_r+0x82>
 80064c2:	1c43      	adds	r3, r0, #1
 80064c4:	d102      	bne.n	80064cc <__sflush_r+0x80>
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d100      	bne.n	80064ce <__sflush_r+0x82>
 80064cc:	6560      	str	r0, [r4, #84]	; 0x54
 80064ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d0:	602e      	str	r6, [r5, #0]
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d0c6      	beq.n	8006464 <__sflush_r+0x18>
 80064d6:	0023      	movs	r3, r4
 80064d8:	3344      	adds	r3, #68	; 0x44
 80064da:	4299      	cmp	r1, r3
 80064dc:	d002      	beq.n	80064e4 <__sflush_r+0x98>
 80064de:	0028      	movs	r0, r5
 80064e0:	f000 fa10 	bl	8006904 <_free_r>
 80064e4:	2000      	movs	r0, #0
 80064e6:	6360      	str	r0, [r4, #52]	; 0x34
 80064e8:	e7bd      	b.n	8006466 <__sflush_r+0x1a>
 80064ea:	2301      	movs	r3, #1
 80064ec:	0028      	movs	r0, r5
 80064ee:	6a21      	ldr	r1, [r4, #32]
 80064f0:	47b8      	blx	r7
 80064f2:	1c43      	adds	r3, r0, #1
 80064f4:	d1c5      	bne.n	8006482 <__sflush_r+0x36>
 80064f6:	682b      	ldr	r3, [r5, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d0c2      	beq.n	8006482 <__sflush_r+0x36>
 80064fc:	2b1d      	cmp	r3, #29
 80064fe:	d001      	beq.n	8006504 <__sflush_r+0xb8>
 8006500:	2b16      	cmp	r3, #22
 8006502:	d101      	bne.n	8006508 <__sflush_r+0xbc>
 8006504:	602e      	str	r6, [r5, #0]
 8006506:	e7ad      	b.n	8006464 <__sflush_r+0x18>
 8006508:	2340      	movs	r3, #64	; 0x40
 800650a:	89a2      	ldrh	r2, [r4, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	81a3      	strh	r3, [r4, #12]
 8006510:	e7a9      	b.n	8006466 <__sflush_r+0x1a>
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	430b      	orrs	r3, r1
 8006516:	e7fa      	b.n	800650e <__sflush_r+0xc2>
 8006518:	690f      	ldr	r7, [r1, #16]
 800651a:	2f00      	cmp	r7, #0
 800651c:	d0a2      	beq.n	8006464 <__sflush_r+0x18>
 800651e:	680a      	ldr	r2, [r1, #0]
 8006520:	600f      	str	r7, [r1, #0]
 8006522:	1bd2      	subs	r2, r2, r7
 8006524:	9201      	str	r2, [sp, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	079b      	lsls	r3, r3, #30
 800652a:	d100      	bne.n	800652e <__sflush_r+0xe2>
 800652c:	694a      	ldr	r2, [r1, #20]
 800652e:	60a2      	str	r2, [r4, #8]
 8006530:	9b01      	ldr	r3, [sp, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	dc00      	bgt.n	8006538 <__sflush_r+0xec>
 8006536:	e795      	b.n	8006464 <__sflush_r+0x18>
 8006538:	003a      	movs	r2, r7
 800653a:	0028      	movs	r0, r5
 800653c:	9b01      	ldr	r3, [sp, #4]
 800653e:	6a21      	ldr	r1, [r4, #32]
 8006540:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006542:	47b0      	blx	r6
 8006544:	2800      	cmp	r0, #0
 8006546:	dc06      	bgt.n	8006556 <__sflush_r+0x10a>
 8006548:	2340      	movs	r3, #64	; 0x40
 800654a:	2001      	movs	r0, #1
 800654c:	89a2      	ldrh	r2, [r4, #12]
 800654e:	4240      	negs	r0, r0
 8006550:	4313      	orrs	r3, r2
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	e787      	b.n	8006466 <__sflush_r+0x1a>
 8006556:	9b01      	ldr	r3, [sp, #4]
 8006558:	183f      	adds	r7, r7, r0
 800655a:	1a1b      	subs	r3, r3, r0
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	e7e7      	b.n	8006530 <__sflush_r+0xe4>
 8006560:	20400001 	.word	0x20400001

08006564 <_fflush_r>:
 8006564:	690b      	ldr	r3, [r1, #16]
 8006566:	b570      	push	{r4, r5, r6, lr}
 8006568:	0005      	movs	r5, r0
 800656a:	000c      	movs	r4, r1
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <_fflush_r+0x12>
 8006570:	2500      	movs	r5, #0
 8006572:	0028      	movs	r0, r5
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	2800      	cmp	r0, #0
 8006578:	d004      	beq.n	8006584 <_fflush_r+0x20>
 800657a:	6983      	ldr	r3, [r0, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <_fflush_r+0x20>
 8006580:	f000 f892 	bl	80066a8 <__sinit>
 8006584:	4b14      	ldr	r3, [pc, #80]	; (80065d8 <_fflush_r+0x74>)
 8006586:	429c      	cmp	r4, r3
 8006588:	d11b      	bne.n	80065c2 <_fflush_r+0x5e>
 800658a:	686c      	ldr	r4, [r5, #4]
 800658c:	220c      	movs	r2, #12
 800658e:	5ea3      	ldrsh	r3, [r4, r2]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d0ed      	beq.n	8006570 <_fflush_r+0xc>
 8006594:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006596:	07d2      	lsls	r2, r2, #31
 8006598:	d404      	bmi.n	80065a4 <_fflush_r+0x40>
 800659a:	059b      	lsls	r3, r3, #22
 800659c:	d402      	bmi.n	80065a4 <_fflush_r+0x40>
 800659e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a0:	f000 f923 	bl	80067ea <__retarget_lock_acquire_recursive>
 80065a4:	0028      	movs	r0, r5
 80065a6:	0021      	movs	r1, r4
 80065a8:	f7ff ff50 	bl	800644c <__sflush_r>
 80065ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065ae:	0005      	movs	r5, r0
 80065b0:	07db      	lsls	r3, r3, #31
 80065b2:	d4de      	bmi.n	8006572 <_fflush_r+0xe>
 80065b4:	89a3      	ldrh	r3, [r4, #12]
 80065b6:	059b      	lsls	r3, r3, #22
 80065b8:	d4db      	bmi.n	8006572 <_fflush_r+0xe>
 80065ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065bc:	f000 f916 	bl	80067ec <__retarget_lock_release_recursive>
 80065c0:	e7d7      	b.n	8006572 <_fflush_r+0xe>
 80065c2:	4b06      	ldr	r3, [pc, #24]	; (80065dc <_fflush_r+0x78>)
 80065c4:	429c      	cmp	r4, r3
 80065c6:	d101      	bne.n	80065cc <_fflush_r+0x68>
 80065c8:	68ac      	ldr	r4, [r5, #8]
 80065ca:	e7df      	b.n	800658c <_fflush_r+0x28>
 80065cc:	4b04      	ldr	r3, [pc, #16]	; (80065e0 <_fflush_r+0x7c>)
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d1dc      	bne.n	800658c <_fflush_r+0x28>
 80065d2:	68ec      	ldr	r4, [r5, #12]
 80065d4:	e7da      	b.n	800658c <_fflush_r+0x28>
 80065d6:	46c0      	nop			; (mov r8, r8)
 80065d8:	08007424 	.word	0x08007424
 80065dc:	08007444 	.word	0x08007444
 80065e0:	08007404 	.word	0x08007404

080065e4 <std>:
 80065e4:	2300      	movs	r3, #0
 80065e6:	b510      	push	{r4, lr}
 80065e8:	0004      	movs	r4, r0
 80065ea:	6003      	str	r3, [r0, #0]
 80065ec:	6043      	str	r3, [r0, #4]
 80065ee:	6083      	str	r3, [r0, #8]
 80065f0:	8181      	strh	r1, [r0, #12]
 80065f2:	6643      	str	r3, [r0, #100]	; 0x64
 80065f4:	0019      	movs	r1, r3
 80065f6:	81c2      	strh	r2, [r0, #14]
 80065f8:	6103      	str	r3, [r0, #16]
 80065fa:	6143      	str	r3, [r0, #20]
 80065fc:	6183      	str	r3, [r0, #24]
 80065fe:	2208      	movs	r2, #8
 8006600:	305c      	adds	r0, #92	; 0x5c
 8006602:	f7ff fb42 	bl	8005c8a <memset>
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <std+0x38>)
 8006608:	6224      	str	r4, [r4, #32]
 800660a:	6263      	str	r3, [r4, #36]	; 0x24
 800660c:	4b04      	ldr	r3, [pc, #16]	; (8006620 <std+0x3c>)
 800660e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006610:	4b04      	ldr	r3, [pc, #16]	; (8006624 <std+0x40>)
 8006612:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006614:	4b04      	ldr	r3, [pc, #16]	; (8006628 <std+0x44>)
 8006616:	6323      	str	r3, [r4, #48]	; 0x30
 8006618:	bd10      	pop	{r4, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	08006ea5 	.word	0x08006ea5
 8006620:	08006ecd 	.word	0x08006ecd
 8006624:	08006f05 	.word	0x08006f05
 8006628:	08006f31 	.word	0x08006f31

0800662c <_cleanup_r>:
 800662c:	b510      	push	{r4, lr}
 800662e:	4902      	ldr	r1, [pc, #8]	; (8006638 <_cleanup_r+0xc>)
 8006630:	f000 f8ba 	bl	80067a8 <_fwalk_reent>
 8006634:	bd10      	pop	{r4, pc}
 8006636:	46c0      	nop			; (mov r8, r8)
 8006638:	08006565 	.word	0x08006565

0800663c <__sfmoreglue>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	2568      	movs	r5, #104	; 0x68
 8006640:	1e4a      	subs	r2, r1, #1
 8006642:	4355      	muls	r5, r2
 8006644:	000e      	movs	r6, r1
 8006646:	0029      	movs	r1, r5
 8006648:	3174      	adds	r1, #116	; 0x74
 800664a:	f000 f9c7 	bl	80069dc <_malloc_r>
 800664e:	1e04      	subs	r4, r0, #0
 8006650:	d008      	beq.n	8006664 <__sfmoreglue+0x28>
 8006652:	2100      	movs	r1, #0
 8006654:	002a      	movs	r2, r5
 8006656:	6001      	str	r1, [r0, #0]
 8006658:	6046      	str	r6, [r0, #4]
 800665a:	300c      	adds	r0, #12
 800665c:	60a0      	str	r0, [r4, #8]
 800665e:	3268      	adds	r2, #104	; 0x68
 8006660:	f7ff fb13 	bl	8005c8a <memset>
 8006664:	0020      	movs	r0, r4
 8006666:	bd70      	pop	{r4, r5, r6, pc}

08006668 <__sfp_lock_acquire>:
 8006668:	b510      	push	{r4, lr}
 800666a:	4802      	ldr	r0, [pc, #8]	; (8006674 <__sfp_lock_acquire+0xc>)
 800666c:	f000 f8bd 	bl	80067ea <__retarget_lock_acquire_recursive>
 8006670:	bd10      	pop	{r4, pc}
 8006672:	46c0      	nop			; (mov r8, r8)
 8006674:	20000345 	.word	0x20000345

08006678 <__sfp_lock_release>:
 8006678:	b510      	push	{r4, lr}
 800667a:	4802      	ldr	r0, [pc, #8]	; (8006684 <__sfp_lock_release+0xc>)
 800667c:	f000 f8b6 	bl	80067ec <__retarget_lock_release_recursive>
 8006680:	bd10      	pop	{r4, pc}
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	20000345 	.word	0x20000345

08006688 <__sinit_lock_acquire>:
 8006688:	b510      	push	{r4, lr}
 800668a:	4802      	ldr	r0, [pc, #8]	; (8006694 <__sinit_lock_acquire+0xc>)
 800668c:	f000 f8ad 	bl	80067ea <__retarget_lock_acquire_recursive>
 8006690:	bd10      	pop	{r4, pc}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	20000346 	.word	0x20000346

08006698 <__sinit_lock_release>:
 8006698:	b510      	push	{r4, lr}
 800669a:	4802      	ldr	r0, [pc, #8]	; (80066a4 <__sinit_lock_release+0xc>)
 800669c:	f000 f8a6 	bl	80067ec <__retarget_lock_release_recursive>
 80066a0:	bd10      	pop	{r4, pc}
 80066a2:	46c0      	nop			; (mov r8, r8)
 80066a4:	20000346 	.word	0x20000346

080066a8 <__sinit>:
 80066a8:	b513      	push	{r0, r1, r4, lr}
 80066aa:	0004      	movs	r4, r0
 80066ac:	f7ff ffec 	bl	8006688 <__sinit_lock_acquire>
 80066b0:	69a3      	ldr	r3, [r4, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <__sinit+0x14>
 80066b6:	f7ff ffef 	bl	8006698 <__sinit_lock_release>
 80066ba:	bd13      	pop	{r0, r1, r4, pc}
 80066bc:	64a3      	str	r3, [r4, #72]	; 0x48
 80066be:	64e3      	str	r3, [r4, #76]	; 0x4c
 80066c0:	6523      	str	r3, [r4, #80]	; 0x50
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <__sinit+0x68>)
 80066c4:	4a13      	ldr	r2, [pc, #76]	; (8006714 <__sinit+0x6c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	42a3      	cmp	r3, r4
 80066ce:	d101      	bne.n	80066d4 <__sinit+0x2c>
 80066d0:	2301      	movs	r3, #1
 80066d2:	61a3      	str	r3, [r4, #24]
 80066d4:	0020      	movs	r0, r4
 80066d6:	f000 f81f 	bl	8006718 <__sfp>
 80066da:	6060      	str	r0, [r4, #4]
 80066dc:	0020      	movs	r0, r4
 80066de:	f000 f81b 	bl	8006718 <__sfp>
 80066e2:	60a0      	str	r0, [r4, #8]
 80066e4:	0020      	movs	r0, r4
 80066e6:	f000 f817 	bl	8006718 <__sfp>
 80066ea:	2200      	movs	r2, #0
 80066ec:	2104      	movs	r1, #4
 80066ee:	60e0      	str	r0, [r4, #12]
 80066f0:	6860      	ldr	r0, [r4, #4]
 80066f2:	f7ff ff77 	bl	80065e4 <std>
 80066f6:	2201      	movs	r2, #1
 80066f8:	2109      	movs	r1, #9
 80066fa:	68a0      	ldr	r0, [r4, #8]
 80066fc:	f7ff ff72 	bl	80065e4 <std>
 8006700:	2202      	movs	r2, #2
 8006702:	2112      	movs	r1, #18
 8006704:	68e0      	ldr	r0, [r4, #12]
 8006706:	f7ff ff6d 	bl	80065e4 <std>
 800670a:	2301      	movs	r3, #1
 800670c:	61a3      	str	r3, [r4, #24]
 800670e:	e7d2      	b.n	80066b6 <__sinit+0xe>
 8006710:	080073cc 	.word	0x080073cc
 8006714:	0800662d 	.word	0x0800662d

08006718 <__sfp>:
 8006718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671a:	0007      	movs	r7, r0
 800671c:	f7ff ffa4 	bl	8006668 <__sfp_lock_acquire>
 8006720:	4b1f      	ldr	r3, [pc, #124]	; (80067a0 <__sfp+0x88>)
 8006722:	681e      	ldr	r6, [r3, #0]
 8006724:	69b3      	ldr	r3, [r6, #24]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d102      	bne.n	8006730 <__sfp+0x18>
 800672a:	0030      	movs	r0, r6
 800672c:	f7ff ffbc 	bl	80066a8 <__sinit>
 8006730:	3648      	adds	r6, #72	; 0x48
 8006732:	68b4      	ldr	r4, [r6, #8]
 8006734:	6873      	ldr	r3, [r6, #4]
 8006736:	3b01      	subs	r3, #1
 8006738:	d504      	bpl.n	8006744 <__sfp+0x2c>
 800673a:	6833      	ldr	r3, [r6, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d022      	beq.n	8006786 <__sfp+0x6e>
 8006740:	6836      	ldr	r6, [r6, #0]
 8006742:	e7f6      	b.n	8006732 <__sfp+0x1a>
 8006744:	220c      	movs	r2, #12
 8006746:	5ea5      	ldrsh	r5, [r4, r2]
 8006748:	2d00      	cmp	r5, #0
 800674a:	d11a      	bne.n	8006782 <__sfp+0x6a>
 800674c:	0020      	movs	r0, r4
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <__sfp+0x8c>)
 8006750:	3058      	adds	r0, #88	; 0x58
 8006752:	60e3      	str	r3, [r4, #12]
 8006754:	6665      	str	r5, [r4, #100]	; 0x64
 8006756:	f000 f847 	bl	80067e8 <__retarget_lock_init_recursive>
 800675a:	f7ff ff8d 	bl	8006678 <__sfp_lock_release>
 800675e:	0020      	movs	r0, r4
 8006760:	2208      	movs	r2, #8
 8006762:	0029      	movs	r1, r5
 8006764:	6025      	str	r5, [r4, #0]
 8006766:	60a5      	str	r5, [r4, #8]
 8006768:	6065      	str	r5, [r4, #4]
 800676a:	6125      	str	r5, [r4, #16]
 800676c:	6165      	str	r5, [r4, #20]
 800676e:	61a5      	str	r5, [r4, #24]
 8006770:	305c      	adds	r0, #92	; 0x5c
 8006772:	f7ff fa8a 	bl	8005c8a <memset>
 8006776:	6365      	str	r5, [r4, #52]	; 0x34
 8006778:	63a5      	str	r5, [r4, #56]	; 0x38
 800677a:	64a5      	str	r5, [r4, #72]	; 0x48
 800677c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800677e:	0020      	movs	r0, r4
 8006780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006782:	3468      	adds	r4, #104	; 0x68
 8006784:	e7d7      	b.n	8006736 <__sfp+0x1e>
 8006786:	2104      	movs	r1, #4
 8006788:	0038      	movs	r0, r7
 800678a:	f7ff ff57 	bl	800663c <__sfmoreglue>
 800678e:	1e04      	subs	r4, r0, #0
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	d1d5      	bne.n	8006740 <__sfp+0x28>
 8006794:	f7ff ff70 	bl	8006678 <__sfp_lock_release>
 8006798:	230c      	movs	r3, #12
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	e7ef      	b.n	800677e <__sfp+0x66>
 800679e:	46c0      	nop			; (mov r8, r8)
 80067a0:	080073cc 	.word	0x080073cc
 80067a4:	ffff0001 	.word	0xffff0001

080067a8 <_fwalk_reent>:
 80067a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067aa:	0004      	movs	r4, r0
 80067ac:	0006      	movs	r6, r0
 80067ae:	2700      	movs	r7, #0
 80067b0:	9101      	str	r1, [sp, #4]
 80067b2:	3448      	adds	r4, #72	; 0x48
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	68a5      	ldr	r5, [r4, #8]
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	9b00      	ldr	r3, [sp, #0]
 80067bc:	3b01      	subs	r3, #1
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	d504      	bpl.n	80067cc <_fwalk_reent+0x24>
 80067c2:	6824      	ldr	r4, [r4, #0]
 80067c4:	2c00      	cmp	r4, #0
 80067c6:	d1f5      	bne.n	80067b4 <_fwalk_reent+0xc>
 80067c8:	0038      	movs	r0, r7
 80067ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80067cc:	89ab      	ldrh	r3, [r5, #12]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d908      	bls.n	80067e4 <_fwalk_reent+0x3c>
 80067d2:	220e      	movs	r2, #14
 80067d4:	5eab      	ldrsh	r3, [r5, r2]
 80067d6:	3301      	adds	r3, #1
 80067d8:	d004      	beq.n	80067e4 <_fwalk_reent+0x3c>
 80067da:	0029      	movs	r1, r5
 80067dc:	0030      	movs	r0, r6
 80067de:	9b01      	ldr	r3, [sp, #4]
 80067e0:	4798      	blx	r3
 80067e2:	4307      	orrs	r7, r0
 80067e4:	3568      	adds	r5, #104	; 0x68
 80067e6:	e7e8      	b.n	80067ba <_fwalk_reent+0x12>

080067e8 <__retarget_lock_init_recursive>:
 80067e8:	4770      	bx	lr

080067ea <__retarget_lock_acquire_recursive>:
 80067ea:	4770      	bx	lr

080067ec <__retarget_lock_release_recursive>:
 80067ec:	4770      	bx	lr
	...

080067f0 <__swhatbuf_r>:
 80067f0:	b570      	push	{r4, r5, r6, lr}
 80067f2:	000e      	movs	r6, r1
 80067f4:	001d      	movs	r5, r3
 80067f6:	230e      	movs	r3, #14
 80067f8:	5ec9      	ldrsh	r1, [r1, r3]
 80067fa:	0014      	movs	r4, r2
 80067fc:	b096      	sub	sp, #88	; 0x58
 80067fe:	2900      	cmp	r1, #0
 8006800:	da08      	bge.n	8006814 <__swhatbuf_r+0x24>
 8006802:	220c      	movs	r2, #12
 8006804:	5eb3      	ldrsh	r3, [r6, r2]
 8006806:	2200      	movs	r2, #0
 8006808:	602a      	str	r2, [r5, #0]
 800680a:	061b      	lsls	r3, r3, #24
 800680c:	d411      	bmi.n	8006832 <__swhatbuf_r+0x42>
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	e00f      	b.n	8006834 <__swhatbuf_r+0x44>
 8006814:	466a      	mov	r2, sp
 8006816:	f000 fbb7 	bl	8006f88 <_fstat_r>
 800681a:	2800      	cmp	r0, #0
 800681c:	dbf1      	blt.n	8006802 <__swhatbuf_r+0x12>
 800681e:	23f0      	movs	r3, #240	; 0xf0
 8006820:	9901      	ldr	r1, [sp, #4]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	4019      	ands	r1, r3
 8006826:	4b05      	ldr	r3, [pc, #20]	; (800683c <__swhatbuf_r+0x4c>)
 8006828:	18c9      	adds	r1, r1, r3
 800682a:	424b      	negs	r3, r1
 800682c:	4159      	adcs	r1, r3
 800682e:	6029      	str	r1, [r5, #0]
 8006830:	e7ed      	b.n	800680e <__swhatbuf_r+0x1e>
 8006832:	2340      	movs	r3, #64	; 0x40
 8006834:	2000      	movs	r0, #0
 8006836:	6023      	str	r3, [r4, #0]
 8006838:	b016      	add	sp, #88	; 0x58
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	ffffe000 	.word	0xffffe000

08006840 <__smakebuf_r>:
 8006840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006842:	2602      	movs	r6, #2
 8006844:	898b      	ldrh	r3, [r1, #12]
 8006846:	0005      	movs	r5, r0
 8006848:	000c      	movs	r4, r1
 800684a:	4233      	tst	r3, r6
 800684c:	d006      	beq.n	800685c <__smakebuf_r+0x1c>
 800684e:	0023      	movs	r3, r4
 8006850:	3347      	adds	r3, #71	; 0x47
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	2301      	movs	r3, #1
 8006858:	6163      	str	r3, [r4, #20]
 800685a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800685c:	466a      	mov	r2, sp
 800685e:	ab01      	add	r3, sp, #4
 8006860:	f7ff ffc6 	bl	80067f0 <__swhatbuf_r>
 8006864:	9900      	ldr	r1, [sp, #0]
 8006866:	0007      	movs	r7, r0
 8006868:	0028      	movs	r0, r5
 800686a:	f000 f8b7 	bl	80069dc <_malloc_r>
 800686e:	2800      	cmp	r0, #0
 8006870:	d108      	bne.n	8006884 <__smakebuf_r+0x44>
 8006872:	220c      	movs	r2, #12
 8006874:	5ea3      	ldrsh	r3, [r4, r2]
 8006876:	059a      	lsls	r2, r3, #22
 8006878:	d4ef      	bmi.n	800685a <__smakebuf_r+0x1a>
 800687a:	2203      	movs	r2, #3
 800687c:	4393      	bics	r3, r2
 800687e:	431e      	orrs	r6, r3
 8006880:	81a6      	strh	r6, [r4, #12]
 8006882:	e7e4      	b.n	800684e <__smakebuf_r+0xe>
 8006884:	4b0f      	ldr	r3, [pc, #60]	; (80068c4 <__smakebuf_r+0x84>)
 8006886:	62ab      	str	r3, [r5, #40]	; 0x28
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	89a2      	ldrh	r2, [r4, #12]
 800688c:	6020      	str	r0, [r4, #0]
 800688e:	4313      	orrs	r3, r2
 8006890:	81a3      	strh	r3, [r4, #12]
 8006892:	9b00      	ldr	r3, [sp, #0]
 8006894:	6120      	str	r0, [r4, #16]
 8006896:	6163      	str	r3, [r4, #20]
 8006898:	9b01      	ldr	r3, [sp, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00d      	beq.n	80068ba <__smakebuf_r+0x7a>
 800689e:	0028      	movs	r0, r5
 80068a0:	230e      	movs	r3, #14
 80068a2:	5ee1      	ldrsh	r1, [r4, r3]
 80068a4:	f000 fb82 	bl	8006fac <_isatty_r>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d006      	beq.n	80068ba <__smakebuf_r+0x7a>
 80068ac:	2203      	movs	r2, #3
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	4393      	bics	r3, r2
 80068b2:	001a      	movs	r2, r3
 80068b4:	2301      	movs	r3, #1
 80068b6:	4313      	orrs	r3, r2
 80068b8:	81a3      	strh	r3, [r4, #12]
 80068ba:	89a0      	ldrh	r0, [r4, #12]
 80068bc:	4307      	orrs	r7, r0
 80068be:	81a7      	strh	r7, [r4, #12]
 80068c0:	e7cb      	b.n	800685a <__smakebuf_r+0x1a>
 80068c2:	46c0      	nop			; (mov r8, r8)
 80068c4:	0800662d 	.word	0x0800662d

080068c8 <memchr>:
 80068c8:	b2c9      	uxtb	r1, r1
 80068ca:	1882      	adds	r2, r0, r2
 80068cc:	4290      	cmp	r0, r2
 80068ce:	d101      	bne.n	80068d4 <memchr+0xc>
 80068d0:	2000      	movs	r0, #0
 80068d2:	4770      	bx	lr
 80068d4:	7803      	ldrb	r3, [r0, #0]
 80068d6:	428b      	cmp	r3, r1
 80068d8:	d0fb      	beq.n	80068d2 <memchr+0xa>
 80068da:	3001      	adds	r0, #1
 80068dc:	e7f6      	b.n	80068cc <memchr+0x4>

080068de <memmove>:
 80068de:	b510      	push	{r4, lr}
 80068e0:	4288      	cmp	r0, r1
 80068e2:	d902      	bls.n	80068ea <memmove+0xc>
 80068e4:	188b      	adds	r3, r1, r2
 80068e6:	4298      	cmp	r0, r3
 80068e8:	d303      	bcc.n	80068f2 <memmove+0x14>
 80068ea:	2300      	movs	r3, #0
 80068ec:	e007      	b.n	80068fe <memmove+0x20>
 80068ee:	5c8b      	ldrb	r3, [r1, r2]
 80068f0:	5483      	strb	r3, [r0, r2]
 80068f2:	3a01      	subs	r2, #1
 80068f4:	d2fb      	bcs.n	80068ee <memmove+0x10>
 80068f6:	bd10      	pop	{r4, pc}
 80068f8:	5ccc      	ldrb	r4, [r1, r3]
 80068fa:	54c4      	strb	r4, [r0, r3]
 80068fc:	3301      	adds	r3, #1
 80068fe:	429a      	cmp	r2, r3
 8006900:	d1fa      	bne.n	80068f8 <memmove+0x1a>
 8006902:	e7f8      	b.n	80068f6 <memmove+0x18>

08006904 <_free_r>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	0005      	movs	r5, r0
 8006908:	2900      	cmp	r1, #0
 800690a:	d010      	beq.n	800692e <_free_r+0x2a>
 800690c:	1f0c      	subs	r4, r1, #4
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	da00      	bge.n	8006916 <_free_r+0x12>
 8006914:	18e4      	adds	r4, r4, r3
 8006916:	0028      	movs	r0, r5
 8006918:	f000 fb6e 	bl	8006ff8 <__malloc_lock>
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <_free_r+0x90>)
 800691e:	6813      	ldr	r3, [r2, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d105      	bne.n	8006930 <_free_r+0x2c>
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	6014      	str	r4, [r2, #0]
 8006928:	0028      	movs	r0, r5
 800692a:	f000 fb6d 	bl	8007008 <__malloc_unlock>
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	42a3      	cmp	r3, r4
 8006932:	d908      	bls.n	8006946 <_free_r+0x42>
 8006934:	6821      	ldr	r1, [r4, #0]
 8006936:	1860      	adds	r0, r4, r1
 8006938:	4283      	cmp	r3, r0
 800693a:	d1f3      	bne.n	8006924 <_free_r+0x20>
 800693c:	6818      	ldr	r0, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	1841      	adds	r1, r0, r1
 8006942:	6021      	str	r1, [r4, #0]
 8006944:	e7ee      	b.n	8006924 <_free_r+0x20>
 8006946:	001a      	movs	r2, r3
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <_free_r+0x4e>
 800694e:	42a3      	cmp	r3, r4
 8006950:	d9f9      	bls.n	8006946 <_free_r+0x42>
 8006952:	6811      	ldr	r1, [r2, #0]
 8006954:	1850      	adds	r0, r2, r1
 8006956:	42a0      	cmp	r0, r4
 8006958:	d10b      	bne.n	8006972 <_free_r+0x6e>
 800695a:	6820      	ldr	r0, [r4, #0]
 800695c:	1809      	adds	r1, r1, r0
 800695e:	1850      	adds	r0, r2, r1
 8006960:	6011      	str	r1, [r2, #0]
 8006962:	4283      	cmp	r3, r0
 8006964:	d1e0      	bne.n	8006928 <_free_r+0x24>
 8006966:	6818      	ldr	r0, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	1841      	adds	r1, r0, r1
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	6053      	str	r3, [r2, #4]
 8006970:	e7da      	b.n	8006928 <_free_r+0x24>
 8006972:	42a0      	cmp	r0, r4
 8006974:	d902      	bls.n	800697c <_free_r+0x78>
 8006976:	230c      	movs	r3, #12
 8006978:	602b      	str	r3, [r5, #0]
 800697a:	e7d5      	b.n	8006928 <_free_r+0x24>
 800697c:	6821      	ldr	r1, [r4, #0]
 800697e:	1860      	adds	r0, r4, r1
 8006980:	4283      	cmp	r3, r0
 8006982:	d103      	bne.n	800698c <_free_r+0x88>
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	1841      	adds	r1, r0, r1
 800698a:	6021      	str	r1, [r4, #0]
 800698c:	6063      	str	r3, [r4, #4]
 800698e:	6054      	str	r4, [r2, #4]
 8006990:	e7ca      	b.n	8006928 <_free_r+0x24>
 8006992:	46c0      	nop			; (mov r8, r8)
 8006994:	20000348 	.word	0x20000348

08006998 <sbrk_aligned>:
 8006998:	b570      	push	{r4, r5, r6, lr}
 800699a:	4e0f      	ldr	r6, [pc, #60]	; (80069d8 <sbrk_aligned+0x40>)
 800699c:	000d      	movs	r5, r1
 800699e:	6831      	ldr	r1, [r6, #0]
 80069a0:	0004      	movs	r4, r0
 80069a2:	2900      	cmp	r1, #0
 80069a4:	d102      	bne.n	80069ac <sbrk_aligned+0x14>
 80069a6:	f000 fa21 	bl	8006dec <_sbrk_r>
 80069aa:	6030      	str	r0, [r6, #0]
 80069ac:	0029      	movs	r1, r5
 80069ae:	0020      	movs	r0, r4
 80069b0:	f000 fa1c 	bl	8006dec <_sbrk_r>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	d00a      	beq.n	80069ce <sbrk_aligned+0x36>
 80069b8:	2303      	movs	r3, #3
 80069ba:	1cc5      	adds	r5, r0, #3
 80069bc:	439d      	bics	r5, r3
 80069be:	42a8      	cmp	r0, r5
 80069c0:	d007      	beq.n	80069d2 <sbrk_aligned+0x3a>
 80069c2:	1a29      	subs	r1, r5, r0
 80069c4:	0020      	movs	r0, r4
 80069c6:	f000 fa11 	bl	8006dec <_sbrk_r>
 80069ca:	1c43      	adds	r3, r0, #1
 80069cc:	d101      	bne.n	80069d2 <sbrk_aligned+0x3a>
 80069ce:	2501      	movs	r5, #1
 80069d0:	426d      	negs	r5, r5
 80069d2:	0028      	movs	r0, r5
 80069d4:	bd70      	pop	{r4, r5, r6, pc}
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	2000034c 	.word	0x2000034c

080069dc <_malloc_r>:
 80069dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069de:	2203      	movs	r2, #3
 80069e0:	1ccb      	adds	r3, r1, #3
 80069e2:	4393      	bics	r3, r2
 80069e4:	3308      	adds	r3, #8
 80069e6:	0006      	movs	r6, r0
 80069e8:	001f      	movs	r7, r3
 80069ea:	2b0c      	cmp	r3, #12
 80069ec:	d232      	bcs.n	8006a54 <_malloc_r+0x78>
 80069ee:	270c      	movs	r7, #12
 80069f0:	42b9      	cmp	r1, r7
 80069f2:	d831      	bhi.n	8006a58 <_malloc_r+0x7c>
 80069f4:	0030      	movs	r0, r6
 80069f6:	f000 faff 	bl	8006ff8 <__malloc_lock>
 80069fa:	4d32      	ldr	r5, [pc, #200]	; (8006ac4 <_malloc_r+0xe8>)
 80069fc:	682b      	ldr	r3, [r5, #0]
 80069fe:	001c      	movs	r4, r3
 8006a00:	2c00      	cmp	r4, #0
 8006a02:	d12e      	bne.n	8006a62 <_malloc_r+0x86>
 8006a04:	0039      	movs	r1, r7
 8006a06:	0030      	movs	r0, r6
 8006a08:	f7ff ffc6 	bl	8006998 <sbrk_aligned>
 8006a0c:	0004      	movs	r4, r0
 8006a0e:	1c43      	adds	r3, r0, #1
 8006a10:	d11e      	bne.n	8006a50 <_malloc_r+0x74>
 8006a12:	682c      	ldr	r4, [r5, #0]
 8006a14:	0025      	movs	r5, r4
 8006a16:	2d00      	cmp	r5, #0
 8006a18:	d14a      	bne.n	8006ab0 <_malloc_r+0xd4>
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	0029      	movs	r1, r5
 8006a1e:	18e3      	adds	r3, r4, r3
 8006a20:	0030      	movs	r0, r6
 8006a22:	9301      	str	r3, [sp, #4]
 8006a24:	f000 f9e2 	bl	8006dec <_sbrk_r>
 8006a28:	9b01      	ldr	r3, [sp, #4]
 8006a2a:	4283      	cmp	r3, r0
 8006a2c:	d143      	bne.n	8006ab6 <_malloc_r+0xda>
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	3703      	adds	r7, #3
 8006a32:	1aff      	subs	r7, r7, r3
 8006a34:	2303      	movs	r3, #3
 8006a36:	439f      	bics	r7, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	2f0c      	cmp	r7, #12
 8006a3c:	d200      	bcs.n	8006a40 <_malloc_r+0x64>
 8006a3e:	270c      	movs	r7, #12
 8006a40:	0039      	movs	r1, r7
 8006a42:	0030      	movs	r0, r6
 8006a44:	f7ff ffa8 	bl	8006998 <sbrk_aligned>
 8006a48:	1c43      	adds	r3, r0, #1
 8006a4a:	d034      	beq.n	8006ab6 <_malloc_r+0xda>
 8006a4c:	6823      	ldr	r3, [r4, #0]
 8006a4e:	19df      	adds	r7, r3, r7
 8006a50:	6027      	str	r7, [r4, #0]
 8006a52:	e013      	b.n	8006a7c <_malloc_r+0xa0>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dacb      	bge.n	80069f0 <_malloc_r+0x14>
 8006a58:	230c      	movs	r3, #12
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	6033      	str	r3, [r6, #0]
 8006a5e:	0028      	movs	r0, r5
 8006a60:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a62:	6822      	ldr	r2, [r4, #0]
 8006a64:	1bd1      	subs	r1, r2, r7
 8006a66:	d420      	bmi.n	8006aaa <_malloc_r+0xce>
 8006a68:	290b      	cmp	r1, #11
 8006a6a:	d917      	bls.n	8006a9c <_malloc_r+0xc0>
 8006a6c:	19e2      	adds	r2, r4, r7
 8006a6e:	6027      	str	r7, [r4, #0]
 8006a70:	42a3      	cmp	r3, r4
 8006a72:	d111      	bne.n	8006a98 <_malloc_r+0xbc>
 8006a74:	602a      	str	r2, [r5, #0]
 8006a76:	6863      	ldr	r3, [r4, #4]
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	6053      	str	r3, [r2, #4]
 8006a7c:	0030      	movs	r0, r6
 8006a7e:	0025      	movs	r5, r4
 8006a80:	f000 fac2 	bl	8007008 <__malloc_unlock>
 8006a84:	2207      	movs	r2, #7
 8006a86:	350b      	adds	r5, #11
 8006a88:	1d23      	adds	r3, r4, #4
 8006a8a:	4395      	bics	r5, r2
 8006a8c:	1aea      	subs	r2, r5, r3
 8006a8e:	429d      	cmp	r5, r3
 8006a90:	d0e5      	beq.n	8006a5e <_malloc_r+0x82>
 8006a92:	1b5b      	subs	r3, r3, r5
 8006a94:	50a3      	str	r3, [r4, r2]
 8006a96:	e7e2      	b.n	8006a5e <_malloc_r+0x82>
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	e7ec      	b.n	8006a76 <_malloc_r+0x9a>
 8006a9c:	6862      	ldr	r2, [r4, #4]
 8006a9e:	42a3      	cmp	r3, r4
 8006aa0:	d101      	bne.n	8006aa6 <_malloc_r+0xca>
 8006aa2:	602a      	str	r2, [r5, #0]
 8006aa4:	e7ea      	b.n	8006a7c <_malloc_r+0xa0>
 8006aa6:	605a      	str	r2, [r3, #4]
 8006aa8:	e7e8      	b.n	8006a7c <_malloc_r+0xa0>
 8006aaa:	0023      	movs	r3, r4
 8006aac:	6864      	ldr	r4, [r4, #4]
 8006aae:	e7a7      	b.n	8006a00 <_malloc_r+0x24>
 8006ab0:	002c      	movs	r4, r5
 8006ab2:	686d      	ldr	r5, [r5, #4]
 8006ab4:	e7af      	b.n	8006a16 <_malloc_r+0x3a>
 8006ab6:	230c      	movs	r3, #12
 8006ab8:	0030      	movs	r0, r6
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	f000 faa4 	bl	8007008 <__malloc_unlock>
 8006ac0:	e7cd      	b.n	8006a5e <_malloc_r+0x82>
 8006ac2:	46c0      	nop			; (mov r8, r8)
 8006ac4:	20000348 	.word	0x20000348

08006ac8 <_realloc_r>:
 8006ac8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aca:	0007      	movs	r7, r0
 8006acc:	000e      	movs	r6, r1
 8006ace:	0014      	movs	r4, r2
 8006ad0:	2900      	cmp	r1, #0
 8006ad2:	d105      	bne.n	8006ae0 <_realloc_r+0x18>
 8006ad4:	0011      	movs	r1, r2
 8006ad6:	f7ff ff81 	bl	80069dc <_malloc_r>
 8006ada:	0005      	movs	r5, r0
 8006adc:	0028      	movs	r0, r5
 8006ade:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d103      	bne.n	8006aec <_realloc_r+0x24>
 8006ae4:	f7ff ff0e 	bl	8006904 <_free_r>
 8006ae8:	0025      	movs	r5, r4
 8006aea:	e7f7      	b.n	8006adc <_realloc_r+0x14>
 8006aec:	f000 fa94 	bl	8007018 <_malloc_usable_size_r>
 8006af0:	9001      	str	r0, [sp, #4]
 8006af2:	4284      	cmp	r4, r0
 8006af4:	d803      	bhi.n	8006afe <_realloc_r+0x36>
 8006af6:	0035      	movs	r5, r6
 8006af8:	0843      	lsrs	r3, r0, #1
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	d3ee      	bcc.n	8006adc <_realloc_r+0x14>
 8006afe:	0021      	movs	r1, r4
 8006b00:	0038      	movs	r0, r7
 8006b02:	f7ff ff6b 	bl	80069dc <_malloc_r>
 8006b06:	1e05      	subs	r5, r0, #0
 8006b08:	d0e8      	beq.n	8006adc <_realloc_r+0x14>
 8006b0a:	9b01      	ldr	r3, [sp, #4]
 8006b0c:	0022      	movs	r2, r4
 8006b0e:	429c      	cmp	r4, r3
 8006b10:	d900      	bls.n	8006b14 <_realloc_r+0x4c>
 8006b12:	001a      	movs	r2, r3
 8006b14:	0031      	movs	r1, r6
 8006b16:	0028      	movs	r0, r5
 8006b18:	f7ff f8ae 	bl	8005c78 <memcpy>
 8006b1c:	0031      	movs	r1, r6
 8006b1e:	0038      	movs	r0, r7
 8006b20:	f7ff fef0 	bl	8006904 <_free_r>
 8006b24:	e7da      	b.n	8006adc <_realloc_r+0x14>
	...

08006b28 <__ssputs_r>:
 8006b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b2a:	688e      	ldr	r6, [r1, #8]
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	0007      	movs	r7, r0
 8006b30:	000c      	movs	r4, r1
 8006b32:	9203      	str	r2, [sp, #12]
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	429e      	cmp	r6, r3
 8006b38:	d83c      	bhi.n	8006bb4 <__ssputs_r+0x8c>
 8006b3a:	2390      	movs	r3, #144	; 0x90
 8006b3c:	898a      	ldrh	r2, [r1, #12]
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	421a      	tst	r2, r3
 8006b42:	d034      	beq.n	8006bae <__ssputs_r+0x86>
 8006b44:	6909      	ldr	r1, [r1, #16]
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	6960      	ldr	r0, [r4, #20]
 8006b4a:	1a5b      	subs	r3, r3, r1
 8006b4c:	9302      	str	r3, [sp, #8]
 8006b4e:	2303      	movs	r3, #3
 8006b50:	4343      	muls	r3, r0
 8006b52:	0fdd      	lsrs	r5, r3, #31
 8006b54:	18ed      	adds	r5, r5, r3
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	9802      	ldr	r0, [sp, #8]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	181b      	adds	r3, r3, r0
 8006b5e:	106d      	asrs	r5, r5, #1
 8006b60:	42ab      	cmp	r3, r5
 8006b62:	d900      	bls.n	8006b66 <__ssputs_r+0x3e>
 8006b64:	001d      	movs	r5, r3
 8006b66:	0553      	lsls	r3, r2, #21
 8006b68:	d532      	bpl.n	8006bd0 <__ssputs_r+0xa8>
 8006b6a:	0029      	movs	r1, r5
 8006b6c:	0038      	movs	r0, r7
 8006b6e:	f7ff ff35 	bl	80069dc <_malloc_r>
 8006b72:	1e06      	subs	r6, r0, #0
 8006b74:	d109      	bne.n	8006b8a <__ssputs_r+0x62>
 8006b76:	230c      	movs	r3, #12
 8006b78:	603b      	str	r3, [r7, #0]
 8006b7a:	2340      	movs	r3, #64	; 0x40
 8006b7c:	2001      	movs	r0, #1
 8006b7e:	89a2      	ldrh	r2, [r4, #12]
 8006b80:	4240      	negs	r0, r0
 8006b82:	4313      	orrs	r3, r2
 8006b84:	81a3      	strh	r3, [r4, #12]
 8006b86:	b005      	add	sp, #20
 8006b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b8a:	9a02      	ldr	r2, [sp, #8]
 8006b8c:	6921      	ldr	r1, [r4, #16]
 8006b8e:	f7ff f873 	bl	8005c78 <memcpy>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	4a14      	ldr	r2, [pc, #80]	; (8006be8 <__ssputs_r+0xc0>)
 8006b96:	401a      	ands	r2, r3
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	81a3      	strh	r3, [r4, #12]
 8006b9e:	9b02      	ldr	r3, [sp, #8]
 8006ba0:	6126      	str	r6, [r4, #16]
 8006ba2:	18f6      	adds	r6, r6, r3
 8006ba4:	6026      	str	r6, [r4, #0]
 8006ba6:	6165      	str	r5, [r4, #20]
 8006ba8:	9e01      	ldr	r6, [sp, #4]
 8006baa:	1aed      	subs	r5, r5, r3
 8006bac:	60a5      	str	r5, [r4, #8]
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	d900      	bls.n	8006bb6 <__ssputs_r+0x8e>
 8006bb4:	9e01      	ldr	r6, [sp, #4]
 8006bb6:	0032      	movs	r2, r6
 8006bb8:	9903      	ldr	r1, [sp, #12]
 8006bba:	6820      	ldr	r0, [r4, #0]
 8006bbc:	f7ff fe8f 	bl	80068de <memmove>
 8006bc0:	68a3      	ldr	r3, [r4, #8]
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	1b9b      	subs	r3, r3, r6
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	199e      	adds	r6, r3, r6
 8006bcc:	6026      	str	r6, [r4, #0]
 8006bce:	e7da      	b.n	8006b86 <__ssputs_r+0x5e>
 8006bd0:	002a      	movs	r2, r5
 8006bd2:	0038      	movs	r0, r7
 8006bd4:	f7ff ff78 	bl	8006ac8 <_realloc_r>
 8006bd8:	1e06      	subs	r6, r0, #0
 8006bda:	d1e0      	bne.n	8006b9e <__ssputs_r+0x76>
 8006bdc:	0038      	movs	r0, r7
 8006bde:	6921      	ldr	r1, [r4, #16]
 8006be0:	f7ff fe90 	bl	8006904 <_free_r>
 8006be4:	e7c7      	b.n	8006b76 <__ssputs_r+0x4e>
 8006be6:	46c0      	nop			; (mov r8, r8)
 8006be8:	fffffb7f 	.word	0xfffffb7f

08006bec <_svfiprintf_r>:
 8006bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bee:	b0a1      	sub	sp, #132	; 0x84
 8006bf0:	9003      	str	r0, [sp, #12]
 8006bf2:	001d      	movs	r5, r3
 8006bf4:	898b      	ldrh	r3, [r1, #12]
 8006bf6:	000f      	movs	r7, r1
 8006bf8:	0016      	movs	r6, r2
 8006bfa:	061b      	lsls	r3, r3, #24
 8006bfc:	d511      	bpl.n	8006c22 <_svfiprintf_r+0x36>
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10e      	bne.n	8006c22 <_svfiprintf_r+0x36>
 8006c04:	2140      	movs	r1, #64	; 0x40
 8006c06:	f7ff fee9 	bl	80069dc <_malloc_r>
 8006c0a:	6038      	str	r0, [r7, #0]
 8006c0c:	6138      	str	r0, [r7, #16]
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	d105      	bne.n	8006c1e <_svfiprintf_r+0x32>
 8006c12:	230c      	movs	r3, #12
 8006c14:	9a03      	ldr	r2, [sp, #12]
 8006c16:	3801      	subs	r0, #1
 8006c18:	6013      	str	r3, [r2, #0]
 8006c1a:	b021      	add	sp, #132	; 0x84
 8006c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1e:	2340      	movs	r3, #64	; 0x40
 8006c20:	617b      	str	r3, [r7, #20]
 8006c22:	2300      	movs	r3, #0
 8006c24:	ac08      	add	r4, sp, #32
 8006c26:	6163      	str	r3, [r4, #20]
 8006c28:	3320      	adds	r3, #32
 8006c2a:	7663      	strb	r3, [r4, #25]
 8006c2c:	3310      	adds	r3, #16
 8006c2e:	76a3      	strb	r3, [r4, #26]
 8006c30:	9507      	str	r5, [sp, #28]
 8006c32:	0035      	movs	r5, r6
 8006c34:	782b      	ldrb	r3, [r5, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <_svfiprintf_r+0x52>
 8006c3a:	2b25      	cmp	r3, #37	; 0x25
 8006c3c:	d147      	bne.n	8006cce <_svfiprintf_r+0xe2>
 8006c3e:	1bab      	subs	r3, r5, r6
 8006c40:	9305      	str	r3, [sp, #20]
 8006c42:	42b5      	cmp	r5, r6
 8006c44:	d00c      	beq.n	8006c60 <_svfiprintf_r+0x74>
 8006c46:	0032      	movs	r2, r6
 8006c48:	0039      	movs	r1, r7
 8006c4a:	9803      	ldr	r0, [sp, #12]
 8006c4c:	f7ff ff6c 	bl	8006b28 <__ssputs_r>
 8006c50:	1c43      	adds	r3, r0, #1
 8006c52:	d100      	bne.n	8006c56 <_svfiprintf_r+0x6a>
 8006c54:	e0ae      	b.n	8006db4 <_svfiprintf_r+0x1c8>
 8006c56:	6962      	ldr	r2, [r4, #20]
 8006c58:	9b05      	ldr	r3, [sp, #20]
 8006c5a:	4694      	mov	ip, r2
 8006c5c:	4463      	add	r3, ip
 8006c5e:	6163      	str	r3, [r4, #20]
 8006c60:	782b      	ldrb	r3, [r5, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d100      	bne.n	8006c68 <_svfiprintf_r+0x7c>
 8006c66:	e0a5      	b.n	8006db4 <_svfiprintf_r+0x1c8>
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4252      	negs	r2, r2
 8006c6e:	6062      	str	r2, [r4, #4]
 8006c70:	a904      	add	r1, sp, #16
 8006c72:	3254      	adds	r2, #84	; 0x54
 8006c74:	1852      	adds	r2, r2, r1
 8006c76:	1c6e      	adds	r6, r5, #1
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	60e3      	str	r3, [r4, #12]
 8006c7c:	60a3      	str	r3, [r4, #8]
 8006c7e:	7013      	strb	r3, [r2, #0]
 8006c80:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c82:	2205      	movs	r2, #5
 8006c84:	7831      	ldrb	r1, [r6, #0]
 8006c86:	4854      	ldr	r0, [pc, #336]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006c88:	f7ff fe1e 	bl	80068c8 <memchr>
 8006c8c:	1c75      	adds	r5, r6, #1
 8006c8e:	2800      	cmp	r0, #0
 8006c90:	d11f      	bne.n	8006cd2 <_svfiprintf_r+0xe6>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	06d3      	lsls	r3, r2, #27
 8006c96:	d504      	bpl.n	8006ca2 <_svfiprintf_r+0xb6>
 8006c98:	2353      	movs	r3, #83	; 0x53
 8006c9a:	a904      	add	r1, sp, #16
 8006c9c:	185b      	adds	r3, r3, r1
 8006c9e:	2120      	movs	r1, #32
 8006ca0:	7019      	strb	r1, [r3, #0]
 8006ca2:	0713      	lsls	r3, r2, #28
 8006ca4:	d504      	bpl.n	8006cb0 <_svfiprintf_r+0xc4>
 8006ca6:	2353      	movs	r3, #83	; 0x53
 8006ca8:	a904      	add	r1, sp, #16
 8006caa:	185b      	adds	r3, r3, r1
 8006cac:	212b      	movs	r1, #43	; 0x2b
 8006cae:	7019      	strb	r1, [r3, #0]
 8006cb0:	7833      	ldrb	r3, [r6, #0]
 8006cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb4:	d016      	beq.n	8006ce4 <_svfiprintf_r+0xf8>
 8006cb6:	0035      	movs	r5, r6
 8006cb8:	2100      	movs	r1, #0
 8006cba:	200a      	movs	r0, #10
 8006cbc:	68e3      	ldr	r3, [r4, #12]
 8006cbe:	782a      	ldrb	r2, [r5, #0]
 8006cc0:	1c6e      	adds	r6, r5, #1
 8006cc2:	3a30      	subs	r2, #48	; 0x30
 8006cc4:	2a09      	cmp	r2, #9
 8006cc6:	d94e      	bls.n	8006d66 <_svfiprintf_r+0x17a>
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	d111      	bne.n	8006cf0 <_svfiprintf_r+0x104>
 8006ccc:	e017      	b.n	8006cfe <_svfiprintf_r+0x112>
 8006cce:	3501      	adds	r5, #1
 8006cd0:	e7b0      	b.n	8006c34 <_svfiprintf_r+0x48>
 8006cd2:	4b41      	ldr	r3, [pc, #260]	; (8006dd8 <_svfiprintf_r+0x1ec>)
 8006cd4:	6822      	ldr	r2, [r4, #0]
 8006cd6:	1ac0      	subs	r0, r0, r3
 8006cd8:	2301      	movs	r3, #1
 8006cda:	4083      	lsls	r3, r0
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	002e      	movs	r6, r5
 8006ce0:	6023      	str	r3, [r4, #0]
 8006ce2:	e7ce      	b.n	8006c82 <_svfiprintf_r+0x96>
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	1d19      	adds	r1, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	9107      	str	r1, [sp, #28]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	db01      	blt.n	8006cf4 <_svfiprintf_r+0x108>
 8006cf0:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cf2:	e004      	b.n	8006cfe <_svfiprintf_r+0x112>
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	60e3      	str	r3, [r4, #12]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	782b      	ldrb	r3, [r5, #0]
 8006d00:	2b2e      	cmp	r3, #46	; 0x2e
 8006d02:	d10a      	bne.n	8006d1a <_svfiprintf_r+0x12e>
 8006d04:	786b      	ldrb	r3, [r5, #1]
 8006d06:	2b2a      	cmp	r3, #42	; 0x2a
 8006d08:	d135      	bne.n	8006d76 <_svfiprintf_r+0x18a>
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	3502      	adds	r5, #2
 8006d0e:	1d1a      	adds	r2, r3, #4
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	9207      	str	r2, [sp, #28]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	db2b      	blt.n	8006d70 <_svfiprintf_r+0x184>
 8006d18:	9309      	str	r3, [sp, #36]	; 0x24
 8006d1a:	4e30      	ldr	r6, [pc, #192]	; (8006ddc <_svfiprintf_r+0x1f0>)
 8006d1c:	2203      	movs	r2, #3
 8006d1e:	0030      	movs	r0, r6
 8006d20:	7829      	ldrb	r1, [r5, #0]
 8006d22:	f7ff fdd1 	bl	80068c8 <memchr>
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d006      	beq.n	8006d38 <_svfiprintf_r+0x14c>
 8006d2a:	2340      	movs	r3, #64	; 0x40
 8006d2c:	1b80      	subs	r0, r0, r6
 8006d2e:	4083      	lsls	r3, r0
 8006d30:	6822      	ldr	r2, [r4, #0]
 8006d32:	3501      	adds	r5, #1
 8006d34:	4313      	orrs	r3, r2
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	7829      	ldrb	r1, [r5, #0]
 8006d3a:	2206      	movs	r2, #6
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <_svfiprintf_r+0x1f4>)
 8006d3e:	1c6e      	adds	r6, r5, #1
 8006d40:	7621      	strb	r1, [r4, #24]
 8006d42:	f7ff fdc1 	bl	80068c8 <memchr>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d03c      	beq.n	8006dc4 <_svfiprintf_r+0x1d8>
 8006d4a:	4b26      	ldr	r3, [pc, #152]	; (8006de4 <_svfiprintf_r+0x1f8>)
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d125      	bne.n	8006d9c <_svfiprintf_r+0x1b0>
 8006d50:	2207      	movs	r2, #7
 8006d52:	9b07      	ldr	r3, [sp, #28]
 8006d54:	3307      	adds	r3, #7
 8006d56:	4393      	bics	r3, r2
 8006d58:	3308      	adds	r3, #8
 8006d5a:	9307      	str	r3, [sp, #28]
 8006d5c:	6963      	ldr	r3, [r4, #20]
 8006d5e:	9a04      	ldr	r2, [sp, #16]
 8006d60:	189b      	adds	r3, r3, r2
 8006d62:	6163      	str	r3, [r4, #20]
 8006d64:	e765      	b.n	8006c32 <_svfiprintf_r+0x46>
 8006d66:	4343      	muls	r3, r0
 8006d68:	0035      	movs	r5, r6
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	189b      	adds	r3, r3, r2
 8006d6e:	e7a6      	b.n	8006cbe <_svfiprintf_r+0xd2>
 8006d70:	2301      	movs	r3, #1
 8006d72:	425b      	negs	r3, r3
 8006d74:	e7d0      	b.n	8006d18 <_svfiprintf_r+0x12c>
 8006d76:	2300      	movs	r3, #0
 8006d78:	200a      	movs	r0, #10
 8006d7a:	001a      	movs	r2, r3
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	6063      	str	r3, [r4, #4]
 8006d80:	7829      	ldrb	r1, [r5, #0]
 8006d82:	1c6e      	adds	r6, r5, #1
 8006d84:	3930      	subs	r1, #48	; 0x30
 8006d86:	2909      	cmp	r1, #9
 8006d88:	d903      	bls.n	8006d92 <_svfiprintf_r+0x1a6>
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0c5      	beq.n	8006d1a <_svfiprintf_r+0x12e>
 8006d8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d90:	e7c3      	b.n	8006d1a <_svfiprintf_r+0x12e>
 8006d92:	4342      	muls	r2, r0
 8006d94:	0035      	movs	r5, r6
 8006d96:	2301      	movs	r3, #1
 8006d98:	1852      	adds	r2, r2, r1
 8006d9a:	e7f1      	b.n	8006d80 <_svfiprintf_r+0x194>
 8006d9c:	ab07      	add	r3, sp, #28
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	003a      	movs	r2, r7
 8006da2:	0021      	movs	r1, r4
 8006da4:	4b10      	ldr	r3, [pc, #64]	; (8006de8 <_svfiprintf_r+0x1fc>)
 8006da6:	9803      	ldr	r0, [sp, #12]
 8006da8:	e000      	b.n	8006dac <_svfiprintf_r+0x1c0>
 8006daa:	bf00      	nop
 8006dac:	9004      	str	r0, [sp, #16]
 8006dae:	9b04      	ldr	r3, [sp, #16]
 8006db0:	3301      	adds	r3, #1
 8006db2:	d1d3      	bne.n	8006d5c <_svfiprintf_r+0x170>
 8006db4:	89bb      	ldrh	r3, [r7, #12]
 8006db6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006db8:	065b      	lsls	r3, r3, #25
 8006dba:	d400      	bmi.n	8006dbe <_svfiprintf_r+0x1d2>
 8006dbc:	e72d      	b.n	8006c1a <_svfiprintf_r+0x2e>
 8006dbe:	2001      	movs	r0, #1
 8006dc0:	4240      	negs	r0, r0
 8006dc2:	e72a      	b.n	8006c1a <_svfiprintf_r+0x2e>
 8006dc4:	ab07      	add	r3, sp, #28
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	003a      	movs	r2, r7
 8006dca:	0021      	movs	r1, r4
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <_svfiprintf_r+0x1fc>)
 8006dce:	9803      	ldr	r0, [sp, #12]
 8006dd0:	f7ff f934 	bl	800603c <_printf_i>
 8006dd4:	e7ea      	b.n	8006dac <_svfiprintf_r+0x1c0>
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	080073d0 	.word	0x080073d0
 8006ddc:	080073d6 	.word	0x080073d6
 8006de0:	080073da 	.word	0x080073da
 8006de4:	00000000 	.word	0x00000000
 8006de8:	08006b29 	.word	0x08006b29

08006dec <_sbrk_r>:
 8006dec:	2300      	movs	r3, #0
 8006dee:	b570      	push	{r4, r5, r6, lr}
 8006df0:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_sbrk_r+0x20>)
 8006df2:	0004      	movs	r4, r0
 8006df4:	0008      	movs	r0, r1
 8006df6:	602b      	str	r3, [r5, #0]
 8006df8:	f7fc fc3c 	bl	8003674 <_sbrk>
 8006dfc:	1c43      	adds	r3, r0, #1
 8006dfe:	d103      	bne.n	8006e08 <_sbrk_r+0x1c>
 8006e00:	682b      	ldr	r3, [r5, #0]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d000      	beq.n	8006e08 <_sbrk_r+0x1c>
 8006e06:	6023      	str	r3, [r4, #0]
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
 8006e0a:	46c0      	nop			; (mov r8, r8)
 8006e0c:	20000350 	.word	0x20000350

08006e10 <_raise_r>:
 8006e10:	b570      	push	{r4, r5, r6, lr}
 8006e12:	0004      	movs	r4, r0
 8006e14:	000d      	movs	r5, r1
 8006e16:	291f      	cmp	r1, #31
 8006e18:	d904      	bls.n	8006e24 <_raise_r+0x14>
 8006e1a:	2316      	movs	r3, #22
 8006e1c:	6003      	str	r3, [r0, #0]
 8006e1e:	2001      	movs	r0, #1
 8006e20:	4240      	negs	r0, r0
 8006e22:	bd70      	pop	{r4, r5, r6, pc}
 8006e24:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d004      	beq.n	8006e34 <_raise_r+0x24>
 8006e2a:	008a      	lsls	r2, r1, #2
 8006e2c:	189b      	adds	r3, r3, r2
 8006e2e:	681a      	ldr	r2, [r3, #0]
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d108      	bne.n	8006e46 <_raise_r+0x36>
 8006e34:	0020      	movs	r0, r4
 8006e36:	f000 f831 	bl	8006e9c <_getpid_r>
 8006e3a:	002a      	movs	r2, r5
 8006e3c:	0001      	movs	r1, r0
 8006e3e:	0020      	movs	r0, r4
 8006e40:	f000 f81a 	bl	8006e78 <_kill_r>
 8006e44:	e7ed      	b.n	8006e22 <_raise_r+0x12>
 8006e46:	2000      	movs	r0, #0
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d0ea      	beq.n	8006e22 <_raise_r+0x12>
 8006e4c:	1c51      	adds	r1, r2, #1
 8006e4e:	d103      	bne.n	8006e58 <_raise_r+0x48>
 8006e50:	2316      	movs	r3, #22
 8006e52:	3001      	adds	r0, #1
 8006e54:	6023      	str	r3, [r4, #0]
 8006e56:	e7e4      	b.n	8006e22 <_raise_r+0x12>
 8006e58:	2400      	movs	r4, #0
 8006e5a:	0028      	movs	r0, r5
 8006e5c:	601c      	str	r4, [r3, #0]
 8006e5e:	4790      	blx	r2
 8006e60:	0020      	movs	r0, r4
 8006e62:	e7de      	b.n	8006e22 <_raise_r+0x12>

08006e64 <raise>:
 8006e64:	b510      	push	{r4, lr}
 8006e66:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <raise+0x10>)
 8006e68:	0001      	movs	r1, r0
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	f7ff ffd0 	bl	8006e10 <_raise_r>
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	200001c4 	.word	0x200001c4

08006e78 <_kill_r>:
 8006e78:	2300      	movs	r3, #0
 8006e7a:	b570      	push	{r4, r5, r6, lr}
 8006e7c:	4d06      	ldr	r5, [pc, #24]	; (8006e98 <_kill_r+0x20>)
 8006e7e:	0004      	movs	r4, r0
 8006e80:	0008      	movs	r0, r1
 8006e82:	0011      	movs	r1, r2
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f7fc fb74 	bl	8003572 <_kill>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d103      	bne.n	8006e96 <_kill_r+0x1e>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d000      	beq.n	8006e96 <_kill_r+0x1e>
 8006e94:	6023      	str	r3, [r4, #0]
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	20000350 	.word	0x20000350

08006e9c <_getpid_r>:
 8006e9c:	b510      	push	{r4, lr}
 8006e9e:	f7fc fb62 	bl	8003566 <_getpid>
 8006ea2:	bd10      	pop	{r4, pc}

08006ea4 <__sread>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	000c      	movs	r4, r1
 8006ea8:	250e      	movs	r5, #14
 8006eaa:	5f49      	ldrsh	r1, [r1, r5]
 8006eac:	f000 f8bc 	bl	8007028 <_read_r>
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	db03      	blt.n	8006ebc <__sread+0x18>
 8006eb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006eb6:	181b      	adds	r3, r3, r0
 8006eb8:	6563      	str	r3, [r4, #84]	; 0x54
 8006eba:	bd70      	pop	{r4, r5, r6, pc}
 8006ebc:	89a3      	ldrh	r3, [r4, #12]
 8006ebe:	4a02      	ldr	r2, [pc, #8]	; (8006ec8 <__sread+0x24>)
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	81a3      	strh	r3, [r4, #12]
 8006ec4:	e7f9      	b.n	8006eba <__sread+0x16>
 8006ec6:	46c0      	nop			; (mov r8, r8)
 8006ec8:	ffffefff 	.word	0xffffefff

08006ecc <__swrite>:
 8006ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ece:	001f      	movs	r7, r3
 8006ed0:	898b      	ldrh	r3, [r1, #12]
 8006ed2:	0005      	movs	r5, r0
 8006ed4:	000c      	movs	r4, r1
 8006ed6:	0016      	movs	r6, r2
 8006ed8:	05db      	lsls	r3, r3, #23
 8006eda:	d505      	bpl.n	8006ee8 <__swrite+0x1c>
 8006edc:	230e      	movs	r3, #14
 8006ede:	5ec9      	ldrsh	r1, [r1, r3]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	f000 f874 	bl	8006fd0 <_lseek_r>
 8006ee8:	89a3      	ldrh	r3, [r4, #12]
 8006eea:	4a05      	ldr	r2, [pc, #20]	; (8006f00 <__swrite+0x34>)
 8006eec:	0028      	movs	r0, r5
 8006eee:	4013      	ands	r3, r2
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	0032      	movs	r2, r6
 8006ef4:	230e      	movs	r3, #14
 8006ef6:	5ee1      	ldrsh	r1, [r4, r3]
 8006ef8:	003b      	movs	r3, r7
 8006efa:	f000 f81f 	bl	8006f3c <_write_r>
 8006efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f00:	ffffefff 	.word	0xffffefff

08006f04 <__sseek>:
 8006f04:	b570      	push	{r4, r5, r6, lr}
 8006f06:	000c      	movs	r4, r1
 8006f08:	250e      	movs	r5, #14
 8006f0a:	5f49      	ldrsh	r1, [r1, r5]
 8006f0c:	f000 f860 	bl	8006fd0 <_lseek_r>
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	1c42      	adds	r2, r0, #1
 8006f14:	d103      	bne.n	8006f1e <__sseek+0x1a>
 8006f16:	4a05      	ldr	r2, [pc, #20]	; (8006f2c <__sseek+0x28>)
 8006f18:	4013      	ands	r3, r2
 8006f1a:	81a3      	strh	r3, [r4, #12]
 8006f1c:	bd70      	pop	{r4, r5, r6, pc}
 8006f1e:	2280      	movs	r2, #128	; 0x80
 8006f20:	0152      	lsls	r2, r2, #5
 8006f22:	4313      	orrs	r3, r2
 8006f24:	81a3      	strh	r3, [r4, #12]
 8006f26:	6560      	str	r0, [r4, #84]	; 0x54
 8006f28:	e7f8      	b.n	8006f1c <__sseek+0x18>
 8006f2a:	46c0      	nop			; (mov r8, r8)
 8006f2c:	ffffefff 	.word	0xffffefff

08006f30 <__sclose>:
 8006f30:	b510      	push	{r4, lr}
 8006f32:	230e      	movs	r3, #14
 8006f34:	5ec9      	ldrsh	r1, [r1, r3]
 8006f36:	f000 f815 	bl	8006f64 <_close_r>
 8006f3a:	bd10      	pop	{r4, pc}

08006f3c <_write_r>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	0004      	movs	r4, r0
 8006f40:	0008      	movs	r0, r1
 8006f42:	0011      	movs	r1, r2
 8006f44:	001a      	movs	r2, r3
 8006f46:	2300      	movs	r3, #0
 8006f48:	4d05      	ldr	r5, [pc, #20]	; (8006f60 <_write_r+0x24>)
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fc fb4a 	bl	80035e4 <_write>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d103      	bne.n	8006f5c <_write_r+0x20>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d000      	beq.n	8006f5c <_write_r+0x20>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	20000350 	.word	0x20000350

08006f64 <_close_r>:
 8006f64:	2300      	movs	r3, #0
 8006f66:	b570      	push	{r4, r5, r6, lr}
 8006f68:	4d06      	ldr	r5, [pc, #24]	; (8006f84 <_close_r+0x20>)
 8006f6a:	0004      	movs	r4, r0
 8006f6c:	0008      	movs	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7fc fb54 	bl	800361c <_close>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d103      	bne.n	8006f80 <_close_r+0x1c>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d000      	beq.n	8006f80 <_close_r+0x1c>
 8006f7e:	6023      	str	r3, [r4, #0]
 8006f80:	bd70      	pop	{r4, r5, r6, pc}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	20000350 	.word	0x20000350

08006f88 <_fstat_r>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b570      	push	{r4, r5, r6, lr}
 8006f8c:	4d06      	ldr	r5, [pc, #24]	; (8006fa8 <_fstat_r+0x20>)
 8006f8e:	0004      	movs	r4, r0
 8006f90:	0008      	movs	r0, r1
 8006f92:	0011      	movs	r1, r2
 8006f94:	602b      	str	r3, [r5, #0]
 8006f96:	f7fc fb4b 	bl	8003630 <_fstat>
 8006f9a:	1c43      	adds	r3, r0, #1
 8006f9c:	d103      	bne.n	8006fa6 <_fstat_r+0x1e>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d000      	beq.n	8006fa6 <_fstat_r+0x1e>
 8006fa4:	6023      	str	r3, [r4, #0]
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	20000350 	.word	0x20000350

08006fac <_isatty_r>:
 8006fac:	2300      	movs	r3, #0
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	4d06      	ldr	r5, [pc, #24]	; (8006fcc <_isatty_r+0x20>)
 8006fb2:	0004      	movs	r4, r0
 8006fb4:	0008      	movs	r0, r1
 8006fb6:	602b      	str	r3, [r5, #0]
 8006fb8:	f7fc fb48 	bl	800364c <_isatty>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d103      	bne.n	8006fc8 <_isatty_r+0x1c>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d000      	beq.n	8006fc8 <_isatty_r+0x1c>
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	20000350 	.word	0x20000350

08006fd0 <_lseek_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	0004      	movs	r4, r0
 8006fd4:	0008      	movs	r0, r1
 8006fd6:	0011      	movs	r1, r2
 8006fd8:	001a      	movs	r2, r3
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4d05      	ldr	r5, [pc, #20]	; (8006ff4 <_lseek_r+0x24>)
 8006fde:	602b      	str	r3, [r5, #0]
 8006fe0:	f7fc fb3d 	bl	800365e <_lseek>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d103      	bne.n	8006ff0 <_lseek_r+0x20>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d000      	beq.n	8006ff0 <_lseek_r+0x20>
 8006fee:	6023      	str	r3, [r4, #0]
 8006ff0:	bd70      	pop	{r4, r5, r6, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	20000350 	.word	0x20000350

08006ff8 <__malloc_lock>:
 8006ff8:	b510      	push	{r4, lr}
 8006ffa:	4802      	ldr	r0, [pc, #8]	; (8007004 <__malloc_lock+0xc>)
 8006ffc:	f7ff fbf5 	bl	80067ea <__retarget_lock_acquire_recursive>
 8007000:	bd10      	pop	{r4, pc}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	20000344 	.word	0x20000344

08007008 <__malloc_unlock>:
 8007008:	b510      	push	{r4, lr}
 800700a:	4802      	ldr	r0, [pc, #8]	; (8007014 <__malloc_unlock+0xc>)
 800700c:	f7ff fbee 	bl	80067ec <__retarget_lock_release_recursive>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	46c0      	nop			; (mov r8, r8)
 8007014:	20000344 	.word	0x20000344

08007018 <_malloc_usable_size_r>:
 8007018:	1f0b      	subs	r3, r1, #4
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	1f18      	subs	r0, r3, #4
 800701e:	2b00      	cmp	r3, #0
 8007020:	da01      	bge.n	8007026 <_malloc_usable_size_r+0xe>
 8007022:	580b      	ldr	r3, [r1, r0]
 8007024:	18c0      	adds	r0, r0, r3
 8007026:	4770      	bx	lr

08007028 <_read_r>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	0004      	movs	r4, r0
 800702c:	0008      	movs	r0, r1
 800702e:	0011      	movs	r1, r2
 8007030:	001a      	movs	r2, r3
 8007032:	2300      	movs	r3, #0
 8007034:	4d05      	ldr	r5, [pc, #20]	; (800704c <_read_r+0x24>)
 8007036:	602b      	str	r3, [r5, #0]
 8007038:	f7fc fab7 	bl	80035aa <_read>
 800703c:	1c43      	adds	r3, r0, #1
 800703e:	d103      	bne.n	8007048 <_read_r+0x20>
 8007040:	682b      	ldr	r3, [r5, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d000      	beq.n	8007048 <_read_r+0x20>
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	bd70      	pop	{r4, r5, r6, pc}
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	20000350 	.word	0x20000350

08007050 <_init>:
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	46c0      	nop			; (mov r8, r8)
 8007054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007056:	bc08      	pop	{r3}
 8007058:	469e      	mov	lr, r3
 800705a:	4770      	bx	lr

0800705c <_fini>:
 800705c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007062:	bc08      	pop	{r3}
 8007064:	469e      	mov	lr, r3
 8007066:	4770      	bx	lr
